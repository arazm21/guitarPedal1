
guitarPedalEEPROMCPP3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00015868  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000018d0  08015a38  08015a38  00025a38  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08017308  08017308  00030210  2**0
                  CONTENTS
  4 .ARM          00000008  08017308  08017308  00027308  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08017310  08017310  00030210  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08017310  08017310  00027310  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  08017318  08017318  00027318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000210  20000000  08017320  00030000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001f1c0  20000210  08017530  00030210  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2001f3d0  08017530  0003f3d0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030210  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00030240  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003d0c7  00000000  00000000  00030283  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00006f2b  00000000  00000000  0006d34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002308  00000000  00000000  00074278  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001b04  00000000  00000000  00076580  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002d0a4  00000000  00000000  00078084  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002fcb3  00000000  00000000  000a5128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ffa7b  00000000  00000000  000d4ddb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000b76c  00000000  00000000  001d4858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  001dffc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000210 	.word	0x20000210
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08015a20 	.word	0x08015a20

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000214 	.word	0x20000214
 800020c:	08015a20 	.word	0x08015a20

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b970 	b.w	8000fc0 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f806 	bl	8000cf8 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__udivmoddi4>:
 8000cf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cfc:	9e08      	ldr	r6, [sp, #32]
 8000cfe:	460d      	mov	r5, r1
 8000d00:	4604      	mov	r4, r0
 8000d02:	460f      	mov	r7, r1
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d14a      	bne.n	8000d9e <__udivmoddi4+0xa6>
 8000d08:	428a      	cmp	r2, r1
 8000d0a:	4694      	mov	ip, r2
 8000d0c:	d965      	bls.n	8000dda <__udivmoddi4+0xe2>
 8000d0e:	fab2 f382 	clz	r3, r2
 8000d12:	b143      	cbz	r3, 8000d26 <__udivmoddi4+0x2e>
 8000d14:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d18:	f1c3 0220 	rsb	r2, r3, #32
 8000d1c:	409f      	lsls	r7, r3
 8000d1e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d22:	4317      	orrs	r7, r2
 8000d24:	409c      	lsls	r4, r3
 8000d26:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d2a:	fa1f f58c 	uxth.w	r5, ip
 8000d2e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d32:	0c22      	lsrs	r2, r4, #16
 8000d34:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d38:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d3c:	fb01 f005 	mul.w	r0, r1, r5
 8000d40:	4290      	cmp	r0, r2
 8000d42:	d90a      	bls.n	8000d5a <__udivmoddi4+0x62>
 8000d44:	eb1c 0202 	adds.w	r2, ip, r2
 8000d48:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d4c:	f080 811c 	bcs.w	8000f88 <__udivmoddi4+0x290>
 8000d50:	4290      	cmp	r0, r2
 8000d52:	f240 8119 	bls.w	8000f88 <__udivmoddi4+0x290>
 8000d56:	3902      	subs	r1, #2
 8000d58:	4462      	add	r2, ip
 8000d5a:	1a12      	subs	r2, r2, r0
 8000d5c:	b2a4      	uxth	r4, r4
 8000d5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d66:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d6a:	fb00 f505 	mul.w	r5, r0, r5
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x90>
 8000d72:	eb1c 0404 	adds.w	r4, ip, r4
 8000d76:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d7a:	f080 8107 	bcs.w	8000f8c <__udivmoddi4+0x294>
 8000d7e:	42a5      	cmp	r5, r4
 8000d80:	f240 8104 	bls.w	8000f8c <__udivmoddi4+0x294>
 8000d84:	4464      	add	r4, ip
 8000d86:	3802      	subs	r0, #2
 8000d88:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d8c:	1b64      	subs	r4, r4, r5
 8000d8e:	2100      	movs	r1, #0
 8000d90:	b11e      	cbz	r6, 8000d9a <__udivmoddi4+0xa2>
 8000d92:	40dc      	lsrs	r4, r3
 8000d94:	2300      	movs	r3, #0
 8000d96:	e9c6 4300 	strd	r4, r3, [r6]
 8000d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	d908      	bls.n	8000db4 <__udivmoddi4+0xbc>
 8000da2:	2e00      	cmp	r6, #0
 8000da4:	f000 80ed 	beq.w	8000f82 <__udivmoddi4+0x28a>
 8000da8:	2100      	movs	r1, #0
 8000daa:	e9c6 0500 	strd	r0, r5, [r6]
 8000dae:	4608      	mov	r0, r1
 8000db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000db4:	fab3 f183 	clz	r1, r3
 8000db8:	2900      	cmp	r1, #0
 8000dba:	d149      	bne.n	8000e50 <__udivmoddi4+0x158>
 8000dbc:	42ab      	cmp	r3, r5
 8000dbe:	d302      	bcc.n	8000dc6 <__udivmoddi4+0xce>
 8000dc0:	4282      	cmp	r2, r0
 8000dc2:	f200 80f8 	bhi.w	8000fb6 <__udivmoddi4+0x2be>
 8000dc6:	1a84      	subs	r4, r0, r2
 8000dc8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dcc:	2001      	movs	r0, #1
 8000dce:	4617      	mov	r7, r2
 8000dd0:	2e00      	cmp	r6, #0
 8000dd2:	d0e2      	beq.n	8000d9a <__udivmoddi4+0xa2>
 8000dd4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dd8:	e7df      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000dda:	b902      	cbnz	r2, 8000dde <__udivmoddi4+0xe6>
 8000ddc:	deff      	udf	#255	; 0xff
 8000dde:	fab2 f382 	clz	r3, r2
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	f040 8090 	bne.w	8000f08 <__udivmoddi4+0x210>
 8000de8:	1a8a      	subs	r2, r1, r2
 8000dea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dee:	fa1f fe8c 	uxth.w	lr, ip
 8000df2:	2101      	movs	r1, #1
 8000df4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000df8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dfc:	0c22      	lsrs	r2, r4, #16
 8000dfe:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e02:	fb0e f005 	mul.w	r0, lr, r5
 8000e06:	4290      	cmp	r0, r2
 8000e08:	d908      	bls.n	8000e1c <__udivmoddi4+0x124>
 8000e0a:	eb1c 0202 	adds.w	r2, ip, r2
 8000e0e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e12:	d202      	bcs.n	8000e1a <__udivmoddi4+0x122>
 8000e14:	4290      	cmp	r0, r2
 8000e16:	f200 80cb 	bhi.w	8000fb0 <__udivmoddi4+0x2b8>
 8000e1a:	4645      	mov	r5, r8
 8000e1c:	1a12      	subs	r2, r2, r0
 8000e1e:	b2a4      	uxth	r4, r4
 8000e20:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e24:	fb07 2210 	mls	r2, r7, r0, r2
 8000e28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e2c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e30:	45a6      	cmp	lr, r4
 8000e32:	d908      	bls.n	8000e46 <__udivmoddi4+0x14e>
 8000e34:	eb1c 0404 	adds.w	r4, ip, r4
 8000e38:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e3c:	d202      	bcs.n	8000e44 <__udivmoddi4+0x14c>
 8000e3e:	45a6      	cmp	lr, r4
 8000e40:	f200 80bb 	bhi.w	8000fba <__udivmoddi4+0x2c2>
 8000e44:	4610      	mov	r0, r2
 8000e46:	eba4 040e 	sub.w	r4, r4, lr
 8000e4a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e4e:	e79f      	b.n	8000d90 <__udivmoddi4+0x98>
 8000e50:	f1c1 0720 	rsb	r7, r1, #32
 8000e54:	408b      	lsls	r3, r1
 8000e56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e5e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e62:	fa20 f307 	lsr.w	r3, r0, r7
 8000e66:	40fd      	lsrs	r5, r7
 8000e68:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e6c:	4323      	orrs	r3, r4
 8000e6e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e72:	fa1f fe8c 	uxth.w	lr, ip
 8000e76:	fb09 5518 	mls	r5, r9, r8, r5
 8000e7a:	0c1c      	lsrs	r4, r3, #16
 8000e7c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e80:	fb08 f50e 	mul.w	r5, r8, lr
 8000e84:	42a5      	cmp	r5, r4
 8000e86:	fa02 f201 	lsl.w	r2, r2, r1
 8000e8a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e8e:	d90b      	bls.n	8000ea8 <__udivmoddi4+0x1b0>
 8000e90:	eb1c 0404 	adds.w	r4, ip, r4
 8000e94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e98:	f080 8088 	bcs.w	8000fac <__udivmoddi4+0x2b4>
 8000e9c:	42a5      	cmp	r5, r4
 8000e9e:	f240 8085 	bls.w	8000fac <__udivmoddi4+0x2b4>
 8000ea2:	f1a8 0802 	sub.w	r8, r8, #2
 8000ea6:	4464      	add	r4, ip
 8000ea8:	1b64      	subs	r4, r4, r5
 8000eaa:	b29d      	uxth	r5, r3
 8000eac:	fbb4 f3f9 	udiv	r3, r4, r9
 8000eb0:	fb09 4413 	mls	r4, r9, r3, r4
 8000eb4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000eb8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x1da>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000ec8:	d26c      	bcs.n	8000fa4 <__udivmoddi4+0x2ac>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	d96a      	bls.n	8000fa4 <__udivmoddi4+0x2ac>
 8000ece:	3b02      	subs	r3, #2
 8000ed0:	4464      	add	r4, ip
 8000ed2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ed6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eda:	eba4 040e 	sub.w	r4, r4, lr
 8000ede:	42ac      	cmp	r4, r5
 8000ee0:	46c8      	mov	r8, r9
 8000ee2:	46ae      	mov	lr, r5
 8000ee4:	d356      	bcc.n	8000f94 <__udivmoddi4+0x29c>
 8000ee6:	d053      	beq.n	8000f90 <__udivmoddi4+0x298>
 8000ee8:	b156      	cbz	r6, 8000f00 <__udivmoddi4+0x208>
 8000eea:	ebb0 0208 	subs.w	r2, r0, r8
 8000eee:	eb64 040e 	sbc.w	r4, r4, lr
 8000ef2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ef6:	40ca      	lsrs	r2, r1
 8000ef8:	40cc      	lsrs	r4, r1
 8000efa:	4317      	orrs	r7, r2
 8000efc:	e9c6 7400 	strd	r7, r4, [r6]
 8000f00:	4618      	mov	r0, r3
 8000f02:	2100      	movs	r1, #0
 8000f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f08:	f1c3 0120 	rsb	r1, r3, #32
 8000f0c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f10:	fa20 f201 	lsr.w	r2, r0, r1
 8000f14:	fa25 f101 	lsr.w	r1, r5, r1
 8000f18:	409d      	lsls	r5, r3
 8000f1a:	432a      	orrs	r2, r5
 8000f1c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f20:	fa1f fe8c 	uxth.w	lr, ip
 8000f24:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f28:	fb07 1510 	mls	r5, r7, r0, r1
 8000f2c:	0c11      	lsrs	r1, r2, #16
 8000f2e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f32:	fb00 f50e 	mul.w	r5, r0, lr
 8000f36:	428d      	cmp	r5, r1
 8000f38:	fa04 f403 	lsl.w	r4, r4, r3
 8000f3c:	d908      	bls.n	8000f50 <__udivmoddi4+0x258>
 8000f3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f42:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f46:	d22f      	bcs.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f48:	428d      	cmp	r5, r1
 8000f4a:	d92d      	bls.n	8000fa8 <__udivmoddi4+0x2b0>
 8000f4c:	3802      	subs	r0, #2
 8000f4e:	4461      	add	r1, ip
 8000f50:	1b49      	subs	r1, r1, r5
 8000f52:	b292      	uxth	r2, r2
 8000f54:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f58:	fb07 1115 	mls	r1, r7, r5, r1
 8000f5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f60:	fb05 f10e 	mul.w	r1, r5, lr
 8000f64:	4291      	cmp	r1, r2
 8000f66:	d908      	bls.n	8000f7a <__udivmoddi4+0x282>
 8000f68:	eb1c 0202 	adds.w	r2, ip, r2
 8000f6c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f70:	d216      	bcs.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f72:	4291      	cmp	r1, r2
 8000f74:	d914      	bls.n	8000fa0 <__udivmoddi4+0x2a8>
 8000f76:	3d02      	subs	r5, #2
 8000f78:	4462      	add	r2, ip
 8000f7a:	1a52      	subs	r2, r2, r1
 8000f7c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f80:	e738      	b.n	8000df4 <__udivmoddi4+0xfc>
 8000f82:	4631      	mov	r1, r6
 8000f84:	4630      	mov	r0, r6
 8000f86:	e708      	b.n	8000d9a <__udivmoddi4+0xa2>
 8000f88:	4639      	mov	r1, r7
 8000f8a:	e6e6      	b.n	8000d5a <__udivmoddi4+0x62>
 8000f8c:	4610      	mov	r0, r2
 8000f8e:	e6fb      	b.n	8000d88 <__udivmoddi4+0x90>
 8000f90:	4548      	cmp	r0, r9
 8000f92:	d2a9      	bcs.n	8000ee8 <__udivmoddi4+0x1f0>
 8000f94:	ebb9 0802 	subs.w	r8, r9, r2
 8000f98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f9c:	3b01      	subs	r3, #1
 8000f9e:	e7a3      	b.n	8000ee8 <__udivmoddi4+0x1f0>
 8000fa0:	4645      	mov	r5, r8
 8000fa2:	e7ea      	b.n	8000f7a <__udivmoddi4+0x282>
 8000fa4:	462b      	mov	r3, r5
 8000fa6:	e794      	b.n	8000ed2 <__udivmoddi4+0x1da>
 8000fa8:	4640      	mov	r0, r8
 8000faa:	e7d1      	b.n	8000f50 <__udivmoddi4+0x258>
 8000fac:	46d0      	mov	r8, sl
 8000fae:	e77b      	b.n	8000ea8 <__udivmoddi4+0x1b0>
 8000fb0:	3d02      	subs	r5, #2
 8000fb2:	4462      	add	r2, ip
 8000fb4:	e732      	b.n	8000e1c <__udivmoddi4+0x124>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e70a      	b.n	8000dd0 <__udivmoddi4+0xd8>
 8000fba:	4464      	add	r4, ip
 8000fbc:	3802      	subs	r0, #2
 8000fbe:	e742      	b.n	8000e46 <__udivmoddi4+0x14e>

08000fc0 <__aeabi_idiv0>:
 8000fc0:	4770      	bx	lr
 8000fc2:	bf00      	nop

08000fc4 <_Z19Atan_Overdrive_initP7Atan_ODf>:
 *  Created on: May 16, 2024
 *      Author: admin
 */
#include "Atan_Overdrive.h"

void Atan_Overdrive_init(Atan_OD* atan_od, float gain){
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b082      	sub	sp, #8
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
 8000fcc:	ed87 0a00 	vstr	s0, [r7]
	Atan_Overdrive_Set_Gain(atan_od, gain);
 8000fd0:	ed97 0a00 	vldr	s0, [r7]
 8000fd4:	6878      	ldr	r0, [r7, #4]
 8000fd6:	f000 f805 	bl	8000fe4 <_Z23Atan_Overdrive_Set_GainP7Atan_ODf>
}
 8000fda:	bf00      	nop
 8000fdc:	3708      	adds	r7, #8
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
	...

08000fe4 <_Z23Atan_Overdrive_Set_GainP7Atan_ODf>:

void Atan_Overdrive_Set_Gain(Atan_OD* atan_od, float gain){
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b084      	sub	sp, #16
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	ed87 0a00 	vstr	s0, [r7]
	// gain is mapped from 1 to 128
	float exp = (7.0f / 100.0f) * gain/4.0f;
 8000ff0:	edd7 7a00 	vldr	s15, [r7]
 8000ff4:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8001028 <_Z23Atan_Overdrive_Set_GainP7Atan_ODf+0x44>
 8000ff8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000ffc:	eef1 6a00 	vmov.f32	s13, #16	; 0x40800000  4.0
 8001000:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001004:	edc7 7a03 	vstr	s15, [r7, #12]
	atan_od->gain = powf(2, exp);
 8001008:	edd7 0a03 	vldr	s1, [r7, #12]
 800100c:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001010:	f010 fdec 	bl	8011bec <powf>
 8001014:	eef0 7a40 	vmov.f32	s15, s0
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	edc3 7a00 	vstr	s15, [r3]
}
 800101e:	bf00      	nop
 8001020:	3710      	adds	r7, #16
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	3d8f5c29 	.word	0x3d8f5c29
 800102c:	00000000 	.word	0x00000000

08001030 <_Z21Atan_Overdrive_updateP7Atan_ODf>:

float Atan_Overdrive_update(Atan_OD* atan_od, float x){
 8001030:	b5b0      	push	{r4, r5, r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
 8001038:	ed87 0a00 	vstr	s0, [r7]
	return atan_od->gain * (2/M_PI) * atanf(x*atan_od->gain);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff faa1 	bl	8000588 <__aeabi_f2d>
 8001046:	a316      	add	r3, pc, #88	; (adr r3, 80010a0 <_Z21Atan_Overdrive_updateP7Atan_ODf+0x70>)
 8001048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800104c:	f7ff faf4 	bl	8000638 <__aeabi_dmul>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4614      	mov	r4, r2
 8001056:	461d      	mov	r5, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	ed93 7a00 	vldr	s14, [r3]
 800105e:	edd7 7a00 	vldr	s15, [r7]
 8001062:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001066:	eeb0 0a67 	vmov.f32	s0, s15
 800106a:	f010 fe35 	bl	8011cd8 <atanf>
 800106e:	ee10 3a10 	vmov	r3, s0
 8001072:	4618      	mov	r0, r3
 8001074:	f7ff fa88 	bl	8000588 <__aeabi_f2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	4620      	mov	r0, r4
 800107e:	4629      	mov	r1, r5
 8001080:	f7ff fada 	bl	8000638 <__aeabi_dmul>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4610      	mov	r0, r2
 800108a:	4619      	mov	r1, r3
 800108c:	f7ff fdcc 	bl	8000c28 <__aeabi_d2f>
 8001090:	4603      	mov	r3, r0
 8001092:	ee07 3a90 	vmov	s15, r3
}
 8001096:	eeb0 0a67 	vmov.f32	s0, s15
 800109a:	3708      	adds	r7, #8
 800109c:	46bd      	mov	sp, r7
 800109e:	bdb0      	pop	{r4, r5, r7, pc}
 80010a0:	6dc9c883 	.word	0x6dc9c883
 80010a4:	3fe45f30 	.word	0x3fe45f30

080010a8 <_Z7CF_initP2CFffffPfi>:
 */

#include "CF.h"

/* User Provides Array Large Enough for Maximum Delay (1 ms) - 192 for Fs = 96kHz */
void CF_init(CF *filt, float fs, float delay, float g,float amount, float *y_ptr, int maxNy){
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	61f8      	str	r0, [r7, #28]
 80010b0:	ed87 0a06 	vstr	s0, [r7, #24]
 80010b4:	edc7 0a05 	vstr	s1, [r7, #20]
 80010b8:	ed87 1a04 	vstr	s2, [r7, #16]
 80010bc:	edc7 1a03 	vstr	s3, [r7, #12]
 80010c0:	60b9      	str	r1, [r7, #8]
 80010c2:	607a      	str	r2, [r7, #4]

	/* Set up Delays Lines */
		filt->y_ptr = y_ptr;
 80010c4:	69fb      	ldr	r3, [r7, #28]
 80010c6:	68ba      	ldr	r2, [r7, #8]
 80010c8:	619a      	str	r2, [r3, #24]

		/* Set Parameters */
		filt->fs = fs;
 80010ca:	69fb      	ldr	r3, [r7, #28]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	601a      	str	r2, [r3, #0]
		filt->maxNy = maxNy;
 80010d0:	69fb      	ldr	r3, [r7, #28]
 80010d2:	687a      	ldr	r2, [r7, #4]
 80010d4:	605a      	str	r2, [r3, #4]

		CF_Set_Params(filt, delay, g, amount);
 80010d6:	ed97 1a03 	vldr	s2, [r7, #12]
 80010da:	edd7 0a04 	vldr	s1, [r7, #16]
 80010de:	ed97 0a05 	vldr	s0, [r7, #20]
 80010e2:	69f8      	ldr	r0, [r7, #28]
 80010e4:	f000 f808 	bl	80010f8 <_Z13CF_Set_ParamsP2CFfff>

		/* Clear First Samples */
		filt->indy = 0;
 80010e8:	69fb      	ldr	r3, [r7, #28]
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]

}
 80010ee:	bf00      	nop
 80010f0:	3720      	adds	r7, #32
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
	...

080010f8 <_Z13CF_Set_ParamsP2CFfff>:

/* Every Input is assumed to be in the range [0 - 100] */
void CF_Set_Params(CF *filt, float delay, float g,float amount){
 80010f8:	b480      	push	{r7}
 80010fa:	b085      	sub	sp, #20
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	60f8      	str	r0, [r7, #12]
 8001100:	ed87 0a02 	vstr	s0, [r7, #8]
 8001104:	edc7 0a01 	vstr	s1, [r7, #4]
 8001108:	ed87 1a00 	vstr	s2, [r7]


	/* mapped to [0-200ms]  */

	    filt->delay = delay/500.f;
 800110c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001110:	eddf 6a1b 	vldr	s13, [pc, #108]	; 8001180 <_Z13CF_Set_ParamsP2CFfff+0x88>
 8001114:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001118:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800111c:	ee17 2a90 	vmov	r2, s15
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	609a      	str	r2, [r3, #8]
		/* mapped to [0 - 2] ms */
	    filt->N = filt->delay*filt->fs;
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	689b      	ldr	r3, [r3, #8]
 8001128:	ee07 3a90 	vmov	s15, r3
 800112c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	edd3 7a00 	vldr	s15, [r3]
 8001136:	ee67 7a27 	vmul.f32	s15, s14, s15
 800113a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800113e:	ee17 2a90 	vmov	r2, s15
 8001142:	68fb      	ldr	r3, [r7, #12]
 8001144:	60da      	str	r2, [r3, #12]
	    filt->g = g/50-1;
 8001146:	ed97 7a01 	vldr	s14, [r7, #4]
 800114a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001184 <_Z13CF_Set_ParamsP2CFfff+0x8c>
 800114e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001152:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001156:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	edc3 7a04 	vstr	s15, [r3, #16]
	    filt->amount = amount/100;
 8001160:	ed97 7a00 	vldr	s14, [r7]
 8001164:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001188 <_Z13CF_Set_ParamsP2CFfff+0x90>
 8001168:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800116c:	68fb      	ldr	r3, [r7, #12]
 800116e:	edc3 7a05 	vstr	s15, [r3, #20]

		/* Factor for LFO max delay in discrete domain */



}
 8001172:	bf00      	nop
 8001174:	3714      	adds	r7, #20
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	43fa0000 	.word	0x43fa0000
 8001184:	42480000 	.word	0x42480000
 8001188:	42c80000 	.word	0x42c80000

0800118c <_Z9CF_UpdateP2CFf>:

float CF_Update(CF *filt, float x){
 800118c:	b480      	push	{r7}
 800118e:	b085      	sub	sp, #20
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	ed87 0a00 	vstr	s0, [r7]


	/* Calculate indexes For delay for Circ Buffer */


	int charIndexY = (filt->indy + filt->maxNy - filt->N)%filt->maxNy;
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	69da      	ldr	r2, [r3, #28]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	685b      	ldr	r3, [r3, #4]
 80011a0:	441a      	add	r2, r3
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	68db      	ldr	r3, [r3, #12]
 80011a6:	1ad3      	subs	r3, r2, r3
 80011a8:	687a      	ldr	r2, [r7, #4]
 80011aa:	6852      	ldr	r2, [r2, #4]
 80011ac:	fb93 f1f2 	sdiv	r1, r3, r2
 80011b0:	fb01 f202 	mul.w	r2, r1, r2
 80011b4:	1a9b      	subs	r3, r3, r2
 80011b6:	60fb      	str	r3, [r7, #12]

	/* Difference Equation */
    float y = x + *(filt->y_ptr+charIndexY) * filt->g;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	699a      	ldr	r2, [r3, #24]
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	009b      	lsls	r3, r3, #2
 80011c0:	4413      	add	r3, r2
 80011c2:	ed93 7a00 	vldr	s14, [r3]
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	edd3 7a04 	vldr	s15, [r3, #16]
 80011cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80011d0:	ed97 7a00 	vldr	s14, [r7]
 80011d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80011d8:	edc7 7a02 	vstr	s15, [r7, #8]


	/* Save Samples in Delay Lines */
	filt->y_ptr[filt->indy] = y;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	699a      	ldr	r2, [r3, #24]
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	69db      	ldr	r3, [r3, #28]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	4413      	add	r3, r2
 80011e8:	68ba      	ldr	r2, [r7, #8]
 80011ea:	601a      	str	r2, [r3, #0]

	/* Keep Track of n for LFO Generation and ind for Circ Buffer */
	filt->indy++;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69db      	ldr	r3, [r3, #28]
 80011f0:	1c5a      	adds	r2, r3, #1
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	61da      	str	r2, [r3, #28]
	if(filt->indy >= filt->maxNy)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	69da      	ldr	r2, [r3, #28]
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	685b      	ldr	r3, [r3, #4]
 80011fe:	429a      	cmp	r2, r3
 8001200:	db02      	blt.n	8001208 <_Z9CF_UpdateP2CFf+0x7c>
			filt->indy = 0;
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	2200      	movs	r2, #0
 8001206:	61da      	str	r2, [r3, #28]

	return y;
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	ee07 3a90 	vmov	s15, r3
}
 800120e:	eeb0 0a67 	vmov.f32	s0, s15
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <_Z10delay_initP5delayffffPfS1_i>:
 */

#include "Delay.h"

/* User Provides Array Large Enough for Maximum Delay (1 ms) - 192 for Fs = 96kHz */
void delay_init(delay *filt, float fs, float delay, float g,float amount,  float *x_ptr, float *y_ptr, int maxN){
 800121c:	b580      	push	{r7, lr}
 800121e:	b088      	sub	sp, #32
 8001220:	af00      	add	r7, sp, #0
 8001222:	61f8      	str	r0, [r7, #28]
 8001224:	ed87 0a06 	vstr	s0, [r7, #24]
 8001228:	edc7 0a05 	vstr	s1, [r7, #20]
 800122c:	ed87 1a04 	vstr	s2, [r7, #16]
 8001230:	edc7 1a03 	vstr	s3, [r7, #12]
 8001234:	60b9      	str	r1, [r7, #8]
 8001236:	607a      	str	r2, [r7, #4]
 8001238:	603b      	str	r3, [r7, #0]

	/* Set up Delays Lines */
	filt->x_ptr = x_ptr;
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	68ba      	ldr	r2, [r7, #8]
 800123e:	619a      	str	r2, [r3, #24]
	filt->y_ptr = y_ptr;
 8001240:	69fb      	ldr	r3, [r7, #28]
 8001242:	687a      	ldr	r2, [r7, #4]
 8001244:	61da      	str	r2, [r3, #28]

	/* Set Parameters */
	filt->fs = fs;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	601a      	str	r2, [r3, #0]
	filt->maxN = maxN;
 800124c:	69fb      	ldr	r3, [r7, #28]
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	605a      	str	r2, [r3, #4]
	delay_Set_Params(filt, delay, g, amount);
 8001252:	ed97 1a03 	vldr	s2, [r7, #12]
 8001256:	edd7 0a04 	vldr	s1, [r7, #16]
 800125a:	ed97 0a05 	vldr	s0, [r7, #20]
 800125e:	69f8      	ldr	r0, [r7, #28]
 8001260:	f000 f808 	bl	8001274 <_Z16delay_Set_ParamsP5delayfff>

	/* Clear First Samples */
	filt->ind = 0;
 8001264:	69fb      	ldr	r3, [r7, #28]
 8001266:	2200      	movs	r2, #0
 8001268:	621a      	str	r2, [r3, #32]

}
 800126a:	bf00      	nop
 800126c:	3720      	adds	r7, #32
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
	...

08001274 <_Z16delay_Set_ParamsP5delayfff>:

/* Every Input is assumed to be in the range [0 - 100] */
void delay_Set_Params(delay *filt, float delay, float g,float amount){
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	ed87 0a02 	vstr	s0, [r7, #8]
 8001280:	edc7 0a01 	vstr	s1, [r7, #4]
 8001284:	ed87 1a00 	vstr	s2, [r7]


	/* mapped to [0-200ms]  */

    filt->delay = delay/500.f;
 8001288:	ed97 7a02 	vldr	s14, [r7, #8]
 800128c:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80012fc <_Z16delay_Set_ParamsP5delayfff+0x88>
 8001290:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001294:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001298:	ee17 2a90 	vmov	r2, s15
 800129c:	68fb      	ldr	r3, [r7, #12]
 800129e:	609a      	str	r2, [r3, #8]
	/* mapped to [0 - 2] ms */
    filt->N = filt->delay*filt->fs;
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	ee07 3a90 	vmov	s15, r3
 80012a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	edd3 7a00 	vldr	s15, [r3]
 80012b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80012b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012ba:	ee17 2a90 	vmov	r2, s15
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	60da      	str	r2, [r3, #12]
    filt->g = g/50-1;
 80012c2:	ed97 7a01 	vldr	s14, [r7, #4]
 80012c6:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001300 <_Z16delay_Set_ParamsP5delayfff+0x8c>
 80012ca:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012ce:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	edc3 7a04 	vstr	s15, [r3, #16]
    filt->amount = amount/100;
 80012dc:	ed97 7a00 	vldr	s14, [r7]
 80012e0:	eddf 6a08 	vldr	s13, [pc, #32]	; 8001304 <_Z16delay_Set_ParamsP5delayfff+0x90>
 80012e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	edc3 7a05 	vstr	s15, [r3, #20]

	/* Factor for LFO max delay in discrete domain */


}
 80012ee:	bf00      	nop
 80012f0:	3714      	adds	r7, #20
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	43fa0000 	.word	0x43fa0000
 8001300:	42480000 	.word	0x42480000
 8001304:	42c80000 	.word	0x42c80000

08001308 <_Z12delay_UpdateP5delayf>:


float delay_Update(delay *filt, float x){
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	ed87 0a00 	vstr	s0, [r7]


	/* Calculate indexes For delay for Circ Buffer */


	int charIndex = (filt->ind + filt->maxN - filt->N)%filt->maxN;
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	6a1a      	ldr	r2, [r3, #32]
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	441a      	add	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	68db      	ldr	r3, [r3, #12]
 8001322:	1ad3      	subs	r3, r2, r3
 8001324:	687a      	ldr	r2, [r7, #4]
 8001326:	6852      	ldr	r2, [r2, #4]
 8001328:	fb93 f1f2 	sdiv	r1, r3, r2
 800132c:	fb01 f202 	mul.w	r2, r1, r2
 8001330:	1a9b      	subs	r3, r3, r2
 8001332:	60fb      	str	r3, [r7, #12]
	/* Difference Equation */
    float y = filt->g * x + *(filt->x_ptr+charIndex) + *(filt->y_ptr+charIndex) * filt->g;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	ed93 7a04 	vldr	s14, [r3, #16]
 800133a:	edd7 7a00 	vldr	s15, [r7]
 800133e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	699a      	ldr	r2, [r3, #24]
 8001346:	68fb      	ldr	r3, [r7, #12]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	edd3 7a00 	vldr	s15, [r3]
 8001350:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	69da      	ldr	r2, [r3, #28]
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	009b      	lsls	r3, r3, #2
 800135c:	4413      	add	r3, r2
 800135e:	edd3 6a00 	vldr	s13, [r3]
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	edd3 7a04 	vldr	s15, [r3, #16]
 8001368:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800136c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001370:	edc7 7a02 	vstr	s15, [r7, #8]


	/* Save Samples in Delay Lines */
    filt->x_ptr[filt->ind] = x;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	699a      	ldr	r2, [r3, #24]
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6a1b      	ldr	r3, [r3, #32]
 800137c:	009b      	lsls	r3, r3, #2
 800137e:	4413      	add	r3, r2
 8001380:	683a      	ldr	r2, [r7, #0]
 8001382:	601a      	str	r2, [r3, #0]
	filt->y_ptr[filt->ind] = y;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	69da      	ldr	r2, [r3, #28]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6a1b      	ldr	r3, [r3, #32]
 800138c:	009b      	lsls	r3, r3, #2
 800138e:	4413      	add	r3, r2
 8001390:	68ba      	ldr	r2, [r7, #8]
 8001392:	601a      	str	r2, [r3, #0]

	/* Keep Track of n for LFO Generation and ind for Circ Buffer */
	filt->ind++;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	621a      	str	r2, [r3, #32]
	if(filt->ind == filt->maxN)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a1a      	ldr	r2, [r3, #32]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	d102      	bne.n	80013b0 <_Z12delay_UpdateP5delayf+0xa8>
		filt->ind = 0;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2200      	movs	r2, #0
 80013ae:	621a      	str	r2, [r3, #32]

	return y;
 80013b0:	68bb      	ldr	r3, [r7, #8]
 80013b2:	ee07 3a90 	vmov	s15, r3
}
 80013b6:	eeb0 0a67 	vmov.f32	s0, s15
 80013ba:	3714      	adds	r7, #20
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr

080013c4 <_Z11delay2_initP6delay2ffffPfS1_ii>:
 */

#include "Delay2.h"

/* User Provides Array Large Enough for Maximum Delay (1 ms) - 192 for Fs = 96kHz */
void delay2_init(delay2 *filt, float fs, float delay, float g,float amount,  float *x_ptr, float *y_ptr, int maxNx,int maxNy){
 80013c4:	b580      	push	{r7, lr}
 80013c6:	b088      	sub	sp, #32
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	61f8      	str	r0, [r7, #28]
 80013cc:	ed87 0a06 	vstr	s0, [r7, #24]
 80013d0:	edc7 0a05 	vstr	s1, [r7, #20]
 80013d4:	ed87 1a04 	vstr	s2, [r7, #16]
 80013d8:	edc7 1a03 	vstr	s3, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	603b      	str	r3, [r7, #0]

	/* Set up Delays Lines */
	filt->x_ptr = x_ptr;
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	68ba      	ldr	r2, [r7, #8]
 80013e6:	61da      	str	r2, [r3, #28]
	filt->y_ptr = y_ptr;
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	687a      	ldr	r2, [r7, #4]
 80013ec:	621a      	str	r2, [r3, #32]

	/* Set Parameters */
	filt->fs = fs;
 80013ee:	69fb      	ldr	r3, [r7, #28]
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	601a      	str	r2, [r3, #0]
	filt->maxNx = maxNx;
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	683a      	ldr	r2, [r7, #0]
 80013f8:	605a      	str	r2, [r3, #4]
	filt->maxNy = maxNy;
 80013fa:	69fb      	ldr	r3, [r7, #28]
 80013fc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80013fe:	609a      	str	r2, [r3, #8]

	delay2_Set_Params(filt, delay, g, amount);
 8001400:	ed97 1a03 	vldr	s2, [r7, #12]
 8001404:	edd7 0a04 	vldr	s1, [r7, #16]
 8001408:	ed97 0a05 	vldr	s0, [r7, #20]
 800140c:	69f8      	ldr	r0, [r7, #28]
 800140e:	f000 f80b 	bl	8001428 <_Z17delay2_Set_ParamsP6delay2fff>

	/* Clear First Samples */
	filt->indx = 0;
 8001412:	69fb      	ldr	r3, [r7, #28]
 8001414:	2200      	movs	r2, #0
 8001416:	625a      	str	r2, [r3, #36]	; 0x24
	filt->indy = 0;
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	2200      	movs	r2, #0
 800141c:	629a      	str	r2, [r3, #40]	; 0x28


}
 800141e:	bf00      	nop
 8001420:	3720      	adds	r7, #32
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
	...

08001428 <_Z17delay2_Set_ParamsP6delay2fff>:

/* Every Input is assumed to be in the range [0 - 100] */
void delay2_Set_Params(delay2 *filt, float delay, float g,float amount){
 8001428:	b480      	push	{r7}
 800142a:	b085      	sub	sp, #20
 800142c:	af00      	add	r7, sp, #0
 800142e:	60f8      	str	r0, [r7, #12]
 8001430:	ed87 0a02 	vstr	s0, [r7, #8]
 8001434:	edc7 0a01 	vstr	s1, [r7, #4]
 8001438:	ed87 1a00 	vstr	s2, [r7]


	/* mapped to [0-200ms]  */

    filt->delay = delay/500.f;
 800143c:	ed97 7a02 	vldr	s14, [r7, #8]
 8001440:	eddf 6a1b 	vldr	s13, [pc, #108]	; 80014b0 <_Z17delay2_Set_ParamsP6delay2fff+0x88>
 8001444:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001448:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800144c:	ee17 2a90 	vmov	r2, s15
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	60da      	str	r2, [r3, #12]
	/* mapped to [0 - 2] ms */
    filt->N = filt->delay*filt->fs;
 8001454:	68fb      	ldr	r3, [r7, #12]
 8001456:	68db      	ldr	r3, [r3, #12]
 8001458:	ee07 3a90 	vmov	s15, r3
 800145c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001460:	68fb      	ldr	r3, [r7, #12]
 8001462:	edd3 7a00 	vldr	s15, [r3]
 8001466:	ee67 7a27 	vmul.f32	s15, s14, s15
 800146a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800146e:	ee17 2a90 	vmov	r2, s15
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	611a      	str	r2, [r3, #16]
    filt->g = g/50-1;
 8001476:	ed97 7a01 	vldr	s14, [r7, #4]
 800147a:	eddf 6a0e 	vldr	s13, [pc, #56]	; 80014b4 <_Z17delay2_Set_ParamsP6delay2fff+0x8c>
 800147e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001482:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001486:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	edc3 7a05 	vstr	s15, [r3, #20]
    filt->amount = amount/100;
 8001490:	ed97 7a00 	vldr	s14, [r7]
 8001494:	eddf 6a08 	vldr	s13, [pc, #32]	; 80014b8 <_Z17delay2_Set_ParamsP6delay2fff+0x90>
 8001498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	edc3 7a06 	vstr	s15, [r3, #24]

	/* Factor for LFO max delay in discrete domain */


}
 80014a2:	bf00      	nop
 80014a4:	3714      	adds	r7, #20
 80014a6:	46bd      	mov	sp, r7
 80014a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ac:	4770      	bx	lr
 80014ae:	bf00      	nop
 80014b0:	43fa0000 	.word	0x43fa0000
 80014b4:	42480000 	.word	0x42480000
 80014b8:	42c80000 	.word	0x42c80000

080014bc <_Z13delay2_UpdateP6delay2f>:


float delay2_Update(delay2 *filt, float x){
 80014bc:	b480      	push	{r7}
 80014be:	b087      	sub	sp, #28
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	ed87 0a00 	vstr	s0, [r7]


	/* Calculate indexes For delay for Circ Buffer */


	int charIndexX = (filt->indx + filt->maxNx - filt->N)%filt->maxNx;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	685b      	ldr	r3, [r3, #4]
 80014d0:	441a      	add	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	691b      	ldr	r3, [r3, #16]
 80014d6:	1ad3      	subs	r3, r2, r3
 80014d8:	687a      	ldr	r2, [r7, #4]
 80014da:	6852      	ldr	r2, [r2, #4]
 80014dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80014e0:	fb01 f202 	mul.w	r2, r1, r2
 80014e4:	1a9b      	subs	r3, r3, r2
 80014e6:	617b      	str	r3, [r7, #20]
	int charIndexY = (filt->indy + filt->maxNy - filt->N)%filt->maxNy;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	441a      	add	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	691b      	ldr	r3, [r3, #16]
 80014f6:	1ad3      	subs	r3, r2, r3
 80014f8:	687a      	ldr	r2, [r7, #4]
 80014fa:	6892      	ldr	r2, [r2, #8]
 80014fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001500:	fb01 f202 	mul.w	r2, r1, r2
 8001504:	1a9b      	subs	r3, r3, r2
 8001506:	613b      	str	r3, [r7, #16]

	/* Difference Equation */
    float y = -filt->g * x + *(filt->x_ptr+charIndexX) + *(filt->y_ptr+charIndexY) * filt->g;
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	edd3 7a05 	vldr	s15, [r3, #20]
 800150e:	eeb1 7a67 	vneg.f32	s14, s15
 8001512:	edd7 7a00 	vldr	s15, [r7]
 8001516:	ee27 7a27 	vmul.f32	s14, s14, s15
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	69da      	ldr	r2, [r3, #28]
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	edd3 7a00 	vldr	s15, [r3]
 8001528:	ee37 7a27 	vadd.f32	s14, s14, s15
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	6a1a      	ldr	r2, [r3, #32]
 8001530:	693b      	ldr	r3, [r7, #16]
 8001532:	009b      	lsls	r3, r3, #2
 8001534:	4413      	add	r3, r2
 8001536:	edd3 6a00 	vldr	s13, [r3]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	edd3 7a05 	vldr	s15, [r3, #20]
 8001540:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001544:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001548:	edc7 7a03 	vstr	s15, [r7, #12]


	/* Save Samples in Delay Lines */
	filt->y_ptr[filt->indy] = y;
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	6a1a      	ldr	r2, [r3, #32]
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	68fa      	ldr	r2, [r7, #12]
 800155a:	601a      	str	r2, [r3, #0]

	/* Keep Track of n for LFO Generation and ind for Circ Buffer */
	filt->indx++;
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001560:	1c5a      	adds	r2, r3, #1
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	625a      	str	r2, [r3, #36]	; 0x24
	filt->indy++;
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800156a:	1c5a      	adds	r2, r3, #1
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	629a      	str	r2, [r3, #40]	; 0x28
	if(filt->indx >= filt->maxNx)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	685b      	ldr	r3, [r3, #4]
 8001578:	429a      	cmp	r2, r3
 800157a:	db02      	blt.n	8001582 <_Z13delay2_UpdateP6delay2f+0xc6>
		filt->indx = 0;
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2200      	movs	r2, #0
 8001580:	625a      	str	r2, [r3, #36]	; 0x24
	if(filt->indy >= filt->maxNy)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	689b      	ldr	r3, [r3, #8]
 800158a:	429a      	cmp	r2, r3
 800158c:	db02      	blt.n	8001594 <_Z13delay2_UpdateP6delay2f+0xd8>
			filt->indy = 0;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	2200      	movs	r2, #0
 8001592:	629a      	str	r2, [r3, #40]	; 0x28

	return y;
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	ee07 3a90 	vmov	s15, r3
}
 800159a:	eeb0 0a67 	vmov.f32	s0, s15
 800159e:	371c      	adds	r7, #28
 80015a0:	46bd      	mov	sp, r7
 80015a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a6:	4770      	bx	lr

080015a8 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b082      	sub	sp, #8
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	ed87 0a01 	vstr	s0, [r7, #4]
 80015b2:	ed97 0a01 	vldr	s0, [r7, #4]
 80015b6:	f010 fb71 	bl	8011c9c <sqrtf>
 80015ba:	eef0 7a40 	vmov.f32	s15, s0
 80015be:	eeb0 0a67 	vmov.f32	s0, s15
 80015c2:	3708      	adds	r7, #8
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}

080015c8 <_Z21EQ_High_Shelving_InitP2HSfff>:
 *      Author: admin
 */

#include <EQ_High_Shelving.h>

void EQ_High_Shelving_Init(HS *filt, float fs, float fc, float V0){
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b084      	sub	sp, #16
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	60f8      	str	r0, [r7, #12]
 80015d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80015d4:	edc7 0a01 	vstr	s1, [r7, #4]
 80015d8:	ed87 1a00 	vstr	s2, [r7]

	/* Check bounds for inputs */
//	EQ_High_Shelving_Check_Bounds(filt, fc, V0);

	/* Set up filter parameters */
	filt->fs = fs;
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	68ba      	ldr	r2, [r7, #8]
 80015e0:	62da      	str	r2, [r3, #44]	; 0x2c
	filt->fc = fc;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	629a      	str	r2, [r3, #40]	; 0x28
	filt->V0 = V0;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	683a      	ldr	r2, [r7, #0]
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
	EQ_High_Shelving_Set_Params(filt, filt->fc, filt->V0);
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 80015fa:	eef0 0a47 	vmov.f32	s1, s14
 80015fe:	eeb0 0a67 	vmov.f32	s0, s15
 8001602:	68f8      	ldr	r0, [r7, #12]
 8001604:	f000 f82c 	bl	8001660 <_Z27EQ_High_Shelving_Set_ParamsP2HSff>

	/* Clear first samples */
	filt->x_1=0.0f;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f04f 0200 	mov.w	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
	filt->x_2=0.0f;
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	f04f 0200 	mov.w	r2, #0
 8001616:	605a      	str	r2, [r3, #4]
	filt->y_1=0.0f;
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	f04f 0200 	mov.w	r2, #0
 800161e:	609a      	str	r2, [r3, #8]
	filt->y_2=0.0f;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	f04f 0200 	mov.w	r2, #0
 8001626:	60da      	str	r2, [r3, #12]
}
 8001628:	bf00      	nop
 800162a:	3710      	adds	r7, #16
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}

08001630 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:

  template<typename _Tp>
    inline _GLIBCXX_CONSTEXPR
    typename __gnu_cxx::__enable_if<__is_integer<_Tp>::__value, 
                                    double>::__type
    sqrt(_Tp __x)
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8001638:	6878      	ldr	r0, [r7, #4]
 800163a:	f7fe ff93 	bl	8000564 <__aeabi_i2d>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	ec43 2b10 	vmov	d0, r2, r3
 8001646:	f010 fa15 	bl	8011a74 <sqrt>
 800164a:	eeb0 7a40 	vmov.f32	s14, s0
 800164e:	eef0 7a60 	vmov.f32	s15, s1
 8001652:	eeb0 0a47 	vmov.f32	s0, s14
 8001656:	eef0 0a67 	vmov.f32	s1, s15
 800165a:	3708      	adds	r7, #8
 800165c:	46bd      	mov	sp, r7
 800165e:	bd80      	pop	{r7, pc}

08001660 <_Z27EQ_High_Shelving_Set_ParamsP2HSff>:

	filt->V0 = V0;
	filt->fc = fc;
}

void EQ_High_Shelving_Set_Params(HS *filt, float fc, float V0){
 8001660:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001664:	ed2d 8b02 	vpush	{d8}
 8001668:	b088      	sub	sp, #32
 800166a:	af00      	add	r7, sp, #0
 800166c:	60f8      	str	r0, [r7, #12]
 800166e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001672:	edc7 0a01 	vstr	s1, [r7, #4]

	//EQ_High_Shelving_Check_Bounds(filt, fc, V0);


	// fc, V0 = [0 - 100] input get mapped to [1,000-10,000] Hz and [0.1-4] respectively
	fc = 1000.0f + 90.0f*fc;
 8001676:	edd7 7a02 	vldr	s15, [r7, #8]
 800167a:	ed9f 7ad5 	vldr	s14, [pc, #852]	; 80019d0 <_Z27EQ_High_Shelving_Set_ParamsP2HSff+0x370>
 800167e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001682:	ed9f 7ad4 	vldr	s14, [pc, #848]	; 80019d4 <_Z27EQ_High_Shelving_Set_ParamsP2HSff+0x374>
 8001686:	ee77 7a87 	vadd.f32	s15, s15, s14
 800168a:	edc7 7a02 	vstr	s15, [r7, #8]
	V0 = 0.1f + 0.039f*V0;
 800168e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001692:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 80019d8 <_Z27EQ_High_Shelving_Set_ParamsP2HSff+0x378>
 8001696:	ee67 7a87 	vmul.f32	s15, s15, s14
 800169a:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 80019dc <_Z27EQ_High_Shelving_Set_ParamsP2HSff+0x37c>
 800169e:	ee77 7a87 	vadd.f32	s15, s15, s14
 80016a2:	edc7 7a01 	vstr	s15, [r7, #4]


	float K = tanf(M_PI*filt->fc/filt->fs);
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016aa:	4618      	mov	r0, r3
 80016ac:	f7fe ff6c 	bl	8000588 <__aeabi_f2d>
 80016b0:	a3c5      	add	r3, pc, #788	; (adr r3, 80019c8 <_Z27EQ_High_Shelving_Set_ParamsP2HSff+0x368>)
 80016b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016b6:	f7fe ffbf 	bl	8000638 <__aeabi_dmul>
 80016ba:	4602      	mov	r2, r0
 80016bc:	460b      	mov	r3, r1
 80016be:	4614      	mov	r4, r2
 80016c0:	461d      	mov	r5, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016c6:	4618      	mov	r0, r3
 80016c8:	f7fe ff5e 	bl	8000588 <__aeabi_f2d>
 80016cc:	4602      	mov	r2, r0
 80016ce:	460b      	mov	r3, r1
 80016d0:	4620      	mov	r0, r4
 80016d2:	4629      	mov	r1, r5
 80016d4:	f7ff f8da 	bl	800088c <__aeabi_ddiv>
 80016d8:	4602      	mov	r2, r0
 80016da:	460b      	mov	r3, r1
 80016dc:	4610      	mov	r0, r2
 80016de:	4619      	mov	r1, r3
 80016e0:	f7ff faa2 	bl	8000c28 <__aeabi_d2f>
 80016e4:	4603      	mov	r3, r0
 80016e6:	ee00 3a10 	vmov	s0, r3
 80016ea:	f010 fc15 	bl	8011f18 <tanf>
 80016ee:	ed87 0a07 	vstr	s0, [r7, #28]
	float K_2 = K*K;
 80016f2:	edd7 7a07 	vldr	s15, [r7, #28]
 80016f6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80016fa:	edc7 7a06 	vstr	s15, [r7, #24]

	if(filt->V0 >= 1){ // BOOST
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001704:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001708:	eef4 7ac7 	vcmpe.f32	s15, s14
 800170c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001710:	f2c0 8087 	blt.w	8001822 <_Z27EQ_High_Shelving_Set_ParamsP2HSff+0x1c2>

		float den = 1.0f + sqrt(2.0f)*K + K_2;
 8001714:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001718:	f7ff ff46 	bl	80015a8 <_ZSt4sqrtf>
 800171c:	eeb0 7a40 	vmov.f32	s14, s0
 8001720:	edd7 7a07 	vldr	s15, [r7, #28]
 8001724:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001728:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800172c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001730:	ed97 7a06 	vldr	s14, [r7, #24]
 8001734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001738:	edc7 7a04 	vstr	s15, [r7, #16]
		filt->b0 = (filt->V0 + sqrtf(2.0f*filt->V0)*K + K_2)/den;
 800173c:	68fb      	ldr	r3, [r7, #12]
 800173e:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001748:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800174c:	eeb0 0a67 	vmov.f32	s0, s15
 8001750:	f010 faa4 	bl	8011c9c <sqrtf>
 8001754:	eeb0 7a40 	vmov.f32	s14, s0
 8001758:	edd7 7a07 	vldr	s15, [r7, #28]
 800175c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001760:	ee38 7a27 	vadd.f32	s14, s16, s15
 8001764:	edd7 7a06 	vldr	s15, [r7, #24]
 8001768:	ee77 6a27 	vadd.f32	s13, s14, s15
 800176c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	edc3 7a04 	vstr	s15, [r3, #16]
		filt->b1 = 2.0f*(K_2 - filt->V0)/den;
 800177a:	68fb      	ldr	r3, [r7, #12]
 800177c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001780:	ed97 7a06 	vldr	s14, [r7, #24]
 8001784:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001788:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800178c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001790:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	edc3 7a05 	vstr	s15, [r3, #20]
		filt->b2 = (filt->V0 - sqrtf(2*filt->V0)*K + K_2)/den;
 800179a:	68fb      	ldr	r3, [r7, #12]
 800179c:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80017a6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80017aa:	eeb0 0a67 	vmov.f32	s0, s15
 80017ae:	f010 fa75 	bl	8011c9c <sqrtf>
 80017b2:	eeb0 7a40 	vmov.f32	s14, s0
 80017b6:	edd7 7a07 	vldr	s15, [r7, #28]
 80017ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017be:	ee38 7a67 	vsub.f32	s14, s16, s15
 80017c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80017c6:	ee77 6a27 	vadd.f32	s13, s14, s15
 80017ca:	ed97 7a04 	vldr	s14, [r7, #16]
 80017ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	edc3 7a06 	vstr	s15, [r3, #24]
		filt->a1 = 2.0f*(K_2 - 1)/den;
 80017d8:	edd7 7a06 	vldr	s15, [r7, #24]
 80017dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017e0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80017e4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80017e8:	ed97 7a04 	vldr	s14, [r7, #16]
 80017ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	edc3 7a07 	vstr	s15, [r3, #28]
		filt->a2 = (1.0f - sqrtf(2)*K + K_2)/den;
 80017f6:	edd7 7a07 	vldr	s15, [r7, #28]
 80017fa:	ed9f 7a79 	vldr	s14, [pc, #484]	; 80019e0 <_Z27EQ_High_Shelving_Set_ParamsP2HSff+0x380>
 80017fe:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001802:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001806:	ee37 7a67 	vsub.f32	s14, s14, s15
 800180a:	edd7 7a06 	vldr	s15, [r7, #24]
 800180e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001812:	ed97 7a04 	vldr	s14, [r7, #16]
 8001816:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	edc3 7a08 	vstr	s15, [r3, #32]
		filt->b2 = filt->V0*(1.0f - sqrt(2.0f)*K + K_2)/den;
		filt->a1 = 2.0f*(filt->V0*K_2 - 1.0f)/den;
		filt->a2 = (1.0f - sqrt(2.0f*filt->V0)*K + filt->V0*K_2)/den;

	}
}
 8001820:	e0c8      	b.n	80019b4 <_Z27EQ_High_Shelving_Set_ParamsP2HSff+0x354>
		float den = 1.0f + sqrtf(2.0f*filt->V0)*K + K_2;
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001828:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800182c:	eeb0 0a67 	vmov.f32	s0, s15
 8001830:	f010 fa34 	bl	8011c9c <sqrtf>
 8001834:	eeb0 7a40 	vmov.f32	s14, s0
 8001838:	edd7 7a07 	vldr	s15, [r7, #28]
 800183c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001840:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001844:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001848:	ed97 7a06 	vldr	s14, [r7, #24]
 800184c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001850:	edc7 7a05 	vstr	s15, [r7, #20]
		filt->b0 = filt->V0*(1.0f + sqrt(2)*K + K_2)/den;
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001858:	4618      	mov	r0, r3
 800185a:	f7fe fe95 	bl	8000588 <__aeabi_f2d>
 800185e:	4604      	mov	r4, r0
 8001860:	460d      	mov	r5, r1
 8001862:	2002      	movs	r0, #2
 8001864:	f7ff fee4 	bl	8001630 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001868:	ec59 8b10 	vmov	r8, r9, d0
 800186c:	69f8      	ldr	r0, [r7, #28]
 800186e:	f7fe fe8b 	bl	8000588 <__aeabi_f2d>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4640      	mov	r0, r8
 8001878:	4649      	mov	r1, r9
 800187a:	f7fe fedd 	bl	8000638 <__aeabi_dmul>
 800187e:	4602      	mov	r2, r0
 8001880:	460b      	mov	r3, r1
 8001882:	4610      	mov	r0, r2
 8001884:	4619      	mov	r1, r3
 8001886:	f04f 0200 	mov.w	r2, #0
 800188a:	4b56      	ldr	r3, [pc, #344]	; (80019e4 <_Z27EQ_High_Shelving_Set_ParamsP2HSff+0x384>)
 800188c:	f7fe fd1e 	bl	80002cc <__adddf3>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4690      	mov	r8, r2
 8001896:	4699      	mov	r9, r3
 8001898:	69b8      	ldr	r0, [r7, #24]
 800189a:	f7fe fe75 	bl	8000588 <__aeabi_f2d>
 800189e:	4602      	mov	r2, r0
 80018a0:	460b      	mov	r3, r1
 80018a2:	4640      	mov	r0, r8
 80018a4:	4649      	mov	r1, r9
 80018a6:	f7fe fd11 	bl	80002cc <__adddf3>
 80018aa:	4602      	mov	r2, r0
 80018ac:	460b      	mov	r3, r1
 80018ae:	4620      	mov	r0, r4
 80018b0:	4629      	mov	r1, r5
 80018b2:	f7fe fec1 	bl	8000638 <__aeabi_dmul>
 80018b6:	4602      	mov	r2, r0
 80018b8:	460b      	mov	r3, r1
 80018ba:	4614      	mov	r4, r2
 80018bc:	461d      	mov	r5, r3
 80018be:	6978      	ldr	r0, [r7, #20]
 80018c0:	f7fe fe62 	bl	8000588 <__aeabi_f2d>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4620      	mov	r0, r4
 80018ca:	4629      	mov	r1, r5
 80018cc:	f7fe ffde 	bl	800088c <__aeabi_ddiv>
 80018d0:	4602      	mov	r2, r0
 80018d2:	460b      	mov	r3, r1
 80018d4:	4610      	mov	r0, r2
 80018d6:	4619      	mov	r1, r3
 80018d8:	f7ff f9a6 	bl	8000c28 <__aeabi_d2f>
 80018dc:	4602      	mov	r2, r0
 80018de:	68fb      	ldr	r3, [r7, #12]
 80018e0:	611a      	str	r2, [r3, #16]
		filt->b1 = 2.0f*filt->V0*(K_2 - 1)/den;
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 80018e8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018ec:	edd7 7a06 	vldr	s15, [r7, #24]
 80018f0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80018f4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80018f8:	ee67 6a27 	vmul.f32	s13, s14, s15
 80018fc:	ed97 7a05 	vldr	s14, [r7, #20]
 8001900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	edc3 7a05 	vstr	s15, [r3, #20]
		filt->b2 = filt->V0*(1.0f - sqrt(2.0f)*K + K_2)/den;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
 8001910:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001914:	f7ff fe48 	bl	80015a8 <_ZSt4sqrtf>
 8001918:	eeb0 7a40 	vmov.f32	s14, s0
 800191c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001920:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001924:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001928:	ee37 7a67 	vsub.f32	s14, s14, s15
 800192c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001930:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001934:	ee68 6a27 	vmul.f32	s13, s16, s15
 8001938:	ed97 7a05 	vldr	s14, [r7, #20]
 800193c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	edc3 7a06 	vstr	s15, [r3, #24]
		filt->a1 = 2.0f*(filt->V0*K_2 - 1.0f)/den;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 800194c:	edd7 7a06 	vldr	s15, [r7, #24]
 8001950:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001954:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001958:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800195c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001960:	ed97 7a05 	vldr	s14, [r7, #20]
 8001964:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	edc3 7a07 	vstr	s15, [r3, #28]
		filt->a2 = (1.0f - sqrt(2.0f*filt->V0)*K + filt->V0*K_2)/den;
 800196e:	68fb      	ldr	r3, [r7, #12]
 8001970:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001974:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001978:	eeb0 0a67 	vmov.f32	s0, s15
 800197c:	f7ff fe14 	bl	80015a8 <_ZSt4sqrtf>
 8001980:	eeb0 7a40 	vmov.f32	s14, s0
 8001984:	edd7 7a07 	vldr	s15, [r7, #28]
 8001988:	ee67 7a27 	vmul.f32	s15, s14, s15
 800198c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001990:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800199a:	edd7 7a06 	vldr	s15, [r7, #24]
 800199e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019a2:	ee77 6a27 	vadd.f32	s13, s14, s15
 80019a6:	ed97 7a05 	vldr	s14, [r7, #20]
 80019aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	edc3 7a08 	vstr	s15, [r3, #32]
}
 80019b4:	bf00      	nop
 80019b6:	3720      	adds	r7, #32
 80019b8:	46bd      	mov	sp, r7
 80019ba:	ecbd 8b02 	vpop	{d8}
 80019be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80019c2:	bf00      	nop
 80019c4:	f3af 8000 	nop.w
 80019c8:	54442d18 	.word	0x54442d18
 80019cc:	400921fb 	.word	0x400921fb
 80019d0:	42b40000 	.word	0x42b40000
 80019d4:	447a0000 	.word	0x447a0000
 80019d8:	3d1fbe77 	.word	0x3d1fbe77
 80019dc:	3dcccccd 	.word	0x3dcccccd
 80019e0:	3fb504f3 	.word	0x3fb504f3
 80019e4:	3ff00000 	.word	0x3ff00000

080019e8 <_Z23EQ_High_Shelving_UpdateP2HSf>:

float EQ_High_Shelving_Update(HS *filt, float x){
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
 80019f0:	ed87 0a00 	vstr	s0, [r7]

	/* Calculate output */
	float y = filt->b0*x + filt->b1*filt->x_1 + filt->b2*filt->x_2 - filt->a1*filt->y_1 - filt->a2*filt->y_2;
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	ed93 7a04 	vldr	s14, [r3, #16]
 80019fa:	edd7 7a00 	vldr	s15, [r7]
 80019fe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	edd3 6a05 	vldr	s13, [r3, #20]
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	edd3 7a00 	vldr	s15, [r3]
 8001a0e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a12:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	edd3 6a06 	vldr	s13, [r3, #24]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a22:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	edd3 6a07 	vldr	s13, [r3, #28]
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	edd3 7a02 	vldr	s15, [r3, #8]
 8001a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a3a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	edd3 6a08 	vldr	s13, [r3, #32]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	edd3 7a03 	vldr	s15, [r3, #12]
 8001a4a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a52:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Update stored samples */
	filt->x_2 = filt->x_1;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681a      	ldr	r2, [r3, #0]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	605a      	str	r2, [r3, #4]
	filt->x_1 = x;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	683a      	ldr	r2, [r7, #0]
 8001a62:	601a      	str	r2, [r3, #0]
	filt->y_2 = filt->y_1;
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	689a      	ldr	r2, [r3, #8]
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	60da      	str	r2, [r3, #12]
	filt->y_1 = y;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68fa      	ldr	r2, [r7, #12]
 8001a70:	609a      	str	r2, [r3, #8]

	/* Return output */
	return y;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	ee07 3a90 	vmov	s15, r3
}
 8001a78:	eeb0 0a67 	vmov.f32	s0, s15
 8001a7c:	3714      	adds	r7, #20
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a84:	4770      	bx	lr

08001a86 <_Z20EQ_Low_Shelving_InitP2LSfff>:
 */

#include "EQ_Low_Shelving.h"


void EQ_Low_Shelving_Init(LS *filt, float fs, float fc, float V0){
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b084      	sub	sp, #16
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	60f8      	str	r0, [r7, #12]
 8001a8e:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a92:	edc7 0a01 	vstr	s1, [r7, #4]
 8001a96:	ed87 1a00 	vstr	s2, [r7]

	/* Check bounds for inputs */
//	EQ_Low_Shelving_Check_Bounds(filt, fc, V0);

	/* Set up filter parameters */
	filt->fs = fs;
 8001a9a:	68fb      	ldr	r3, [r7, #12]
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	62da      	str	r2, [r3, #44]	; 0x2c
	filt->fc = fc;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	687a      	ldr	r2, [r7, #4]
 8001aa4:	629a      	str	r2, [r3, #40]	; 0x28
	filt->V0 = V0;
 8001aa6:	68fb      	ldr	r3, [r7, #12]
 8001aa8:	683a      	ldr	r2, [r7, #0]
 8001aaa:	625a      	str	r2, [r3, #36]	; 0x24
	EQ_Low_Shelving_Set_Params(filt, filt->fc, filt->V0);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	edd3 7a0a 	vldr	s15, [r3, #40]	; 0x28
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001ab8:	eef0 0a47 	vmov.f32	s1, s14
 8001abc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ac0:	68f8      	ldr	r0, [r7, #12]
 8001ac2:	f000 f815 	bl	8001af0 <_Z26EQ_Low_Shelving_Set_ParamsP2LSff>

	/* Clear first samples */
	filt->x_1=0.0f;
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	f04f 0200 	mov.w	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
	filt->x_2=0.0f;
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f04f 0200 	mov.w	r2, #0
 8001ad4:	605a      	str	r2, [r3, #4]
	filt->y_1=0.0f;
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	609a      	str	r2, [r3, #8]
	filt->y_2=0.0f;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	f04f 0200 	mov.w	r2, #0
 8001ae4:	60da      	str	r2, [r3, #12]
}
 8001ae6:	bf00      	nop
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <_Z26EQ_Low_Shelving_Set_ParamsP2LSff>:
	filt->fc = fc;

}


void EQ_Low_Shelving_Set_Params(LS *filt, float fc, float V0){
 8001af0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001af4:	ed2d 8b02 	vpush	{d8}
 8001af8:	b088      	sub	sp, #32
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	ed87 0a02 	vstr	s0, [r7, #8]
 8001b02:	edc7 0a01 	vstr	s1, [r7, #4]

	//EQ_Low_Shelving_Check_Bounds(filt, fc, V0);

	// fc, V0 = [0 - 100] input get mapped to [80-300] Hz and [0.1-4] respectively
	fc = 80.0f + 2.2f*fc;
 8001b06:	edd7 7a02 	vldr	s15, [r7, #8]
 8001b0a:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8001cd8 <_Z26EQ_Low_Shelving_Set_ParamsP2LSff+0x1e8>
 8001b0e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b12:	ed9f 7a72 	vldr	s14, [pc, #456]	; 8001cdc <_Z26EQ_Low_Shelving_Set_ParamsP2LSff+0x1ec>
 8001b16:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b1a:	edc7 7a02 	vstr	s15, [r7, #8]
	V0 = 0.1f + 0.039f*V0;
 8001b1e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b22:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8001ce0 <_Z26EQ_Low_Shelving_Set_ParamsP2LSff+0x1f0>
 8001b26:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b2a:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8001ce4 <_Z26EQ_Low_Shelving_Set_ParamsP2LSff+0x1f4>
 8001b2e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b32:	edc7 7a01 	vstr	s15, [r7, #4]


	float K = tanf(M_PI*filt->fc/filt->fs);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7fe fd24 	bl	8000588 <__aeabi_f2d>
 8001b40:	a363      	add	r3, pc, #396	; (adr r3, 8001cd0 <_Z26EQ_Low_Shelving_Set_ParamsP2LSff+0x1e0>)
 8001b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b46:	f7fe fd77 	bl	8000638 <__aeabi_dmul>
 8001b4a:	4602      	mov	r2, r0
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	4614      	mov	r4, r2
 8001b50:	461d      	mov	r5, r3
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7fe fd16 	bl	8000588 <__aeabi_f2d>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4620      	mov	r0, r4
 8001b62:	4629      	mov	r1, r5
 8001b64:	f7fe fe92 	bl	800088c <__aeabi_ddiv>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7ff f85a 	bl	8000c28 <__aeabi_d2f>
 8001b74:	4603      	mov	r3, r0
 8001b76:	ee00 3a10 	vmov	s0, r3
 8001b7a:	f010 f9cd 	bl	8011f18 <tanf>
 8001b7e:	ed87 0a07 	vstr	s0, [r7, #28]
	float K_2 = K*K;
 8001b82:	edd7 7a07 	vldr	s15, [r7, #28]
 8001b86:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001b8a:	edc7 7a06 	vstr	s15, [r7, #24]

	if(filt->V0 >= 1){ // BOOST
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001b94:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001b98:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	f2c0 80a4 	blt.w	8001cec <_Z26EQ_Low_Shelving_Set_ParamsP2LSff+0x1fc>

		float den = 1.0f + sqrt(2.0f)*K + K_2;
 8001ba4:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001ba8:	f7ff fcfe 	bl	80015a8 <_ZSt4sqrtf>
 8001bac:	eeb0 7a40 	vmov.f32	s14, s0
 8001bb0:	edd7 7a07 	vldr	s15, [r7, #28]
 8001bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bb8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001bc0:	ed97 7a06 	vldr	s14, [r7, #24]
 8001bc4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bc8:	edc7 7a04 	vstr	s15, [r7, #16]
	    filt->b0 = (1 + sqrtf(2*filt->V0)*K + filt->V0*K_2)/den;
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001bd2:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bd6:	eeb0 0a67 	vmov.f32	s0, s15
 8001bda:	f010 f85f 	bl	8011c9c <sqrtf>
 8001bde:	eeb0 7a40 	vmov.f32	s14, s0
 8001be2:	edd7 7a07 	vldr	s15, [r7, #28]
 8001be6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001bee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8001bf2:	68fb      	ldr	r3, [r7, #12]
 8001bf4:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001bf8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001bfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c00:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001c04:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c0c:	68fb      	ldr	r3, [r7, #12]
 8001c0e:	edc3 7a04 	vstr	s15, [r3, #16]
	    filt->b1 = 2.0f*(filt->V0*K_2 - 1)/den;
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001c18:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c1c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c20:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c28:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001c2c:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c30:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	edc3 7a05 	vstr	s15, [r3, #20]
	    filt->b2 = (1 - sqrtf(2*filt->V0)*K + filt->V0*K_2)/den;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001c40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c44:	eeb0 0a67 	vmov.f32	s0, s15
 8001c48:	f010 f828 	bl	8011c9c <sqrtf>
 8001c4c:	eeb0 7a40 	vmov.f32	s14, s0
 8001c50:	edd7 7a07 	vldr	s15, [r7, #28]
 8001c54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001c66:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c6e:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001c72:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	edc3 7a06 	vstr	s15, [r3, #24]
	    filt->a1 = 2.0f*(K_2 - 1)/den;
 8001c80:	edd7 7a06 	vldr	s15, [r7, #24]
 8001c84:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001c88:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001c8c:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001c90:	ed97 7a04 	vldr	s14, [r7, #16]
 8001c94:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	edc3 7a07 	vstr	s15, [r3, #28]
	    filt->a2 = (1 - sqrtf(2)*K + K_2)/den;
 8001c9e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ca2:	ed9f 7a11 	vldr	s14, [pc, #68]	; 8001ce8 <_Z26EQ_Low_Shelving_Set_ParamsP2LSff+0x1f8>
 8001ca6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001caa:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001cae:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001cb2:	edd7 7a06 	vldr	s15, [r7, #24]
 8001cb6:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001cba:	ed97 7a04 	vldr	s14, [r7, #16]
 8001cbe:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001cc2:	68fb      	ldr	r3, [r7, #12]
 8001cc4:	edc3 7a08 	vstr	s15, [r3, #32]
		filt->b2 = filt->V0*(1 - sqrt(2)*K + K_2)/den;
		filt->a1 = 2*(K_2 - filt->V0)/den;
		filt->a2 = (filt->V0 - sqrt(2*filt->V0)*K + K_2)/den;

	}
}
 8001cc8:	e0f9      	b.n	8001ebe <_Z26EQ_Low_Shelving_Set_ParamsP2LSff+0x3ce>
 8001cca:	bf00      	nop
 8001ccc:	f3af 8000 	nop.w
 8001cd0:	54442d18 	.word	0x54442d18
 8001cd4:	400921fb 	.word	0x400921fb
 8001cd8:	400ccccd 	.word	0x400ccccd
 8001cdc:	42a00000 	.word	0x42a00000
 8001ce0:	3d1fbe77 	.word	0x3d1fbe77
 8001ce4:	3dcccccd 	.word	0x3dcccccd
 8001ce8:	3fb504f3 	.word	0x3fb504f3
		float den = filt->V0 + sqrtf(2*filt->V0)*K + K_2;
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001cf8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001cfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001d00:	f00f ffcc 	bl	8011c9c <sqrtf>
 8001d04:	eeb0 7a40 	vmov.f32	s14, s0
 8001d08:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001d10:	ee78 7a27 	vadd.f32	s15, s16, s15
 8001d14:	ed97 7a06 	vldr	s14, [r7, #24]
 8001d18:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d1c:	edc7 7a05 	vstr	s15, [r7, #20]
		filt->b0 = filt->V0*(1 + sqrt(2)*K + K_2)/den;
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d24:	4618      	mov	r0, r3
 8001d26:	f7fe fc2f 	bl	8000588 <__aeabi_f2d>
 8001d2a:	4604      	mov	r4, r0
 8001d2c:	460d      	mov	r5, r1
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f7ff fc7e 	bl	8001630 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001d34:	ec59 8b10 	vmov	r8, r9, d0
 8001d38:	69f8      	ldr	r0, [r7, #28]
 8001d3a:	f7fe fc25 	bl	8000588 <__aeabi_f2d>
 8001d3e:	4602      	mov	r2, r0
 8001d40:	460b      	mov	r3, r1
 8001d42:	4640      	mov	r0, r8
 8001d44:	4649      	mov	r1, r9
 8001d46:	f7fe fc77 	bl	8000638 <__aeabi_dmul>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	4610      	mov	r0, r2
 8001d50:	4619      	mov	r1, r3
 8001d52:	f04f 0200 	mov.w	r2, #0
 8001d56:	4b5d      	ldr	r3, [pc, #372]	; (8001ecc <_Z26EQ_Low_Shelving_Set_ParamsP2LSff+0x3dc>)
 8001d58:	f7fe fab8 	bl	80002cc <__adddf3>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	460b      	mov	r3, r1
 8001d60:	4690      	mov	r8, r2
 8001d62:	4699      	mov	r9, r3
 8001d64:	69b8      	ldr	r0, [r7, #24]
 8001d66:	f7fe fc0f 	bl	8000588 <__aeabi_f2d>
 8001d6a:	4602      	mov	r2, r0
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	4640      	mov	r0, r8
 8001d70:	4649      	mov	r1, r9
 8001d72:	f7fe faab 	bl	80002cc <__adddf3>
 8001d76:	4602      	mov	r2, r0
 8001d78:	460b      	mov	r3, r1
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	4629      	mov	r1, r5
 8001d7e:	f7fe fc5b 	bl	8000638 <__aeabi_dmul>
 8001d82:	4602      	mov	r2, r0
 8001d84:	460b      	mov	r3, r1
 8001d86:	4614      	mov	r4, r2
 8001d88:	461d      	mov	r5, r3
 8001d8a:	6978      	ldr	r0, [r7, #20]
 8001d8c:	f7fe fbfc 	bl	8000588 <__aeabi_f2d>
 8001d90:	4602      	mov	r2, r0
 8001d92:	460b      	mov	r3, r1
 8001d94:	4620      	mov	r0, r4
 8001d96:	4629      	mov	r1, r5
 8001d98:	f7fe fd78 	bl	800088c <__aeabi_ddiv>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	460b      	mov	r3, r1
 8001da0:	4610      	mov	r0, r2
 8001da2:	4619      	mov	r1, r3
 8001da4:	f7fe ff40 	bl	8000c28 <__aeabi_d2f>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	611a      	str	r2, [r3, #16]
		filt->b1 = 2*filt->V0*(K_2 - 1)/den;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001db4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001db8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001dbc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8001dc0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8001dc4:	ee67 6a27 	vmul.f32	s13, s14, s15
 8001dc8:	ed97 7a05 	vldr	s14, [r7, #20]
 8001dcc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	edc3 7a05 	vstr	s15, [r3, #20]
		filt->b2 = filt->V0*(1 - sqrt(2)*K + K_2)/den;
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dda:	4618      	mov	r0, r3
 8001ddc:	f7fe fbd4 	bl	8000588 <__aeabi_f2d>
 8001de0:	4604      	mov	r4, r0
 8001de2:	460d      	mov	r5, r1
 8001de4:	2002      	movs	r0, #2
 8001de6:	f7ff fc23 	bl	8001630 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001dea:	ec59 8b10 	vmov	r8, r9, d0
 8001dee:	69f8      	ldr	r0, [r7, #28]
 8001df0:	f7fe fbca 	bl	8000588 <__aeabi_f2d>
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4640      	mov	r0, r8
 8001dfa:	4649      	mov	r1, r9
 8001dfc:	f7fe fc1c 	bl	8000638 <__aeabi_dmul>
 8001e00:	4602      	mov	r2, r0
 8001e02:	460b      	mov	r3, r1
 8001e04:	f04f 0000 	mov.w	r0, #0
 8001e08:	4930      	ldr	r1, [pc, #192]	; (8001ecc <_Z26EQ_Low_Shelving_Set_ParamsP2LSff+0x3dc>)
 8001e0a:	f7fe fa5d 	bl	80002c8 <__aeabi_dsub>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4690      	mov	r8, r2
 8001e14:	4699      	mov	r9, r3
 8001e16:	69b8      	ldr	r0, [r7, #24]
 8001e18:	f7fe fbb6 	bl	8000588 <__aeabi_f2d>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	4640      	mov	r0, r8
 8001e22:	4649      	mov	r1, r9
 8001e24:	f7fe fa52 	bl	80002cc <__adddf3>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	460b      	mov	r3, r1
 8001e2c:	4620      	mov	r0, r4
 8001e2e:	4629      	mov	r1, r5
 8001e30:	f7fe fc02 	bl	8000638 <__aeabi_dmul>
 8001e34:	4602      	mov	r2, r0
 8001e36:	460b      	mov	r3, r1
 8001e38:	4614      	mov	r4, r2
 8001e3a:	461d      	mov	r5, r3
 8001e3c:	6978      	ldr	r0, [r7, #20]
 8001e3e:	f7fe fba3 	bl	8000588 <__aeabi_f2d>
 8001e42:	4602      	mov	r2, r0
 8001e44:	460b      	mov	r3, r1
 8001e46:	4620      	mov	r0, r4
 8001e48:	4629      	mov	r1, r5
 8001e4a:	f7fe fd1f 	bl	800088c <__aeabi_ddiv>
 8001e4e:	4602      	mov	r2, r0
 8001e50:	460b      	mov	r3, r1
 8001e52:	4610      	mov	r0, r2
 8001e54:	4619      	mov	r1, r3
 8001e56:	f7fe fee7 	bl	8000c28 <__aeabi_d2f>
 8001e5a:	4602      	mov	r2, r0
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	619a      	str	r2, [r3, #24]
		filt->a1 = 2*(K_2 - filt->V0)/den;
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e66:	ed97 7a06 	vldr	s14, [r7, #24]
 8001e6a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e6e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001e72:	ed97 7a05 	vldr	s14, [r7, #20]
 8001e76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	edc3 7a07 	vstr	s15, [r3, #28]
		filt->a2 = (filt->V0 - sqrt(2*filt->V0)*K + K_2)/den;
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	ed93 8a09 	vldr	s16, [r3, #36]	; 0x24
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 8001e8c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001e90:	eeb0 0a67 	vmov.f32	s0, s15
 8001e94:	f7ff fb88 	bl	80015a8 <_ZSt4sqrtf>
 8001e98:	eeb0 7a40 	vmov.f32	s14, s0
 8001e9c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001ea0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ea4:	ee38 7a67 	vsub.f32	s14, s16, s15
 8001ea8:	edd7 7a06 	vldr	s15, [r7, #24]
 8001eac:	ee77 6a27 	vadd.f32	s13, s14, s15
 8001eb0:	ed97 7a05 	vldr	s14, [r7, #20]
 8001eb4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	edc3 7a08 	vstr	s15, [r3, #32]
}
 8001ebe:	bf00      	nop
 8001ec0:	3720      	adds	r7, #32
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	ecbd 8b02 	vpop	{d8}
 8001ec8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001ecc:	3ff00000 	.word	0x3ff00000

08001ed0 <_Z22EQ_Low_Shelving_UpdateP2LSf>:

float EQ_Low_Shelving_Update(LS *filt, float x){
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	ed87 0a00 	vstr	s0, [r7]
	/* Calculate output */
	float y = filt->b0*x + filt->b1*filt->x_1 + filt->b2*filt->x_2 - filt->a1*filt->y_1 - filt->a2*filt->y_2;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	ed93 7a04 	vldr	s14, [r3, #16]
 8001ee2:	edd7 7a00 	vldr	s15, [r7]
 8001ee6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	edd3 6a05 	vldr	s13, [r3, #20]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	edd3 7a00 	vldr	s15, [r3]
 8001ef6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001efa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	edd3 6a06 	vldr	s13, [r3, #24]
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f0a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	edd3 6a07 	vldr	s13, [r3, #28]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f22:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	edd3 6a08 	vldr	s13, [r3, #32]
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f3a:	edc7 7a03 	vstr	s15, [r7, #12]

	/* Update previous samples */
	filt->x_2 = filt->x_1;
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	605a      	str	r2, [r3, #4]
	filt->x_1 = x;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	683a      	ldr	r2, [r7, #0]
 8001f4a:	601a      	str	r2, [r3, #0]
	filt->y_2 = filt->y_1;
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	60da      	str	r2, [r3, #12]
	filt->y_1 = y;
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	68fa      	ldr	r2, [r7, #12]
 8001f58:	609a      	str	r2, [r3, #8]

	/* Return output */
	return y;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	ee07 3a90 	vmov	s15, r3
}
 8001f60:	eeb0 0a67 	vmov.f32	s0, s15
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <_Z27Exp_Distortion_Init_DefaultP8Exp_Distf>:
 *  Created on: Jun 11, 2024
 *      Author: admin
 */
#include "Exp_Distortion.h"

void Exp_Distortion_Init_Default(Exp_Dist *ed, float g){
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
 8001f76:	ed87 0a00 	vstr	s0, [r7]
	Exp_Distortion_Init(ed, g, 1);
 8001f7a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001f7e:	ed97 0a00 	vldr	s0, [r7]
 8001f82:	6878      	ldr	r0, [r7, #4]
 8001f84:	f000 f804 	bl	8001f90 <_Z19Exp_Distortion_InitP8Exp_Distff>
}
 8001f88:	bf00      	nop
 8001f8a:	3708      	adds	r7, #8
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <_Z19Exp_Distortion_InitP8Exp_Distff>:

void Exp_Distortion_Init(Exp_Dist *ed, float g, float s){
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	ed87 0a02 	vstr	s0, [r7, #8]
 8001f9c:	edc7 0a01 	vstr	s1, [r7, #4]
	Exp_Distortion_Set_Gain(ed, g);
 8001fa0:	ed97 0a02 	vldr	s0, [r7, #8]
 8001fa4:	68f8      	ldr	r0, [r7, #12]
 8001fa6:	f000 f809 	bl	8001fbc <_Z23Exp_Distortion_Set_GainP8Exp_Distf>
	Exp_Distortion_Set_Symmetry(ed, s);
 8001faa:	ed97 0a01 	vldr	s0, [r7, #4]
 8001fae:	68f8      	ldr	r0, [r7, #12]
 8001fb0:	f000 f824 	bl	8001ffc <_Z27Exp_Distortion_Set_SymmetryP8Exp_Distf>
}
 8001fb4:	bf00      	nop
 8001fb6:	3710      	adds	r7, #16
 8001fb8:	46bd      	mov	sp, r7
 8001fba:	bd80      	pop	{r7, pc}

08001fbc <_Z23Exp_Distortion_Set_GainP8Exp_Distf>:

void Exp_Distortion_Set_Gain(Exp_Dist *ed, float g){
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	ed87 0a00 	vstr	s0, [r7]
	// gain g is mapped from 2^0 to 2^12
	float exponent = (12.0f / 100.0f ) * g;
 8001fc8:	edd7 7a00 	vldr	s15, [r7]
 8001fcc:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 8001ff8 <_Z23Exp_Distortion_Set_GainP8Exp_Distf+0x3c>
 8001fd0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fd4:	edc7 7a03 	vstr	s15, [r7, #12]
	ed->g = powf(2, exponent);
 8001fd8:	edd7 0a03 	vldr	s1, [r7, #12]
 8001fdc:	eeb0 0a00 	vmov.f32	s0, #0	; 0x40000000  2.0
 8001fe0:	f00f fe04 	bl	8011bec <powf>
 8001fe4:	eef0 7a40 	vmov.f32	s15, s0
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	edc3 7a00 	vstr	s15, [r3]

	//if(g<1.0f)
	//	g = 1.0f;
	//ed->g = g;
}
 8001fee:	bf00      	nop
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
 8001ff6:	bf00      	nop
 8001ff8:	3df5c28f 	.word	0x3df5c28f

08001ffc <_Z27Exp_Distortion_Set_SymmetryP8Exp_Distf>:

void Exp_Distortion_Set_Symmetry(Exp_Dist *ed, float s){
 8001ffc:	b480      	push	{r7}
 8001ffe:	b083      	sub	sp, #12
 8002000:	af00      	add	r7, sp, #0
 8002002:	6078      	str	r0, [r7, #4]
 8002004:	ed87 0a00 	vstr	s0, [r7]
	// symmetry is 1 as default for now
	ed->s = 1;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800200e:	605a      	str	r2, [r3, #4]

	//if(s>3*ed->g)
	//	s = 3*ed->g;
	//ed->s = s;
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <_Z21Exp_Distortion_UpdateP8Exp_Distf>:


float Exp_Distortion_Update(Exp_Dist *ed, float x){
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
 8002024:	ed87 0a00 	vstr	s0, [r7]
	float y = 0.0f;
 8002028:	f04f 0300 	mov.w	r3, #0
 800202c:	60fb      	str	r3, [r7, #12]

	if( x > 0.0f )
 800202e:	edd7 7a00 	vldr	s15, [r7]
 8002032:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800203a:	dd1a      	ble.n	8002072 <_Z21Exp_Distortion_UpdateP8Exp_Distf+0x56>
		y =  1 - expf(-ed->s * ed->g *x);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002042:	eeb1 7a67 	vneg.f32	s14, s15
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	edd3 7a00 	vldr	s15, [r3]
 800204c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002050:	edd7 7a00 	vldr	s15, [r7]
 8002054:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002058:	eeb0 0a67 	vmov.f32	s0, s15
 800205c:	f00f fd90 	bl	8011b80 <expf>
 8002060:	eef0 7a40 	vmov.f32	s15, s0
 8002064:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800206c:	edc7 7a03 	vstr	s15, [r7, #12]
 8002070:	e012      	b.n	8002098 <_Z21Exp_Distortion_UpdateP8Exp_Distf+0x7c>
	else
		y = -1 + expf(ed->g *x);
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	ed93 7a00 	vldr	s14, [r3]
 8002078:	edd7 7a00 	vldr	s15, [r7]
 800207c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002080:	eeb0 0a67 	vmov.f32	s0, s15
 8002084:	f00f fd7c 	bl	8011b80 <expf>
 8002088:	eef0 7a40 	vmov.f32	s15, s0
 800208c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002090:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002094:	edc7 7a03 	vstr	s15, [r7, #12]

	return y;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	ee07 3a90 	vmov	s15, r3
}
 800209e:	eeb0 0a67 	vmov.f32	s0, s15
 80020a2:	3710      	adds	r7, #16
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}

080020a8 <_Z21First_Order_High_InitP8High_1stff>:
 *  Created on: Jun 11, 2024
 *      Author: admin
 */
#include "First_Order_High_Pass.h"

void First_Order_High_Init(High_1st *filt, float fc, float fs){
 80020a8:	b580      	push	{r7, lr}
 80020aa:	b086      	sub	sp, #24
 80020ac:	af00      	add	r7, sp, #0
 80020ae:	60f8      	str	r0, [r7, #12]
 80020b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80020b4:	edc7 0a01 	vstr	s1, [r7, #4]

	First_Order_High_Set_Parameters(filt, fc, fs);
 80020b8:	edd7 0a01 	vldr	s1, [r7, #4]
 80020bc:	ed97 0a02 	vldr	s0, [r7, #8]
 80020c0:	68f8      	ldr	r0, [r7, #12]
 80020c2:	f000 f81d 	bl	8002100 <_Z31First_Order_High_Set_ParametersP8High_1stff>

	/* Clear buffers */
	for(uint8_t i=0; i<2; i++){
 80020c6:	2300      	movs	r3, #0
 80020c8:	75fb      	strb	r3, [r7, #23]
 80020ca:	e011      	b.n	80020f0 <_Z21First_Order_High_InitP8High_1stff+0x48>
		filt->x[i]=0;
 80020cc:	7dfb      	ldrb	r3, [r7, #23]
 80020ce:	68fa      	ldr	r2, [r7, #12]
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	4413      	add	r3, r2
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	601a      	str	r2, [r3, #0]
		filt->y[i]=0;
 80020da:	7dfb      	ldrb	r3, [r7, #23]
 80020dc:	68fa      	ldr	r2, [r7, #12]
 80020de:	3302      	adds	r3, #2
 80020e0:	009b      	lsls	r3, r3, #2
 80020e2:	4413      	add	r3, r2
 80020e4:	f04f 0200 	mov.w	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
	for(uint8_t i=0; i<2; i++){
 80020ea:	7dfb      	ldrb	r3, [r7, #23]
 80020ec:	3301      	adds	r3, #1
 80020ee:	75fb      	strb	r3, [r7, #23]
 80020f0:	7dfb      	ldrb	r3, [r7, #23]
 80020f2:	2b01      	cmp	r3, #1
 80020f4:	d9ea      	bls.n	80020cc <_Z21First_Order_High_InitP8High_1stff+0x24>
	}

}
 80020f6:	bf00      	nop
 80020f8:	bf00      	nop
 80020fa:	3718      	adds	r7, #24
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_Z31First_Order_High_Set_ParametersP8High_1stff>:

void First_Order_High_Set_Parameters(High_1st *filt, float fc, float fs){
 8002100:	b5b0      	push	{r4, r5, r7, lr}
 8002102:	b086      	sub	sp, #24
 8002104:	af00      	add	r7, sp, #0
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	ed87 0a02 	vstr	s0, [r7, #8]
 800210c:	edc7 0a01 	vstr	s1, [r7, #4]

	/* set fc - (0 - 100). cutoff frequency  (20 - 2k) Hz */
	fc = 20 + 198*fc/100;
 8002110:	edd7 7a02 	vldr	s15, [r7, #8]
 8002114:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80021c0 <_Z31First_Order_High_Set_ParametersP8High_1stff+0xc0>
 8002118:	ee27 7a87 	vmul.f32	s14, s15, s14
 800211c:	eddf 6a29 	vldr	s13, [pc, #164]	; 80021c4 <_Z31First_Order_High_Set_ParametersP8High_1stff+0xc4>
 8002120:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002124:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8002128:	ee77 7a87 	vadd.f32	s15, s15, s14
 800212c:	edc7 7a02 	vstr	s15, [r7, #8]

	/* Warping */
	float wc_T = 2.0f * tanf(M_PI*fc/fs);
 8002130:	68b8      	ldr	r0, [r7, #8]
 8002132:	f7fe fa29 	bl	8000588 <__aeabi_f2d>
 8002136:	a320      	add	r3, pc, #128	; (adr r3, 80021b8 <_Z31First_Order_High_Set_ParametersP8High_1stff+0xb8>)
 8002138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800213c:	f7fe fa7c 	bl	8000638 <__aeabi_dmul>
 8002140:	4602      	mov	r2, r0
 8002142:	460b      	mov	r3, r1
 8002144:	4614      	mov	r4, r2
 8002146:	461d      	mov	r5, r3
 8002148:	6878      	ldr	r0, [r7, #4]
 800214a:	f7fe fa1d 	bl	8000588 <__aeabi_f2d>
 800214e:	4602      	mov	r2, r0
 8002150:	460b      	mov	r3, r1
 8002152:	4620      	mov	r0, r4
 8002154:	4629      	mov	r1, r5
 8002156:	f7fe fb99 	bl	800088c <__aeabi_ddiv>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	4610      	mov	r0, r2
 8002160:	4619      	mov	r1, r3
 8002162:	f7fe fd61 	bl	8000c28 <__aeabi_d2f>
 8002166:	4603      	mov	r3, r0
 8002168:	ee00 3a10 	vmov	s0, r3
 800216c:	f00f fed4 	bl	8011f18 <tanf>
 8002170:	eef0 7a40 	vmov.f32	s15, s0
 8002174:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002178:	edc7 7a05 	vstr	s15, [r7, #20]

	/* Calculate up filter Coefficients */
	filt->b[0] = 2.0f;
 800217c:	68fb      	ldr	r3, [r7, #12]
 800217e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002182:	611a      	str	r2, [r3, #16]
	filt->b[1] = -2.0f;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	f04f 4240 	mov.w	r2, #3221225472	; 0xc0000000
 800218a:	615a      	str	r2, [r3, #20]

	filt->a[0] = 2.0f + wc_T;
 800218c:	edd7 7a05 	vldr	s15, [r7, #20]
 8002190:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8002194:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	edc3 7a06 	vstr	s15, [r3, #24]
	filt->a[1] = -2.0f + wc_T;
 800219e:	edd7 7a05 	vldr	s15, [r7, #20]
 80021a2:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80021a6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	edc3 7a07 	vstr	s15, [r3, #28]
}
 80021b0:	bf00      	nop
 80021b2:	3718      	adds	r7, #24
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bdb0      	pop	{r4, r5, r7, pc}
 80021b8:	54442d18 	.word	0x54442d18
 80021bc:	400921fb 	.word	0x400921fb
 80021c0:	43460000 	.word	0x43460000
 80021c4:	42c80000 	.word	0x42c80000

080021c8 <_Z23First_Order_High_UpdateP8High_1stf>:

float First_Order_High_Update(High_1st *filt, float x){
 80021c8:	b480      	push	{r7}
 80021ca:	b083      	sub	sp, #12
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	ed87 0a00 	vstr	s0, [r7]

	/* Shift samples */
	filt->x[1] = filt->x[0];
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681a      	ldr	r2, [r3, #0]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	605a      	str	r2, [r3, #4]
	filt->x[0] = x;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	683a      	ldr	r2, [r7, #0]
 80021e0:	601a      	str	r2, [r3, #0]
	filt->y[1] = filt->y[0];
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	689a      	ldr	r2, [r3, #8]
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	60da      	str	r2, [r3, #12]

	/* Compute Output */
	filt->y[0] = filt->b[0]*filt->x[0] + filt->b[1]*filt->x[1] - filt->a[1]*filt->y[1];
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	ed93 7a04 	vldr	s14, [r3, #16]
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	edd3 7a00 	vldr	s15, [r3]
 80021f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	edd3 6a05 	vldr	s13, [r3, #20]
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	edd3 7a01 	vldr	s15, [r3, #4]
 8002206:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800220a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	edd3 6a07 	vldr	s13, [r3, #28]
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	edd3 7a03 	vldr	s15, [r3, #12]
 800221a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800221e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	edc3 7a02 	vstr	s15, [r3, #8]
	filt->y[0] /= filt->a[0];
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	edd3 6a02 	vldr	s13, [r3, #8]
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	ed93 7a06 	vldr	s14, [r3, #24]
 8002234:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	edc3 7a02 	vstr	s15, [r3, #8]

	return filt->y[0];
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	689b      	ldr	r3, [r3, #8]
 8002242:	ee07 3a90 	vmov	s15, r3
}
 8002246:	eeb0 0a67 	vmov.f32	s0, s15
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <_Z16MOD_Tremolo_initP11MOD_Tremolofff>:
 *      Author: admin
 */

#include <MOD_Tremolo.h>

void MOD_Tremolo_init(MOD_Tremolo *trem, float fs, float depth, float rate){
 8002254:	b580      	push	{r7, lr}
 8002256:	b084      	sub	sp, #16
 8002258:	af00      	add	r7, sp, #0
 800225a:	60f8      	str	r0, [r7, #12]
 800225c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002260:	edc7 0a01 	vstr	s1, [r7, #4]
 8002264:	ed87 1a00 	vstr	s2, [r7]

	/* Set up filter parameters */
	trem->fs = fs;
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	68ba      	ldr	r2, [r7, #8]
 800226c:	601a      	str	r2, [r3, #0]
	MOD_Tremolo_Set_Params(trem, depth, rate);
 800226e:	edd7 0a00 	vldr	s1, [r7]
 8002272:	ed97 0a01 	vldr	s0, [r7, #4]
 8002276:	68f8      	ldr	r0, [r7, #12]
 8002278:	f000 f80a 	bl	8002290 <_Z22MOD_Tremolo_Set_ParamsP11MOD_Tremoloff>

	/* Clear first samples */
	trem->n = 0;
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	2200      	movs	r2, #0
 8002280:	60da      	str	r2, [r3, #12]
}
 8002282:	bf00      	nop
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	0000      	movs	r0, r0
 800228c:	0000      	movs	r0, r0
	...

08002290 <_Z22MOD_Tremolo_Set_ParamsP11MOD_Tremoloff>:

void MOD_Tremolo_Set_Params(MOD_Tremolo *trem, float depth, float rate){
 8002290:	b580      	push	{r7, lr}
 8002292:	b084      	sub	sp, #16
 8002294:	af00      	add	r7, sp, #0
 8002296:	60f8      	str	r0, [r7, #12]
 8002298:	ed87 0a02 	vstr	s0, [r7, #8]
 800229c:	edc7 0a01 	vstr	s1, [r7, #4]
	// depth and rate inputs are assumed to be [0 - 100]

	// depth gets mapped to [0 - 1.0f], f_lfo to [0.1 - 14] Hz
	trem->depth = 0.01f*depth;
 80022a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80022a4:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80022f8 <_Z22MOD_Tremolo_Set_ParamsP11MOD_Tremoloff+0x68>
 80022a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	edc3 7a01 	vstr	s15, [r3, #4]
	trem->f_lfo = 0.1 + 0.139f*rate;
 80022b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80022b6:	ed9f 7a11 	vldr	s14, [pc, #68]	; 80022fc <_Z22MOD_Tremolo_Set_ParamsP11MOD_Tremoloff+0x6c>
 80022ba:	ee67 7a87 	vmul.f32	s15, s15, s14
 80022be:	ee17 0a90 	vmov	r0, s15
 80022c2:	f7fe f961 	bl	8000588 <__aeabi_f2d>
 80022c6:	a30a      	add	r3, pc, #40	; (adr r3, 80022f0 <_Z22MOD_Tremolo_Set_ParamsP11MOD_Tremoloff+0x60>)
 80022c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022cc:	f7fd fffe 	bl	80002cc <__adddf3>
 80022d0:	4602      	mov	r2, r0
 80022d2:	460b      	mov	r3, r1
 80022d4:	4610      	mov	r0, r2
 80022d6:	4619      	mov	r1, r3
 80022d8:	f7fe fca6 	bl	8000c28 <__aeabi_d2f>
 80022dc:	4602      	mov	r2, r0
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	609a      	str	r2, [r3, #8]
}
 80022e2:	bf00      	nop
 80022e4:	3710      	adds	r7, #16
 80022e6:	46bd      	mov	sp, r7
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	f3af 8000 	nop.w
 80022f0:	9999999a 	.word	0x9999999a
 80022f4:	3fb99999 	.word	0x3fb99999
 80022f8:	3c23d70a 	.word	0x3c23d70a
 80022fc:	3e0e5604 	.word	0x3e0e5604

08002300 <_Z18MOD_Tremolo_UpdateP11MOD_Tremolof>:


float MOD_Tremolo_Update(MOD_Tremolo *trem, float x){
 8002300:	b5b0      	push	{r4, r5, r7, lr}
 8002302:	ed2d 8b02 	vpush	{d8}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	ed87 0a00 	vstr	s0, [r7]

	if(trem->fs <= trem->f_lfo * trem->n){
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	ed93 7a00 	vldr	s14, [r3]
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	edd3 6a02 	vldr	s13, [r3, #8]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	68db      	ldr	r3, [r3, #12]
 8002320:	ee07 3a90 	vmov	s15, r3
 8002324:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002328:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800232c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002334:	d802      	bhi.n	800233c <_Z18MOD_Tremolo_UpdateP11MOD_Tremolof+0x3c>
		trem->n = 0;
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	60da      	str	r2, [r3, #12]
	}

	float y = (1 - trem->depth)*x + trem->depth*x*cosf(2.0f*M_PI* trem->f_lfo * trem->n / trem->fs);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002342:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002346:	ee37 7a67 	vsub.f32	s14, s14, s15
 800234a:	edd7 7a00 	vldr	s15, [r7]
 800234e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	ed93 7a01 	vldr	s14, [r3, #4]
 8002358:	edd7 7a00 	vldr	s15, [r7]
 800235c:	ee67 8a27 	vmul.f32	s17, s14, s15
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	4618      	mov	r0, r3
 8002366:	f7fe f90f 	bl	8000588 <__aeabi_f2d>
 800236a:	a323      	add	r3, pc, #140	; (adr r3, 80023f8 <_Z18MOD_Tremolo_UpdateP11MOD_Tremolof+0xf8>)
 800236c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002370:	f7fe f962 	bl	8000638 <__aeabi_dmul>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4614      	mov	r4, r2
 800237a:	461d      	mov	r5, r3
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4618      	mov	r0, r3
 8002382:	f7fe f8ef 	bl	8000564 <__aeabi_i2d>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4620      	mov	r0, r4
 800238c:	4629      	mov	r1, r5
 800238e:	f7fe f953 	bl	8000638 <__aeabi_dmul>
 8002392:	4602      	mov	r2, r0
 8002394:	460b      	mov	r3, r1
 8002396:	4614      	mov	r4, r2
 8002398:	461d      	mov	r5, r3
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f7fe f8f2 	bl	8000588 <__aeabi_f2d>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4620      	mov	r0, r4
 80023aa:	4629      	mov	r1, r5
 80023ac:	f7fe fa6e 	bl	800088c <__aeabi_ddiv>
 80023b0:	4602      	mov	r2, r0
 80023b2:	460b      	mov	r3, r1
 80023b4:	4610      	mov	r0, r2
 80023b6:	4619      	mov	r1, r3
 80023b8:	f7fe fc36 	bl	8000c28 <__aeabi_d2f>
 80023bc:	4603      	mov	r3, r0
 80023be:	ee00 3a10 	vmov	s0, r3
 80023c2:	f00f fd5d 	bl	8011e80 <cosf>
 80023c6:	eef0 7a40 	vmov.f32	s15, s0
 80023ca:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80023ce:	ee78 7a27 	vadd.f32	s15, s16, s15
 80023d2:	edc7 7a03 	vstr	s15, [r7, #12]
	trem->n++;
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	1c5a      	adds	r2, r3, #1
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	60da      	str	r2, [r3, #12]

	return y;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	ee07 3a90 	vmov	s15, r3
}
 80023e6:	eeb0 0a67 	vmov.f32	s0, s15
 80023ea:	3710      	adds	r7, #16
 80023ec:	46bd      	mov	sp, r7
 80023ee:	ecbd 8b02 	vpop	{d8}
 80023f2:	bdb0      	pop	{r4, r5, r7, pc}
 80023f4:	f3af 8000 	nop.w
 80023f8:	54442d18 	.word	0x54442d18
 80023fc:	401921fb 	.word	0x401921fb

08002400 <_Z20cubic_overdrive_initP15cubic_overdriveff>:

#include "cubic_overdrive.h"


void cubic_overdrive_init(cubic_overdrive* cubic_OD, float level, float fact_ind)
{
 8002400:	b580      	push	{r7, lr}
 8002402:	b086      	sub	sp, #24
 8002404:	af00      	add	r7, sp, #0
 8002406:	60f8      	str	r0, [r7, #12]
 8002408:	ed87 0a02 	vstr	s0, [r7, #8]
 800240c:	edc7 0a01 	vstr	s1, [r7, #4]
	for(uint8_t i=0; i<FACTORS_SIZE; i++)
 8002410:	2300      	movs	r3, #0
 8002412:	75fb      	strb	r3, [r7, #23]
 8002414:	e00a      	b.n	800242c <_Z20cubic_overdrive_initP15cubic_overdriveff+0x2c>
		cubic_OD->factors[i] = 3 + 2*i;
 8002416:	7dfb      	ldrb	r3, [r7, #23]
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	b2da      	uxtb	r2, r3
 800241c:	7dfb      	ldrb	r3, [r7, #23]
 800241e:	3203      	adds	r2, #3
 8002420:	b2d1      	uxtb	r1, r2
 8002422:	68fa      	ldr	r2, [r7, #12]
 8002424:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<FACTORS_SIZE; i++)
 8002426:	7dfb      	ldrb	r3, [r7, #23]
 8002428:	3301      	adds	r3, #1
 800242a:	75fb      	strb	r3, [r7, #23]
 800242c:	7dfb      	ldrb	r3, [r7, #23]
 800242e:	2b04      	cmp	r3, #4
 8002430:	d9f1      	bls.n	8002416 <_Z20cubic_overdrive_initP15cubic_overdriveff+0x16>
	cubic_OD->level = level/100;
 8002432:	ed97 7a02 	vldr	s14, [r7, #8]
 8002436:	eddf 6a0f 	vldr	s13, [pc, #60]	; 8002474 <_Z20cubic_overdrive_initP15cubic_overdriveff+0x74>
 800243a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	edc3 7a02 	vstr	s15, [r3, #8]
	cubic_OD->fact_ind = roundf( fact_ind / 100.0f * 5.0f );
 8002444:	ed97 7a01 	vldr	s14, [r7, #4]
 8002448:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8002474 <_Z20cubic_overdrive_initP15cubic_overdriveff+0x74>
 800244c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002450:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8002454:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002458:	eeb0 0a67 	vmov.f32	s0, s15
 800245c:	f00f fec0 	bl	80121e0 <roundf>
 8002460:	eef0 7a40 	vmov.f32	s15, s0
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	edc3 7a03 	vstr	s15, [r3, #12]
}
 800246a:	bf00      	nop
 800246c:	3718      	adds	r7, #24
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}
 8002472:	bf00      	nop
 8002474:	42c80000 	.word	0x42c80000

08002478 <_Z22cubic_overdrive_updateP15cubic_overdrivef>:

float cubic_overdrive_update(cubic_overdrive* cubic_OD, float x)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
 8002480:	ed87 0a00 	vstr	s0, [r7]
	/*float x_pow = x;
	for(int i=0; i<cubic_OD->factors[cubic_OD->factor_ind]-1; i++)
		x_pow = x_pow*x;*/

	uint8_t factor = cubic_OD->factors[(int) cubic_OD->fact_ind];
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	edd3 7a03 	vldr	s15, [r3, #12]
 800248a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800248e:	ee17 2a90 	vmov	r2, s15
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	5c9b      	ldrb	r3, [r3, r2]
 8002496:	75fb      	strb	r3, [r7, #23]

	float x_pow = pow(x, factor);
 8002498:	7dfb      	ldrb	r3, [r7, #23]
 800249a:	4618      	mov	r0, r3
 800249c:	ed97 0a00 	vldr	s0, [r7]
 80024a0:	f000 f827 	bl	80024f2 <_ZSt3powIfhEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80024a4:	ec53 2b10 	vmov	r2, r3, d0
 80024a8:	4610      	mov	r0, r2
 80024aa:	4619      	mov	r1, r3
 80024ac:	f7fe fbbc 	bl	8000c28 <__aeabi_d2f>
 80024b0:	4603      	mov	r3, r0
 80024b2:	613b      	str	r3, [r7, #16]
	float scaler = 1.0f/factor;
 80024b4:	7dfb      	ldrb	r3, [r7, #23]
 80024b6:	ee07 3a90 	vmov	s15, r3
 80024ba:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024be:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80024c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024c6:	edc7 7a03 	vstr	s15, [r7, #12]

	return x - cubic_OD->level * scaler * x_pow;
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80024d0:	edd7 7a03 	vldr	s15, [r7, #12]
 80024d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80024d8:	edd7 7a04 	vldr	s15, [r7, #16]
 80024dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e0:	ed97 7a00 	vldr	s14, [r7]
 80024e4:	ee77 7a67 	vsub.f32	s15, s14, s15
}
 80024e8:	eeb0 0a67 	vmov.f32	s0, s15
 80024ec:	3718      	adds	r7, #24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bd80      	pop	{r7, pc}

080024f2 <_ZSt3powIfhEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 80024f2:	b5b0      	push	{r4, r5, r7, lr}
 80024f4:	b082      	sub	sp, #8
 80024f6:	af00      	add	r7, sp, #0
 80024f8:	ed87 0a01 	vstr	s0, [r7, #4]
 80024fc:	4603      	mov	r3, r0
 80024fe:	70fb      	strb	r3, [r7, #3]
      return pow(__type(__x), __type(__y));
 8002500:	6878      	ldr	r0, [r7, #4]
 8002502:	f7fe f841 	bl	8000588 <__aeabi_f2d>
 8002506:	4604      	mov	r4, r0
 8002508:	460d      	mov	r5, r1
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	4618      	mov	r0, r3
 800250e:	f7fe f819 	bl	8000544 <__aeabi_ui2d>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	ec43 2b11 	vmov	d1, r2, r3
 800251a:	ec45 4b10 	vmov	d0, r4, r5
 800251e:	f00f fa39 	bl	8011994 <pow>
 8002522:	eeb0 7a40 	vmov.f32	s14, s0
 8002526:	eef0 7a60 	vmov.f32	s15, s1
    }
 800252a:	eeb0 0a47 	vmov.f32	s0, s14
 800252e:	eef0 0a67 	vmov.f32	s1, s15
 8002532:	3708      	adds	r7, #8
 8002534:	46bd      	mov	sp, r7
 8002536:	bdb0      	pop	{r4, r5, r7, pc}

08002538 <EE24_Delay>:
void EE24_UnLock(EE24_HandleTypeDef *Handle);

/***********************************************************************************************************/

void EE24_Delay(uint32_t Delay)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
#if EE24_RTOS == EE24_RTOS_DISABLE
  HAL_Delay(Delay);
#elif (EE24_RTOS == EE24_RTOS_CMSIS_V1) || (EE24_RTOS == EE24_RTOS_CMSIS_V2)
  uint32_t d = (configTICK_RATE_HZ * Delay) / 1000;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002546:	fb02 f303 	mul.w	r3, r2, r3
 800254a:	4a08      	ldr	r2, [pc, #32]	; (800256c <EE24_Delay+0x34>)
 800254c:	fba2 2303 	umull	r2, r3, r2, r3
 8002550:	099b      	lsrs	r3, r3, #6
 8002552:	60fb      	str	r3, [r7, #12]
  if (d == 0)
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d101      	bne.n	800255e <EE24_Delay+0x26>
      d = 1;
 800255a:	2301      	movs	r3, #1
 800255c:	60fb      	str	r3, [r7, #12]
  osDelay(d);
 800255e:	68f8      	ldr	r0, [r7, #12]
 8002560:	f00c f83e 	bl	800e5e0 <osDelay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8002564:	bf00      	nop
 8002566:	3710      	adds	r7, #16
 8002568:	46bd      	mov	sp, r7
 800256a:	bd80      	pop	{r7, pc}
 800256c:	10624dd3 	.word	0x10624dd3

08002570 <EE24_Lock>:

/***********************************************************************************************************/

void EE24_Lock(EE24_HandleTypeDef *Handle)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  while (Handle->Lock)
 8002578:	e002      	b.n	8002580 <EE24_Lock+0x10>
  {
    EE24_Delay(1);
 800257a:	2001      	movs	r0, #1
 800257c:	f7ff ffdc 	bl	8002538 <EE24_Delay>
  while (Handle->Lock)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	795b      	ldrb	r3, [r3, #5]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d1f8      	bne.n	800257a <EE24_Lock+0xa>
  }
  Handle->Lock = 1;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2201      	movs	r2, #1
 800258c:	715a      	strb	r2, [r3, #5]
}
 800258e:	bf00      	nop
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <EE24_UnLock>:

/***********************************************************************************************************/

void EE24_UnLock(EE24_HandleTypeDef *Handle)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  Handle->Lock = 0;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	715a      	strb	r2, [r3, #5]
}
 80025a4:	bf00      	nop
 80025a6:	370c      	adds	r7, #12
 80025a8:	46bd      	mov	sp, r7
 80025aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ae:	4770      	bx	lr

080025b0 <EE24_Init>:
  * @param  I2CAddress: I2C Memory address
  *
  * @retval bool: true or false
  */
bool EE24_Init(EE24_HandleTypeDef *Handle, I2C_HandleTypeDef *HI2c, uint8_t I2CAddress)
{
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b086      	sub	sp, #24
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	4613      	mov	r3, r2
 80025bc:	71fb      	strb	r3, [r7, #7]
  bool answer = false;
 80025be:	2300      	movs	r3, #0
 80025c0:	75fb      	strb	r3, [r7, #23]
  do
  {
    if ((Handle == NULL) || (HI2c == NULL))
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d016      	beq.n	80025f6 <EE24_Init+0x46>
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d013      	beq.n	80025f6 <EE24_Init+0x46>
    {
      break;
    }
    Handle->HI2c = HI2c;
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	68ba      	ldr	r2, [r7, #8]
 80025d2:	601a      	str	r2, [r3, #0]
    Handle->Address = I2CAddress;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	79fa      	ldrb	r2, [r7, #7]
 80025d8:	711a      	strb	r2, [r3, #4]
    if (HAL_I2C_IsDeviceReady(Handle->HI2c, Handle->Address, 2, 100) == HAL_OK)
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6818      	ldr	r0, [r3, #0]
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	791b      	ldrb	r3, [r3, #4]
 80025e2:	b299      	uxth	r1, r3
 80025e4:	2364      	movs	r3, #100	; 0x64
 80025e6:	2202      	movs	r2, #2
 80025e8:	f007 faf2 	bl	8009bd0 <HAL_I2C_IsDeviceReady>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d101      	bne.n	80025f6 <EE24_Init+0x46>
    {
      answer = true;
 80025f2:	2301      	movs	r3, #1
 80025f4:	75fb      	strb	r3, [r7, #23]
    }
  }
  while (0);

  return answer;
 80025f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	3718      	adds	r7, #24
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <EE24_Read>:
  * @param  Timeout: Timeout of this operation in ms
  *
  * @retval bool: true or false
  */
bool EE24_Read(EE24_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, int Len, uint32_t Timeout)
{
 8002600:	b590      	push	{r4, r7, lr}
 8002602:	b08b      	sub	sp, #44	; 0x2c
 8002604:	af04      	add	r7, sp, #16
 8002606:	60f8      	str	r0, [r7, #12]
 8002608:	60b9      	str	r1, [r7, #8]
 800260a:	607a      	str	r2, [r7, #4]
 800260c:	603b      	str	r3, [r7, #0]
  EE24_Lock(Handle);
 800260e:	68f8      	ldr	r0, [r7, #12]
 8002610:	f7ff ffae 	bl	8002570 <EE24_Lock>
  bool answer = false;
 8002614:	2300      	movs	r3, #0
 8002616:	75fb      	strb	r3, [r7, #23]
#elif (EE24_SIZE == EE24_8KBIT)
    if (HAL_I2C_Mem_Read(Handle->HI2c, Handle->Address | ((Address & 0x0300) >> 7), (Address & 0xff), I2C_MEMADD_SIZE_8BIT, Data, Len, Timeout) == HAL_OK)
#elif (EE24_SIZE == EE24_16KBIT)
    if (HAL_I2C_Mem_Read(Handle->HI2c, Handle->Address | ((Address & 0x0700) >> 7), (Address & 0xff), I2C_MEMADD_SIZE_8BIT, Data, Len, Timeout) == HAL_OK)
#else
    if (HAL_I2C_Mem_Read(Handle->HI2c, Handle->Address, Address, I2C_MEMADD_SIZE_16BIT, Data, Len, Timeout) == HAL_OK)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	6818      	ldr	r0, [r3, #0]
 800261c:	68fb      	ldr	r3, [r7, #12]
 800261e:	791b      	ldrb	r3, [r3, #4]
 8002620:	b299      	uxth	r1, r3
 8002622:	68bb      	ldr	r3, [r7, #8]
 8002624:	b29c      	uxth	r4, r3
 8002626:	683b      	ldr	r3, [r7, #0]
 8002628:	b29b      	uxth	r3, r3
 800262a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800262c:	9202      	str	r2, [sp, #8]
 800262e:	9301      	str	r3, [sp, #4]
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	2310      	movs	r3, #16
 8002636:	4622      	mov	r2, r4
 8002638:	f007 f898 	bl	800976c <HAL_I2C_Mem_Read>
 800263c:	4603      	mov	r3, r0
 800263e:	2b00      	cmp	r3, #0
 8002640:	d101      	bne.n	8002646 <EE24_Read+0x46>
#endif
    {
      answer = true;
 8002642:	2301      	movs	r3, #1
 8002644:	75fb      	strb	r3, [r7, #23]
    }
  }
  while (0);

  EE24_UnLock(Handle);
 8002646:	68f8      	ldr	r0, [r7, #12]
 8002648:	f7ff ffa5 	bl	8002596 <EE24_UnLock>
  return answer;
 800264c:	7dfb      	ldrb	r3, [r7, #23]
}
 800264e:	4618      	mov	r0, r3
 8002650:	371c      	adds	r7, #28
 8002652:	46bd      	mov	sp, r7
 8002654:	bd90      	pop	{r4, r7, pc}

08002656 <EE24_Write>:
  * @param  Timeout: Timeout of this operation in ms
  *
  * @retval bool: true or false
  */
bool EE24_Write(EE24_HandleTypeDef *Handle, uint32_t Address, uint8_t *Data, int Len, uint32_t Timeout)
{
 8002656:	b580      	push	{r7, lr}
 8002658:	b08a      	sub	sp, #40	; 0x28
 800265a:	af04      	add	r7, sp, #16
 800265c:	60f8      	str	r0, [r7, #12]
 800265e:	60b9      	str	r1, [r7, #8]
 8002660:	607a      	str	r2, [r7, #4]
 8002662:	603b      	str	r3, [r7, #0]
  EE24_Lock(Handle);
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7ff ff83 	bl	8002570 <EE24_Lock>
  bool answer = false;
 800266a:	2300      	movs	r3, #0
 800266c:	75fb      	strb	r3, [r7, #23]
  do
  {
    uint16_t w;
    uint32_t startTime = HAL_GetTick();
 800266e:	f004 fe55 	bl	800731c <HAL_GetTick>
 8002672:	6138      	str	r0, [r7, #16]
#if EE24_USE_WP_PIN == true
    HAL_GPIO_WritePin(Handle->WpGpio, Handle->WpPin, GPIO_PIN_RESET);
#endif
    while (1)
    {
      w = EE24_PSIZE - (Address  % EE24_PSIZE);
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	b29b      	uxth	r3, r3
 8002678:	f003 031f 	and.w	r3, r3, #31
 800267c:	b29b      	uxth	r3, r3
 800267e:	f1c3 0320 	rsb	r3, r3, #32
 8002682:	82bb      	strh	r3, [r7, #20]
      if (w > Len)
 8002684:	8abb      	ldrh	r3, [r7, #20]
 8002686:	683a      	ldr	r2, [r7, #0]
 8002688:	429a      	cmp	r2, r3
 800268a:	da01      	bge.n	8002690 <EE24_Write+0x3a>
      {
        w = Len;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	82bb      	strh	r3, [r7, #20]
#elif (EE24_SIZE == EE24_8KBIT)
        if (HAL_I2C_Mem_Write(Handle->HI2c, Handle->Address | ((Address & 0x0300) >> 7), (Address & 0xff), I2C_MEMADD_SIZE_8BIT, Data, w, Timeout) == HAL_OK)
#elif (EE24_SIZE == EE24_16KBIT)
        if (HAL_I2C_Mem_Write(Handle->HI2c, Handle->Address | ((Address & 0x0700) >> 7), (Address & 0xff), I2C_MEMADD_SIZE_8BIT, Data, w, Timeout) == HAL_OK)
#else
        if (HAL_I2C_Mem_Write(Handle->HI2c, Handle->Address, Address, I2C_MEMADD_SIZE_16BIT, Data, w, Timeout) == HAL_OK)
 8002690:	68fb      	ldr	r3, [r7, #12]
 8002692:	6818      	ldr	r0, [r3, #0]
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	791b      	ldrb	r3, [r3, #4]
 8002698:	b299      	uxth	r1, r3
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	b29a      	uxth	r2, r3
 800269e:	6a3b      	ldr	r3, [r7, #32]
 80026a0:	9302      	str	r3, [sp, #8]
 80026a2:	8abb      	ldrh	r3, [r7, #20]
 80026a4:	9301      	str	r3, [sp, #4]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	9300      	str	r3, [sp, #0]
 80026aa:	2310      	movs	r3, #16
 80026ac:	f006 ff64 	bl	8009578 <HAL_I2C_Mem_Write>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d11d      	bne.n	80026f2 <EE24_Write+0x9c>
#endif
      {
        EE24_Delay(10);
 80026b6:	200a      	movs	r0, #10
 80026b8:	f7ff ff3e 	bl	8002538 <EE24_Delay>
        Len -= w;
 80026bc:	8abb      	ldrh	r3, [r7, #20]
 80026be:	683a      	ldr	r2, [r7, #0]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	603b      	str	r3, [r7, #0]
        Data += w;
 80026c4:	8abb      	ldrh	r3, [r7, #20]
 80026c6:	687a      	ldr	r2, [r7, #4]
 80026c8:	4413      	add	r3, r2
 80026ca:	607b      	str	r3, [r7, #4]
        Address += w;
 80026cc:	8abb      	ldrh	r3, [r7, #20]
 80026ce:	68ba      	ldr	r2, [r7, #8]
 80026d0:	4413      	add	r3, r2
 80026d2:	60bb      	str	r3, [r7, #8]
        if (Len == 0)
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d102      	bne.n	80026e0 <EE24_Write+0x8a>
        {
          answer = true;
 80026da:	2301      	movs	r3, #1
 80026dc:	75fb      	strb	r3, [r7, #23]
          break;
 80026de:	e00b      	b.n	80026f8 <EE24_Write+0xa2>
        }
        if (HAL_GetTick() - startTime >= Timeout)
 80026e0:	f004 fe1c 	bl	800731c <HAL_GetTick>
 80026e4:	4602      	mov	r2, r0
 80026e6:	693b      	ldr	r3, [r7, #16]
 80026e8:	1ad3      	subs	r3, r2, r3
 80026ea:	6a3a      	ldr	r2, [r7, #32]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d902      	bls.n	80026f6 <EE24_Write+0xa0>
      w = EE24_PSIZE - (Address  % EE24_PSIZE);
 80026f0:	e7c0      	b.n	8002674 <EE24_Write+0x1e>
          break;
        }
      }
      else
      {
        break;
 80026f2:	bf00      	nop
 80026f4:	e000      	b.n	80026f8 <EE24_Write+0xa2>
          break;
 80026f6:	bf00      	nop
  while (0);

#if EE24_USE_WP_PIN == true
    HAL_GPIO_WritePin(Handle->WpGpio, Handle->WpPin, GPIO_PIN_SET);
#endif
  EE24_UnLock(Handle);
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7ff ff4c 	bl	8002596 <EE24_UnLock>
  return answer;
 80026fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8002700:	4618      	mov	r0, r3
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <_Z9getSinValid>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int32_t dacSinValues2[bufferSize];
int32_t dacSinValues[bufferSize];

void getSinVal(int frequency, double amplitude){
 8002708:	b5b0      	push	{r4, r5, r7, lr}
 800270a:	b086      	sub	sp, #24
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	ed87 0b00 	vstr	d0, [r7]
	for(int i = 0; i <bufferSize;i++){
 8002714:	2300      	movs	r3, #0
 8002716:	617b      	str	r3, [r7, #20]
 8002718:	e04b      	b.n	80027b2 <_Z9getSinValid+0xaa>
		dacSinValues2[i]=(sin(i*2*pi/(Fs/frequency))*(4096*amplitude/3.3));
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4618      	mov	r0, r3
 8002720:	f7fd ff20 	bl	8000564 <__aeabi_i2d>
 8002724:	a32c      	add	r3, pc, #176	; (adr r3, 80027d8 <_Z9getSinValid+0xd0>)
 8002726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800272a:	f7fd ff85 	bl	8000638 <__aeabi_dmul>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4614      	mov	r4, r2
 8002734:	461d      	mov	r5, r3
 8002736:	f24c 3250 	movw	r2, #50000	; 0xc350
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	fb92 f3f3 	sdiv	r3, r2, r3
 8002740:	4618      	mov	r0, r3
 8002742:	f7fd ff0f 	bl	8000564 <__aeabi_i2d>
 8002746:	4602      	mov	r2, r0
 8002748:	460b      	mov	r3, r1
 800274a:	4620      	mov	r0, r4
 800274c:	4629      	mov	r1, r5
 800274e:	f7fe f89d 	bl	800088c <__aeabi_ddiv>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	ec43 2b17 	vmov	d7, r2, r3
 800275a:	eeb0 0a47 	vmov.f32	s0, s14
 800275e:	eef0 0a67 	vmov.f32	s1, s15
 8002762:	f00f f9b5 	bl	8011ad0 <sin>
 8002766:	ec55 4b10 	vmov	r4, r5, d0
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	4b18      	ldr	r3, [pc, #96]	; (80027d0 <_Z9getSinValid+0xc8>)
 8002770:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002774:	f7fd ff60 	bl	8000638 <__aeabi_dmul>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4610      	mov	r0, r2
 800277e:	4619      	mov	r1, r3
 8002780:	a311      	add	r3, pc, #68	; (adr r3, 80027c8 <_Z9getSinValid+0xc0>)
 8002782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002786:	f7fe f881 	bl	800088c <__aeabi_ddiv>
 800278a:	4602      	mov	r2, r0
 800278c:	460b      	mov	r3, r1
 800278e:	4620      	mov	r0, r4
 8002790:	4629      	mov	r1, r5
 8002792:	f7fd ff51 	bl	8000638 <__aeabi_dmul>
 8002796:	4602      	mov	r2, r0
 8002798:	460b      	mov	r3, r1
 800279a:	4610      	mov	r0, r2
 800279c:	4619      	mov	r1, r3
 800279e:	f7fe f9fb 	bl	8000b98 <__aeabi_d2iz>
 80027a2:	4602      	mov	r2, r0
 80027a4:	490b      	ldr	r1, [pc, #44]	; (80027d4 <_Z9getSinValid+0xcc>)
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i <bufferSize;i++){
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	3301      	adds	r3, #1
 80027b0:	617b      	str	r3, [r7, #20]
 80027b2:	697b      	ldr	r3, [r7, #20]
 80027b4:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80027b8:	dbaf      	blt.n	800271a <_Z9getSinValid+0x12>
	}
}
 80027ba:	bf00      	nop
 80027bc:	bf00      	nop
 80027be:	3718      	adds	r7, #24
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bdb0      	pop	{r4, r5, r7, pc}
 80027c4:	f3af 8000 	nop.w
 80027c8:	66666666 	.word	0x66666666
 80027cc:	400a6666 	.word	0x400a6666
 80027d0:	40b00000 	.word	0x40b00000
 80027d4:	200194fc 	.word	0x200194fc
 80027d8:	4d12d84a 	.word	0x4d12d84a
 80027dc:	400921fb 	.word	0x400921fb

080027e0 <_Z10getSinVal2id>:

void getSinVal2(int frequency, double amplitude){
 80027e0:	b5b0      	push	{r4, r5, r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	60f8      	str	r0, [r7, #12]
 80027e8:	ed87 0b00 	vstr	d0, [r7]

	for(int i = 0; i <bufferSize;i++){
 80027ec:	2300      	movs	r3, #0
 80027ee:	617b      	str	r3, [r7, #20]
 80027f0:	e04b      	b.n	800288a <_Z10getSinVal2id+0xaa>
			dacSinValues[i]=(sin(i*2*pi/(Fs/frequency))*(4096*amplitude/3.3));
 80027f2:	697b      	ldr	r3, [r7, #20]
 80027f4:	005b      	lsls	r3, r3, #1
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd feb4 	bl	8000564 <__aeabi_i2d>
 80027fc:	a32c      	add	r3, pc, #176	; (adr r3, 80028b0 <_Z10getSinVal2id+0xd0>)
 80027fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002802:	f7fd ff19 	bl	8000638 <__aeabi_dmul>
 8002806:	4602      	mov	r2, r0
 8002808:	460b      	mov	r3, r1
 800280a:	4614      	mov	r4, r2
 800280c:	461d      	mov	r5, r3
 800280e:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	fb92 f3f3 	sdiv	r3, r2, r3
 8002818:	4618      	mov	r0, r3
 800281a:	f7fd fea3 	bl	8000564 <__aeabi_i2d>
 800281e:	4602      	mov	r2, r0
 8002820:	460b      	mov	r3, r1
 8002822:	4620      	mov	r0, r4
 8002824:	4629      	mov	r1, r5
 8002826:	f7fe f831 	bl	800088c <__aeabi_ddiv>
 800282a:	4602      	mov	r2, r0
 800282c:	460b      	mov	r3, r1
 800282e:	ec43 2b17 	vmov	d7, r2, r3
 8002832:	eeb0 0a47 	vmov.f32	s0, s14
 8002836:	eef0 0a67 	vmov.f32	s1, s15
 800283a:	f00f f949 	bl	8011ad0 <sin>
 800283e:	ec55 4b10 	vmov	r4, r5, d0
 8002842:	f04f 0200 	mov.w	r2, #0
 8002846:	4b18      	ldr	r3, [pc, #96]	; (80028a8 <_Z10getSinVal2id+0xc8>)
 8002848:	e9d7 0100 	ldrd	r0, r1, [r7]
 800284c:	f7fd fef4 	bl	8000638 <__aeabi_dmul>
 8002850:	4602      	mov	r2, r0
 8002852:	460b      	mov	r3, r1
 8002854:	4610      	mov	r0, r2
 8002856:	4619      	mov	r1, r3
 8002858:	a311      	add	r3, pc, #68	; (adr r3, 80028a0 <_Z10getSinVal2id+0xc0>)
 800285a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285e:	f7fe f815 	bl	800088c <__aeabi_ddiv>
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4620      	mov	r0, r4
 8002868:	4629      	mov	r1, r5
 800286a:	f7fd fee5 	bl	8000638 <__aeabi_dmul>
 800286e:	4602      	mov	r2, r0
 8002870:	460b      	mov	r3, r1
 8002872:	4610      	mov	r0, r2
 8002874:	4619      	mov	r1, r3
 8002876:	f7fe f98f 	bl	8000b98 <__aeabi_d2iz>
 800287a:	4602      	mov	r2, r0
 800287c:	490b      	ldr	r1, [pc, #44]	; (80028ac <_Z10getSinVal2id+0xcc>)
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for(int i = 0; i <bufferSize;i++){
 8002884:	697b      	ldr	r3, [r7, #20]
 8002886:	3301      	adds	r3, #1
 8002888:	617b      	str	r3, [r7, #20]
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002890:	dbaf      	blt.n	80027f2 <_Z10getSinVal2id+0x12>
		}

}
 8002892:	bf00      	nop
 8002894:	bf00      	nop
 8002896:	3718      	adds	r7, #24
 8002898:	46bd      	mov	sp, r7
 800289a:	bdb0      	pop	{r4, r5, r7, pc}
 800289c:	f3af 8000 	nop.w
 80028a0:	66666666 	.word	0x66666666
 80028a4:	400a6666 	.word	0x400a6666
 80028a8:	40b00000 	.word	0x40b00000
 80028ac:	20019ccc 	.word	0x20019ccc
 80028b0:	4d12d84a 	.word	0x4d12d84a
 80028b4:	400921fb 	.word	0x400921fb

080028b8 <HAL_GPIO_EXTI_Callback>:




void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b084      	sub	sp, #16
 80028bc:	af00      	add	r7, sp, #0
 80028be:	4603      	mov	r3, r0
 80028c0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(GPIO_Pin==interruptButton_Pin){
 80028c2:	88fb      	ldrh	r3, [r7, #6]
 80028c4:	2b40      	cmp	r3, #64	; 0x40
 80028c6:	d10f      	bne.n	80028e8 <HAL_GPIO_EXTI_Callback+0x30>

      buttonPressed="right";
 80028c8:	492b      	ldr	r1, [pc, #172]	; (8002978 <HAL_GPIO_EXTI_Callback+0xc0>)
 80028ca:	482c      	ldr	r0, [pc, #176]	; (800297c <HAL_GPIO_EXTI_Callback+0xc4>)
 80028cc:	f00e ffe9 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	  HAL_GPIO_TogglePin(interruptLED_GPIO_Port, interruptLED_Pin);
 80028d0:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028d4:	482a      	ldr	r0, [pc, #168]	; (8002980 <HAL_GPIO_EXTI_Callback+0xc8>)
 80028d6:	f006 fcc2 	bl	800925e <HAL_GPIO_TogglePin>
      xSemaphoreGiveFromISR(screenChangeSem, NULL); // Give semaphore from interrupt
 80028da:	4b2a      	ldr	r3, [pc, #168]	; (8002984 <HAL_GPIO_EXTI_Callback+0xcc>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	2100      	movs	r1, #0
 80028e0:	4618      	mov	r0, r3
 80028e2:	f00c fa58 	bl	800ed96 <xQueueGiveFromISR>
	  HAL_GPIO_TogglePin(interruptLED_GPIO_Port, interruptLED_Pin);
      xSemaphoreGiveFromISR(screenChangeSem, NULL); // Give semaphore from interrupt

  }

}
 80028e6:	e043      	b.n	8002970 <HAL_GPIO_EXTI_Callback+0xb8>
  }else if(GPIO_Pin==interruptButton2_Pin){
 80028e8:	88fb      	ldrh	r3, [r7, #6]
 80028ea:	2b80      	cmp	r3, #128	; 0x80
 80028ec:	d10f      	bne.n	800290e <HAL_GPIO_EXTI_Callback+0x56>
	  	buttonPressed="left";
 80028ee:	4926      	ldr	r1, [pc, #152]	; (8002988 <HAL_GPIO_EXTI_Callback+0xd0>)
 80028f0:	4822      	ldr	r0, [pc, #136]	; (800297c <HAL_GPIO_EXTI_Callback+0xc4>)
 80028f2:	f00e ffd6 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	  	HAL_GPIO_TogglePin(interruptLED_GPIO_Port, interruptLED_Pin);
 80028f6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80028fa:	4821      	ldr	r0, [pc, #132]	; (8002980 <HAL_GPIO_EXTI_Callback+0xc8>)
 80028fc:	f006 fcaf 	bl	800925e <HAL_GPIO_TogglePin>
	    xSemaphoreGiveFromISR(screenChangeSem, NULL); // Give semaphore from interrupt
 8002900:	4b20      	ldr	r3, [pc, #128]	; (8002984 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	2100      	movs	r1, #0
 8002906:	4618      	mov	r0, r3
 8002908:	f00c fa45 	bl	800ed96 <xQueueGiveFromISR>
}
 800290c:	e030      	b.n	8002970 <HAL_GPIO_EXTI_Callback+0xb8>
  }else if(GPIO_Pin==rotation1_1_Pin){
 800290e:	88fb      	ldrh	r3, [r7, #6]
 8002910:	2b10      	cmp	r3, #16
 8002912:	d11b      	bne.n	800294c <HAL_GPIO_EXTI_Callback+0x94>
	  int res = HAL_GPIO_ReadPin(rotation1_2_GPIO_Port,rotation1_2_Pin);
 8002914:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8002918:	4819      	ldr	r0, [pc, #100]	; (8002980 <HAL_GPIO_EXTI_Callback+0xc8>)
 800291a:	f006 fc6f 	bl	80091fc <HAL_GPIO_ReadPin>
 800291e:	4603      	mov	r3, r0
 8002920:	60fb      	str	r3, [r7, #12]
	  buttonPressed="rotation";
 8002922:	491a      	ldr	r1, [pc, #104]	; (800298c <HAL_GPIO_EXTI_Callback+0xd4>)
 8002924:	4815      	ldr	r0, [pc, #84]	; (800297c <HAL_GPIO_EXTI_Callback+0xc4>)
 8002926:	f00e ffbc 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	  if(res==0){
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d103      	bne.n	8002938 <HAL_GPIO_EXTI_Callback+0x80>
		  rotationDirection=1;
 8002930:	4b17      	ldr	r3, [pc, #92]	; (8002990 <HAL_GPIO_EXTI_Callback+0xd8>)
 8002932:	2201      	movs	r2, #1
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	e002      	b.n	800293e <HAL_GPIO_EXTI_Callback+0x86>
		  rotationDirection=0;
 8002938:	4b15      	ldr	r3, [pc, #84]	; (8002990 <HAL_GPIO_EXTI_Callback+0xd8>)
 800293a:	2200      	movs	r2, #0
 800293c:	601a      	str	r2, [r3, #0]
	  xSemaphoreGiveFromISR(screenChangeSem, NULL);
 800293e:	4b11      	ldr	r3, [pc, #68]	; (8002984 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	2100      	movs	r1, #0
 8002944:	4618      	mov	r0, r3
 8002946:	f00c fa26 	bl	800ed96 <xQueueGiveFromISR>
}
 800294a:	e011      	b.n	8002970 <HAL_GPIO_EXTI_Callback+0xb8>
  }else if(GPIO_Pin==interruptButton3_Pin){
 800294c:	88fb      	ldrh	r3, [r7, #6]
 800294e:	2b02      	cmp	r3, #2
 8002950:	d10e      	bne.n	8002970 <HAL_GPIO_EXTI_Callback+0xb8>
	  buttonPressed="plus";
 8002952:	4910      	ldr	r1, [pc, #64]	; (8002994 <HAL_GPIO_EXTI_Callback+0xdc>)
 8002954:	4809      	ldr	r0, [pc, #36]	; (800297c <HAL_GPIO_EXTI_Callback+0xc4>)
 8002956:	f00e ffa4 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
	  HAL_GPIO_TogglePin(interruptLED_GPIO_Port, interruptLED_Pin);
 800295a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800295e:	4808      	ldr	r0, [pc, #32]	; (8002980 <HAL_GPIO_EXTI_Callback+0xc8>)
 8002960:	f006 fc7d 	bl	800925e <HAL_GPIO_TogglePin>
      xSemaphoreGiveFromISR(screenChangeSem, NULL); // Give semaphore from interrupt
 8002964:	4b07      	ldr	r3, [pc, #28]	; (8002984 <HAL_GPIO_EXTI_Callback+0xcc>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2100      	movs	r1, #0
 800296a:	4618      	mov	r0, r3
 800296c:	f00c fa13 	bl	800ed96 <xQueueGiveFromISR>
}
 8002970:	bf00      	nop
 8002972:	3710      	adds	r7, #16
 8002974:	46bd      	mov	sp, r7
 8002976:	bd80      	pop	{r7, pc}
 8002978:	08015ab4 	.word	0x08015ab4
 800297c:	20000638 	.word	0x20000638
 8002980:	40020000 	.word	0x40020000
 8002984:	20000624 	.word	0x20000624
 8002988:	08015abc 	.word	0x08015abc
 800298c:	08015ac4 	.word	0x08015ac4
 8002990:	20000184 	.word	0x20000184
 8002994:	08015ad0 	.word	0x08015ad0

08002998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800299e:	f004 fc87 	bl	80072b0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80029a2:	f000 f8f5 	bl	8002b90 <_Z18SystemClock_Configv>

  /* USER CODE BEGIN SysInit */
  HAL_Delay(20);
 80029a6:	2014      	movs	r0, #20
 80029a8:	f004 fcc4 	bl	8007334 <HAL_Delay>
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80029ac:	f000 fcec 	bl	8003388 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 80029b0:	f000 fcac 	bl	800330c <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 80029b4:	f000 fc7c 	bl	80032b0 <_ZL19MX_USART2_UART_Initv>
  MX_I2C1_Init();
 80029b8:	f000 f9fc 	bl	8002db4 <_ZL12MX_I2C1_Initv>
  MX_TIM2_Init();
 80029bc:	f000 fa96 	bl	8002eec <_ZL12MX_TIM2_Initv>
  MX_I2C2_Init();
 80029c0:	f000 fa2c 	bl	8002e1c <_ZL12MX_I2C2_Initv>
  MX_DAC_Init();
 80029c4:	f000 f9c2 	bl	8002d4c <_ZL11MX_DAC_Initv>
  MX_TIM4_Init();
 80029c8:	f000 fb20 	bl	800300c <_ZL12MX_TIM4_Initv>
  MX_ADC1_Init();
 80029cc:	f000 f962 	bl	8002c94 <_ZL12MX_ADC1_Initv>
  MX_TIM8_Init();
 80029d0:	f000 fbb6 	bl	8003140 <_ZL12MX_TIM8_Initv>
  MX_TIM7_Init();
 80029d4:	f000 fb76 	bl	80030c4 <_ZL12MX_TIM7_Initv>
  MX_I2C3_Init();
 80029d8:	f000 fa54 	bl	8002e84 <_ZL12MX_I2C3_Initv>
  /* USER CODE BEGIN 2 */
//  MOD_Tremolo_init(&tremPedal, 0.9f ,0.9f, (1000000.0f)/11.0f);
//  First_Order_High_Set_Parameters(&hp1Pedal,20000.0f,(1000000.0f)/11.0f);
//  Exp_Distortion_Init_Default(&expDistPedal,60);
  //HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
  getSinVal(2000,0.1);
 80029dc:	ed9f 0b4e 	vldr	d0, [pc, #312]	; 8002b18 <main+0x180>
 80029e0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80029e4:	f7ff fe90 	bl	8002708 <_Z9getSinValid>
  getSinVal2(1000,0.1);
 80029e8:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 8002b18 <main+0x180>
 80029ec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80029f0:	f7ff fef6 	bl	80027e0 <_Z10getSinVal2id>
  HAL_TIM_Base_Start(&htim4);
 80029f4:	484a      	ldr	r0, [pc, #296]	; (8002b20 <main+0x188>)
 80029f6:	f00a f975 	bl	800cce4 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim8);
 80029fa:	484a      	ldr	r0, [pc, #296]	; (8002b24 <main+0x18c>)
 80029fc:	f00a f972 	bl	800cce4 <HAL_TIM_Base_Start>

  for(int i=0; i< maxMem; i++){
 8002a00:	2300      	movs	r3, #0
 8002a02:	607b      	str	r3, [r7, #4]
 8002a04:	e010      	b.n	8002a28 <main+0x90>
	xMemory[i] = 0.0f;
 8002a06:	4a48      	ldr	r2, [pc, #288]	; (8002b28 <main+0x190>)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	f04f 0200 	mov.w	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]
	yMemory[i] = 0.0f;
 8002a14:	4a45      	ldr	r2, [pc, #276]	; (8002b2c <main+0x194>)
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	601a      	str	r2, [r3, #0]
  for(int i=0; i< maxMem; i++){
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	3301      	adds	r3, #1
 8002a26:	607b      	str	r3, [r7, #4]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f5b3 5ffa 	cmp.w	r3, #8000	; 0x1f40
 8002a2e:	dbea      	blt.n	8002a06 <main+0x6e>
  }

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 8002a30:	2200      	movs	r2, #0
 8002a32:	2108      	movs	r1, #8
 8002a34:	483e      	ldr	r0, [pc, #248]	; (8002b30 <main+0x198>)
 8002a36:	f006 fbf9 	bl	800922c <HAL_GPIO_WritePin>
  ssd1306_Init();
 8002a3a:	f003 fc89 	bl	8006350 <ssd1306_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002a3e:	2100      	movs	r1, #0
 8002a40:	483c      	ldr	r0, [pc, #240]	; (8002b34 <main+0x19c>)
 8002a42:	f00a fa81 	bl	800cf48 <HAL_TIM_PWM_Start>
  First_Order_High_Init(&myFirstOrder,10,Fs);
 8002a46:	eddf 0a3c 	vldr	s1, [pc, #240]	; 8002b38 <main+0x1a0>
 8002a4a:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8002a4e:	483b      	ldr	r0, [pc, #236]	; (8002b3c <main+0x1a4>)
 8002a50:	f7ff fb2a 	bl	80020a8 <_Z21First_Order_High_InitP8High_1stff>



  	HAL_Delay(1000);
 8002a54:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002a58:	f004 fc6c 	bl	8007334 <HAL_Delay>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002a5c:	f00b fce4 	bl	800e428 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  screenChangeSem = xSemaphoreCreateBinary();
 8002a60:	2203      	movs	r2, #3
 8002a62:	2100      	movs	r1, #0
 8002a64:	2001      	movs	r0, #1
 8002a66:	f00b ff9f 	bl	800e9a8 <xQueueGenericCreate>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	4a34      	ldr	r2, [pc, #208]	; (8002b40 <main+0x1a8>)
 8002a6e:	6013      	str	r3, [r2, #0]
  blinkSem = xSemaphoreCreateBinary();
 8002a70:	2203      	movs	r2, #3
 8002a72:	2100      	movs	r1, #0
 8002a74:	2001      	movs	r0, #1
 8002a76:	f00b ff97 	bl	800e9a8 <xQueueGenericCreate>
 8002a7a:	4603      	mov	r3, r0
 8002a7c:	4a31      	ldr	r2, [pc, #196]	; (8002b44 <main+0x1ac>)
 8002a7e:	6013      	str	r3, [r2, #0]
  clickSem = xSemaphoreCreateBinary();
 8002a80:	2203      	movs	r2, #3
 8002a82:	2100      	movs	r1, #0
 8002a84:	2001      	movs	r0, #1
 8002a86:	f00b ff8f 	bl	800e9a8 <xQueueGenericCreate>
 8002a8a:	4603      	mov	r3, r0
 8002a8c:	4a2e      	ldr	r2, [pc, #184]	; (8002b48 <main+0x1b0>)
 8002a8e:	6013      	str	r3, [r2, #0]
  soundSem = xSemaphoreCreateBinary();
 8002a90:	2203      	movs	r2, #3
 8002a92:	2100      	movs	r1, #0
 8002a94:	2001      	movs	r0, #1
 8002a96:	f00b ff87 	bl	800e9a8 <xQueueGenericCreate>
 8002a9a:	4603      	mov	r3, r0
 8002a9c:	4a2b      	ldr	r2, [pc, #172]	; (8002b4c <main+0x1b4>)
 8002a9e:	6013      	str	r3, [r2, #0]
  xSemaphoreGive(soundSem);
 8002aa0:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <main+0x1b4>)
 8002aa2:	6818      	ldr	r0, [r3, #0]
 8002aa4:	2300      	movs	r3, #0
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	f00b ffdb 	bl	800ea64 <xQueueGenericSend>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinker */
  blinkerHandle = osThreadNew(StartBlinker, NULL, &blinker_attributes);
 8002aae:	4a28      	ldr	r2, [pc, #160]	; (8002b50 <main+0x1b8>)
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	4828      	ldr	r0, [pc, #160]	; (8002b54 <main+0x1bc>)
 8002ab4:	f00b fd02 	bl	800e4bc <osThreadNew>
 8002ab8:	4603      	mov	r3, r0
 8002aba:	4a27      	ldr	r2, [pc, #156]	; (8002b58 <main+0x1c0>)
 8002abc:	6013      	str	r3, [r2, #0]

  /* creation of oled */
  oledHandle = osThreadNew(StartOled, NULL, &oled_attributes);
 8002abe:	4a27      	ldr	r2, [pc, #156]	; (8002b5c <main+0x1c4>)
 8002ac0:	2100      	movs	r1, #0
 8002ac2:	4827      	ldr	r0, [pc, #156]	; (8002b60 <main+0x1c8>)
 8002ac4:	f00b fcfa 	bl	800e4bc <osThreadNew>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	4a26      	ldr	r2, [pc, #152]	; (8002b64 <main+0x1cc>)
 8002acc:	6013      	str	r3, [r2, #0]

  /* creation of metronomeSync */
  metronomeSyncHandle = osThreadNew(startMetronomeSync, NULL, &metronomeSync_attributes);
 8002ace:	4a26      	ldr	r2, [pc, #152]	; (8002b68 <main+0x1d0>)
 8002ad0:	2100      	movs	r1, #0
 8002ad2:	4826      	ldr	r0, [pc, #152]	; (8002b6c <main+0x1d4>)
 8002ad4:	f00b fcf2 	bl	800e4bc <osThreadNew>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4a25      	ldr	r2, [pc, #148]	; (8002b70 <main+0x1d8>)
 8002adc:	6013      	str	r3, [r2, #0]

  /* creation of click */
  clickHandle = osThreadNew(startClick, NULL, &click_attributes);
 8002ade:	4a25      	ldr	r2, [pc, #148]	; (8002b74 <main+0x1dc>)
 8002ae0:	2100      	movs	r1, #0
 8002ae2:	4825      	ldr	r0, [pc, #148]	; (8002b78 <main+0x1e0>)
 8002ae4:	f00b fcea 	bl	800e4bc <osThreadNew>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a24      	ldr	r2, [pc, #144]	; (8002b7c <main+0x1e4>)
 8002aec:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  HAL_DAC_Start_DMA(&hdac, DAC_CHANNEL_1, dacBuffer, bufferSize, DAC_ALIGN_12B_R);
 8002aee:	2300      	movs	r3, #0
 8002af0:	9300      	str	r3, [sp, #0]
 8002af2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8002af6:	4a22      	ldr	r2, [pc, #136]	; (8002b80 <main+0x1e8>)
 8002af8:	2100      	movs	r1, #0
 8002afa:	4822      	ldr	r0, [pc, #136]	; (8002b84 <main+0x1ec>)
 8002afc:	f005 fa74 	bl	8007fe8 <HAL_DAC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc1, adcBuffer, bufferSize);
 8002b00:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002b04:	4920      	ldr	r1, [pc, #128]	; (8002b88 <main+0x1f0>)
 8002b06:	4821      	ldr	r0, [pc, #132]	; (8002b8c <main+0x1f4>)
 8002b08:	f004 fd8c 	bl	8007624 <HAL_ADC_Start_DMA>

  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002b0c:	f00b fcb0 	bl	800e470 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
 8002b10:	e7fe      	b.n	8002b10 <main+0x178>
 8002b12:	bf00      	nop
 8002b14:	f3af 8000 	nop.w
 8002b18:	9999999a 	.word	0x9999999a
 8002b1c:	3fb99999 	.word	0x3fb99999
 8002b20:	2000048c 	.word	0x2000048c
 8002b24:	2000051c 	.word	0x2000051c
 8002b28:	200015f0 	.word	0x200015f0
 8002b2c:	200092f0 	.word	0x200092f0
 8002b30:	40020800 	.word	0x40020800
 8002b34:	20000444 	.word	0x20000444
 8002b38:	47435000 	.word	0x47435000
 8002b3c:	200194a4 	.word	0x200194a4
 8002b40:	20000624 	.word	0x20000624
 8002b44:	20000628 	.word	0x20000628
 8002b48:	2000062c 	.word	0x2000062c
 8002b4c:	20000630 	.word	0x20000630
 8002b50:	08015e20 	.word	0x08015e20
 8002b54:	08005b51 	.word	0x08005b51
 8002b58:	2000060c 	.word	0x2000060c
 8002b5c:	08015e44 	.word	0x08015e44
 8002b60:	08005ba1 	.word	0x08005ba1
 8002b64:	20000610 	.word	0x20000610
 8002b68:	08015e68 	.word	0x08015e68
 8002b6c:	08005c39 	.word	0x08005c39
 8002b70:	20000614 	.word	0x20000614
 8002b74:	08015e8c 	.word	0x08015e8c
 8002b78:	08005cd5 	.word	0x08005cd5
 8002b7c:	20000618 	.word	0x20000618
 8002b80:	20000e20 	.word	0x20000e20
 8002b84:	200002d4 	.word	0x200002d4
 8002b88:	20000650 	.word	0x20000650
 8002b8c:	2000022c 	.word	0x2000022c

08002b90 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b094      	sub	sp, #80	; 0x50
 8002b94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002b96:	f107 031c 	add.w	r3, r7, #28
 8002b9a:	2234      	movs	r2, #52	; 0x34
 8002b9c:	2100      	movs	r1, #0
 8002b9e:	4618      	mov	r0, r3
 8002ba0:	f012 fb34 	bl	801520c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ba4:	f107 0308 	add.w	r3, r7, #8
 8002ba8:	2200      	movs	r2, #0
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	605a      	str	r2, [r3, #4]
 8002bae:	609a      	str	r2, [r3, #8]
 8002bb0:	60da      	str	r2, [r3, #12]
 8002bb2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	607b      	str	r3, [r7, #4]
 8002bb8:	4b34      	ldr	r3, [pc, #208]	; (8002c8c <_Z18SystemClock_Configv+0xfc>)
 8002bba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbc:	4a33      	ldr	r2, [pc, #204]	; (8002c8c <_Z18SystemClock_Configv+0xfc>)
 8002bbe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc2:	6413      	str	r3, [r2, #64]	; 0x40
 8002bc4:	4b31      	ldr	r3, [pc, #196]	; (8002c8c <_Z18SystemClock_Configv+0xfc>)
 8002bc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bcc:	607b      	str	r3, [r7, #4]
 8002bce:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	603b      	str	r3, [r7, #0]
 8002bd4:	4b2e      	ldr	r3, [pc, #184]	; (8002c90 <_Z18SystemClock_Configv+0x100>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a2d      	ldr	r2, [pc, #180]	; (8002c90 <_Z18SystemClock_Configv+0x100>)
 8002bda:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002bde:	6013      	str	r3, [r2, #0]
 8002be0:	4b2b      	ldr	r3, [pc, #172]	; (8002c90 <_Z18SystemClock_Configv+0x100>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002be8:	603b      	str	r3, [r7, #0]
 8002bea:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002bec:	2301      	movs	r3, #1
 8002bee:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002bf0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bf4:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002bf6:	2302      	movs	r3, #2
 8002bf8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002bfa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bfe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8002c00:	2304      	movs	r3, #4
 8002c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8002c04:	23b4      	movs	r3, #180	; 0xb4
 8002c06:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002c08:	2302      	movs	r3, #2
 8002c0a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8002c10:	2302      	movs	r3, #2
 8002c12:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002c14:	f107 031c 	add.w	r3, r7, #28
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f009 fd75 	bl	800c708 <HAL_RCC_OscConfig>
 8002c1e:	4603      	mov	r3, r0
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	bf14      	ite	ne
 8002c24:	2301      	movne	r3, #1
 8002c26:	2300      	moveq	r3, #0
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d001      	beq.n	8002c32 <_Z18SystemClock_Configv+0xa2>
  {
    Error_Handler();
 8002c2e:	f003 f885 	bl	8005d3c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8002c32:	f009 f99d 	bl	800bf70 <HAL_PWREx_EnableOverDrive>
 8002c36:	4603      	mov	r3, r0
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	bf14      	ite	ne
 8002c3c:	2301      	movne	r3, #1
 8002c3e:	2300      	moveq	r3, #0
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d001      	beq.n	8002c4a <_Z18SystemClock_Configv+0xba>
  {
    Error_Handler();
 8002c46:	f003 f879 	bl	8005d3c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002c4a:	230f      	movs	r3, #15
 8002c4c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002c4e:	2302      	movs	r3, #2
 8002c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002c52:	2300      	movs	r3, #0
 8002c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002c56:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8002c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8002c5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002c60:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002c62:	f107 0308 	add.w	r3, r7, #8
 8002c66:	2105      	movs	r1, #5
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f009 f9d1 	bl	800c010 <HAL_RCC_ClockConfig>
 8002c6e:	4603      	mov	r3, r0
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	bf14      	ite	ne
 8002c74:	2301      	movne	r3, #1
 8002c76:	2300      	moveq	r3, #0
 8002c78:	b2db      	uxtb	r3, r3
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d001      	beq.n	8002c82 <_Z18SystemClock_Configv+0xf2>
  {
    Error_Handler();
 8002c7e:	f003 f85d 	bl	8005d3c <Error_Handler>
  }
}
 8002c82:	bf00      	nop
 8002c84:	3750      	adds	r7, #80	; 0x50
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800
 8002c90:	40007000 	.word	0x40007000

08002c94 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002c9a:	463b      	mov	r3, r7
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]
 8002ca0:	605a      	str	r2, [r3, #4]
 8002ca2:	609a      	str	r2, [r3, #8]
 8002ca4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8002ca6:	4b27      	ldr	r3, [pc, #156]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002ca8:	4a27      	ldr	r2, [pc, #156]	; (8002d48 <_ZL12MX_ADC1_Initv+0xb4>)
 8002caa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8002cac:	4b25      	ldr	r3, [pc, #148]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002cae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002cb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002cb4:	4b23      	ldr	r3, [pc, #140]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002cba:	4b22      	ldr	r3, [pc, #136]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002cc0:	4b20      	ldr	r3, [pc, #128]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002cc6:	4b1f      	ldr	r3, [pc, #124]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002cc8:	2200      	movs	r2, #0
 8002cca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8002cce:	4b1d      	ldr	r3, [pc, #116]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002cd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002cd4:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T8_TRGO;
 8002cd6:	4b1b      	ldr	r3, [pc, #108]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002cd8:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 8002cdc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002cde:	4b19      	ldr	r3, [pc, #100]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8002ce4:	4b17      	ldr	r3, [pc, #92]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002ce6:	2201      	movs	r2, #1
 8002ce8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8002cea:	4b16      	ldr	r3, [pc, #88]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002cf2:	4b14      	ldr	r3, [pc, #80]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002cf8:	4812      	ldr	r0, [pc, #72]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002cfa:	f004 fb3f 	bl	800737c <HAL_ADC_Init>
 8002cfe:	4603      	mov	r3, r0
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	bf14      	ite	ne
 8002d04:	2301      	movne	r3, #1
 8002d06:	2300      	moveq	r3, #0
 8002d08:	b2db      	uxtb	r3, r3
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d001      	beq.n	8002d12 <_ZL12MX_ADC1_Initv+0x7e>
  {
    Error_Handler();
 8002d0e:	f003 f815 	bl	8005d3c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8002d12:	230c      	movs	r3, #12
 8002d14:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002d16:	2301      	movs	r3, #1
 8002d18:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002d1e:	463b      	mov	r3, r7
 8002d20:	4619      	mov	r1, r3
 8002d22:	4808      	ldr	r0, [pc, #32]	; (8002d44 <_ZL12MX_ADC1_Initv+0xb0>)
 8002d24:	f004 fda2 	bl	800786c <HAL_ADC_ConfigChannel>
 8002d28:	4603      	mov	r3, r0
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	bf14      	ite	ne
 8002d2e:	2301      	movne	r3, #1
 8002d30:	2300      	moveq	r3, #0
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d001      	beq.n	8002d3c <_ZL12MX_ADC1_Initv+0xa8>
  {
    Error_Handler();
 8002d38:	f003 f800 	bl	8005d3c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002d3c:	bf00      	nop
 8002d3e:	3710      	adds	r7, #16
 8002d40:	46bd      	mov	sp, r7
 8002d42:	bd80      	pop	{r7, pc}
 8002d44:	2000022c 	.word	0x2000022c
 8002d48:	40012000 	.word	0x40012000

08002d4c <_ZL11MX_DAC_Initv>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002d52:	463b      	mov	r3, r7
 8002d54:	2200      	movs	r2, #0
 8002d56:	601a      	str	r2, [r3, #0]
 8002d58:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8002d5a:	4b14      	ldr	r3, [pc, #80]	; (8002dac <_ZL11MX_DAC_Initv+0x60>)
 8002d5c:	4a14      	ldr	r2, [pc, #80]	; (8002db0 <_ZL11MX_DAC_Initv+0x64>)
 8002d5e:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8002d60:	4812      	ldr	r0, [pc, #72]	; (8002dac <_ZL11MX_DAC_Initv+0x60>)
 8002d62:	f005 f91f 	bl	8007fa4 <HAL_DAC_Init>
 8002d66:	4603      	mov	r3, r0
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	bf14      	ite	ne
 8002d6c:	2301      	movne	r3, #1
 8002d6e:	2300      	moveq	r3, #0
 8002d70:	b2db      	uxtb	r3, r3
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <_ZL11MX_DAC_Initv+0x2e>
  {
    Error_Handler();
 8002d76:	f002 ffe1 	bl	8005d3c <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 8002d7a:	230c      	movs	r3, #12
 8002d7c:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002d82:	463b      	mov	r3, r7
 8002d84:	2200      	movs	r2, #0
 8002d86:	4619      	mov	r1, r3
 8002d88:	4808      	ldr	r0, [pc, #32]	; (8002dac <_ZL11MX_DAC_Initv+0x60>)
 8002d8a:	f005 fa6d 	bl	8008268 <HAL_DAC_ConfigChannel>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	bf14      	ite	ne
 8002d94:	2301      	movne	r3, #1
 8002d96:	2300      	moveq	r3, #0
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d001      	beq.n	8002da2 <_ZL11MX_DAC_Initv+0x56>
  {
    Error_Handler();
 8002d9e:	f002 ffcd 	bl	8005d3c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8002da2:	bf00      	nop
 8002da4:	3708      	adds	r7, #8
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	200002d4 	.word	0x200002d4
 8002db0:	40007400 	.word	0x40007400

08002db4 <_ZL12MX_I2C1_Initv>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002db8:	4b15      	ldr	r3, [pc, #84]	; (8002e10 <_ZL12MX_I2C1_Initv+0x5c>)
 8002dba:	4a16      	ldr	r2, [pc, #88]	; (8002e14 <_ZL12MX_I2C1_Initv+0x60>)
 8002dbc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002dbe:	4b14      	ldr	r3, [pc, #80]	; (8002e10 <_ZL12MX_I2C1_Initv+0x5c>)
 8002dc0:	4a15      	ldr	r2, [pc, #84]	; (8002e18 <_ZL12MX_I2C1_Initv+0x64>)
 8002dc2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002dc4:	4b12      	ldr	r3, [pc, #72]	; (8002e10 <_ZL12MX_I2C1_Initv+0x5c>)
 8002dc6:	2200      	movs	r2, #0
 8002dc8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002dca:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <_ZL12MX_I2C1_Initv+0x5c>)
 8002dcc:	2200      	movs	r2, #0
 8002dce:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <_ZL12MX_I2C1_Initv+0x5c>)
 8002dd2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002dd6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dd8:	4b0d      	ldr	r3, [pc, #52]	; (8002e10 <_ZL12MX_I2C1_Initv+0x5c>)
 8002dda:	2200      	movs	r2, #0
 8002ddc:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002dde:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <_ZL12MX_I2C1_Initv+0x5c>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002de4:	4b0a      	ldr	r3, [pc, #40]	; (8002e10 <_ZL12MX_I2C1_Initv+0x5c>)
 8002de6:	2200      	movs	r2, #0
 8002de8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dea:	4b09      	ldr	r3, [pc, #36]	; (8002e10 <_ZL12MX_I2C1_Initv+0x5c>)
 8002dec:	2200      	movs	r2, #0
 8002dee:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002df0:	4807      	ldr	r0, [pc, #28]	; (8002e10 <_ZL12MX_I2C1_Initv+0x5c>)
 8002df2:	f006 fa67 	bl	80092c4 <HAL_I2C_Init>
 8002df6:	4603      	mov	r3, r0
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	bf14      	ite	ne
 8002dfc:	2301      	movne	r3, #1
 8002dfe:	2300      	moveq	r3, #0
 8002e00:	b2db      	uxtb	r3, r3
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d001      	beq.n	8002e0a <_ZL12MX_I2C1_Initv+0x56>
  {
    Error_Handler();
 8002e06:	f002 ff99 	bl	8005d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002e0a:	bf00      	nop
 8002e0c:	bd80      	pop	{r7, pc}
 8002e0e:	bf00      	nop
 8002e10:	20000348 	.word	0x20000348
 8002e14:	40005400 	.word	0x40005400
 8002e18:	00061a80 	.word	0x00061a80

08002e1c <_ZL12MX_I2C2_Initv>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8002e1c:	b580      	push	{r7, lr}
 8002e1e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8002e20:	4b15      	ldr	r3, [pc, #84]	; (8002e78 <_ZL12MX_I2C2_Initv+0x5c>)
 8002e22:	4a16      	ldr	r2, [pc, #88]	; (8002e7c <_ZL12MX_I2C2_Initv+0x60>)
 8002e24:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 400000;
 8002e26:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <_ZL12MX_I2C2_Initv+0x5c>)
 8002e28:	4a15      	ldr	r2, [pc, #84]	; (8002e80 <_ZL12MX_I2C2_Initv+0x64>)
 8002e2a:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e2c:	4b12      	ldr	r3, [pc, #72]	; (8002e78 <_ZL12MX_I2C2_Initv+0x5c>)
 8002e2e:	2200      	movs	r2, #0
 8002e30:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8002e32:	4b11      	ldr	r3, [pc, #68]	; (8002e78 <_ZL12MX_I2C2_Initv+0x5c>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002e38:	4b0f      	ldr	r3, [pc, #60]	; (8002e78 <_ZL12MX_I2C2_Initv+0x5c>)
 8002e3a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002e3e:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002e40:	4b0d      	ldr	r3, [pc, #52]	; (8002e78 <_ZL12MX_I2C2_Initv+0x5c>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8002e46:	4b0c      	ldr	r3, [pc, #48]	; (8002e78 <_ZL12MX_I2C2_Initv+0x5c>)
 8002e48:	2200      	movs	r2, #0
 8002e4a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002e4c:	4b0a      	ldr	r3, [pc, #40]	; (8002e78 <_ZL12MX_I2C2_Initv+0x5c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002e52:	4b09      	ldr	r3, [pc, #36]	; (8002e78 <_ZL12MX_I2C2_Initv+0x5c>)
 8002e54:	2200      	movs	r2, #0
 8002e56:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8002e58:	4807      	ldr	r0, [pc, #28]	; (8002e78 <_ZL12MX_I2C2_Initv+0x5c>)
 8002e5a:	f006 fa33 	bl	80092c4 <HAL_I2C_Init>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	bf14      	ite	ne
 8002e64:	2301      	movne	r3, #1
 8002e66:	2300      	moveq	r3, #0
 8002e68:	b2db      	uxtb	r3, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d001      	beq.n	8002e72 <_ZL12MX_I2C2_Initv+0x56>
  {
    Error_Handler();
 8002e6e:	f002 ff65 	bl	8005d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	2000039c 	.word	0x2000039c
 8002e7c:	40005800 	.word	0x40005800
 8002e80:	00061a80 	.word	0x00061a80

08002e84 <_ZL12MX_I2C3_Initv>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8002e88:	4b15      	ldr	r3, [pc, #84]	; (8002ee0 <_ZL12MX_I2C3_Initv+0x5c>)
 8002e8a:	4a16      	ldr	r2, [pc, #88]	; (8002ee4 <_ZL12MX_I2C3_Initv+0x60>)
 8002e8c:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8002e8e:	4b14      	ldr	r3, [pc, #80]	; (8002ee0 <_ZL12MX_I2C3_Initv+0x5c>)
 8002e90:	4a15      	ldr	r2, [pc, #84]	; (8002ee8 <_ZL12MX_I2C3_Initv+0x64>)
 8002e92:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002e94:	4b12      	ldr	r3, [pc, #72]	; (8002ee0 <_ZL12MX_I2C3_Initv+0x5c>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8002e9a:	4b11      	ldr	r3, [pc, #68]	; (8002ee0 <_ZL12MX_I2C3_Initv+0x5c>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ea0:	4b0f      	ldr	r3, [pc, #60]	; (8002ee0 <_ZL12MX_I2C3_Initv+0x5c>)
 8002ea2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8002ea6:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002ea8:	4b0d      	ldr	r3, [pc, #52]	; (8002ee0 <_ZL12MX_I2C3_Initv+0x5c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8002eae:	4b0c      	ldr	r3, [pc, #48]	; (8002ee0 <_ZL12MX_I2C3_Initv+0x5c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002eb4:	4b0a      	ldr	r3, [pc, #40]	; (8002ee0 <_ZL12MX_I2C3_Initv+0x5c>)
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002eba:	4b09      	ldr	r3, [pc, #36]	; (8002ee0 <_ZL12MX_I2C3_Initv+0x5c>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8002ec0:	4807      	ldr	r0, [pc, #28]	; (8002ee0 <_ZL12MX_I2C3_Initv+0x5c>)
 8002ec2:	f006 f9ff 	bl	80092c4 <HAL_I2C_Init>
 8002ec6:	4603      	mov	r3, r0
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	bf14      	ite	ne
 8002ecc:	2301      	movne	r3, #1
 8002ece:	2300      	moveq	r3, #0
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d001      	beq.n	8002eda <_ZL12MX_I2C3_Initv+0x56>
  {
    Error_Handler();
 8002ed6:	f002 ff31 	bl	8005d3c <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8002eda:	bf00      	nop
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	200003f0 	.word	0x200003f0
 8002ee4:	40005c00 	.word	0x40005c00
 8002ee8:	000186a0 	.word	0x000186a0

08002eec <_ZL12MX_TIM2_Initv>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b08e      	sub	sp, #56	; 0x38
 8002ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002ef2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	601a      	str	r2, [r3, #0]
 8002efa:	605a      	str	r2, [r3, #4]
 8002efc:	609a      	str	r2, [r3, #8]
 8002efe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002f00:	f107 0320 	add.w	r3, r7, #32
 8002f04:	2200      	movs	r2, #0
 8002f06:	601a      	str	r2, [r3, #0]
 8002f08:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	2200      	movs	r2, #0
 8002f0e:	601a      	str	r2, [r3, #0]
 8002f10:	605a      	str	r2, [r3, #4]
 8002f12:	609a      	str	r2, [r3, #8]
 8002f14:	60da      	str	r2, [r3, #12]
 8002f16:	611a      	str	r2, [r3, #16]
 8002f18:	615a      	str	r2, [r3, #20]
 8002f1a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002f1c:	4b3a      	ldr	r3, [pc, #232]	; (8003008 <_ZL12MX_TIM2_Initv+0x11c>)
 8002f1e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002f22:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 900-1;
 8002f24:	4b38      	ldr	r3, [pc, #224]	; (8003008 <_ZL12MX_TIM2_Initv+0x11c>)
 8002f26:	f240 3283 	movw	r2, #899	; 0x383
 8002f2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f2c:	4b36      	ldr	r3, [pc, #216]	; (8003008 <_ZL12MX_TIM2_Initv+0x11c>)
 8002f2e:	2200      	movs	r2, #0
 8002f30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 50000;
 8002f32:	4b35      	ldr	r3, [pc, #212]	; (8003008 <_ZL12MX_TIM2_Initv+0x11c>)
 8002f34:	f24c 3250 	movw	r2, #50000	; 0xc350
 8002f38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002f3a:	4b33      	ldr	r3, [pc, #204]	; (8003008 <_ZL12MX_TIM2_Initv+0x11c>)
 8002f3c:	2200      	movs	r2, #0
 8002f3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8002f40:	4b31      	ldr	r3, [pc, #196]	; (8003008 <_ZL12MX_TIM2_Initv+0x11c>)
 8002f42:	2280      	movs	r2, #128	; 0x80
 8002f44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002f46:	4830      	ldr	r0, [pc, #192]	; (8003008 <_ZL12MX_TIM2_Initv+0x11c>)
 8002f48:	f009 fe7c 	bl	800cc44 <HAL_TIM_Base_Init>
 8002f4c:	4603      	mov	r3, r0
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	bf14      	ite	ne
 8002f52:	2301      	movne	r3, #1
 8002f54:	2300      	moveq	r3, #0
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d001      	beq.n	8002f60 <_ZL12MX_TIM2_Initv+0x74>
  {
    Error_Handler();
 8002f5c:	f002 feee 	bl	8005d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002f60:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002f66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002f6a:	4619      	mov	r1, r3
 8002f6c:	4826      	ldr	r0, [pc, #152]	; (8003008 <_ZL12MX_TIM2_Initv+0x11c>)
 8002f6e:	f00a fa65 	bl	800d43c <HAL_TIM_ConfigClockSource>
 8002f72:	4603      	mov	r3, r0
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	bf14      	ite	ne
 8002f78:	2301      	movne	r3, #1
 8002f7a:	2300      	moveq	r3, #0
 8002f7c:	b2db      	uxtb	r3, r3
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d001      	beq.n	8002f86 <_ZL12MX_TIM2_Initv+0x9a>
  {
    Error_Handler();
 8002f82:	f002 fedb 	bl	8005d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002f86:	4820      	ldr	r0, [pc, #128]	; (8003008 <_ZL12MX_TIM2_Initv+0x11c>)
 8002f88:	f009 ff84 	bl	800ce94 <HAL_TIM_PWM_Init>
 8002f8c:	4603      	mov	r3, r0
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	bf14      	ite	ne
 8002f92:	2301      	movne	r3, #1
 8002f94:	2300      	moveq	r3, #0
 8002f96:	b2db      	uxtb	r3, r3
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d001      	beq.n	8002fa0 <_ZL12MX_TIM2_Initv+0xb4>
  {
    Error_Handler();
 8002f9c:	f002 fece 	bl	8005d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fa4:	2300      	movs	r3, #0
 8002fa6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002fa8:	f107 0320 	add.w	r3, r7, #32
 8002fac:	4619      	mov	r1, r3
 8002fae:	4816      	ldr	r0, [pc, #88]	; (8003008 <_ZL12MX_TIM2_Initv+0x11c>)
 8002fb0:	f00a fe50 	bl	800dc54 <HAL_TIMEx_MasterConfigSynchronization>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	bf14      	ite	ne
 8002fba:	2301      	movne	r3, #1
 8002fbc:	2300      	moveq	r3, #0
 8002fbe:	b2db      	uxtb	r3, r3
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d001      	beq.n	8002fc8 <_ZL12MX_TIM2_Initv+0xdc>
  {
    Error_Handler();
 8002fc4:	f002 feba 	bl	8005d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002fc8:	2360      	movs	r3, #96	; 0x60
 8002fca:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 12500;
 8002fcc:	f243 03d4 	movw	r3, #12500	; 0x30d4
 8002fd0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002fda:	1d3b      	adds	r3, r7, #4
 8002fdc:	2200      	movs	r2, #0
 8002fde:	4619      	mov	r1, r3
 8002fe0:	4809      	ldr	r0, [pc, #36]	; (8003008 <_ZL12MX_TIM2_Initv+0x11c>)
 8002fe2:	f00a f969 	bl	800d2b8 <HAL_TIM_PWM_ConfigChannel>
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	bf14      	ite	ne
 8002fec:	2301      	movne	r3, #1
 8002fee:	2300      	moveq	r3, #0
 8002ff0:	b2db      	uxtb	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d001      	beq.n	8002ffa <_ZL12MX_TIM2_Initv+0x10e>
  {
    Error_Handler();
 8002ff6:	f002 fea1 	bl	8005d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002ffa:	4803      	ldr	r0, [pc, #12]	; (8003008 <_ZL12MX_TIM2_Initv+0x11c>)
 8002ffc:	f003 fefc 	bl	8006df8 <HAL_TIM_MspPostInit>

}
 8003000:	bf00      	nop
 8003002:	3738      	adds	r7, #56	; 0x38
 8003004:	46bd      	mov	sp, r7
 8003006:	bd80      	pop	{r7, pc}
 8003008:	20000444 	.word	0x20000444

0800300c <_ZL12MX_TIM4_Initv>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800300c:	b580      	push	{r7, lr}
 800300e:	b086      	sub	sp, #24
 8003010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003012:	f107 0308 	add.w	r3, r7, #8
 8003016:	2200      	movs	r2, #0
 8003018:	601a      	str	r2, [r3, #0]
 800301a:	605a      	str	r2, [r3, #4]
 800301c:	609a      	str	r2, [r3, #8]
 800301e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003020:	463b      	mov	r3, r7
 8003022:	2200      	movs	r2, #0
 8003024:	601a      	str	r2, [r3, #0]
 8003026:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8003028:	4b24      	ldr	r3, [pc, #144]	; (80030bc <_ZL12MX_TIM4_Initv+0xb0>)
 800302a:	4a25      	ldr	r2, [pc, #148]	; (80030c0 <_ZL12MX_TIM4_Initv+0xb4>)
 800302c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 800302e:	4b23      	ldr	r3, [pc, #140]	; (80030bc <_ZL12MX_TIM4_Initv+0xb0>)
 8003030:	2259      	movs	r2, #89	; 0x59
 8003032:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003034:	4b21      	ldr	r3, [pc, #132]	; (80030bc <_ZL12MX_TIM4_Initv+0xb0>)
 8003036:	2200      	movs	r2, #0
 8003038:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 100-1;
 800303a:	4b20      	ldr	r3, [pc, #128]	; (80030bc <_ZL12MX_TIM4_Initv+0xb0>)
 800303c:	2263      	movs	r2, #99	; 0x63
 800303e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003040:	4b1e      	ldr	r3, [pc, #120]	; (80030bc <_ZL12MX_TIM4_Initv+0xb0>)
 8003042:	2200      	movs	r2, #0
 8003044:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003046:	4b1d      	ldr	r3, [pc, #116]	; (80030bc <_ZL12MX_TIM4_Initv+0xb0>)
 8003048:	2200      	movs	r2, #0
 800304a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800304c:	481b      	ldr	r0, [pc, #108]	; (80030bc <_ZL12MX_TIM4_Initv+0xb0>)
 800304e:	f009 fdf9 	bl	800cc44 <HAL_TIM_Base_Init>
 8003052:	4603      	mov	r3, r0
 8003054:	2b00      	cmp	r3, #0
 8003056:	bf14      	ite	ne
 8003058:	2301      	movne	r3, #1
 800305a:	2300      	moveq	r3, #0
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b00      	cmp	r3, #0
 8003060:	d001      	beq.n	8003066 <_ZL12MX_TIM4_Initv+0x5a>
  {
    Error_Handler();
 8003062:	f002 fe6b 	bl	8005d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003066:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800306a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800306c:	f107 0308 	add.w	r3, r7, #8
 8003070:	4619      	mov	r1, r3
 8003072:	4812      	ldr	r0, [pc, #72]	; (80030bc <_ZL12MX_TIM4_Initv+0xb0>)
 8003074:	f00a f9e2 	bl	800d43c <HAL_TIM_ConfigClockSource>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	bf14      	ite	ne
 800307e:	2301      	movne	r3, #1
 8003080:	2300      	moveq	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	d001      	beq.n	800308c <_ZL12MX_TIM4_Initv+0x80>
  {
    Error_Handler();
 8003088:	f002 fe58 	bl	8005d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800308c:	2320      	movs	r3, #32
 800308e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003090:	2300      	movs	r3, #0
 8003092:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8003094:	463b      	mov	r3, r7
 8003096:	4619      	mov	r1, r3
 8003098:	4808      	ldr	r0, [pc, #32]	; (80030bc <_ZL12MX_TIM4_Initv+0xb0>)
 800309a:	f00a fddb 	bl	800dc54 <HAL_TIMEx_MasterConfigSynchronization>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	bf14      	ite	ne
 80030a4:	2301      	movne	r3, #1
 80030a6:	2300      	moveq	r3, #0
 80030a8:	b2db      	uxtb	r3, r3
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <_ZL12MX_TIM4_Initv+0xa6>
  {
    Error_Handler();
 80030ae:	f002 fe45 	bl	8005d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 80030b2:	bf00      	nop
 80030b4:	3718      	adds	r7, #24
 80030b6:	46bd      	mov	sp, r7
 80030b8:	bd80      	pop	{r7, pc}
 80030ba:	bf00      	nop
 80030bc:	2000048c 	.word	0x2000048c
 80030c0:	40000800 	.word	0x40000800

080030c4 <_ZL12MX_TIM7_Initv>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80030ca:	463b      	mov	r3, r7
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 80030d2:	4b19      	ldr	r3, [pc, #100]	; (8003138 <_ZL12MX_TIM7_Initv+0x74>)
 80030d4:	4a19      	ldr	r2, [pc, #100]	; (800313c <_ZL12MX_TIM7_Initv+0x78>)
 80030d6:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 18-1;
 80030d8:	4b17      	ldr	r3, [pc, #92]	; (8003138 <_ZL12MX_TIM7_Initv+0x74>)
 80030da:	2211      	movs	r2, #17
 80030dc:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80030de:	4b16      	ldr	r3, [pc, #88]	; (8003138 <_ZL12MX_TIM7_Initv+0x74>)
 80030e0:	2200      	movs	r2, #0
 80030e2:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 10-1;
 80030e4:	4b14      	ldr	r3, [pc, #80]	; (8003138 <_ZL12MX_TIM7_Initv+0x74>)
 80030e6:	2209      	movs	r2, #9
 80030e8:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ea:	4b13      	ldr	r3, [pc, #76]	; (8003138 <_ZL12MX_TIM7_Initv+0x74>)
 80030ec:	2200      	movs	r2, #0
 80030ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80030f0:	4811      	ldr	r0, [pc, #68]	; (8003138 <_ZL12MX_TIM7_Initv+0x74>)
 80030f2:	f009 fda7 	bl	800cc44 <HAL_TIM_Base_Init>
 80030f6:	4603      	mov	r3, r0
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	bf14      	ite	ne
 80030fc:	2301      	movne	r3, #1
 80030fe:	2300      	moveq	r3, #0
 8003100:	b2db      	uxtb	r3, r3
 8003102:	2b00      	cmp	r3, #0
 8003104:	d001      	beq.n	800310a <_ZL12MX_TIM7_Initv+0x46>
  {
    Error_Handler();
 8003106:	f002 fe19 	bl	8005d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800310a:	2300      	movs	r3, #0
 800310c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800310e:	2300      	movs	r3, #0
 8003110:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003112:	463b      	mov	r3, r7
 8003114:	4619      	mov	r1, r3
 8003116:	4808      	ldr	r0, [pc, #32]	; (8003138 <_ZL12MX_TIM7_Initv+0x74>)
 8003118:	f00a fd9c 	bl	800dc54 <HAL_TIMEx_MasterConfigSynchronization>
 800311c:	4603      	mov	r3, r0
 800311e:	2b00      	cmp	r3, #0
 8003120:	bf14      	ite	ne
 8003122:	2301      	movne	r3, #1
 8003124:	2300      	moveq	r3, #0
 8003126:	b2db      	uxtb	r3, r3
 8003128:	2b00      	cmp	r3, #0
 800312a:	d001      	beq.n	8003130 <_ZL12MX_TIM7_Initv+0x6c>
  {
    Error_Handler();
 800312c:	f002 fe06 	bl	8005d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8003130:	bf00      	nop
 8003132:	3708      	adds	r7, #8
 8003134:	46bd      	mov	sp, r7
 8003136:	bd80      	pop	{r7, pc}
 8003138:	200004d4 	.word	0x200004d4
 800313c:	40001400 	.word	0x40001400

08003140 <_ZL12MX_TIM8_Initv>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b096      	sub	sp, #88	; 0x58
 8003144:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003146:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]
 800314e:	605a      	str	r2, [r3, #4]
 8003150:	609a      	str	r2, [r3, #8]
 8003152:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003154:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8003158:	2200      	movs	r2, #0
 800315a:	601a      	str	r2, [r3, #0]
 800315c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800315e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
 8003166:	605a      	str	r2, [r3, #4]
 8003168:	609a      	str	r2, [r3, #8]
 800316a:	60da      	str	r2, [r3, #12]
 800316c:	611a      	str	r2, [r3, #16]
 800316e:	615a      	str	r2, [r3, #20]
 8003170:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003172:	1d3b      	adds	r3, r7, #4
 8003174:	2220      	movs	r2, #32
 8003176:	2100      	movs	r1, #0
 8003178:	4618      	mov	r0, r3
 800317a:	f012 f847 	bl	801520c <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800317e:	4b4a      	ldr	r3, [pc, #296]	; (80032a8 <_ZL12MX_TIM8_Initv+0x168>)
 8003180:	4a4a      	ldr	r2, [pc, #296]	; (80032ac <_ZL12MX_TIM8_Initv+0x16c>)
 8003182:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 180-1;
 8003184:	4b48      	ldr	r3, [pc, #288]	; (80032a8 <_ZL12MX_TIM8_Initv+0x168>)
 8003186:	22b3      	movs	r2, #179	; 0xb3
 8003188:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800318a:	4b47      	ldr	r3, [pc, #284]	; (80032a8 <_ZL12MX_TIM8_Initv+0x168>)
 800318c:	2200      	movs	r2, #0
 800318e:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 20-1;
 8003190:	4b45      	ldr	r3, [pc, #276]	; (80032a8 <_ZL12MX_TIM8_Initv+0x168>)
 8003192:	2213      	movs	r2, #19
 8003194:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003196:	4b44      	ldr	r3, [pc, #272]	; (80032a8 <_ZL12MX_TIM8_Initv+0x168>)
 8003198:	2200      	movs	r2, #0
 800319a:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800319c:	4b42      	ldr	r3, [pc, #264]	; (80032a8 <_ZL12MX_TIM8_Initv+0x168>)
 800319e:	2200      	movs	r2, #0
 80031a0:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80031a2:	4b41      	ldr	r3, [pc, #260]	; (80032a8 <_ZL12MX_TIM8_Initv+0x168>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80031a8:	483f      	ldr	r0, [pc, #252]	; (80032a8 <_ZL12MX_TIM8_Initv+0x168>)
 80031aa:	f009 fd4b 	bl	800cc44 <HAL_TIM_Base_Init>
 80031ae:	4603      	mov	r3, r0
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	bf14      	ite	ne
 80031b4:	2301      	movne	r3, #1
 80031b6:	2300      	moveq	r3, #0
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <_ZL12MX_TIM8_Initv+0x82>
  {
    Error_Handler();
 80031be:	f002 fdbd 	bl	8005d3c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80031c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80031c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80031c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80031cc:	4619      	mov	r1, r3
 80031ce:	4836      	ldr	r0, [pc, #216]	; (80032a8 <_ZL12MX_TIM8_Initv+0x168>)
 80031d0:	f00a f934 	bl	800d43c <HAL_TIM_ConfigClockSource>
 80031d4:	4603      	mov	r3, r0
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	bf14      	ite	ne
 80031da:	2301      	movne	r3, #1
 80031dc:	2300      	moveq	r3, #0
 80031de:	b2db      	uxtb	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d001      	beq.n	80031e8 <_ZL12MX_TIM8_Initv+0xa8>
  {
    Error_Handler();
 80031e4:	f002 fdaa 	bl	8005d3c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80031e8:	482f      	ldr	r0, [pc, #188]	; (80032a8 <_ZL12MX_TIM8_Initv+0x168>)
 80031ea:	f009 fe53 	bl	800ce94 <HAL_TIM_PWM_Init>
 80031ee:	4603      	mov	r3, r0
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	bf14      	ite	ne
 80031f4:	2301      	movne	r3, #1
 80031f6:	2300      	moveq	r3, #0
 80031f8:	b2db      	uxtb	r3, r3
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <_ZL12MX_TIM8_Initv+0xc2>
  {
    Error_Handler();
 80031fe:	f002 fd9d 	bl	8005d3c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003202:	2320      	movs	r3, #32
 8003204:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003206:	2300      	movs	r3, #0
 8003208:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800320a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800320e:	4619      	mov	r1, r3
 8003210:	4825      	ldr	r0, [pc, #148]	; (80032a8 <_ZL12MX_TIM8_Initv+0x168>)
 8003212:	f00a fd1f 	bl	800dc54 <HAL_TIMEx_MasterConfigSynchronization>
 8003216:	4603      	mov	r3, r0
 8003218:	2b00      	cmp	r3, #0
 800321a:	bf14      	ite	ne
 800321c:	2301      	movne	r3, #1
 800321e:	2300      	moveq	r3, #0
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b00      	cmp	r3, #0
 8003224:	d001      	beq.n	800322a <_ZL12MX_TIM8_Initv+0xea>
  {
    Error_Handler();
 8003226:	f002 fd89 	bl	8005d3c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800322a:	2360      	movs	r3, #96	; 0x60
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800322e:	2300      	movs	r3, #0
 8003230:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8003232:	2300      	movs	r3, #0
 8003234:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003236:	2300      	movs	r3, #0
 8003238:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800323a:	2300      	movs	r3, #0
 800323c:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800323e:	2300      	movs	r3, #0
 8003240:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8003242:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003246:	220c      	movs	r2, #12
 8003248:	4619      	mov	r1, r3
 800324a:	4817      	ldr	r0, [pc, #92]	; (80032a8 <_ZL12MX_TIM8_Initv+0x168>)
 800324c:	f00a f834 	bl	800d2b8 <HAL_TIM_PWM_ConfigChannel>
 8003250:	4603      	mov	r3, r0
 8003252:	2b00      	cmp	r3, #0
 8003254:	bf14      	ite	ne
 8003256:	2301      	movne	r3, #1
 8003258:	2300      	moveq	r3, #0
 800325a:	b2db      	uxtb	r3, r3
 800325c:	2b00      	cmp	r3, #0
 800325e:	d001      	beq.n	8003264 <_ZL12MX_TIM8_Initv+0x124>
  {
    Error_Handler();
 8003260:	f002 fd6c 	bl	8005d3c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8003264:	2300      	movs	r3, #0
 8003266:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8003268:	2300      	movs	r3, #0
 800326a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8003270:	2300      	movs	r3, #0
 8003272:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8003274:	2300      	movs	r3, #0
 8003276:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8003278:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800327c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800327e:	2300      	movs	r3, #0
 8003280:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8003282:	1d3b      	adds	r3, r7, #4
 8003284:	4619      	mov	r1, r3
 8003286:	4808      	ldr	r0, [pc, #32]	; (80032a8 <_ZL12MX_TIM8_Initv+0x168>)
 8003288:	f00a fd60 	bl	800dd4c <HAL_TIMEx_ConfigBreakDeadTime>
 800328c:	4603      	mov	r3, r0
 800328e:	2b00      	cmp	r3, #0
 8003290:	bf14      	ite	ne
 8003292:	2301      	movne	r3, #1
 8003294:	2300      	moveq	r3, #0
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b00      	cmp	r3, #0
 800329a:	d001      	beq.n	80032a0 <_ZL12MX_TIM8_Initv+0x160>
  {
    Error_Handler();
 800329c:	f002 fd4e 	bl	8005d3c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 80032a0:	bf00      	nop
 80032a2:	3758      	adds	r7, #88	; 0x58
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	2000051c 	.word	0x2000051c
 80032ac:	40010400 	.word	0x40010400

080032b0 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80032b4:	4b13      	ldr	r3, [pc, #76]	; (8003304 <_ZL19MX_USART2_UART_Initv+0x54>)
 80032b6:	4a14      	ldr	r2, [pc, #80]	; (8003308 <_ZL19MX_USART2_UART_Initv+0x58>)
 80032b8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80032ba:	4b12      	ldr	r3, [pc, #72]	; (8003304 <_ZL19MX_USART2_UART_Initv+0x54>)
 80032bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80032c0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80032c2:	4b10      	ldr	r3, [pc, #64]	; (8003304 <_ZL19MX_USART2_UART_Initv+0x54>)
 80032c4:	2200      	movs	r2, #0
 80032c6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80032c8:	4b0e      	ldr	r3, [pc, #56]	; (8003304 <_ZL19MX_USART2_UART_Initv+0x54>)
 80032ca:	2200      	movs	r2, #0
 80032cc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80032ce:	4b0d      	ldr	r3, [pc, #52]	; (8003304 <_ZL19MX_USART2_UART_Initv+0x54>)
 80032d0:	2200      	movs	r2, #0
 80032d2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80032d4:	4b0b      	ldr	r3, [pc, #44]	; (8003304 <_ZL19MX_USART2_UART_Initv+0x54>)
 80032d6:	220c      	movs	r2, #12
 80032d8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80032da:	4b0a      	ldr	r3, [pc, #40]	; (8003304 <_ZL19MX_USART2_UART_Initv+0x54>)
 80032dc:	2200      	movs	r2, #0
 80032de:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80032e0:	4b08      	ldr	r3, [pc, #32]	; (8003304 <_ZL19MX_USART2_UART_Initv+0x54>)
 80032e2:	2200      	movs	r2, #0
 80032e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80032e6:	4807      	ldr	r0, [pc, #28]	; (8003304 <_ZL19MX_USART2_UART_Initv+0x54>)
 80032e8:	f00a fd96 	bl	800de18 <HAL_UART_Init>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	bf14      	ite	ne
 80032f2:	2301      	movne	r3, #1
 80032f4:	2300      	moveq	r3, #0
 80032f6:	b2db      	uxtb	r3, r3
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d001      	beq.n	8003300 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80032fc:	f002 fd1e 	bl	8005d3c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}
 8003304:	200005c4 	.word	0x200005c4
 8003308:	40004400 	.word	0x40004400

0800330c <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]
 8003316:	4b1b      	ldr	r3, [pc, #108]	; (8003384 <_ZL11MX_DMA_Initv+0x78>)
 8003318:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800331a:	4a1a      	ldr	r2, [pc, #104]	; (8003384 <_ZL11MX_DMA_Initv+0x78>)
 800331c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003320:	6313      	str	r3, [r2, #48]	; 0x30
 8003322:	4b18      	ldr	r3, [pc, #96]	; (8003384 <_ZL11MX_DMA_Initv+0x78>)
 8003324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003326:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800332a:	607b      	str	r3, [r7, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	603b      	str	r3, [r7, #0]
 8003332:	4b14      	ldr	r3, [pc, #80]	; (8003384 <_ZL11MX_DMA_Initv+0x78>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a13      	ldr	r2, [pc, #76]	; (8003384 <_ZL11MX_DMA_Initv+0x78>)
 8003338:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b11      	ldr	r3, [pc, #68]	; (8003384 <_ZL11MX_DMA_Initv+0x78>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800334a:	2200      	movs	r2, #0
 800334c:	2105      	movs	r1, #5
 800334e:	2010      	movs	r0, #16
 8003350:	f004 fdfe 	bl	8007f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8003354:	2010      	movs	r0, #16
 8003356:	f004 fe17 	bl	8007f88 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 800335a:	2200      	movs	r2, #0
 800335c:	2105      	movs	r1, #5
 800335e:	2011      	movs	r0, #17
 8003360:	f004 fdf6 	bl	8007f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8003364:	2011      	movs	r0, #17
 8003366:	f004 fe0f 	bl	8007f88 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 800336a:	2200      	movs	r2, #0
 800336c:	2105      	movs	r1, #5
 800336e:	203c      	movs	r0, #60	; 0x3c
 8003370:	f004 fdee 	bl	8007f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8003374:	203c      	movs	r0, #60	; 0x3c
 8003376:	f004 fe07 	bl	8007f88 <HAL_NVIC_EnableIRQ>

}
 800337a:	bf00      	nop
 800337c:	3708      	adds	r7, #8
 800337e:	46bd      	mov	sp, r7
 8003380:	bd80      	pop	{r7, pc}
 8003382:	bf00      	nop
 8003384:	40023800 	.word	0x40023800

08003388 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b08a      	sub	sp, #40	; 0x28
 800338c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800338e:	f107 0314 	add.w	r3, r7, #20
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	60da      	str	r2, [r3, #12]
 800339c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800339e:	2300      	movs	r3, #0
 80033a0:	613b      	str	r3, [r7, #16]
 80033a2:	4b73      	ldr	r3, [pc, #460]	; (8003570 <_ZL12MX_GPIO_Initv+0x1e8>)
 80033a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033a6:	4a72      	ldr	r2, [pc, #456]	; (8003570 <_ZL12MX_GPIO_Initv+0x1e8>)
 80033a8:	f043 0304 	orr.w	r3, r3, #4
 80033ac:	6313      	str	r3, [r2, #48]	; 0x30
 80033ae:	4b70      	ldr	r3, [pc, #448]	; (8003570 <_ZL12MX_GPIO_Initv+0x1e8>)
 80033b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033b2:	f003 0304 	and.w	r3, r3, #4
 80033b6:	613b      	str	r3, [r7, #16]
 80033b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80033ba:	2300      	movs	r3, #0
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	4b6c      	ldr	r3, [pc, #432]	; (8003570 <_ZL12MX_GPIO_Initv+0x1e8>)
 80033c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033c2:	4a6b      	ldr	r2, [pc, #428]	; (8003570 <_ZL12MX_GPIO_Initv+0x1e8>)
 80033c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80033c8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ca:	4b69      	ldr	r3, [pc, #420]	; (8003570 <_ZL12MX_GPIO_Initv+0x1e8>)
 80033cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033d2:	60fb      	str	r3, [r7, #12]
 80033d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80033d6:	2300      	movs	r3, #0
 80033d8:	60bb      	str	r3, [r7, #8]
 80033da:	4b65      	ldr	r3, [pc, #404]	; (8003570 <_ZL12MX_GPIO_Initv+0x1e8>)
 80033dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033de:	4a64      	ldr	r2, [pc, #400]	; (8003570 <_ZL12MX_GPIO_Initv+0x1e8>)
 80033e0:	f043 0301 	orr.w	r3, r3, #1
 80033e4:	6313      	str	r3, [r2, #48]	; 0x30
 80033e6:	4b62      	ldr	r3, [pc, #392]	; (8003570 <_ZL12MX_GPIO_Initv+0x1e8>)
 80033e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ea:	f003 0301 	and.w	r3, r3, #1
 80033ee:	60bb      	str	r3, [r7, #8]
 80033f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80033f2:	2300      	movs	r3, #0
 80033f4:	607b      	str	r3, [r7, #4]
 80033f6:	4b5e      	ldr	r3, [pc, #376]	; (8003570 <_ZL12MX_GPIO_Initv+0x1e8>)
 80033f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033fa:	4a5d      	ldr	r2, [pc, #372]	; (8003570 <_ZL12MX_GPIO_Initv+0x1e8>)
 80033fc:	f043 0302 	orr.w	r3, r3, #2
 8003400:	6313      	str	r3, [r2, #48]	; 0x30
 8003402:	4b5b      	ldr	r3, [pc, #364]	; (8003570 <_ZL12MX_GPIO_Initv+0x1e8>)
 8003404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	607b      	str	r3, [r7, #4]
 800340c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 800340e:	2200      	movs	r2, #0
 8003410:	2108      	movs	r1, #8
 8003412:	4858      	ldr	r0, [pc, #352]	; (8003574 <_ZL12MX_GPIO_Initv+0x1ec>)
 8003414:	f005 ff0a 	bl	800922c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|interruptLED_Pin|interruptLED2_Pin, GPIO_PIN_RESET);
 8003418:	2200      	movs	r2, #0
 800341a:	f44f 51a1 	mov.w	r1, #5152	; 0x1420
 800341e:	4856      	ldr	r0, [pc, #344]	; (8003578 <_ZL12MX_GPIO_Initv+0x1f0>)
 8003420:	f005 ff04 	bl	800922c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(flashLED_GPIO_Port, flashLED_Pin, GPIO_PIN_RESET);
 8003424:	2200      	movs	r2, #0
 8003426:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800342a:	4854      	ldr	r0, [pc, #336]	; (800357c <_ZL12MX_GPIO_Initv+0x1f4>)
 800342c:	f005 fefe 	bl	800922c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8003430:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003434:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003436:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800343a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800343c:	2300      	movs	r3, #0
 800343e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8003440:	f107 0314 	add.w	r3, r7, #20
 8003444:	4619      	mov	r1, r3
 8003446:	484b      	ldr	r0, [pc, #300]	; (8003574 <_ZL12MX_GPIO_Initv+0x1ec>)
 8003448:	f005 fd44 	bl	8008ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 800344c:	2308      	movs	r3, #8
 800344e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003450:	2301      	movs	r3, #1
 8003452:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003454:	2300      	movs	r3, #0
 8003456:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003458:	2300      	movs	r3, #0
 800345a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800345c:	f107 0314 	add.w	r3, r7, #20
 8003460:	4619      	mov	r1, r3
 8003462:	4844      	ldr	r0, [pc, #272]	; (8003574 <_ZL12MX_GPIO_Initv+0x1ec>)
 8003464:	f005 fd36 	bl	8008ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin interruptLED_Pin interruptLED2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|interruptLED_Pin|interruptLED2_Pin;
 8003468:	f44f 53a1 	mov.w	r3, #5152	; 0x1420
 800346c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800346e:	2301      	movs	r3, #1
 8003470:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003472:	2300      	movs	r3, #0
 8003474:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003476:	2300      	movs	r3, #0
 8003478:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800347a:	f107 0314 	add.w	r3, r7, #20
 800347e:	4619      	mov	r1, r3
 8003480:	483d      	ldr	r0, [pc, #244]	; (8003578 <_ZL12MX_GPIO_Initv+0x1f0>)
 8003482:	f005 fd27 	bl	8008ed4 <HAL_GPIO_Init>

  /*Configure GPIO pins : interruptButton_Pin interruptButton2_Pin */
  GPIO_InitStruct.Pin = interruptButton_Pin|interruptButton2_Pin;
 8003486:	23c0      	movs	r3, #192	; 0xc0
 8003488:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800348a:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 800348e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003490:	2300      	movs	r3, #0
 8003492:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003494:	f107 0314 	add.w	r3, r7, #20
 8003498:	4619      	mov	r1, r3
 800349a:	4837      	ldr	r0, [pc, #220]	; (8003578 <_ZL12MX_GPIO_Initv+0x1f0>)
 800349c:	f005 fd1a 	bl	8008ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : rotation1_1_Pin */
  GPIO_InitStruct.Pin = rotation1_1_Pin;
 80034a0:	2310      	movs	r3, #16
 80034a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80034a4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80034a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034aa:	2300      	movs	r3, #0
 80034ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(rotation1_1_GPIO_Port, &GPIO_InitStruct);
 80034ae:	f107 0314 	add.w	r3, r7, #20
 80034b2:	4619      	mov	r1, r3
 80034b4:	482f      	ldr	r0, [pc, #188]	; (8003574 <_ZL12MX_GPIO_Initv+0x1ec>)
 80034b6:	f005 fd0d 	bl	8008ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : interruptButton3_Pin */
  GPIO_InitStruct.Pin = interruptButton3_Pin;
 80034ba:	2302      	movs	r3, #2
 80034bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80034be:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80034c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034c4:	2300      	movs	r3, #0
 80034c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(interruptButton3_GPIO_Port, &GPIO_InitStruct);
 80034c8:	f107 0314 	add.w	r3, r7, #20
 80034cc:	4619      	mov	r1, r3
 80034ce:	482b      	ldr	r0, [pc, #172]	; (800357c <_ZL12MX_GPIO_Initv+0x1f4>)
 80034d0:	f005 fd00 	bl	8008ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : myButtonPin2_Pin */
  GPIO_InitStruct.Pin = myButtonPin2_Pin;
 80034d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80034d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80034da:	2300      	movs	r3, #0
 80034dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80034de:	2301      	movs	r3, #1
 80034e0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(myButtonPin2_GPIO_Port, &GPIO_InitStruct);
 80034e2:	f107 0314 	add.w	r3, r7, #20
 80034e6:	4619      	mov	r1, r3
 80034e8:	4824      	ldr	r0, [pc, #144]	; (800357c <_ZL12MX_GPIO_Initv+0x1f4>)
 80034ea:	f005 fcf3 	bl	8008ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : flashLED_Pin */
  GPIO_InitStruct.Pin = flashLED_Pin;
 80034ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80034f4:	2301      	movs	r3, #1
 80034f6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034f8:	2300      	movs	r3, #0
 80034fa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034fc:	2300      	movs	r3, #0
 80034fe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(flashLED_GPIO_Port, &GPIO_InitStruct);
 8003500:	f107 0314 	add.w	r3, r7, #20
 8003504:	4619      	mov	r1, r3
 8003506:	481d      	ldr	r0, [pc, #116]	; (800357c <_ZL12MX_GPIO_Initv+0x1f4>)
 8003508:	f005 fce4 	bl	8008ed4 <HAL_GPIO_Init>

  /*Configure GPIO pin : rotation1_2_Pin */
  GPIO_InitStruct.Pin = rotation1_2_Pin;
 800350c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003510:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003512:	2300      	movs	r3, #0
 8003514:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003516:	2300      	movs	r3, #0
 8003518:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(rotation1_2_GPIO_Port, &GPIO_InitStruct);
 800351a:	f107 0314 	add.w	r3, r7, #20
 800351e:	4619      	mov	r1, r3
 8003520:	4815      	ldr	r0, [pc, #84]	; (8003578 <_ZL12MX_GPIO_Initv+0x1f0>)
 8003522:	f005 fcd7 	bl	8008ed4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2105      	movs	r1, #5
 800352a:	2007      	movs	r0, #7
 800352c:	f004 fd10 	bl	8007f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8003530:	2007      	movs	r0, #7
 8003532:	f004 fd29 	bl	8007f88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 5, 0);
 8003536:	2200      	movs	r2, #0
 8003538:	2105      	movs	r1, #5
 800353a:	200a      	movs	r0, #10
 800353c:	f004 fd08 	bl	8007f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8003540:	200a      	movs	r0, #10
 8003542:	f004 fd21 	bl	8007f88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8003546:	2200      	movs	r2, #0
 8003548:	2105      	movs	r1, #5
 800354a:	2017      	movs	r0, #23
 800354c:	f004 fd00 	bl	8007f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8003550:	2017      	movs	r0, #23
 8003552:	f004 fd19 	bl	8007f88 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8003556:	2200      	movs	r2, #0
 8003558:	2105      	movs	r1, #5
 800355a:	2028      	movs	r0, #40	; 0x28
 800355c:	f004 fcf8 	bl	8007f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003560:	2028      	movs	r0, #40	; 0x28
 8003562:	f004 fd11 	bl	8007f88 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003566:	bf00      	nop
 8003568:	3728      	adds	r7, #40	; 0x28
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	40023800 	.word	0x40023800
 8003574:	40020800 	.word	0x40020800
 8003578:	40020000 	.word	0x40020000
 800357c:	40020400 	.word	0x40020400

08003580 <_Z10processValfP12functionFind>:
/* USER CODE BEGIN 4 */
//

uint32_t adcValue;

float processVal(float toProcess, functionFind* currentPedal){
 8003580:	b580      	push	{r7, lr}
 8003582:	b082      	sub	sp, #8
 8003584:	af00      	add	r7, sp, #0
 8003586:	ed87 0a01 	vstr	s0, [r7, #4]
 800358a:	6038      	str	r0, [r7, #0]
    switch (currentPedal->pedalType) {
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	781b      	ldrb	r3, [r3, #0]
 8003590:	2b09      	cmp	r3, #9
 8003592:	d874      	bhi.n	800367e <_Z10processValfP12functionFind+0xfe>
 8003594:	a201      	add	r2, pc, #4	; (adr r2, 800359c <_Z10processValfP12functionFind+0x1c>)
 8003596:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800359a:	bf00      	nop
 800359c:	080035c5 	.word	0x080035c5
 80035a0:	080035cb 	.word	0x080035cb
 80035a4:	080035df 	.word	0x080035df
 80035a8:	080035f3 	.word	0x080035f3
 80035ac:	08003607 	.word	0x08003607
 80035b0:	0800361b 	.word	0x0800361b
 80035b4:	0800362f 	.word	0x0800362f
 80035b8:	08003643 	.word	0x08003643
 80035bc:	08003657 	.word	0x08003657
 80035c0:	0800366b 	.word	0x0800366b
		case noChang:
			return toProcess;
 80035c4:	edd7 7a01 	vldr	s15, [r7, #4]
 80035c8:	e05b      	b.n	8003682 <_Z10processValfP12functionFind+0x102>
		case OverA:
			return Atan_Overdrive_update((Atan_OD*)currentPedal->structPointer, toProcess);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80035d2:	4618      	mov	r0, r3
 80035d4:	f7fd fd2c 	bl	8001030 <_Z21Atan_Overdrive_updateP7Atan_ODf>
 80035d8:	eef0 7a40 	vmov.f32	s15, s0
 80035dc:	e051      	b.n	8003682 <_Z10processValfP12functionFind+0x102>
		case OverC:
			return cubic_overdrive_update((cubic_overdrive*)currentPedal->structPointer, toProcess);
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	685b      	ldr	r3, [r3, #4]
 80035e2:	ed97 0a01 	vldr	s0, [r7, #4]
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe ff46 	bl	8002478 <_Z22cubic_overdrive_updateP15cubic_overdrivef>
 80035ec:	eef0 7a40 	vmov.f32	s15, s0
 80035f0:	e047      	b.n	8003682 <_Z10processValfP12functionFind+0x102>
		case eqHigh:
			return EQ_High_Shelving_Update((HS*)currentPedal->structPointer, toProcess);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	ed97 0a01 	vldr	s0, [r7, #4]
 80035fa:	4618      	mov	r0, r3
 80035fc:	f7fe f9f4 	bl	80019e8 <_Z23EQ_High_Shelving_UpdateP2HSf>
 8003600:	eef0 7a40 	vmov.f32	s15, s0
 8003604:	e03d      	b.n	8003682 <_Z10processValfP12functionFind+0x102>
		case eqLow:
			return EQ_Low_Shelving_Update((LS*)currentPedal->structPointer, toProcess);
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	ed97 0a01 	vldr	s0, [r7, #4]
 800360e:	4618      	mov	r0, r3
 8003610:	f7fe fc5e 	bl	8001ed0 <_Z22EQ_Low_Shelving_UpdateP2LSf>
 8003614:	eef0 7a40 	vmov.f32	s15, s0
 8003618:	e033      	b.n	8003682 <_Z10processValfP12functionFind+0x102>
		case distE:
			return Exp_Distortion_Update((Exp_Dist*)currentPedal->structPointer, toProcess);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003622:	4618      	mov	r0, r3
 8003624:	f7fe fcfa 	bl	800201c <_Z21Exp_Distortion_UpdateP8Exp_Distf>
 8003628:	eef0 7a40 	vmov.f32	s15, s0
 800362c:	e029      	b.n	8003682 <_Z10processValfP12functionFind+0x102>
		case HP1:
			return First_Order_High_Update((High_1st*)currentPedal->structPointer, toProcess);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	ed97 0a01 	vldr	s0, [r7, #4]
 8003636:	4618      	mov	r0, r3
 8003638:	f7fe fdc6 	bl	80021c8 <_Z23First_Order_High_UpdateP8High_1stf>
 800363c:	eef0 7a40 	vmov.f32	s15, s0
 8003640:	e01f      	b.n	8003682 <_Z10processValfP12functionFind+0x102>
		case tremM:
			return MOD_Tremolo_Update((MOD_Tremolo*)currentPedal->structPointer, toProcess);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	ed97 0a01 	vldr	s0, [r7, #4]
 800364a:	4618      	mov	r0, r3
 800364c:	f7fe fe58 	bl	8002300 <_Z18MOD_Tremolo_UpdateP11MOD_Tremolof>
 8003650:	eef0 7a40 	vmov.f32	s15, s0
 8003654:	e015      	b.n	8003682 <_Z10processValfP12functionFind+0x102>

		case Delay:
			//return Tremolo_update((Tremolo*)currentPedal->structPointer, toProcess);
			return delay_Update((delay*)currentPedal->structPointer,toProcess);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	ed97 0a01 	vldr	s0, [r7, #4]
 800365e:	4618      	mov	r0, r3
 8003660:	f7fd fe52 	bl	8001308 <_Z12delay_UpdateP5delayf>
 8003664:	eef0 7a40 	vmov.f32	s15, s0
 8003668:	e00b      	b.n	8003682 <_Z10processValfP12functionFind+0x102>
		case Reverb:
//			return my_distortion_update((my_distortion_struct*)currentPedal->structPointer, toProcess);
			return reverb_Update((reverb*)currentPedal->structPointer,toProcess);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	ed97 0a01 	vldr	s0, [r7, #4]
 8003672:	4618      	mov	r0, r3
 8003674:	f002 fdb2 	bl	80061dc <_Z13reverb_UpdateP6reverbf>
 8003678:	eef0 7a40 	vmov.f32	s15, s0
 800367c:	e001      	b.n	8003682 <_Z10processValfP12functionFind+0x102>



    }
    return 0.0f;
 800367e:	eddf 7a03 	vldr	s15, [pc, #12]	; 800368c <_Z10processValfP12functionFind+0x10c>

}
 8003682:	eeb0 0a67 	vmov.f32	s0, s15
 8003686:	3708      	adds	r7, #8
 8003688:	46bd      	mov	sp, r7
 800368a:	bd80      	pop	{r7, pc}
 800368c:	00000000 	.word	0x00000000

08003690 <HAL_ADC_ConvHalfCpltCallback>:
//
//    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
//
//}

void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc){
 8003690:	b580      	push	{r7, lr}
 8003692:	b088      	sub	sp, #32
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003698:	2300      	movs	r3, #0
 800369a:	60bb      	str	r3, [r7, #8]
	if (xSemaphoreTakeFromISR(soundSem, &xHigherPriorityTaskWoken) == pdTRUE){
 800369c:	4b50      	ldr	r3, [pc, #320]	; (80037e0 <HAL_ADC_ConvHalfCpltCallback+0x150>)
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f107 0208 	add.w	r2, r7, #8
 80036a4:	2100      	movs	r1, #0
 80036a6:	4618      	mov	r0, r3
 80036a8:	f00b fdee 	bl	800f288 <xQueueReceiveFromISR>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b01      	cmp	r3, #1
 80036b0:	bf0c      	ite	eq
 80036b2:	2301      	moveq	r3, #1
 80036b4:	2300      	movne	r3, #0
 80036b6:	b2db      	uxtb	r3, r3
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	f000 8081 	beq.w	80037c0 <HAL_ADC_ConvHalfCpltCallback+0x130>

		float valueInFloat;
		for(int i = 0; i < bufferSize/2;i++){
 80036be:	2300      	movs	r3, #0
 80036c0:	61bb      	str	r3, [r7, #24]
 80036c2:	e03d      	b.n	8003740 <HAL_ADC_ConvHalfCpltCallback+0xb0>
			//valueInFloat = (float)((int32_t)(adcBuffer[i] - (1 << 11)) / (pow(2.0f, 11)));
			//valueInFloat=(static_cast<float>(adcBuffer[i]) / 2047.5f) - 1.0f;
			valueInFloat=((float)adcBuffer[i])/2048;
 80036c4:	4a47      	ldr	r2, [pc, #284]	; (80037e4 <HAL_ADC_ConvHalfCpltCallback+0x154>)
 80036c6:	69bb      	ldr	r3, [r7, #24]
 80036c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80036cc:	ee07 3a90 	vmov	s15, r3
 80036d0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80036d4:	eddf 6a44 	vldr	s13, [pc, #272]	; 80037e8 <HAL_ADC_ConvHalfCpltCallback+0x158>
 80036d8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80036dc:	edc7 7a07 	vstr	s15, [r7, #28]
			valueInFloat = First_Order_High_Update(&myFirstOrder,valueInFloat);
 80036e0:	ed97 0a07 	vldr	s0, [r7, #28]
 80036e4:	4841      	ldr	r0, [pc, #260]	; (80037ec <HAL_ADC_ConvHalfCpltCallback+0x15c>)
 80036e6:	f7fe fd6f 	bl	80021c8 <_Z23First_Order_High_UpdateP8High_1stf>
 80036ea:	ed87 0a07 	vstr	s0, [r7, #28]
			for(int j = 0; j < MAX_PEDALS_PER_CHAIN;j++){
 80036ee:	2300      	movs	r3, #0
 80036f0:	617b      	str	r3, [r7, #20]
 80036f2:	e00d      	b.n	8003710 <HAL_ADC_ConvHalfCpltCallback+0x80>
				valueInFloat=processVal(valueInFloat,&currentChainFunctions[j]);
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	00db      	lsls	r3, r3, #3
 80036f8:	4a3d      	ldr	r2, [pc, #244]	; (80037f0 <HAL_ADC_ConvHalfCpltCallback+0x160>)
 80036fa:	4413      	add	r3, r2
 80036fc:	4618      	mov	r0, r3
 80036fe:	ed97 0a07 	vldr	s0, [r7, #28]
 8003702:	f7ff ff3d 	bl	8003580 <_Z10processValfP12functionFind>
 8003706:	ed87 0a07 	vstr	s0, [r7, #28]
			for(int j = 0; j < MAX_PEDALS_PER_CHAIN;j++){
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	3301      	adds	r3, #1
 800370e:	617b      	str	r3, [r7, #20]
 8003710:	697b      	ldr	r3, [r7, #20]
 8003712:	2b03      	cmp	r3, #3
 8003714:	ddee      	ble.n	80036f4 <HAL_ADC_ConvHalfCpltCallback+0x64>

			}
			dacBuffer[i]=(uint32_t)((valueInFloat+1)*(2048));
 8003716:	edd7 7a07 	vldr	s15, [r7, #28]
 800371a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800371e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003722:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80037e8 <HAL_ADC_ConvHalfCpltCallback+0x158>
 8003726:	ee67 7a87 	vmul.f32	s15, s15, s14
 800372a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800372e:	ee17 1a90 	vmov	r1, s15
 8003732:	4a30      	ldr	r2, [pc, #192]	; (80037f4 <HAL_ADC_ConvHalfCpltCallback+0x164>)
 8003734:	69bb      	ldr	r3, [r7, #24]
 8003736:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = 0; i < bufferSize/2;i++){
 800373a:	69bb      	ldr	r3, [r7, #24]
 800373c:	3301      	adds	r3, #1
 800373e:	61bb      	str	r3, [r7, #24]
 8003740:	69bb      	ldr	r3, [r7, #24]
 8003742:	2bf9      	cmp	r3, #249	; 0xf9
 8003744:	ddbe      	ble.n	80036c4 <HAL_ADC_ConvHalfCpltCallback+0x34>
		}
		if(metronomeIsOn){
 8003746:	4b2c      	ldr	r3, [pc, #176]	; (80037f8 <HAL_ADC_ConvHalfCpltCallback+0x168>)
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d030      	beq.n	80037b0 <HAL_ADC_ConvHalfCpltCallback+0x120>
			if(timesSigned==0)
 800374e:	4b2b      	ldr	r3, [pc, #172]	; (80037fc <HAL_ADC_ConvHalfCpltCallback+0x16c>)
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	2b00      	cmp	r3, #0
 8003754:	d116      	bne.n	8003784 <HAL_ADC_ConvHalfCpltCallback+0xf4>
			for(int i = 0 ; i < bufferSize/2;i++){
 8003756:	2300      	movs	r3, #0
 8003758:	613b      	str	r3, [r7, #16]
 800375a:	e00f      	b.n	800377c <HAL_ADC_ConvHalfCpltCallback+0xec>
				   //int currInt = adcBuffer[i];
					dacBuffer[i]+=dacSinValues2[i];
 800375c:	4a25      	ldr	r2, [pc, #148]	; (80037f4 <HAL_ADC_ConvHalfCpltCallback+0x164>)
 800375e:	693b      	ldr	r3, [r7, #16]
 8003760:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003764:	4926      	ldr	r1, [pc, #152]	; (8003800 <HAL_ADC_ConvHalfCpltCallback+0x170>)
 8003766:	693a      	ldr	r2, [r7, #16]
 8003768:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800376c:	441a      	add	r2, r3
 800376e:	4921      	ldr	r1, [pc, #132]	; (80037f4 <HAL_ADC_ConvHalfCpltCallback+0x164>)
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for(int i = 0 ; i < bufferSize/2;i++){
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	3301      	adds	r3, #1
 800377a:	613b      	str	r3, [r7, #16]
 800377c:	693b      	ldr	r3, [r7, #16]
 800377e:	2bf9      	cmp	r3, #249	; 0xf9
 8003780:	ddec      	ble.n	800375c <HAL_ADC_ConvHalfCpltCallback+0xcc>
 8003782:	e015      	b.n	80037b0 <HAL_ADC_ConvHalfCpltCallback+0x120>
			}
			else{
				for(int i = 0 ; i < bufferSize/2;i++){
 8003784:	2300      	movs	r3, #0
 8003786:	60fb      	str	r3, [r7, #12]
 8003788:	e00f      	b.n	80037aa <HAL_ADC_ConvHalfCpltCallback+0x11a>
					   //int currInt = adcBuffer[i];
						dacBuffer[i]+=dacSinValues[i];
 800378a:	4a1a      	ldr	r2, [pc, #104]	; (80037f4 <HAL_ADC_ConvHalfCpltCallback+0x164>)
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003792:	491c      	ldr	r1, [pc, #112]	; (8003804 <HAL_ADC_ConvHalfCpltCallback+0x174>)
 8003794:	68fa      	ldr	r2, [r7, #12]
 8003796:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800379a:	441a      	add	r2, r3
 800379c:	4915      	ldr	r1, [pc, #84]	; (80037f4 <HAL_ADC_ConvHalfCpltCallback+0x164>)
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for(int i = 0 ; i < bufferSize/2;i++){
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3301      	adds	r3, #1
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2bf9      	cmp	r3, #249	; 0xf9
 80037ae:	ddec      	ble.n	800378a <HAL_ADC_ConvHalfCpltCallback+0xfa>
				}
			}

		}
		xSemaphoreGiveFromISR(soundSem, &xHigherPriorityTaskWoken);
 80037b0:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_ADC_ConvHalfCpltCallback+0x150>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f107 0208 	add.w	r2, r7, #8
 80037b8:	4611      	mov	r1, r2
 80037ba:	4618      	mov	r0, r3
 80037bc:	f00b faeb 	bl	800ed96 <xQueueGiveFromISR>
	}

	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80037c0:	68bb      	ldr	r3, [r7, #8]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d007      	beq.n	80037d6 <HAL_ADC_ConvHalfCpltCallback+0x146>
 80037c6:	4b10      	ldr	r3, [pc, #64]	; (8003808 <HAL_ADC_ConvHalfCpltCallback+0x178>)
 80037c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037cc:	601a      	str	r2, [r3, #0]
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	f3bf 8f6f 	isb	sy


}
 80037d6:	bf00      	nop
 80037d8:	3720      	adds	r7, #32
 80037da:	46bd      	mov	sp, r7
 80037dc:	bd80      	pop	{r7, pc}
 80037de:	bf00      	nop
 80037e0:	20000630 	.word	0x20000630
 80037e4:	20000650 	.word	0x20000650
 80037e8:	45000000 	.word	0x45000000
 80037ec:	200194a4 	.word	0x200194a4
 80037f0:	2001936c 	.word	0x2001936c
 80037f4:	20000e20 	.word	0x20000e20
 80037f8:	20000636 	.word	0x20000636
 80037fc:	200194f8 	.word	0x200194f8
 8003800:	200194fc 	.word	0x200194fc
 8003804:	20019ccc 	.word	0x20019ccc
 8003808:	e000ed04 	.word	0xe000ed04

0800380c <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 800380c:	b580      	push	{r7, lr}
 800380e:	b088      	sub	sp, #32
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8003814:	2300      	movs	r3, #0
 8003816:	60bb      	str	r3, [r7, #8]
	if (xSemaphoreTakeFromISR(soundSem, &xHigherPriorityTaskWoken) == pdTRUE){
 8003818:	4b51      	ldr	r3, [pc, #324]	; (8003960 <HAL_ADC_ConvCpltCallback+0x154>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f107 0208 	add.w	r2, r7, #8
 8003820:	2100      	movs	r1, #0
 8003822:	4618      	mov	r0, r3
 8003824:	f00b fd30 	bl	800f288 <xQueueReceiveFromISR>
 8003828:	4603      	mov	r3, r0
 800382a:	2b01      	cmp	r3, #1
 800382c:	bf0c      	ite	eq
 800382e:	2301      	moveq	r3, #1
 8003830:	2300      	movne	r3, #0
 8003832:	b2db      	uxtb	r3, r3
 8003834:	2b00      	cmp	r3, #0
 8003836:	f000 8084 	beq.w	8003942 <HAL_ADC_ConvCpltCallback+0x136>

		float valueInFloat;
		for(int i = bufferSize/2; i < bufferSize;i++){
 800383a:	23fa      	movs	r3, #250	; 0xfa
 800383c:	61bb      	str	r3, [r7, #24]
 800383e:	e03d      	b.n	80038bc <HAL_ADC_ConvCpltCallback+0xb0>
			//valueInFloat = (float)((int32_t)(adcBuffer[i] - (1 << 11)) / (pow(2.0f, 11)));
			//valueInFloat=(static_cast<float>(adcBuffer[i]) / 2047.5f) - 1.0f;
			valueInFloat=((float)adcBuffer[i])/2048;
 8003840:	4a48      	ldr	r2, [pc, #288]	; (8003964 <HAL_ADC_ConvCpltCallback+0x158>)
 8003842:	69bb      	ldr	r3, [r7, #24]
 8003844:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003848:	ee07 3a90 	vmov	s15, r3
 800384c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003850:	eddf 6a45 	vldr	s13, [pc, #276]	; 8003968 <HAL_ADC_ConvCpltCallback+0x15c>
 8003854:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8003858:	edc7 7a07 	vstr	s15, [r7, #28]
			valueInFloat = First_Order_High_Update(&myFirstOrder,valueInFloat);
 800385c:	ed97 0a07 	vldr	s0, [r7, #28]
 8003860:	4842      	ldr	r0, [pc, #264]	; (800396c <HAL_ADC_ConvCpltCallback+0x160>)
 8003862:	f7fe fcb1 	bl	80021c8 <_Z23First_Order_High_UpdateP8High_1stf>
 8003866:	ed87 0a07 	vstr	s0, [r7, #28]
			for(int j = 0; j < MAX_PEDALS_PER_CHAIN;j++){
 800386a:	2300      	movs	r3, #0
 800386c:	617b      	str	r3, [r7, #20]
 800386e:	e00d      	b.n	800388c <HAL_ADC_ConvCpltCallback+0x80>
				valueInFloat=processVal(valueInFloat,&currentChainFunctions[j]);
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	00db      	lsls	r3, r3, #3
 8003874:	4a3e      	ldr	r2, [pc, #248]	; (8003970 <HAL_ADC_ConvCpltCallback+0x164>)
 8003876:	4413      	add	r3, r2
 8003878:	4618      	mov	r0, r3
 800387a:	ed97 0a07 	vldr	s0, [r7, #28]
 800387e:	f7ff fe7f 	bl	8003580 <_Z10processValfP12functionFind>
 8003882:	ed87 0a07 	vstr	s0, [r7, #28]
			for(int j = 0; j < MAX_PEDALS_PER_CHAIN;j++){
 8003886:	697b      	ldr	r3, [r7, #20]
 8003888:	3301      	adds	r3, #1
 800388a:	617b      	str	r3, [r7, #20]
 800388c:	697b      	ldr	r3, [r7, #20]
 800388e:	2b03      	cmp	r3, #3
 8003890:	ddee      	ble.n	8003870 <HAL_ADC_ConvCpltCallback+0x64>

			}
			dacBuffer[i]=(uint32_t)((valueInFloat+1)*(2048));
 8003892:	edd7 7a07 	vldr	s15, [r7, #28]
 8003896:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800389a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800389e:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8003968 <HAL_ADC_ConvCpltCallback+0x15c>
 80038a2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80038a6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038aa:	ee17 1a90 	vmov	r1, s15
 80038ae:	4a31      	ldr	r2, [pc, #196]	; (8003974 <HAL_ADC_ConvCpltCallback+0x168>)
 80038b0:	69bb      	ldr	r3, [r7, #24]
 80038b2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for(int i = bufferSize/2; i < bufferSize;i++){
 80038b6:	69bb      	ldr	r3, [r7, #24]
 80038b8:	3301      	adds	r3, #1
 80038ba:	61bb      	str	r3, [r7, #24]
 80038bc:	69bb      	ldr	r3, [r7, #24]
 80038be:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80038c2:	dbbd      	blt.n	8003840 <HAL_ADC_ConvCpltCallback+0x34>
		}
		if(metronomeIsOn){
 80038c4:	4b2c      	ldr	r3, [pc, #176]	; (8003978 <HAL_ADC_ConvCpltCallback+0x16c>)
 80038c6:	781b      	ldrb	r3, [r3, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d032      	beq.n	8003932 <HAL_ADC_ConvCpltCallback+0x126>
					if(timesSigned==0)
 80038cc:	4b2b      	ldr	r3, [pc, #172]	; (800397c <HAL_ADC_ConvCpltCallback+0x170>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d117      	bne.n	8003904 <HAL_ADC_ConvCpltCallback+0xf8>
					for(int i = bufferSize/2 ; i < bufferSize;i++){
 80038d4:	23fa      	movs	r3, #250	; 0xfa
 80038d6:	613b      	str	r3, [r7, #16]
 80038d8:	e00f      	b.n	80038fa <HAL_ADC_ConvCpltCallback+0xee>
						   //int currInt = adcBuffer[i];
							dacBuffer[i]+=dacSinValues2[i];
 80038da:	4a26      	ldr	r2, [pc, #152]	; (8003974 <HAL_ADC_ConvCpltCallback+0x168>)
 80038dc:	693b      	ldr	r3, [r7, #16]
 80038de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038e2:	4927      	ldr	r1, [pc, #156]	; (8003980 <HAL_ADC_ConvCpltCallback+0x174>)
 80038e4:	693a      	ldr	r2, [r7, #16]
 80038e6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80038ea:	441a      	add	r2, r3
 80038ec:	4921      	ldr	r1, [pc, #132]	; (8003974 <HAL_ADC_ConvCpltCallback+0x168>)
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
					for(int i = bufferSize/2 ; i < bufferSize;i++){
 80038f4:	693b      	ldr	r3, [r7, #16]
 80038f6:	3301      	adds	r3, #1
 80038f8:	613b      	str	r3, [r7, #16]
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003900:	dbeb      	blt.n	80038da <HAL_ADC_ConvCpltCallback+0xce>
 8003902:	e016      	b.n	8003932 <HAL_ADC_ConvCpltCallback+0x126>
					}
					else{
						for(int i = bufferSize/2 ; i < bufferSize;i++){
 8003904:	23fa      	movs	r3, #250	; 0xfa
 8003906:	60fb      	str	r3, [r7, #12]
 8003908:	e00f      	b.n	800392a <HAL_ADC_ConvCpltCallback+0x11e>
							   //int currInt = adcBuffer[i];
								dacBuffer[i]+=dacSinValues[i];
 800390a:	4a1a      	ldr	r2, [pc, #104]	; (8003974 <HAL_ADC_ConvCpltCallback+0x168>)
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003912:	491c      	ldr	r1, [pc, #112]	; (8003984 <HAL_ADC_ConvCpltCallback+0x178>)
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 800391a:	441a      	add	r2, r3
 800391c:	4915      	ldr	r1, [pc, #84]	; (8003974 <HAL_ADC_ConvCpltCallback+0x168>)
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
						for(int i = bufferSize/2 ; i < bufferSize;i++){
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	3301      	adds	r3, #1
 8003928:	60fb      	str	r3, [r7, #12]
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8003930:	dbeb      	blt.n	800390a <HAL_ADC_ConvCpltCallback+0xfe>
						}
					}
		}
		xSemaphoreGiveFromISR(soundSem, &xHigherPriorityTaskWoken);
 8003932:	4b0b      	ldr	r3, [pc, #44]	; (8003960 <HAL_ADC_ConvCpltCallback+0x154>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f107 0208 	add.w	r2, r7, #8
 800393a:	4611      	mov	r1, r2
 800393c:	4618      	mov	r0, r3
 800393e:	f00b fa2a 	bl	800ed96 <xQueueGiveFromISR>
	}

    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8003942:	68bb      	ldr	r3, [r7, #8]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d007      	beq.n	8003958 <HAL_ADC_ConvCpltCallback+0x14c>
 8003948:	4b0f      	ldr	r3, [pc, #60]	; (8003988 <HAL_ADC_ConvCpltCallback+0x17c>)
 800394a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800394e:	601a      	str	r2, [r3, #0]
 8003950:	f3bf 8f4f 	dsb	sy
 8003954:	f3bf 8f6f 	isb	sy

}
 8003958:	bf00      	nop
 800395a:	3720      	adds	r7, #32
 800395c:	46bd      	mov	sp, r7
 800395e:	bd80      	pop	{r7, pc}
 8003960:	20000630 	.word	0x20000630
 8003964:	20000650 	.word	0x20000650
 8003968:	45000000 	.word	0x45000000
 800396c:	200194a4 	.word	0x200194a4
 8003970:	2001936c 	.word	0x2001936c
 8003974:	20000e20 	.word	0x20000e20
 8003978:	20000636 	.word	0x20000636
 800397c:	200194f8 	.word	0x200194f8
 8003980:	200194fc 	.word	0x200194fc
 8003984:	20019ccc 	.word	0x20019ccc
 8003988:	e000ed04 	.word	0xe000ed04

0800398c <_Z14drawMenuScreenv>:



//SemaphoreHandle_t screenChangeSem;

void drawMenuScreen(){
 800398c:	b580      	push	{r7, lr}
 800398e:	b084      	sub	sp, #16
 8003990:	af02      	add	r7, sp, #8
	//char snum[5];
  //  itoa(totalNum, snum, 10);
	int num = sizeof(MENUSTRINGS) / sizeof(MENUSTRINGS[0]);
 8003992:	2304      	movs	r3, #4
 8003994:	607b      	str	r3, [r7, #4]
	  ssd1306_Fill(Black);
 8003996:	2000      	movs	r0, #0
 8003998:	f002 fd44 	bl	8006424 <ssd1306_Fill>
	  ssd1306_DrawBitmap(126,0,epd_bitmap__scrollBar,1,64,White);
 800399c:	2301      	movs	r3, #1
 800399e:	9301      	str	r3, [sp, #4]
 80039a0:	2340      	movs	r3, #64	; 0x40
 80039a2:	9300      	str	r3, [sp, #0]
 80039a4:	2301      	movs	r3, #1
 80039a6:	4a60      	ldr	r2, [pc, #384]	; (8003b28 <_Z14drawMenuScreenv+0x19c>)
 80039a8:	2100      	movs	r1, #0
 80039aa:	207e      	movs	r0, #126	; 0x7e
 80039ac:	f002 fe94 	bl	80066d8 <ssd1306_DrawBitmap>
	  ssd1306_DrawBitmap(0,22,epd_bitmap__border,106,21,White);
 80039b0:	2301      	movs	r3, #1
 80039b2:	9301      	str	r3, [sp, #4]
 80039b4:	2315      	movs	r3, #21
 80039b6:	9300      	str	r3, [sp, #0]
 80039b8:	236a      	movs	r3, #106	; 0x6a
 80039ba:	4a5c      	ldr	r2, [pc, #368]	; (8003b2c <_Z14drawMenuScreenv+0x1a0>)
 80039bc:	2116      	movs	r1, #22
 80039be:	2000      	movs	r0, #0
 80039c0:	f002 fe8a 	bl	80066d8 <ssd1306_DrawBitmap>
	  ssd1306_DrawBitmap(3,2,MENUICONS[(currentMenuOption+(num-1))%num],16,16,White);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	1e5a      	subs	r2, r3, #1
 80039c8:	4b59      	ldr	r3, [pc, #356]	; (8003b30 <_Z14drawMenuScreenv+0x1a4>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	4413      	add	r3, r2
 80039ce:	687a      	ldr	r2, [r7, #4]
 80039d0:	fb93 f2f2 	sdiv	r2, r3, r2
 80039d4:	6879      	ldr	r1, [r7, #4]
 80039d6:	fb01 f202 	mul.w	r2, r1, r2
 80039da:	1a9b      	subs	r3, r3, r2
 80039dc:	4a55      	ldr	r2, [pc, #340]	; (8003b34 <_Z14drawMenuScreenv+0x1a8>)
 80039de:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80039e2:	2301      	movs	r3, #1
 80039e4:	9301      	str	r3, [sp, #4]
 80039e6:	2310      	movs	r3, #16
 80039e8:	9300      	str	r3, [sp, #0]
 80039ea:	2310      	movs	r3, #16
 80039ec:	2102      	movs	r1, #2
 80039ee:	2003      	movs	r0, #3
 80039f0:	f002 fe72 	bl	80066d8 <ssd1306_DrawBitmap>
	  ssd1306_SetCursor(3+16+4, 2+4);
 80039f4:	2106      	movs	r1, #6
 80039f6:	2017      	movs	r0, #23
 80039f8:	f002 fe56 	bl	80066a8 <ssd1306_SetCursor>
	  ssd1306_WriteString(MENUSTRINGS[(currentMenuOption+(num-1))%num], Font_7x10, White);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	1e5a      	subs	r2, r3, #1
 8003a00:	4b4b      	ldr	r3, [pc, #300]	; (8003b30 <_Z14drawMenuScreenv+0x1a4>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4413      	add	r3, r2
 8003a06:	687a      	ldr	r2, [r7, #4]
 8003a08:	fb93 f2f2 	sdiv	r2, r3, r2
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	fb01 f202 	mul.w	r2, r1, r2
 8003a12:	1a9a      	subs	r2, r3, r2
 8003a14:	4613      	mov	r3, r2
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	1a9b      	subs	r3, r3, r2
 8003a1a:	4a47      	ldr	r2, [pc, #284]	; (8003b38 <_Z14drawMenuScreenv+0x1ac>)
 8003a1c:	1898      	adds	r0, r3, r2
 8003a1e:	4a47      	ldr	r2, [pc, #284]	; (8003b3c <_Z14drawMenuScreenv+0x1b0>)
 8003a20:	2301      	movs	r3, #1
 8003a22:	ca06      	ldmia	r2, {r1, r2}
 8003a24:	f002 fe1a 	bl	800665c <ssd1306_WriteString>
	  ssd1306_DrawBitmap(3,24,MENUICONS[(currentMenuOption+num)%num],16,16,White);
 8003a28:	4b41      	ldr	r3, [pc, #260]	; (8003b30 <_Z14drawMenuScreenv+0x1a4>)
 8003a2a:	681a      	ldr	r2, [r3, #0]
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4413      	add	r3, r2
 8003a30:	687a      	ldr	r2, [r7, #4]
 8003a32:	fb93 f2f2 	sdiv	r2, r3, r2
 8003a36:	6879      	ldr	r1, [r7, #4]
 8003a38:	fb01 f202 	mul.w	r2, r1, r2
 8003a3c:	1a9b      	subs	r3, r3, r2
 8003a3e:	4a3d      	ldr	r2, [pc, #244]	; (8003b34 <_Z14drawMenuScreenv+0x1a8>)
 8003a40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003a44:	2301      	movs	r3, #1
 8003a46:	9301      	str	r3, [sp, #4]
 8003a48:	2310      	movs	r3, #16
 8003a4a:	9300      	str	r3, [sp, #0]
 8003a4c:	2310      	movs	r3, #16
 8003a4e:	2118      	movs	r1, #24
 8003a50:	2003      	movs	r0, #3
 8003a52:	f002 fe41 	bl	80066d8 <ssd1306_DrawBitmap>
	  ssd1306_SetCursor(3+16+4, 24+4);
 8003a56:	211c      	movs	r1, #28
 8003a58:	2017      	movs	r0, #23
 8003a5a:	f002 fe25 	bl	80066a8 <ssd1306_SetCursor>
	  ssd1306_WriteString(MENUSTRINGS[(currentMenuOption+num)%num], Font_7x10, White);
 8003a5e:	4b34      	ldr	r3, [pc, #208]	; (8003b30 <_Z14drawMenuScreenv+0x1a4>)
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	4413      	add	r3, r2
 8003a66:	687a      	ldr	r2, [r7, #4]
 8003a68:	fb93 f2f2 	sdiv	r2, r3, r2
 8003a6c:	6879      	ldr	r1, [r7, #4]
 8003a6e:	fb01 f202 	mul.w	r2, r1, r2
 8003a72:	1a9a      	subs	r2, r3, r2
 8003a74:	4613      	mov	r3, r2
 8003a76:	011b      	lsls	r3, r3, #4
 8003a78:	1a9b      	subs	r3, r3, r2
 8003a7a:	4a2f      	ldr	r2, [pc, #188]	; (8003b38 <_Z14drawMenuScreenv+0x1ac>)
 8003a7c:	1898      	adds	r0, r3, r2
 8003a7e:	4a2f      	ldr	r2, [pc, #188]	; (8003b3c <_Z14drawMenuScreenv+0x1b0>)
 8003a80:	2301      	movs	r3, #1
 8003a82:	ca06      	ldmia	r2, {r1, r2}
 8003a84:	f002 fdea 	bl	800665c <ssd1306_WriteString>
	  ssd1306_DrawBitmap(3,46,MENUICONS[(currentMenuOption+(num+1))%num],16,16,White);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	1c5a      	adds	r2, r3, #1
 8003a8c:	4b28      	ldr	r3, [pc, #160]	; (8003b30 <_Z14drawMenuScreenv+0x1a4>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4413      	add	r3, r2
 8003a92:	687a      	ldr	r2, [r7, #4]
 8003a94:	fb93 f2f2 	sdiv	r2, r3, r2
 8003a98:	6879      	ldr	r1, [r7, #4]
 8003a9a:	fb01 f202 	mul.w	r2, r1, r2
 8003a9e:	1a9b      	subs	r3, r3, r2
 8003aa0:	4a24      	ldr	r2, [pc, #144]	; (8003b34 <_Z14drawMenuScreenv+0x1a8>)
 8003aa2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003aa6:	2301      	movs	r3, #1
 8003aa8:	9301      	str	r3, [sp, #4]
 8003aaa:	2310      	movs	r3, #16
 8003aac:	9300      	str	r3, [sp, #0]
 8003aae:	2310      	movs	r3, #16
 8003ab0:	212e      	movs	r1, #46	; 0x2e
 8003ab2:	2003      	movs	r0, #3
 8003ab4:	f002 fe10 	bl	80066d8 <ssd1306_DrawBitmap>
	  ssd1306_SetCursor(3+16+4, 46+4);
 8003ab8:	2132      	movs	r1, #50	; 0x32
 8003aba:	2017      	movs	r0, #23
 8003abc:	f002 fdf4 	bl	80066a8 <ssd1306_SetCursor>
	  ssd1306_WriteString(MENUSTRINGS[(currentMenuOption+(num+1))%num], Font_7x10, White);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	1c5a      	adds	r2, r3, #1
 8003ac4:	4b1a      	ldr	r3, [pc, #104]	; (8003b30 <_Z14drawMenuScreenv+0x1a4>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	4413      	add	r3, r2
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	fb93 f2f2 	sdiv	r2, r3, r2
 8003ad0:	6879      	ldr	r1, [r7, #4]
 8003ad2:	fb01 f202 	mul.w	r2, r1, r2
 8003ad6:	1a9a      	subs	r2, r3, r2
 8003ad8:	4613      	mov	r3, r2
 8003ada:	011b      	lsls	r3, r3, #4
 8003adc:	1a9b      	subs	r3, r3, r2
 8003ade:	4a16      	ldr	r2, [pc, #88]	; (8003b38 <_Z14drawMenuScreenv+0x1ac>)
 8003ae0:	1898      	adds	r0, r3, r2
 8003ae2:	4a16      	ldr	r2, [pc, #88]	; (8003b3c <_Z14drawMenuScreenv+0x1b0>)
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	ca06      	ldmia	r2, {r1, r2}
 8003ae8:	f002 fdb8 	bl	800665c <ssd1306_WriteString>
	  ssd1306_DrawBitmap(125,(64-7)*currentMenuOption/(num-1),epd_bitmap__handle,3,7,White);
 8003aec:	4b10      	ldr	r3, [pc, #64]	; (8003b30 <_Z14drawMenuScreenv+0x1a4>)
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	4613      	mov	r3, r2
 8003af2:	00db      	lsls	r3, r3, #3
 8003af4:	1a9b      	subs	r3, r3, r2
 8003af6:	00db      	lsls	r3, r3, #3
 8003af8:	441a      	add	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	3b01      	subs	r3, #1
 8003afe:	fb92 f3f3 	sdiv	r3, r2, r3
 8003b02:	b2d9      	uxtb	r1, r3
 8003b04:	2301      	movs	r3, #1
 8003b06:	9301      	str	r3, [sp, #4]
 8003b08:	2307      	movs	r3, #7
 8003b0a:	9300      	str	r3, [sp, #0]
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	4a0c      	ldr	r2, [pc, #48]	; (8003b40 <_Z14drawMenuScreenv+0x1b4>)
 8003b10:	207d      	movs	r0, #125	; 0x7d
 8003b12:	f002 fde1 	bl	80066d8 <ssd1306_DrawBitmap>
	  ssd1306_UpdateScreen();
 8003b16:	f002 fc9d 	bl	8006454 <ssd1306_UpdateScreen>
	  osDelay(1);
 8003b1a:	2001      	movs	r0, #1
 8003b1c:	f00a fd60 	bl	800e5e0 <osDelay>
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	08015dc0 	.word	0x08015dc0
 8003b2c:	08015c50 	.word	0x08015c50
 8003b30:	200194c4 	.word	0x200194c4
 8003b34:	20000178 	.word	0x20000178
 8003b38:	20000078 	.word	0x20000078
 8003b3c:	20000198 	.word	0x20000198
 8003b40:	08015d98 	.word	0x08015d98

08003b44 <_Z13drawPedalMenuv>:
void drawPedalMenu(){
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b084      	sub	sp, #16
 8003b48:	af02      	add	r7, sp, #8
	char str[4];

	ssd1306_Fill(Black);
 8003b4a:	2000      	movs	r0, #0
 8003b4c:	f002 fc6a 	bl	8006424 <ssd1306_Fill>
	ssd1306_DrawBitmap(126,0,epd_bitmap__scrollBar,1,64,White);
 8003b50:	2301      	movs	r3, #1
 8003b52:	9301      	str	r3, [sp, #4]
 8003b54:	2340      	movs	r3, #64	; 0x40
 8003b56:	9300      	str	r3, [sp, #0]
 8003b58:	2301      	movs	r3, #1
 8003b5a:	4a70      	ldr	r2, [pc, #448]	; (8003d1c <_Z13drawPedalMenuv+0x1d8>)
 8003b5c:	2100      	movs	r1, #0
 8003b5e:	207e      	movs	r0, #126	; 0x7e
 8003b60:	f002 fdba 	bl	80066d8 <ssd1306_DrawBitmap>
	ssd1306_DrawBitmap(0,22,epd_bitmap__border,106,21,White);
 8003b64:	2301      	movs	r3, #1
 8003b66:	9301      	str	r3, [sp, #4]
 8003b68:	2315      	movs	r3, #21
 8003b6a:	9300      	str	r3, [sp, #0]
 8003b6c:	236a      	movs	r3, #106	; 0x6a
 8003b6e:	4a6c      	ldr	r2, [pc, #432]	; (8003d20 <_Z13drawPedalMenuv+0x1dc>)
 8003b70:	2116      	movs	r1, #22
 8003b72:	2000      	movs	r0, #0
 8003b74:	f002 fdb0 	bl	80066d8 <ssd1306_DrawBitmap>

	ssd1306_SetCursor(3+16+4, 2+4);
 8003b78:	2106      	movs	r1, #6
 8003b7a:	2017      	movs	r0, #23
 8003b7c:	f002 fd94 	bl	80066a8 <ssd1306_SetCursor>
	ssd1306_WriteString(allPedalsData.allChains[(pedalMenu+MAX_CHAINS-1)%MAX_CHAINS].name, Font_7x10, White);
 8003b80:	4b68      	ldr	r3, [pc, #416]	; (8003d24 <_Z13drawPedalMenuv+0x1e0>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f103 0109 	add.w	r1, r3, #9
 8003b88:	4b67      	ldr	r3, [pc, #412]	; (8003d28 <_Z13drawPedalMenuv+0x1e4>)
 8003b8a:	fb83 2301 	smull	r2, r3, r3, r1
 8003b8e:	109a      	asrs	r2, r3, #2
 8003b90:	17cb      	asrs	r3, r1, #31
 8003b92:	1ad2      	subs	r2, r2, r3
 8003b94:	4613      	mov	r3, r2
 8003b96:	009b      	lsls	r3, r3, #2
 8003b98:	4413      	add	r3, r2
 8003b9a:	005b      	lsls	r3, r3, #1
 8003b9c:	1aca      	subs	r2, r1, r3
 8003b9e:	4613      	mov	r3, r2
 8003ba0:	00db      	lsls	r3, r3, #3
 8003ba2:	1a9b      	subs	r3, r3, r2
 8003ba4:	009b      	lsls	r3, r3, #2
 8003ba6:	3310      	adds	r3, #16
 8003ba8:	4a60      	ldr	r2, [pc, #384]	; (8003d2c <_Z13drawPedalMenuv+0x1e8>)
 8003baa:	1898      	adds	r0, r3, r2
 8003bac:	4a60      	ldr	r2, [pc, #384]	; (8003d30 <_Z13drawPedalMenuv+0x1ec>)
 8003bae:	2301      	movs	r3, #1
 8003bb0:	ca06      	ldmia	r2, {r1, r2}
 8003bb2:	f002 fd53 	bl	800665c <ssd1306_WriteString>
	ssd1306_SetCursor(3+4, 2+4);
 8003bb6:	2106      	movs	r1, #6
 8003bb8:	2007      	movs	r0, #7
 8003bba:	f002 fd75 	bl	80066a8 <ssd1306_SetCursor>
	sprintf(str, "%d", (pedalMenu+MAX_CHAINS-1)%MAX_CHAINS+1);
 8003bbe:	4b59      	ldr	r3, [pc, #356]	; (8003d24 <_Z13drawPedalMenuv+0x1e0>)
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f103 0109 	add.w	r1, r3, #9
 8003bc6:	4b58      	ldr	r3, [pc, #352]	; (8003d28 <_Z13drawPedalMenuv+0x1e4>)
 8003bc8:	fb83 2301 	smull	r2, r3, r3, r1
 8003bcc:	109a      	asrs	r2, r3, #2
 8003bce:	17cb      	asrs	r3, r1, #31
 8003bd0:	1ad2      	subs	r2, r2, r3
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4413      	add	r3, r2
 8003bd8:	005b      	lsls	r3, r3, #1
 8003bda:	1aca      	subs	r2, r1, r3
 8003bdc:	3201      	adds	r2, #1
 8003bde:	1d3b      	adds	r3, r7, #4
 8003be0:	4954      	ldr	r1, [pc, #336]	; (8003d34 <_Z13drawPedalMenuv+0x1f0>)
 8003be2:	4618      	mov	r0, r3
 8003be4:	f011 fac8 	bl	8015178 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8003be8:	4a51      	ldr	r2, [pc, #324]	; (8003d30 <_Z13drawPedalMenuv+0x1ec>)
 8003bea:	1d38      	adds	r0, r7, #4
 8003bec:	2301      	movs	r3, #1
 8003bee:	ca06      	ldmia	r2, {r1, r2}
 8003bf0:	f002 fd34 	bl	800665c <ssd1306_WriteString>

	ssd1306_SetCursor(3+16+4, 24+4);
 8003bf4:	211c      	movs	r1, #28
 8003bf6:	2017      	movs	r0, #23
 8003bf8:	f002 fd56 	bl	80066a8 <ssd1306_SetCursor>
	ssd1306_WriteString(allPedalsData.allChains[(pedalMenu)%MAX_CHAINS].name, Font_7x10, White);
 8003bfc:	4b49      	ldr	r3, [pc, #292]	; (8003d24 <_Z13drawPedalMenuv+0x1e0>)
 8003bfe:	6819      	ldr	r1, [r3, #0]
 8003c00:	4b49      	ldr	r3, [pc, #292]	; (8003d28 <_Z13drawPedalMenuv+0x1e4>)
 8003c02:	fb83 2301 	smull	r2, r3, r3, r1
 8003c06:	109a      	asrs	r2, r3, #2
 8003c08:	17cb      	asrs	r3, r1, #31
 8003c0a:	1ad2      	subs	r2, r2, r3
 8003c0c:	4613      	mov	r3, r2
 8003c0e:	009b      	lsls	r3, r3, #2
 8003c10:	4413      	add	r3, r2
 8003c12:	005b      	lsls	r3, r3, #1
 8003c14:	1aca      	subs	r2, r1, r3
 8003c16:	4613      	mov	r3, r2
 8003c18:	00db      	lsls	r3, r3, #3
 8003c1a:	1a9b      	subs	r3, r3, r2
 8003c1c:	009b      	lsls	r3, r3, #2
 8003c1e:	3310      	adds	r3, #16
 8003c20:	4a42      	ldr	r2, [pc, #264]	; (8003d2c <_Z13drawPedalMenuv+0x1e8>)
 8003c22:	1898      	adds	r0, r3, r2
 8003c24:	4a42      	ldr	r2, [pc, #264]	; (8003d30 <_Z13drawPedalMenuv+0x1ec>)
 8003c26:	2301      	movs	r3, #1
 8003c28:	ca06      	ldmia	r2, {r1, r2}
 8003c2a:	f002 fd17 	bl	800665c <ssd1306_WriteString>
	ssd1306_SetCursor(3+4, 24+4);
 8003c2e:	211c      	movs	r1, #28
 8003c30:	2007      	movs	r0, #7
 8003c32:	f002 fd39 	bl	80066a8 <ssd1306_SetCursor>
	sprintf(str, "%d", (pedalMenu)%MAX_CHAINS+1);
 8003c36:	4b3b      	ldr	r3, [pc, #236]	; (8003d24 <_Z13drawPedalMenuv+0x1e0>)
 8003c38:	6819      	ldr	r1, [r3, #0]
 8003c3a:	4b3b      	ldr	r3, [pc, #236]	; (8003d28 <_Z13drawPedalMenuv+0x1e4>)
 8003c3c:	fb83 2301 	smull	r2, r3, r3, r1
 8003c40:	109a      	asrs	r2, r3, #2
 8003c42:	17cb      	asrs	r3, r1, #31
 8003c44:	1ad2      	subs	r2, r2, r3
 8003c46:	4613      	mov	r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	4413      	add	r3, r2
 8003c4c:	005b      	lsls	r3, r3, #1
 8003c4e:	1aca      	subs	r2, r1, r3
 8003c50:	3201      	adds	r2, #1
 8003c52:	1d3b      	adds	r3, r7, #4
 8003c54:	4937      	ldr	r1, [pc, #220]	; (8003d34 <_Z13drawPedalMenuv+0x1f0>)
 8003c56:	4618      	mov	r0, r3
 8003c58:	f011 fa8e 	bl	8015178 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8003c5c:	4a34      	ldr	r2, [pc, #208]	; (8003d30 <_Z13drawPedalMenuv+0x1ec>)
 8003c5e:	1d38      	adds	r0, r7, #4
 8003c60:	2301      	movs	r3, #1
 8003c62:	ca06      	ldmia	r2, {r1, r2}
 8003c64:	f002 fcfa 	bl	800665c <ssd1306_WriteString>

	ssd1306_SetCursor(3+16+4, 46+4);
 8003c68:	2132      	movs	r1, #50	; 0x32
 8003c6a:	2017      	movs	r0, #23
 8003c6c:	f002 fd1c 	bl	80066a8 <ssd1306_SetCursor>
	ssd1306_WriteString(allPedalsData.allChains[(pedalMenu+1)%MAX_CHAINS].name, Font_7x10, White);
 8003c70:	4b2c      	ldr	r3, [pc, #176]	; (8003d24 <_Z13drawPedalMenuv+0x1e0>)
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	1c59      	adds	r1, r3, #1
 8003c76:	4b2c      	ldr	r3, [pc, #176]	; (8003d28 <_Z13drawPedalMenuv+0x1e4>)
 8003c78:	fb83 2301 	smull	r2, r3, r3, r1
 8003c7c:	109a      	asrs	r2, r3, #2
 8003c7e:	17cb      	asrs	r3, r1, #31
 8003c80:	1ad2      	subs	r2, r2, r3
 8003c82:	4613      	mov	r3, r2
 8003c84:	009b      	lsls	r3, r3, #2
 8003c86:	4413      	add	r3, r2
 8003c88:	005b      	lsls	r3, r3, #1
 8003c8a:	1aca      	subs	r2, r1, r3
 8003c8c:	4613      	mov	r3, r2
 8003c8e:	00db      	lsls	r3, r3, #3
 8003c90:	1a9b      	subs	r3, r3, r2
 8003c92:	009b      	lsls	r3, r3, #2
 8003c94:	3310      	adds	r3, #16
 8003c96:	4a25      	ldr	r2, [pc, #148]	; (8003d2c <_Z13drawPedalMenuv+0x1e8>)
 8003c98:	1898      	adds	r0, r3, r2
 8003c9a:	4a25      	ldr	r2, [pc, #148]	; (8003d30 <_Z13drawPedalMenuv+0x1ec>)
 8003c9c:	2301      	movs	r3, #1
 8003c9e:	ca06      	ldmia	r2, {r1, r2}
 8003ca0:	f002 fcdc 	bl	800665c <ssd1306_WriteString>
	ssd1306_SetCursor(3+4, 46+4);
 8003ca4:	2132      	movs	r1, #50	; 0x32
 8003ca6:	2007      	movs	r0, #7
 8003ca8:	f002 fcfe 	bl	80066a8 <ssd1306_SetCursor>
	sprintf(str, "%d", (pedalMenu+1)%MAX_CHAINS+1);
 8003cac:	4b1d      	ldr	r3, [pc, #116]	; (8003d24 <_Z13drawPedalMenuv+0x1e0>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	1c59      	adds	r1, r3, #1
 8003cb2:	4b1d      	ldr	r3, [pc, #116]	; (8003d28 <_Z13drawPedalMenuv+0x1e4>)
 8003cb4:	fb83 2301 	smull	r2, r3, r3, r1
 8003cb8:	109a      	asrs	r2, r3, #2
 8003cba:	17cb      	asrs	r3, r1, #31
 8003cbc:	1ad2      	subs	r2, r2, r3
 8003cbe:	4613      	mov	r3, r2
 8003cc0:	009b      	lsls	r3, r3, #2
 8003cc2:	4413      	add	r3, r2
 8003cc4:	005b      	lsls	r3, r3, #1
 8003cc6:	1aca      	subs	r2, r1, r3
 8003cc8:	3201      	adds	r2, #1
 8003cca:	1d3b      	adds	r3, r7, #4
 8003ccc:	4919      	ldr	r1, [pc, #100]	; (8003d34 <_Z13drawPedalMenuv+0x1f0>)
 8003cce:	4618      	mov	r0, r3
 8003cd0:	f011 fa52 	bl	8015178 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 8003cd4:	4a16      	ldr	r2, [pc, #88]	; (8003d30 <_Z13drawPedalMenuv+0x1ec>)
 8003cd6:	1d38      	adds	r0, r7, #4
 8003cd8:	2301      	movs	r3, #1
 8003cda:	ca06      	ldmia	r2, {r1, r2}
 8003cdc:	f002 fcbe 	bl	800665c <ssd1306_WriteString>

	ssd1306_DrawBitmap(125,(64-7)*pedalMenu/4,epd_bitmap__handle,3,7,White);
 8003ce0:	4b10      	ldr	r3, [pc, #64]	; (8003d24 <_Z13drawPedalMenuv+0x1e0>)
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	00db      	lsls	r3, r3, #3
 8003ce8:	1a9b      	subs	r3, r3, r2
 8003cea:	00db      	lsls	r3, r3, #3
 8003cec:	4413      	add	r3, r2
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	da00      	bge.n	8003cf4 <_Z13drawPedalMenuv+0x1b0>
 8003cf2:	3303      	adds	r3, #3
 8003cf4:	109b      	asrs	r3, r3, #2
 8003cf6:	b2d9      	uxtb	r1, r3
 8003cf8:	2301      	movs	r3, #1
 8003cfa:	9301      	str	r3, [sp, #4]
 8003cfc:	2307      	movs	r3, #7
 8003cfe:	9300      	str	r3, [sp, #0]
 8003d00:	2303      	movs	r3, #3
 8003d02:	4a0d      	ldr	r2, [pc, #52]	; (8003d38 <_Z13drawPedalMenuv+0x1f4>)
 8003d04:	207d      	movs	r0, #125	; 0x7d
 8003d06:	f002 fce7 	bl	80066d8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8003d0a:	f002 fba3 	bl	8006454 <ssd1306_UpdateScreen>
	osDelay(1);
 8003d0e:	2001      	movs	r0, #1
 8003d10:	f00a fc66 	bl	800e5e0 <osDelay>
}
 8003d14:	bf00      	nop
 8003d16:	3708      	adds	r7, #8
 8003d18:	46bd      	mov	sp, r7
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	08015dc0 	.word	0x08015dc0
 8003d20:	08015c50 	.word	0x08015c50
 8003d24:	200194ec 	.word	0x200194ec
 8003d28:	66666667 	.word	0x66666667
 8003d2c:	2001938c 	.word	0x2001938c
 8003d30:	20000198 	.word	0x20000198
 8003d34:	08015ad8 	.word	0x08015ad8
 8003d38:	08015d98 	.word	0x08015d98

08003d3c <_Z10savePedalsv>:
	ssd1306_WriteString(PEDALSMENUOPTIONSSTRINGS[(pedalMenuOption+1)%num], Font_7x10, White);
	ssd1306_DrawBitmap(125,(64-7)*pedalMenu/4,epd_bitmap__handle,3,7,White);
	ssd1306_UpdateScreen();
	osDelay(1);
}
void savePedals(){
 8003d3c:	b580      	push	{r7, lr}
 8003d3e:	b082      	sub	sp, #8
 8003d40:	af02      	add	r7, sp, #8
	EE24_Write(&ee24, 0, (uint8_t*)&allPedalsData, sizeof(allPedalsData), 1000);
 8003d42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	f44f 738c 	mov.w	r3, #280	; 0x118
 8003d4c:	4a03      	ldr	r2, [pc, #12]	; (8003d5c <_Z10savePedalsv+0x20>)
 8003d4e:	2100      	movs	r1, #0
 8003d50:	4803      	ldr	r0, [pc, #12]	; (8003d60 <_Z10savePedalsv+0x24>)
 8003d52:	f7fe fc80 	bl	8002656 <EE24_Write>
}
 8003d56:	bf00      	nop
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}
 8003d5c:	2001938c 	.word	0x2001938c
 8003d60:	2000061c 	.word	0x2000061c

08003d64 <_Z14indentifyPedalB5cxx11h>:
string indentifyPedal(uint8_t num){
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b08e      	sub	sp, #56	; 0x38
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
 8003d6c:	460b      	mov	r3, r1
 8003d6e:	70fb      	strb	r3, [r7, #3]
	switch(num){
 8003d70:	78fb      	ldrb	r3, [r7, #3]
 8003d72:	2b09      	cmp	r3, #9
 8003d74:	f200 80cc 	bhi.w	8003f10 <_Z14indentifyPedalB5cxx11h+0x1ac>
 8003d78:	a201      	add	r2, pc, #4	; (adr r2, 8003d80 <_Z14indentifyPedalB5cxx11h+0x1c>)
 8003d7a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d7e:	bf00      	nop
 8003d80:	08003da9 	.word	0x08003da9
 8003d84:	08003dcd 	.word	0x08003dcd
 8003d88:	08003df1 	.word	0x08003df1
 8003d8c:	08003e15 	.word	0x08003e15
 8003d90:	08003e39 	.word	0x08003e39
 8003d94:	08003e5d 	.word	0x08003e5d
 8003d98:	08003e81 	.word	0x08003e81
 8003d9c:	08003ea5 	.word	0x08003ea5
 8003da0:	08003ec9 	.word	0x08003ec9
 8003da4:	08003eed 	.word	0x08003eed
		case 0:
			return "nothing";
 8003da8:	f107 030c 	add.w	r3, r7, #12
 8003dac:	4618      	mov	r0, r3
 8003dae:	f00d fbf5 	bl	801159c <_ZNSaIcEC1Ev>
 8003db2:	f107 030c 	add.w	r3, r7, #12
 8003db6:	461a      	mov	r2, r3
 8003db8:	4960      	ldr	r1, [pc, #384]	; (8003f3c <_Z14indentifyPedalB5cxx11h+0x1d8>)
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f00d fdb0 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003dc0:	f107 030c 	add.w	r3, r7, #12
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f00d fbea 	bl	801159e <_ZNSaIcED1Ev>





}
 8003dca:	e0b2      	b.n	8003f32 <_Z14indentifyPedalB5cxx11h+0x1ce>
			return "atanOverdrive";
 8003dcc:	f107 0310 	add.w	r3, r7, #16
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f00d fbe3 	bl	801159c <_ZNSaIcEC1Ev>
 8003dd6:	f107 0310 	add.w	r3, r7, #16
 8003dda:	461a      	mov	r2, r3
 8003ddc:	4958      	ldr	r1, [pc, #352]	; (8003f40 <_Z14indentifyPedalB5cxx11h+0x1dc>)
 8003dde:	6878      	ldr	r0, [r7, #4]
 8003de0:	f00d fd9e 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003de4:	f107 0310 	add.w	r3, r7, #16
 8003de8:	4618      	mov	r0, r3
 8003dea:	f00d fbd8 	bl	801159e <_ZNSaIcED1Ev>
}
 8003dee:	e0a0      	b.n	8003f32 <_Z14indentifyPedalB5cxx11h+0x1ce>
			return "cubicOverdrive";
 8003df0:	f107 0314 	add.w	r3, r7, #20
 8003df4:	4618      	mov	r0, r3
 8003df6:	f00d fbd1 	bl	801159c <_ZNSaIcEC1Ev>
 8003dfa:	f107 0314 	add.w	r3, r7, #20
 8003dfe:	461a      	mov	r2, r3
 8003e00:	4950      	ldr	r1, [pc, #320]	; (8003f44 <_Z14indentifyPedalB5cxx11h+0x1e0>)
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f00d fd8c 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003e08:	f107 0314 	add.w	r3, r7, #20
 8003e0c:	4618      	mov	r0, r3
 8003e0e:	f00d fbc6 	bl	801159e <_ZNSaIcED1Ev>
}
 8003e12:	e08e      	b.n	8003f32 <_Z14indentifyPedalB5cxx11h+0x1ce>
			return "EQ high";
 8003e14:	f107 0318 	add.w	r3, r7, #24
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f00d fbbf 	bl	801159c <_ZNSaIcEC1Ev>
 8003e1e:	f107 0318 	add.w	r3, r7, #24
 8003e22:	461a      	mov	r2, r3
 8003e24:	4948      	ldr	r1, [pc, #288]	; (8003f48 <_Z14indentifyPedalB5cxx11h+0x1e4>)
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f00d fd7a 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003e2c:	f107 0318 	add.w	r3, r7, #24
 8003e30:	4618      	mov	r0, r3
 8003e32:	f00d fbb4 	bl	801159e <_ZNSaIcED1Ev>
}
 8003e36:	e07c      	b.n	8003f32 <_Z14indentifyPedalB5cxx11h+0x1ce>
			return "EQ low";
 8003e38:	f107 031c 	add.w	r3, r7, #28
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f00d fbad 	bl	801159c <_ZNSaIcEC1Ev>
 8003e42:	f107 031c 	add.w	r3, r7, #28
 8003e46:	461a      	mov	r2, r3
 8003e48:	4940      	ldr	r1, [pc, #256]	; (8003f4c <_Z14indentifyPedalB5cxx11h+0x1e8>)
 8003e4a:	6878      	ldr	r0, [r7, #4]
 8003e4c:	f00d fd68 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003e50:	f107 031c 	add.w	r3, r7, #28
 8003e54:	4618      	mov	r0, r3
 8003e56:	f00d fba2 	bl	801159e <_ZNSaIcED1Ev>
}
 8003e5a:	e06a      	b.n	8003f32 <_Z14indentifyPedalB5cxx11h+0x1ce>
			return "exp distortion";
 8003e5c:	f107 0320 	add.w	r3, r7, #32
 8003e60:	4618      	mov	r0, r3
 8003e62:	f00d fb9b 	bl	801159c <_ZNSaIcEC1Ev>
 8003e66:	f107 0320 	add.w	r3, r7, #32
 8003e6a:	461a      	mov	r2, r3
 8003e6c:	4938      	ldr	r1, [pc, #224]	; (8003f50 <_Z14indentifyPedalB5cxx11h+0x1ec>)
 8003e6e:	6878      	ldr	r0, [r7, #4]
 8003e70:	f00d fd56 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003e74:	f107 0320 	add.w	r3, r7, #32
 8003e78:	4618      	mov	r0, r3
 8003e7a:	f00d fb90 	bl	801159e <_ZNSaIcED1Ev>
}
 8003e7e:	e058      	b.n	8003f32 <_Z14indentifyPedalB5cxx11h+0x1ce>
			return "high pass filt";
 8003e80:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e84:	4618      	mov	r0, r3
 8003e86:	f00d fb89 	bl	801159c <_ZNSaIcEC1Ev>
 8003e8a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e8e:	461a      	mov	r2, r3
 8003e90:	4930      	ldr	r1, [pc, #192]	; (8003f54 <_Z14indentifyPedalB5cxx11h+0x1f0>)
 8003e92:	6878      	ldr	r0, [r7, #4]
 8003e94:	f00d fd44 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003e98:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f00d fb7e 	bl	801159e <_ZNSaIcED1Ev>
}
 8003ea2:	e046      	b.n	8003f32 <_Z14indentifyPedalB5cxx11h+0x1ce>
			return "MOD tremolo";
 8003ea4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	f00d fb77 	bl	801159c <_ZNSaIcEC1Ev>
 8003eae:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	4928      	ldr	r1, [pc, #160]	; (8003f58 <_Z14indentifyPedalB5cxx11h+0x1f4>)
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f00d fd32 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003ebc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	f00d fb6c 	bl	801159e <_ZNSaIcED1Ev>
}
 8003ec6:	e034      	b.n	8003f32 <_Z14indentifyPedalB5cxx11h+0x1ce>
			return "delay";
 8003ec8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f00d fb65 	bl	801159c <_ZNSaIcEC1Ev>
 8003ed2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	4920      	ldr	r1, [pc, #128]	; (8003f5c <_Z14indentifyPedalB5cxx11h+0x1f8>)
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	f00d fd20 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003ee0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003ee4:	4618      	mov	r0, r3
 8003ee6:	f00d fb5a 	bl	801159e <_ZNSaIcED1Ev>
}
 8003eea:	e022      	b.n	8003f32 <_Z14indentifyPedalB5cxx11h+0x1ce>
			return "reverb";
 8003eec:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	f00d fb53 	bl	801159c <_ZNSaIcEC1Ev>
 8003ef6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003efa:	461a      	mov	r2, r3
 8003efc:	4918      	ldr	r1, [pc, #96]	; (8003f60 <_Z14indentifyPedalB5cxx11h+0x1fc>)
 8003efe:	6878      	ldr	r0, [r7, #4]
 8003f00:	f00d fd0e 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003f04:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f08:	4618      	mov	r0, r3
 8003f0a:	f00d fb48 	bl	801159e <_ZNSaIcED1Ev>
}
 8003f0e:	e010      	b.n	8003f32 <_Z14indentifyPedalB5cxx11h+0x1ce>
	return "error";
 8003f10:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f14:	4618      	mov	r0, r3
 8003f16:	f00d fb41 	bl	801159c <_ZNSaIcEC1Ev>
 8003f1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f1e:	461a      	mov	r2, r3
 8003f20:	4910      	ldr	r1, [pc, #64]	; (8003f64 <_Z14indentifyPedalB5cxx11h+0x200>)
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f00d fcfc 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8003f28:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	f00d fb36 	bl	801159e <_ZNSaIcED1Ev>
}
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	3738      	adds	r7, #56	; 0x38
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	08015adc 	.word	0x08015adc
 8003f40:	08015ae4 	.word	0x08015ae4
 8003f44:	08015af4 	.word	0x08015af4
 8003f48:	08015b04 	.word	0x08015b04
 8003f4c:	08015b0c 	.word	0x08015b0c
 8003f50:	08015b14 	.word	0x08015b14
 8003f54:	08015b24 	.word	0x08015b24
 8003f58:	08015b34 	.word	0x08015b34
 8003f5c:	08015a74 	.word	0x08015a74
 8003f60:	08015b40 	.word	0x08015b40
 8003f64:	08015b48 	.word	0x08015b48

08003f68 <_Z16drawEditNameMenuv>:
string nameArray;
char currentCharacter;
void drawEditNameMenu(){
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	af00      	add	r7, sp, #0
	ssd1306_Fill(Black);
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	f002 fa59 	bl	8006424 <ssd1306_Fill>
	ssd1306_SetCursor(3+4, 46+4);
 8003f72:	2132      	movs	r1, #50	; 0x32
 8003f74:	2007      	movs	r0, #7
 8003f76:	f002 fb97 	bl	80066a8 <ssd1306_SetCursor>
	ssd1306_WriteString((char*)"delete - done - next", Font_6x8, White);
 8003f7a:	4a11      	ldr	r2, [pc, #68]	; (8003fc0 <_Z16drawEditNameMenuv+0x58>)
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	ca06      	ldmia	r2, {r1, r2}
 8003f80:	4810      	ldr	r0, [pc, #64]	; (8003fc4 <_Z16drawEditNameMenuv+0x5c>)
 8003f82:	f002 fb6b 	bl	800665c <ssd1306_WriteString>
	ssd1306_SetCursor(3+4, 24+4);
 8003f86:	211c      	movs	r1, #28
 8003f88:	2007      	movs	r0, #7
 8003f8a:	f002 fb8d 	bl	80066a8 <ssd1306_SetCursor>
	ssd1306_WriteString((char*)"11 chars max", Font_7x10, White);
 8003f8e:	4a0e      	ldr	r2, [pc, #56]	; (8003fc8 <_Z16drawEditNameMenuv+0x60>)
 8003f90:	2301      	movs	r3, #1
 8003f92:	ca06      	ldmia	r2, {r1, r2}
 8003f94:	480d      	ldr	r0, [pc, #52]	; (8003fcc <_Z16drawEditNameMenuv+0x64>)
 8003f96:	f002 fb61 	bl	800665c <ssd1306_WriteString>
	ssd1306_SetCursor(3+4, 2+4);
 8003f9a:	2106      	movs	r1, #6
 8003f9c:	2007      	movs	r0, #7
 8003f9e:	f002 fb83 	bl	80066a8 <ssd1306_SetCursor>
	ssd1306_WriteString(const_cast<char*>(nameArray.c_str()), Font_7x10, White);
 8003fa2:	480b      	ldr	r0, [pc, #44]	; (8003fd0 <_Z16drawEditNameMenuv+0x68>)
 8003fa4:	f00d fc81 	bl	80118aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 8003fa8:	4a07      	ldr	r2, [pc, #28]	; (8003fc8 <_Z16drawEditNameMenuv+0x60>)
 8003faa:	2301      	movs	r3, #1
 8003fac:	ca06      	ldmia	r2, {r1, r2}
 8003fae:	f002 fb55 	bl	800665c <ssd1306_WriteString>
	ssd1306_UpdateScreen();
 8003fb2:	f002 fa4f 	bl	8006454 <ssd1306_UpdateScreen>
	osDelay(1);
 8003fb6:	2001      	movs	r0, #1
 8003fb8:	f00a fb12 	bl	800e5e0 <osDelay>
}
 8003fbc:	bf00      	nop
 8003fbe:	bd80      	pop	{r7, pc}
 8003fc0:	20000190 	.word	0x20000190
 8003fc4:	08015b50 	.word	0x08015b50
 8003fc8:	20000198 	.word	0x20000198
 8003fcc:	08015b68 	.word	0x08015b68
 8003fd0:	2001a49c 	.word	0x2001a49c

08003fd4 <_Z23drawIndividualPedalMenuv>:
void drawIndividualPedalMenu(){
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b096      	sub	sp, #88	; 0x58
 8003fd8:	af02      	add	r7, sp, #8
	//int num = sizeof(PEDALSMENUOPTIONSSTRINGS)/sizeof(PEDALSMENUOPTIONSSTRINGS[0]);
	ssd1306_Fill(Black);
 8003fda:	2000      	movs	r0, #0
 8003fdc:	f002 fa22 	bl	8006424 <ssd1306_Fill>
	char str[4];
	ssd1306_DrawBitmap(126,0,epd_bitmap__scrollBar,1,64,White);
 8003fe0:	2301      	movs	r3, #1
 8003fe2:	9301      	str	r3, [sp, #4]
 8003fe4:	2340      	movs	r3, #64	; 0x40
 8003fe6:	9300      	str	r3, [sp, #0]
 8003fe8:	2301      	movs	r3, #1
 8003fea:	4a78      	ldr	r2, [pc, #480]	; (80041cc <_Z23drawIndividualPedalMenuv+0x1f8>)
 8003fec:	2100      	movs	r1, #0
 8003fee:	207e      	movs	r0, #126	; 0x7e
 8003ff0:	f002 fb72 	bl	80066d8 <ssd1306_DrawBitmap>
	ssd1306_DrawBitmap(0,22,epd_bitmap__border,106,21,White);
 8003ff4:	2301      	movs	r3, #1
 8003ff6:	9301      	str	r3, [sp, #4]
 8003ff8:	2315      	movs	r3, #21
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	236a      	movs	r3, #106	; 0x6a
 8003ffe:	4a74      	ldr	r2, [pc, #464]	; (80041d0 <_Z23drawIndividualPedalMenuv+0x1fc>)
 8004000:	2116      	movs	r1, #22
 8004002:	2000      	movs	r0, #0
 8004004:	f002 fb68 	bl	80066d8 <ssd1306_DrawBitmap>
    string pedalName0 = indentifyPedal(allPedalsData.allChains[pedalMenu].allPedals[(individualPedalMenu-1+MAX_PEDALS_PER_CHAIN)%MAX_PEDALS_PER_CHAIN].parameters[0]);
 8004008:	4b72      	ldr	r3, [pc, #456]	; (80041d4 <_Z23drawIndividualPedalMenuv+0x200>)
 800400a:	6819      	ldr	r1, [r3, #0]
 800400c:	4b72      	ldr	r3, [pc, #456]	; (80041d8 <_Z23drawIndividualPedalMenuv+0x204>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	3303      	adds	r3, #3
 8004012:	4258      	negs	r0, r3
 8004014:	f003 0203 	and.w	r2, r3, #3
 8004018:	f000 0303 	and.w	r3, r0, #3
 800401c:	bf58      	it	pl
 800401e:	425a      	negpl	r2, r3
 8004020:	486e      	ldr	r0, [pc, #440]	; (80041dc <_Z23drawIndividualPedalMenuv+0x208>)
 8004022:	460b      	mov	r3, r1
 8004024:	00db      	lsls	r3, r3, #3
 8004026:	1a5b      	subs	r3, r3, r1
 8004028:	4413      	add	r3, r2
 800402a:	f810 2023 	ldrb.w	r2, [r0, r3, lsl #2]
 800402e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004032:	4611      	mov	r1, r2
 8004034:	4618      	mov	r0, r3
 8004036:	f7ff fe95 	bl	8003d64 <_Z14indentifyPedalB5cxx11h>
    string pedalName1 = indentifyPedal(allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[0]);
 800403a:	4b66      	ldr	r3, [pc, #408]	; (80041d4 <_Z23drawIndividualPedalMenuv+0x200>)
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4b66      	ldr	r3, [pc, #408]	; (80041d8 <_Z23drawIndividualPedalMenuv+0x204>)
 8004040:	6819      	ldr	r1, [r3, #0]
 8004042:	4866      	ldr	r0, [pc, #408]	; (80041dc <_Z23drawIndividualPedalMenuv+0x208>)
 8004044:	4613      	mov	r3, r2
 8004046:	00db      	lsls	r3, r3, #3
 8004048:	1a9b      	subs	r3, r3, r2
 800404a:	440b      	add	r3, r1
 800404c:	f810 2023 	ldrb.w	r2, [r0, r3, lsl #2]
 8004050:	f107 031c 	add.w	r3, r7, #28
 8004054:	4611      	mov	r1, r2
 8004056:	4618      	mov	r0, r3
 8004058:	f7ff fe84 	bl	8003d64 <_Z14indentifyPedalB5cxx11h>
    string pedalName2 = indentifyPedal(allPedalsData.allChains[pedalMenu].allPedals[(individualPedalMenu+1)%MAX_PEDALS_PER_CHAIN].parameters[0]);
 800405c:	4b5d      	ldr	r3, [pc, #372]	; (80041d4 <_Z23drawIndividualPedalMenuv+0x200>)
 800405e:	6819      	ldr	r1, [r3, #0]
 8004060:	4b5d      	ldr	r3, [pc, #372]	; (80041d8 <_Z23drawIndividualPedalMenuv+0x204>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	3301      	adds	r3, #1
 8004066:	4258      	negs	r0, r3
 8004068:	f003 0203 	and.w	r2, r3, #3
 800406c:	f000 0303 	and.w	r3, r0, #3
 8004070:	bf58      	it	pl
 8004072:	425a      	negpl	r2, r3
 8004074:	4859      	ldr	r0, [pc, #356]	; (80041dc <_Z23drawIndividualPedalMenuv+0x208>)
 8004076:	460b      	mov	r3, r1
 8004078:	00db      	lsls	r3, r3, #3
 800407a:	1a5b      	subs	r3, r3, r1
 800407c:	4413      	add	r3, r2
 800407e:	f810 2023 	ldrb.w	r2, [r0, r3, lsl #2]
 8004082:	1d3b      	adds	r3, r7, #4
 8004084:	4611      	mov	r1, r2
 8004086:	4618      	mov	r0, r3
 8004088:	f7ff fe6c 	bl	8003d64 <_Z14indentifyPedalB5cxx11h>

    ssd1306_SetCursor(3+4, 2+4);
 800408c:	2106      	movs	r1, #6
 800408e:	2007      	movs	r0, #7
 8004090:	f002 fb0a 	bl	80066a8 <ssd1306_SetCursor>
	sprintf(str, "%d", (individualPedalMenu-1+MAX_PEDALS_PER_CHAIN)%MAX_PEDALS_PER_CHAIN+1);
 8004094:	4b50      	ldr	r3, [pc, #320]	; (80041d8 <_Z23drawIndividualPedalMenuv+0x204>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	3303      	adds	r3, #3
 800409a:	425a      	negs	r2, r3
 800409c:	f003 0303 	and.w	r3, r3, #3
 80040a0:	f002 0203 	and.w	r2, r2, #3
 80040a4:	bf58      	it	pl
 80040a6:	4253      	negpl	r3, r2
 80040a8:	1c5a      	adds	r2, r3, #1
 80040aa:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040ae:	494c      	ldr	r1, [pc, #304]	; (80041e0 <_Z23drawIndividualPedalMenuv+0x20c>)
 80040b0:	4618      	mov	r0, r3
 80040b2:	f011 f861 	bl	8015178 <siprintf>
    ssd1306_WriteString(str, Font_7x10, White);
 80040b6:	4a4b      	ldr	r2, [pc, #300]	; (80041e4 <_Z23drawIndividualPedalMenuv+0x210>)
 80040b8:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 80040bc:	2301      	movs	r3, #1
 80040be:	ca06      	ldmia	r2, {r1, r2}
 80040c0:	f002 facc 	bl	800665c <ssd1306_WriteString>
    ssd1306_SetCursor(3+16+4, 2+4);
 80040c4:	2106      	movs	r1, #6
 80040c6:	2017      	movs	r0, #23
 80040c8:	f002 faee 	bl	80066a8 <ssd1306_SetCursor>
	//ssd1306_WriteString(const_cast<char*>(pedalName.c_str()), Font_7x10, White);
	ssd1306_WriteString(const_cast<char*>(pedalName0.c_str()), Font_7x10, White);
 80040cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80040d0:	4618      	mov	r0, r3
 80040d2:	f00d fbea 	bl	80118aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80040d6:	4a43      	ldr	r2, [pc, #268]	; (80041e4 <_Z23drawIndividualPedalMenuv+0x210>)
 80040d8:	2301      	movs	r3, #1
 80040da:	ca06      	ldmia	r2, {r1, r2}
 80040dc:	f002 fabe 	bl	800665c <ssd1306_WriteString>

	ssd1306_SetCursor(3+4, 24+4);
 80040e0:	211c      	movs	r1, #28
 80040e2:	2007      	movs	r0, #7
 80040e4:	f002 fae0 	bl	80066a8 <ssd1306_SetCursor>
	sprintf(str, "%d", individualPedalMenu+1);
 80040e8:	4b3b      	ldr	r3, [pc, #236]	; (80041d8 <_Z23drawIndividualPedalMenuv+0x204>)
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	1c5a      	adds	r2, r3, #1
 80040ee:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80040f2:	493b      	ldr	r1, [pc, #236]	; (80041e0 <_Z23drawIndividualPedalMenuv+0x20c>)
 80040f4:	4618      	mov	r0, r3
 80040f6:	f011 f83f 	bl	8015178 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 80040fa:	4a3a      	ldr	r2, [pc, #232]	; (80041e4 <_Z23drawIndividualPedalMenuv+0x210>)
 80040fc:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8004100:	2301      	movs	r3, #1
 8004102:	ca06      	ldmia	r2, {r1, r2}
 8004104:	f002 faaa 	bl	800665c <ssd1306_WriteString>
	ssd1306_SetCursor(3+16+4, 24+4);
 8004108:	211c      	movs	r1, #28
 800410a:	2017      	movs	r0, #23
 800410c:	f002 facc 	bl	80066a8 <ssd1306_SetCursor>
	ssd1306_WriteString(const_cast<char*>(pedalName1.c_str()), Font_7x10, White);
 8004110:	f107 031c 	add.w	r3, r7, #28
 8004114:	4618      	mov	r0, r3
 8004116:	f00d fbc8 	bl	80118aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800411a:	4a32      	ldr	r2, [pc, #200]	; (80041e4 <_Z23drawIndividualPedalMenuv+0x210>)
 800411c:	2301      	movs	r3, #1
 800411e:	ca06      	ldmia	r2, {r1, r2}
 8004120:	f002 fa9c 	bl	800665c <ssd1306_WriteString>

	ssd1306_SetCursor(3+4, 46+4);
 8004124:	2132      	movs	r1, #50	; 0x32
 8004126:	2007      	movs	r0, #7
 8004128:	f002 fabe 	bl	80066a8 <ssd1306_SetCursor>
	sprintf(str, "%d",  (individualPedalMenu+1)%MAX_PEDALS_PER_CHAIN+1);
 800412c:	4b2a      	ldr	r3, [pc, #168]	; (80041d8 <_Z23drawIndividualPedalMenuv+0x204>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	3301      	adds	r3, #1
 8004132:	425a      	negs	r2, r3
 8004134:	f003 0303 	and.w	r3, r3, #3
 8004138:	f002 0203 	and.w	r2, r2, #3
 800413c:	bf58      	it	pl
 800413e:	4253      	negpl	r3, r2
 8004140:	1c5a      	adds	r2, r3, #1
 8004142:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004146:	4926      	ldr	r1, [pc, #152]	; (80041e0 <_Z23drawIndividualPedalMenuv+0x20c>)
 8004148:	4618      	mov	r0, r3
 800414a:	f011 f815 	bl	8015178 <siprintf>
	ssd1306_WriteString(str, Font_7x10, White);
 800414e:	4a25      	ldr	r2, [pc, #148]	; (80041e4 <_Z23drawIndividualPedalMenuv+0x210>)
 8004150:	f107 004c 	add.w	r0, r7, #76	; 0x4c
 8004154:	2301      	movs	r3, #1
 8004156:	ca06      	ldmia	r2, {r1, r2}
 8004158:	f002 fa80 	bl	800665c <ssd1306_WriteString>
	ssd1306_SetCursor(3+16+4, 46+4);
 800415c:	2132      	movs	r1, #50	; 0x32
 800415e:	2017      	movs	r0, #23
 8004160:	f002 faa2 	bl	80066a8 <ssd1306_SetCursor>
	ssd1306_WriteString(const_cast<char*>(pedalName2.c_str()), Font_7x10, White);
 8004164:	1d3b      	adds	r3, r7, #4
 8004166:	4618      	mov	r0, r3
 8004168:	f00d fb9f 	bl	80118aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 800416c:	4a1d      	ldr	r2, [pc, #116]	; (80041e4 <_Z23drawIndividualPedalMenuv+0x210>)
 800416e:	2301      	movs	r3, #1
 8004170:	ca06      	ldmia	r2, {r1, r2}
 8004172:	f002 fa73 	bl	800665c <ssd1306_WriteString>

	ssd1306_DrawBitmap(125,(64-7)*pedalMenu/4,epd_bitmap__handle,3,7,White);
 8004176:	4b17      	ldr	r3, [pc, #92]	; (80041d4 <_Z23drawIndividualPedalMenuv+0x200>)
 8004178:	681a      	ldr	r2, [r3, #0]
 800417a:	4613      	mov	r3, r2
 800417c:	00db      	lsls	r3, r3, #3
 800417e:	1a9b      	subs	r3, r3, r2
 8004180:	00db      	lsls	r3, r3, #3
 8004182:	4413      	add	r3, r2
 8004184:	2b00      	cmp	r3, #0
 8004186:	da00      	bge.n	800418a <_Z23drawIndividualPedalMenuv+0x1b6>
 8004188:	3303      	adds	r3, #3
 800418a:	109b      	asrs	r3, r3, #2
 800418c:	b2d9      	uxtb	r1, r3
 800418e:	2301      	movs	r3, #1
 8004190:	9301      	str	r3, [sp, #4]
 8004192:	2307      	movs	r3, #7
 8004194:	9300      	str	r3, [sp, #0]
 8004196:	2303      	movs	r3, #3
 8004198:	4a13      	ldr	r2, [pc, #76]	; (80041e8 <_Z23drawIndividualPedalMenuv+0x214>)
 800419a:	207d      	movs	r0, #125	; 0x7d
 800419c:	f002 fa9c 	bl	80066d8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80041a0:	f002 f958 	bl	8006454 <ssd1306_UpdateScreen>
	osDelay(1);
 80041a4:	2001      	movs	r0, #1
 80041a6:	f00a fa1b 	bl	800e5e0 <osDelay>
}
 80041aa:	1d3b      	adds	r3, r7, #4
 80041ac:	4618      	mov	r0, r3
 80041ae:	f00d fab8 	bl	8011722 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80041b2:	f107 031c 	add.w	r3, r7, #28
 80041b6:	4618      	mov	r0, r3
 80041b8:	f00d fab3 	bl	8011722 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80041bc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80041c0:	4618      	mov	r0, r3
 80041c2:	f00d faae 	bl	8011722 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
 80041c6:	3750      	adds	r7, #80	; 0x50
 80041c8:	46bd      	mov	sp, r7
 80041ca:	bd80      	pop	{r7, pc}
 80041cc:	08015dc0 	.word	0x08015dc0
 80041d0:	08015c50 	.word	0x08015c50
 80041d4:	200194ec 	.word	0x200194ec
 80041d8:	200194e4 	.word	0x200194e4
 80041dc:	2001938c 	.word	0x2001938c
 80041e0:	08015ad8 	.word	0x08015ad8
 80041e4:	20000198 	.word	0x20000198
 80041e8:	08015d98 	.word	0x08015d98

080041ec <_Z30drawIndividualPedalMenuOptionsv>:
void drawIndividualPedalMenuOptions(){
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b084      	sub	sp, #16
 80041f0:	af02      	add	r7, sp, #8
	int num = sizeof(INDIVIDUALPEDALOPTIONSTRINGS)/sizeof(INDIVIDUALPEDALOPTIONSTRINGS[0]);
 80041f2:	2303      	movs	r3, #3
 80041f4:	607b      	str	r3, [r7, #4]
		ssd1306_Fill(Black);
 80041f6:	2000      	movs	r0, #0
 80041f8:	f002 f914 	bl	8006424 <ssd1306_Fill>
		ssd1306_DrawBitmap(126,0,epd_bitmap__scrollBar,1,64,White);
 80041fc:	2301      	movs	r3, #1
 80041fe:	9301      	str	r3, [sp, #4]
 8004200:	2340      	movs	r3, #64	; 0x40
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	2301      	movs	r3, #1
 8004206:	4a3c      	ldr	r2, [pc, #240]	; (80042f8 <_Z30drawIndividualPedalMenuOptionsv+0x10c>)
 8004208:	2100      	movs	r1, #0
 800420a:	207e      	movs	r0, #126	; 0x7e
 800420c:	f002 fa64 	bl	80066d8 <ssd1306_DrawBitmap>
		ssd1306_DrawBitmap(0,22,epd_bitmap__border,106,21,White);
 8004210:	2301      	movs	r3, #1
 8004212:	9301      	str	r3, [sp, #4]
 8004214:	2315      	movs	r3, #21
 8004216:	9300      	str	r3, [sp, #0]
 8004218:	236a      	movs	r3, #106	; 0x6a
 800421a:	4a38      	ldr	r2, [pc, #224]	; (80042fc <_Z30drawIndividualPedalMenuOptionsv+0x110>)
 800421c:	2116      	movs	r1, #22
 800421e:	2000      	movs	r0, #0
 8004220:	f002 fa5a 	bl	80066d8 <ssd1306_DrawBitmap>

		ssd1306_SetCursor(3+16+4, 2+4);
 8004224:	2106      	movs	r1, #6
 8004226:	2017      	movs	r0, #23
 8004228:	f002 fa3e 	bl	80066a8 <ssd1306_SetCursor>
		ssd1306_WriteString(INDIVIDUALPEDALOPTIONSTRINGS[(individualPedalMenuOption+num-1)%num], Font_7x10, White);
 800422c:	4b34      	ldr	r3, [pc, #208]	; (8004300 <_Z30drawIndividualPedalMenuOptionsv+0x114>)
 800422e:	681a      	ldr	r2, [r3, #0]
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	4413      	add	r3, r2
 8004234:	3b01      	subs	r3, #1
 8004236:	687a      	ldr	r2, [r7, #4]
 8004238:	fb93 f2f2 	sdiv	r2, r3, r2
 800423c:	6879      	ldr	r1, [r7, #4]
 800423e:	fb01 f202 	mul.w	r2, r1, r2
 8004242:	1a9a      	subs	r2, r3, r2
 8004244:	4613      	mov	r3, r2
 8004246:	00db      	lsls	r3, r3, #3
 8004248:	1a9b      	subs	r3, r3, r2
 800424a:	005b      	lsls	r3, r3, #1
 800424c:	4a2d      	ldr	r2, [pc, #180]	; (8004304 <_Z30drawIndividualPedalMenuOptionsv+0x118>)
 800424e:	1898      	adds	r0, r3, r2
 8004250:	4a2d      	ldr	r2, [pc, #180]	; (8004308 <_Z30drawIndividualPedalMenuOptionsv+0x11c>)
 8004252:	2301      	movs	r3, #1
 8004254:	ca06      	ldmia	r2, {r1, r2}
 8004256:	f002 fa01 	bl	800665c <ssd1306_WriteString>

		ssd1306_SetCursor(3+16+4, 24+4);
 800425a:	211c      	movs	r1, #28
 800425c:	2017      	movs	r0, #23
 800425e:	f002 fa23 	bl	80066a8 <ssd1306_SetCursor>
		ssd1306_WriteString(INDIVIDUALPEDALOPTIONSTRINGS[(individualPedalMenuOption)%num], Font_7x10, White);
 8004262:	4b27      	ldr	r3, [pc, #156]	; (8004300 <_Z30drawIndividualPedalMenuOptionsv+0x114>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	fb93 f2f2 	sdiv	r2, r3, r2
 800426c:	6879      	ldr	r1, [r7, #4]
 800426e:	fb01 f202 	mul.w	r2, r1, r2
 8004272:	1a9a      	subs	r2, r3, r2
 8004274:	4613      	mov	r3, r2
 8004276:	00db      	lsls	r3, r3, #3
 8004278:	1a9b      	subs	r3, r3, r2
 800427a:	005b      	lsls	r3, r3, #1
 800427c:	4a21      	ldr	r2, [pc, #132]	; (8004304 <_Z30drawIndividualPedalMenuOptionsv+0x118>)
 800427e:	1898      	adds	r0, r3, r2
 8004280:	4a21      	ldr	r2, [pc, #132]	; (8004308 <_Z30drawIndividualPedalMenuOptionsv+0x11c>)
 8004282:	2301      	movs	r3, #1
 8004284:	ca06      	ldmia	r2, {r1, r2}
 8004286:	f002 f9e9 	bl	800665c <ssd1306_WriteString>
		ssd1306_SetCursor(3+16+4, 46+4);
 800428a:	2132      	movs	r1, #50	; 0x32
 800428c:	2017      	movs	r0, #23
 800428e:	f002 fa0b 	bl	80066a8 <ssd1306_SetCursor>
		ssd1306_WriteString(INDIVIDUALPEDALOPTIONSTRINGS[(individualPedalMenuOption+1)%num], Font_7x10, White);
 8004292:	4b1b      	ldr	r3, [pc, #108]	; (8004300 <_Z30drawIndividualPedalMenuOptionsv+0x114>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	3301      	adds	r3, #1
 8004298:	687a      	ldr	r2, [r7, #4]
 800429a:	fb93 f2f2 	sdiv	r2, r3, r2
 800429e:	6879      	ldr	r1, [r7, #4]
 80042a0:	fb01 f202 	mul.w	r2, r1, r2
 80042a4:	1a9a      	subs	r2, r3, r2
 80042a6:	4613      	mov	r3, r2
 80042a8:	00db      	lsls	r3, r3, #3
 80042aa:	1a9b      	subs	r3, r3, r2
 80042ac:	005b      	lsls	r3, r3, #1
 80042ae:	4a15      	ldr	r2, [pc, #84]	; (8004304 <_Z30drawIndividualPedalMenuOptionsv+0x118>)
 80042b0:	1898      	adds	r0, r3, r2
 80042b2:	4a15      	ldr	r2, [pc, #84]	; (8004308 <_Z30drawIndividualPedalMenuOptionsv+0x11c>)
 80042b4:	2301      	movs	r3, #1
 80042b6:	ca06      	ldmia	r2, {r1, r2}
 80042b8:	f002 f9d0 	bl	800665c <ssd1306_WriteString>
		ssd1306_DrawBitmap(125,(64-7)*individualPedalMenuOption/(num-1),epd_bitmap__handle,3,7,White);
 80042bc:	4b10      	ldr	r3, [pc, #64]	; (8004300 <_Z30drawIndividualPedalMenuOptionsv+0x114>)
 80042be:	681a      	ldr	r2, [r3, #0]
 80042c0:	4613      	mov	r3, r2
 80042c2:	00db      	lsls	r3, r3, #3
 80042c4:	1a9b      	subs	r3, r3, r2
 80042c6:	00db      	lsls	r3, r3, #3
 80042c8:	441a      	add	r2, r3
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	3b01      	subs	r3, #1
 80042ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80042d2:	b2d9      	uxtb	r1, r3
 80042d4:	2301      	movs	r3, #1
 80042d6:	9301      	str	r3, [sp, #4]
 80042d8:	2307      	movs	r3, #7
 80042da:	9300      	str	r3, [sp, #0]
 80042dc:	2303      	movs	r3, #3
 80042de:	4a0b      	ldr	r2, [pc, #44]	; (800430c <_Z30drawIndividualPedalMenuOptionsv+0x120>)
 80042e0:	207d      	movs	r0, #125	; 0x7d
 80042e2:	f002 f9f9 	bl	80066d8 <ssd1306_DrawBitmap>
		ssd1306_UpdateScreen();
 80042e6:	f002 f8b5 	bl	8006454 <ssd1306_UpdateScreen>
		osDelay(1);
 80042ea:	2001      	movs	r0, #1
 80042ec:	f00a f978 	bl	800e5e0 <osDelay>
}
 80042f0:	bf00      	nop
 80042f2:	3708      	adds	r7, #8
 80042f4:	46bd      	mov	sp, r7
 80042f6:	bd80      	pop	{r7, pc}
 80042f8:	08015dc0 	.word	0x08015dc0
 80042fc:	08015c50 	.word	0x08015c50
 8004300:	200194e8 	.word	0x200194e8
 8004304:	20000108 	.word	0x20000108
 8004308:	20000198 	.word	0x20000198
 800430c:	08015d98 	.word	0x08015d98

08004310 <_Z10numToArrayiPi>:

char** numToArray(int num, int* size){
 8004310:	b480      	push	{r7}
 8004312:	b083      	sub	sp, #12
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
 8004318:	6039      	str	r1, [r7, #0]
	switch(num){
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b09      	cmp	r3, #9
 800431e:	d849      	bhi.n	80043b4 <_Z10numToArrayiPi+0xa4>
 8004320:	a201      	add	r2, pc, #4	; (adr r2, 8004328 <_Z10numToArrayiPi+0x18>)
 8004322:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004326:	bf00      	nop
 8004328:	08004351 	.word	0x08004351
 800432c:	0800435b 	.word	0x0800435b
 8004330:	08004365 	.word	0x08004365
 8004334:	0800436f 	.word	0x0800436f
 8004338:	08004379 	.word	0x08004379
 800433c:	08004383 	.word	0x08004383
 8004340:	0800438d 	.word	0x0800438d
 8004344:	08004397 	.word	0x08004397
 8004348:	080043a1 	.word	0x080043a1
 800434c:	080043ab 	.word	0x080043ab
			case 0:
	            *size = 0;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2200      	movs	r2, #0
 8004354:	601a      	str	r2, [r3, #0]
				return (char**)NOTHING_STRINGS;
 8004356:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <_Z10numToArrayiPi+0xb4>)
 8004358:	e02d      	b.n	80043b6 <_Z10numToArrayiPi+0xa6>
			case 1:
				*size = 1;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	2201      	movs	r2, #1
 800435e:	601a      	str	r2, [r3, #0]
				return (char**)ATAN_STRINGS;
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <_Z10numToArrayiPi+0xb8>)
 8004362:	e028      	b.n	80043b6 <_Z10numToArrayiPi+0xa6>
			case 2:
				*size = 2;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	2202      	movs	r2, #2
 8004368:	601a      	str	r2, [r3, #0]
				return (char**)CUBIC_STRINGS;
 800436a:	4b18      	ldr	r3, [pc, #96]	; (80043cc <_Z10numToArrayiPi+0xbc>)
 800436c:	e023      	b.n	80043b6 <_Z10numToArrayiPi+0xa6>
			case 3:
				*size = 2;
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	2202      	movs	r2, #2
 8004372:	601a      	str	r2, [r3, #0]
				return (char**)EQ_HIGH_STRINGS;
 8004374:	4b16      	ldr	r3, [pc, #88]	; (80043d0 <_Z10numToArrayiPi+0xc0>)
 8004376:	e01e      	b.n	80043b6 <_Z10numToArrayiPi+0xa6>
			case 4:
				*size = 2;
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	2202      	movs	r2, #2
 800437c:	601a      	str	r2, [r3, #0]
				return (char**)EQ_LOW_STRINGS;
 800437e:	4b15      	ldr	r3, [pc, #84]	; (80043d4 <_Z10numToArrayiPi+0xc4>)
 8004380:	e019      	b.n	80043b6 <_Z10numToArrayiPi+0xa6>
			case 5:
				*size = 2;
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	2202      	movs	r2, #2
 8004386:	601a      	str	r2, [r3, #0]
				return (char**)EXP_DIST_STRINGS;
 8004388:	4b13      	ldr	r3, [pc, #76]	; (80043d8 <_Z10numToArrayiPi+0xc8>)
 800438a:	e014      	b.n	80043b6 <_Z10numToArrayiPi+0xa6>
			case 6:
				*size = 1;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	2201      	movs	r2, #1
 8004390:	601a      	str	r2, [r3, #0]
				return (char**)FIRST_ORDER_STRINGS;
 8004392:	4b12      	ldr	r3, [pc, #72]	; (80043dc <_Z10numToArrayiPi+0xcc>)
 8004394:	e00f      	b.n	80043b6 <_Z10numToArrayiPi+0xa6>
			case 7:
				*size = 2;
 8004396:	683b      	ldr	r3, [r7, #0]
 8004398:	2202      	movs	r2, #2
 800439a:	601a      	str	r2, [r3, #0]
				return (char**)MOD_TREM_STRINGS;
 800439c:	4b10      	ldr	r3, [pc, #64]	; (80043e0 <_Z10numToArrayiPi+0xd0>)
 800439e:	e00a      	b.n	80043b6 <_Z10numToArrayiPi+0xa6>
			case 8:
				*size = 3;
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	2203      	movs	r2, #3
 80043a4:	601a      	str	r2, [r3, #0]
				return (char**)DELAY_STRINGS;
 80043a6:	4b0f      	ldr	r3, [pc, #60]	; (80043e4 <_Z10numToArrayiPi+0xd4>)
 80043a8:	e005      	b.n	80043b6 <_Z10numToArrayiPi+0xa6>
			case 9:
				*size = 3;
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2203      	movs	r2, #3
 80043ae:	601a      	str	r2, [r3, #0]
				return (char**)REVERB_STRINGS;
 80043b0:	4b0d      	ldr	r3, [pc, #52]	; (80043e8 <_Z10numToArrayiPi+0xd8>)
 80043b2:	e000      	b.n	80043b6 <_Z10numToArrayiPi+0xa6>
		}
	return 0;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	370c      	adds	r7, #12
 80043ba:	46bd      	mov	sp, r7
 80043bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	2000022c 	.word	0x2000022c
 80043c8:	20000134 	.word	0x20000134
 80043cc:	20000138 	.word	0x20000138
 80043d0:	20000140 	.word	0x20000140
 80043d4:	20000148 	.word	0x20000148
 80043d8:	20000150 	.word	0x20000150
 80043dc:	20000158 	.word	0x20000158
 80043e0:	2000015c 	.word	0x2000015c
 80043e4:	20000164 	.word	0x20000164
 80043e8:	20000170 	.word	0x20000170

080043ec <_Z21drawParameterEditMenuv>:
void drawParameterEditMenu(){
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b088      	sub	sp, #32
 80043f0:	af02      	add	r7, sp, #8
	//int num = sizeof(PEDALSMENUOPTIONSSTRINGS)/sizeof(PEDALSMENUOPTIONSSTRINGS[0]);
	ssd1306_Fill(Black);
 80043f2:	2000      	movs	r0, #0
 80043f4:	f002 f816 	bl	8006424 <ssd1306_Fill>
	ssd1306_DrawBitmap(126,0,epd_bitmap__scrollBar,1,64,White);
 80043f8:	2301      	movs	r3, #1
 80043fa:	9301      	str	r3, [sp, #4]
 80043fc:	2340      	movs	r3, #64	; 0x40
 80043fe:	9300      	str	r3, [sp, #0]
 8004400:	2301      	movs	r3, #1
 8004402:	4a68      	ldr	r2, [pc, #416]	; (80045a4 <_Z21drawParameterEditMenuv+0x1b8>)
 8004404:	2100      	movs	r1, #0
 8004406:	207e      	movs	r0, #126	; 0x7e
 8004408:	f002 f966 	bl	80066d8 <ssd1306_DrawBitmap>




	int size;
	char** stringPointer = numToArray(allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[0],&size);
 800440c:	4b66      	ldr	r3, [pc, #408]	; (80045a8 <_Z21drawParameterEditMenuv+0x1bc>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4b66      	ldr	r3, [pc, #408]	; (80045ac <_Z21drawParameterEditMenuv+0x1c0>)
 8004412:	6819      	ldr	r1, [r3, #0]
 8004414:	4866      	ldr	r0, [pc, #408]	; (80045b0 <_Z21drawParameterEditMenuv+0x1c4>)
 8004416:	4613      	mov	r3, r2
 8004418:	00db      	lsls	r3, r3, #3
 800441a:	1a9b      	subs	r3, r3, r2
 800441c:	440b      	add	r3, r1
 800441e:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 8004422:	461a      	mov	r2, r3
 8004424:	f107 0310 	add.w	r3, r7, #16
 8004428:	4619      	mov	r1, r3
 800442a:	4610      	mov	r0, r2
 800442c:	f7ff ff70 	bl	8004310 <_Z10numToArrayiPi>
 8004430:	6178      	str	r0, [r7, #20]
	if(size>0){
 8004432:	693b      	ldr	r3, [r7, #16]
 8004434:	2b00      	cmp	r3, #0
 8004436:	dd12      	ble.n	800445e <_Z21drawParameterEditMenuv+0x72>
		ssd1306_DrawBitmap(0,22*parameterMenu,epd_bitmap__border,106,21,White);
 8004438:	4b5e      	ldr	r3, [pc, #376]	; (80045b4 <_Z21drawParameterEditMenuv+0x1c8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	b2db      	uxtb	r3, r3
 800443e:	461a      	mov	r2, r3
 8004440:	0092      	lsls	r2, r2, #2
 8004442:	441a      	add	r2, r3
 8004444:	0052      	lsls	r2, r2, #1
 8004446:	4413      	add	r3, r2
 8004448:	005b      	lsls	r3, r3, #1
 800444a:	b2d9      	uxtb	r1, r3
 800444c:	2301      	movs	r3, #1
 800444e:	9301      	str	r3, [sp, #4]
 8004450:	2315      	movs	r3, #21
 8004452:	9300      	str	r3, [sp, #0]
 8004454:	236a      	movs	r3, #106	; 0x6a
 8004456:	4a58      	ldr	r2, [pc, #352]	; (80045b8 <_Z21drawParameterEditMenuv+0x1cc>)
 8004458:	2000      	movs	r0, #0
 800445a:	f002 f93d 	bl	80066d8 <ssd1306_DrawBitmap>
	}
    if(size>0){
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	2b00      	cmp	r3, #0
 8004462:	dd28      	ble.n	80044b6 <_Z21drawParameterEditMenuv+0xca>
    	ssd1306_SetCursor(3+4, 2+4);
 8004464:	2106      	movs	r1, #6
 8004466:	2007      	movs	r0, #7
 8004468:	f002 f91e 	bl	80066a8 <ssd1306_SetCursor>
    	ssd1306_WriteString(stringPointer[0], Font_7x10, White);
 800446c:	697b      	ldr	r3, [r7, #20]
 800446e:	6818      	ldr	r0, [r3, #0]
 8004470:	4a52      	ldr	r2, [pc, #328]	; (80045bc <_Z21drawParameterEditMenuv+0x1d0>)
 8004472:	2301      	movs	r3, #1
 8004474:	ca06      	ldmia	r2, {r1, r2}
 8004476:	f002 f8f1 	bl	800665c <ssd1306_WriteString>
    	ssd1306_SetCursor(3+90+4, 2+4);
 800447a:	2106      	movs	r1, #6
 800447c:	2061      	movs	r0, #97	; 0x61
 800447e:	f002 f913 	bl	80066a8 <ssd1306_SetCursor>
    	char str[4];
		sprintf(str, "%d", allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[1]);
 8004482:	4b49      	ldr	r3, [pc, #292]	; (80045a8 <_Z21drawParameterEditMenuv+0x1bc>)
 8004484:	681a      	ldr	r2, [r3, #0]
 8004486:	4b49      	ldr	r3, [pc, #292]	; (80045ac <_Z21drawParameterEditMenuv+0x1c0>)
 8004488:	6819      	ldr	r1, [r3, #0]
 800448a:	4849      	ldr	r0, [pc, #292]	; (80045b0 <_Z21drawParameterEditMenuv+0x1c4>)
 800448c:	4613      	mov	r3, r2
 800448e:	00db      	lsls	r3, r3, #3
 8004490:	1a9b      	subs	r3, r3, r2
 8004492:	440b      	add	r3, r1
 8004494:	009b      	lsls	r3, r3, #2
 8004496:	4403      	add	r3, r0
 8004498:	785b      	ldrb	r3, [r3, #1]
 800449a:	461a      	mov	r2, r3
 800449c:	f107 030c 	add.w	r3, r7, #12
 80044a0:	4947      	ldr	r1, [pc, #284]	; (80045c0 <_Z21drawParameterEditMenuv+0x1d4>)
 80044a2:	4618      	mov	r0, r3
 80044a4:	f010 fe68 	bl	8015178 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 80044a8:	4a44      	ldr	r2, [pc, #272]	; (80045bc <_Z21drawParameterEditMenuv+0x1d0>)
 80044aa:	f107 000c 	add.w	r0, r7, #12
 80044ae:	2301      	movs	r3, #1
 80044b0:	ca06      	ldmia	r2, {r1, r2}
 80044b2:	f002 f8d3 	bl	800665c <ssd1306_WriteString>
    }
    if(size>1){
 80044b6:	693b      	ldr	r3, [r7, #16]
 80044b8:	2b01      	cmp	r3, #1
 80044ba:	dd29      	ble.n	8004510 <_Z21drawParameterEditMenuv+0x124>
    	ssd1306_SetCursor(3+4, 24+4);
 80044bc:	211c      	movs	r1, #28
 80044be:	2007      	movs	r0, #7
 80044c0:	f002 f8f2 	bl	80066a8 <ssd1306_SetCursor>
    	ssd1306_WriteString(stringPointer[1], Font_7x10, White);
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	3304      	adds	r3, #4
 80044c8:	6818      	ldr	r0, [r3, #0]
 80044ca:	4a3c      	ldr	r2, [pc, #240]	; (80045bc <_Z21drawParameterEditMenuv+0x1d0>)
 80044cc:	2301      	movs	r3, #1
 80044ce:	ca06      	ldmia	r2, {r1, r2}
 80044d0:	f002 f8c4 	bl	800665c <ssd1306_WriteString>
    	ssd1306_SetCursor(3+90+4, 24+4);
 80044d4:	211c      	movs	r1, #28
 80044d6:	2061      	movs	r0, #97	; 0x61
 80044d8:	f002 f8e6 	bl	80066a8 <ssd1306_SetCursor>
    	char str[4];
    	sprintf(str, "%d", allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[2]);
 80044dc:	4b32      	ldr	r3, [pc, #200]	; (80045a8 <_Z21drawParameterEditMenuv+0x1bc>)
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	4b32      	ldr	r3, [pc, #200]	; (80045ac <_Z21drawParameterEditMenuv+0x1c0>)
 80044e2:	6819      	ldr	r1, [r3, #0]
 80044e4:	4832      	ldr	r0, [pc, #200]	; (80045b0 <_Z21drawParameterEditMenuv+0x1c4>)
 80044e6:	4613      	mov	r3, r2
 80044e8:	00db      	lsls	r3, r3, #3
 80044ea:	1a9b      	subs	r3, r3, r2
 80044ec:	440b      	add	r3, r1
 80044ee:	009b      	lsls	r3, r3, #2
 80044f0:	4403      	add	r3, r0
 80044f2:	789b      	ldrb	r3, [r3, #2]
 80044f4:	461a      	mov	r2, r3
 80044f6:	f107 0308 	add.w	r3, r7, #8
 80044fa:	4931      	ldr	r1, [pc, #196]	; (80045c0 <_Z21drawParameterEditMenuv+0x1d4>)
 80044fc:	4618      	mov	r0, r3
 80044fe:	f010 fe3b 	bl	8015178 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 8004502:	4a2e      	ldr	r2, [pc, #184]	; (80045bc <_Z21drawParameterEditMenuv+0x1d0>)
 8004504:	f107 0008 	add.w	r0, r7, #8
 8004508:	2301      	movs	r3, #1
 800450a:	ca06      	ldmia	r2, {r1, r2}
 800450c:	f002 f8a6 	bl	800665c <ssd1306_WriteString>
    }
	if(size>2){
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	2b02      	cmp	r3, #2
 8004514:	dd27      	ble.n	8004566 <_Z21drawParameterEditMenuv+0x17a>
		ssd1306_SetCursor(3+4, 46+4);
 8004516:	2132      	movs	r1, #50	; 0x32
 8004518:	2007      	movs	r0, #7
 800451a:	f002 f8c5 	bl	80066a8 <ssd1306_SetCursor>
		ssd1306_WriteString(stringPointer[2], Font_7x10, White);
 800451e:	697b      	ldr	r3, [r7, #20]
 8004520:	3308      	adds	r3, #8
 8004522:	6818      	ldr	r0, [r3, #0]
 8004524:	4a25      	ldr	r2, [pc, #148]	; (80045bc <_Z21drawParameterEditMenuv+0x1d0>)
 8004526:	2301      	movs	r3, #1
 8004528:	ca06      	ldmia	r2, {r1, r2}
 800452a:	f002 f897 	bl	800665c <ssd1306_WriteString>
		ssd1306_SetCursor(3+90+4, 46+4);
 800452e:	2132      	movs	r1, #50	; 0x32
 8004530:	2061      	movs	r0, #97	; 0x61
 8004532:	f002 f8b9 	bl	80066a8 <ssd1306_SetCursor>
		char str[4];
		sprintf(str, "%d", allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[3]);
 8004536:	4b1c      	ldr	r3, [pc, #112]	; (80045a8 <_Z21drawParameterEditMenuv+0x1bc>)
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	4b1c      	ldr	r3, [pc, #112]	; (80045ac <_Z21drawParameterEditMenuv+0x1c0>)
 800453c:	6819      	ldr	r1, [r3, #0]
 800453e:	481c      	ldr	r0, [pc, #112]	; (80045b0 <_Z21drawParameterEditMenuv+0x1c4>)
 8004540:	4613      	mov	r3, r2
 8004542:	00db      	lsls	r3, r3, #3
 8004544:	1a9b      	subs	r3, r3, r2
 8004546:	440b      	add	r3, r1
 8004548:	009b      	lsls	r3, r3, #2
 800454a:	4403      	add	r3, r0
 800454c:	78db      	ldrb	r3, [r3, #3]
 800454e:	461a      	mov	r2, r3
 8004550:	1d3b      	adds	r3, r7, #4
 8004552:	491b      	ldr	r1, [pc, #108]	; (80045c0 <_Z21drawParameterEditMenuv+0x1d4>)
 8004554:	4618      	mov	r0, r3
 8004556:	f010 fe0f 	bl	8015178 <siprintf>
		ssd1306_WriteString(str, Font_7x10, White);
 800455a:	4a18      	ldr	r2, [pc, #96]	; (80045bc <_Z21drawParameterEditMenuv+0x1d0>)
 800455c:	1d38      	adds	r0, r7, #4
 800455e:	2301      	movs	r3, #1
 8004560:	ca06      	ldmia	r2, {r1, r2}
 8004562:	f002 f87b 	bl	800665c <ssd1306_WriteString>
	}

	ssd1306_DrawBitmap(125,(64-7)*pedalMenu/4,epd_bitmap__handle,3,7,White);
 8004566:	4b10      	ldr	r3, [pc, #64]	; (80045a8 <_Z21drawParameterEditMenuv+0x1bc>)
 8004568:	681a      	ldr	r2, [r3, #0]
 800456a:	4613      	mov	r3, r2
 800456c:	00db      	lsls	r3, r3, #3
 800456e:	1a9b      	subs	r3, r3, r2
 8004570:	00db      	lsls	r3, r3, #3
 8004572:	4413      	add	r3, r2
 8004574:	2b00      	cmp	r3, #0
 8004576:	da00      	bge.n	800457a <_Z21drawParameterEditMenuv+0x18e>
 8004578:	3303      	adds	r3, #3
 800457a:	109b      	asrs	r3, r3, #2
 800457c:	b2d9      	uxtb	r1, r3
 800457e:	2301      	movs	r3, #1
 8004580:	9301      	str	r3, [sp, #4]
 8004582:	2307      	movs	r3, #7
 8004584:	9300      	str	r3, [sp, #0]
 8004586:	2303      	movs	r3, #3
 8004588:	4a0e      	ldr	r2, [pc, #56]	; (80045c4 <_Z21drawParameterEditMenuv+0x1d8>)
 800458a:	207d      	movs	r0, #125	; 0x7d
 800458c:	f002 f8a4 	bl	80066d8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 8004590:	f001 ff60 	bl	8006454 <ssd1306_UpdateScreen>
	osDelay(1);
 8004594:	2001      	movs	r0, #1
 8004596:	f00a f823 	bl	800e5e0 <osDelay>
}
 800459a:	bf00      	nop
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}
 80045a2:	bf00      	nop
 80045a4:	08015dc0 	.word	0x08015dc0
 80045a8:	200194ec 	.word	0x200194ec
 80045ac:	200194e4 	.word	0x200194e4
 80045b0:	2001938c 	.word	0x2001938c
 80045b4:	200194f4 	.word	0x200194f4
 80045b8:	08015c50 	.word	0x08015c50
 80045bc:	20000198 	.word	0x20000198
 80045c0:	08015ad8 	.word	0x08015ad8
 80045c4:	08015d98 	.word	0x08015d98

080045c8 <_Z19drawchoosePedalMenuv>:
int choosePedalMenu=0;
void drawchoosePedalMenu(){
 80045c8:	b580      	push	{r7, lr}
 80045ca:	b084      	sub	sp, #16
 80045cc:	af02      	add	r7, sp, #8
	int num = sizeof(INDIVIDUALPEDALSSTRING)/sizeof(INDIVIDUALPEDALSSTRING[0]);
 80045ce:	230a      	movs	r3, #10
 80045d0:	607b      	str	r3, [r7, #4]
	ssd1306_Fill(Black);
 80045d2:	2000      	movs	r0, #0
 80045d4:	f001 ff26 	bl	8006424 <ssd1306_Fill>
	ssd1306_DrawBitmap(126,0,epd_bitmap__scrollBar,1,64,White);
 80045d8:	2301      	movs	r3, #1
 80045da:	9301      	str	r3, [sp, #4]
 80045dc:	2340      	movs	r3, #64	; 0x40
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2301      	movs	r3, #1
 80045e2:	4a3c      	ldr	r2, [pc, #240]	; (80046d4 <_Z19drawchoosePedalMenuv+0x10c>)
 80045e4:	2100      	movs	r1, #0
 80045e6:	207e      	movs	r0, #126	; 0x7e
 80045e8:	f002 f876 	bl	80066d8 <ssd1306_DrawBitmap>
	ssd1306_DrawBitmap(0,22,epd_bitmap__border,106,21,White);
 80045ec:	2301      	movs	r3, #1
 80045ee:	9301      	str	r3, [sp, #4]
 80045f0:	2315      	movs	r3, #21
 80045f2:	9300      	str	r3, [sp, #0]
 80045f4:	236a      	movs	r3, #106	; 0x6a
 80045f6:	4a38      	ldr	r2, [pc, #224]	; (80046d8 <_Z19drawchoosePedalMenuv+0x110>)
 80045f8:	2116      	movs	r1, #22
 80045fa:	2000      	movs	r0, #0
 80045fc:	f002 f86c 	bl	80066d8 <ssd1306_DrawBitmap>

	ssd1306_SetCursor(3+16+4, 2+4);
 8004600:	2106      	movs	r1, #6
 8004602:	2017      	movs	r0, #23
 8004604:	f002 f850 	bl	80066a8 <ssd1306_SetCursor>
	ssd1306_WriteString(INDIVIDUALPEDALSSTRING[(choosePedalMenu+num-1)%num], Font_7x10, White);
 8004608:	4b34      	ldr	r3, [pc, #208]	; (80046dc <_Z19drawchoosePedalMenuv+0x114>)
 800460a:	681a      	ldr	r2, [r3, #0]
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	4413      	add	r3, r2
 8004610:	3b01      	subs	r3, #1
 8004612:	687a      	ldr	r2, [r7, #4]
 8004614:	fb93 f2f2 	sdiv	r2, r3, r2
 8004618:	6879      	ldr	r1, [r7, #4]
 800461a:	fb01 f202 	mul.w	r2, r1, r2
 800461e:	1a9a      	subs	r2, r3, r2
 8004620:	4613      	mov	r3, r2
 8004622:	005b      	lsls	r3, r3, #1
 8004624:	4413      	add	r3, r2
 8004626:	009b      	lsls	r3, r3, #2
 8004628:	4a2d      	ldr	r2, [pc, #180]	; (80046e0 <_Z19drawchoosePedalMenuv+0x118>)
 800462a:	1898      	adds	r0, r3, r2
 800462c:	4a2d      	ldr	r2, [pc, #180]	; (80046e4 <_Z19drawchoosePedalMenuv+0x11c>)
 800462e:	2301      	movs	r3, #1
 8004630:	ca06      	ldmia	r2, {r1, r2}
 8004632:	f002 f813 	bl	800665c <ssd1306_WriteString>

	ssd1306_SetCursor(3+16+4, 24+4);
 8004636:	211c      	movs	r1, #28
 8004638:	2017      	movs	r0, #23
 800463a:	f002 f835 	bl	80066a8 <ssd1306_SetCursor>
	ssd1306_WriteString(INDIVIDUALPEDALSSTRING[(choosePedalMenu)%num], Font_7x10, White);
 800463e:	4b27      	ldr	r3, [pc, #156]	; (80046dc <_Z19drawchoosePedalMenuv+0x114>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	687a      	ldr	r2, [r7, #4]
 8004644:	fb93 f2f2 	sdiv	r2, r3, r2
 8004648:	6879      	ldr	r1, [r7, #4]
 800464a:	fb01 f202 	mul.w	r2, r1, r2
 800464e:	1a9a      	subs	r2, r3, r2
 8004650:	4613      	mov	r3, r2
 8004652:	005b      	lsls	r3, r3, #1
 8004654:	4413      	add	r3, r2
 8004656:	009b      	lsls	r3, r3, #2
 8004658:	4a21      	ldr	r2, [pc, #132]	; (80046e0 <_Z19drawchoosePedalMenuv+0x118>)
 800465a:	1898      	adds	r0, r3, r2
 800465c:	4a21      	ldr	r2, [pc, #132]	; (80046e4 <_Z19drawchoosePedalMenuv+0x11c>)
 800465e:	2301      	movs	r3, #1
 8004660:	ca06      	ldmia	r2, {r1, r2}
 8004662:	f001 fffb 	bl	800665c <ssd1306_WriteString>
	ssd1306_SetCursor(3+16+4, 46+4);
 8004666:	2132      	movs	r1, #50	; 0x32
 8004668:	2017      	movs	r0, #23
 800466a:	f002 f81d 	bl	80066a8 <ssd1306_SetCursor>
	ssd1306_WriteString(INDIVIDUALPEDALSSTRING[(choosePedalMenu+1)%num], Font_7x10, White);
 800466e:	4b1b      	ldr	r3, [pc, #108]	; (80046dc <_Z19drawchoosePedalMenuv+0x114>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3301      	adds	r3, #1
 8004674:	687a      	ldr	r2, [r7, #4]
 8004676:	fb93 f2f2 	sdiv	r2, r3, r2
 800467a:	6879      	ldr	r1, [r7, #4]
 800467c:	fb01 f202 	mul.w	r2, r1, r2
 8004680:	1a9a      	subs	r2, r3, r2
 8004682:	4613      	mov	r3, r2
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	4413      	add	r3, r2
 8004688:	009b      	lsls	r3, r3, #2
 800468a:	4a15      	ldr	r2, [pc, #84]	; (80046e0 <_Z19drawchoosePedalMenuv+0x118>)
 800468c:	1898      	adds	r0, r3, r2
 800468e:	4a15      	ldr	r2, [pc, #84]	; (80046e4 <_Z19drawchoosePedalMenuv+0x11c>)
 8004690:	2301      	movs	r3, #1
 8004692:	ca06      	ldmia	r2, {r1, r2}
 8004694:	f001 ffe2 	bl	800665c <ssd1306_WriteString>
	ssd1306_DrawBitmap(125,(64-7)*pedalMenu/4,epd_bitmap__handle,3,7,White);
 8004698:	4b13      	ldr	r3, [pc, #76]	; (80046e8 <_Z19drawchoosePedalMenuv+0x120>)
 800469a:	681a      	ldr	r2, [r3, #0]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	1a9b      	subs	r3, r3, r2
 80046a2:	00db      	lsls	r3, r3, #3
 80046a4:	4413      	add	r3, r2
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	da00      	bge.n	80046ac <_Z19drawchoosePedalMenuv+0xe4>
 80046aa:	3303      	adds	r3, #3
 80046ac:	109b      	asrs	r3, r3, #2
 80046ae:	b2d9      	uxtb	r1, r3
 80046b0:	2301      	movs	r3, #1
 80046b2:	9301      	str	r3, [sp, #4]
 80046b4:	2307      	movs	r3, #7
 80046b6:	9300      	str	r3, [sp, #0]
 80046b8:	2303      	movs	r3, #3
 80046ba:	4a0c      	ldr	r2, [pc, #48]	; (80046ec <_Z19drawchoosePedalMenuv+0x124>)
 80046bc:	207d      	movs	r0, #125	; 0x7d
 80046be:	f002 f80b 	bl	80066d8 <ssd1306_DrawBitmap>
	ssd1306_UpdateScreen();
 80046c2:	f001 fec7 	bl	8006454 <ssd1306_UpdateScreen>
	osDelay(1);
 80046c6:	2001      	movs	r0, #1
 80046c8:	f009 ff8a 	bl	800e5e0 <osDelay>
}
 80046cc:	bf00      	nop
 80046ce:	3708      	adds	r7, #8
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}
 80046d4:	08015dc0 	.word	0x08015dc0
 80046d8:	08015c50 	.word	0x08015c50
 80046dc:	2001a4b8 	.word	0x2001a4b8
 80046e0:	20000000 	.word	0x20000000
 80046e4:	20000198 	.word	0x20000198
 80046e8:	200194ec 	.word	0x200194ec
 80046ec:	08015d98 	.word	0x08015d98

080046f0 <_Z17drawMetronomeMenuv>:
void drawMetronomeMenu(){
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b090      	sub	sp, #64	; 0x40
 80046f4:	af02      	add	r7, sp, #8
//	while(true){
//	  	HAL_I2C_Mem_Read(&hi2c2, EEPROM_ADDR, 0 + 16 * 0, 1, (uint8_t*)(&read[0]), 16,1000);
//	  	osDelay(100);
//	  }
	  ssd1306_Fill(Black);
 80046f6:	2000      	movs	r0, #0
 80046f8:	f001 fe94 	bl	8006424 <ssd1306_Fill>
	  ssd1306_DrawBitmap(126,0,epd_bitmap__scrollBar,1,64,White);
 80046fc:	2301      	movs	r3, #1
 80046fe:	9301      	str	r3, [sp, #4]
 8004700:	2340      	movs	r3, #64	; 0x40
 8004702:	9300      	str	r3, [sp, #0]
 8004704:	2301      	movs	r3, #1
 8004706:	4aa9      	ldr	r2, [pc, #676]	; (80049ac <_Z17drawMetronomeMenuv+0x2bc>)
 8004708:	2100      	movs	r1, #0
 800470a:	207e      	movs	r0, #126	; 0x7e
 800470c:	f001 ffe4 	bl	80066d8 <ssd1306_DrawBitmap>
	  ssd1306_DrawBitmap(0,22,epd_bitmap__border,106,21,White);
 8004710:	2301      	movs	r3, #1
 8004712:	9301      	str	r3, [sp, #4]
 8004714:	2315      	movs	r3, #21
 8004716:	9300      	str	r3, [sp, #0]
 8004718:	236a      	movs	r3, #106	; 0x6a
 800471a:	4aa5      	ldr	r2, [pc, #660]	; (80049b0 <_Z17drawMetronomeMenuv+0x2c0>)
 800471c:	2116      	movs	r1, #22
 800471e:	2000      	movs	r0, #0
 8004720:	f001 ffda 	bl	80066d8 <ssd1306_DrawBitmap>


	  ssd1306_SetCursor(3+16+4, 2+4);
 8004724:	2106      	movs	r1, #6
 8004726:	2017      	movs	r0, #23
 8004728:	f001 ffbe 	bl	80066a8 <ssd1306_SetCursor>
	  ssd1306_WriteString(METRONOMEMENUSTRINGS[(metronomeMenuOption+4)%5], Font_7x10, White);
 800472c:	4ba1      	ldr	r3, [pc, #644]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	1d19      	adds	r1, r3, #4
 8004732:	4ba1      	ldr	r3, [pc, #644]	; (80049b8 <_Z17drawMetronomeMenuv+0x2c8>)
 8004734:	fb83 2301 	smull	r2, r3, r3, r1
 8004738:	105a      	asrs	r2, r3, #1
 800473a:	17cb      	asrs	r3, r1, #31
 800473c:	1ad2      	subs	r2, r2, r3
 800473e:	4613      	mov	r3, r2
 8004740:	009b      	lsls	r3, r3, #2
 8004742:	4413      	add	r3, r2
 8004744:	1aca      	subs	r2, r1, r3
 8004746:	4613      	mov	r3, r2
 8004748:	009b      	lsls	r3, r3, #2
 800474a:	4413      	add	r3, r2
 800474c:	005b      	lsls	r3, r3, #1
 800474e:	4a9b      	ldr	r2, [pc, #620]	; (80049bc <_Z17drawMetronomeMenuv+0x2cc>)
 8004750:	1898      	adds	r0, r3, r2
 8004752:	4a9b      	ldr	r2, [pc, #620]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 8004754:	2301      	movs	r3, #1
 8004756:	ca06      	ldmia	r2, {r1, r2}
 8004758:	f001 ff80 	bl	800665c <ssd1306_WriteString>
	  //ssd1306_DrawBitmap(3,24,PEDALNAMES[(currentPedalOption+1)%5],16,16,White);
	  ssd1306_SetCursor(3+16+4+50, 2+4);
 800475c:	2106      	movs	r1, #6
 800475e:	2049      	movs	r0, #73	; 0x49
 8004760:	f001 ffa2 	bl	80066a8 <ssd1306_SetCursor>
	  if(metronomeMenuOption==1){
 8004764:	4b93      	ldr	r3, [pc, #588]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	2b01      	cmp	r3, #1
 800476a:	d10f      	bne.n	800478c <_Z17drawMetronomeMenuv+0x9c>
		  char str[6];
		  		      sprintf(str, "%d", currentBPM);
 800476c:	4b95      	ldr	r3, [pc, #596]	; (80049c4 <_Z17drawMetronomeMenuv+0x2d4>)
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8004774:	4994      	ldr	r1, [pc, #592]	; (80049c8 <_Z17drawMetronomeMenuv+0x2d8>)
 8004776:	4618      	mov	r0, r3
 8004778:	f010 fcfe 	bl	8015178 <siprintf>
		  	  		  ssd1306_WriteString(str, Font_7x10, White);
 800477c:	4a90      	ldr	r2, [pc, #576]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 800477e:	f107 0030 	add.w	r0, r7, #48	; 0x30
 8004782:	2301      	movs	r3, #1
 8004784:	ca06      	ldmia	r2, {r1, r2}
 8004786:	f001 ff69 	bl	800665c <ssd1306_WriteString>
 800478a:	e03e      	b.n	800480a <_Z17drawMetronomeMenuv+0x11a>
	  }else if(metronomeMenuOption==2){
 800478c:	4b89      	ldr	r3, [pc, #548]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2b02      	cmp	r3, #2
 8004792:	d111      	bne.n	80047b8 <_Z17drawMetronomeMenuv+0xc8>
		  if(metronomeLED==true){
 8004794:	4b8d      	ldr	r3, [pc, #564]	; (80049cc <_Z17drawMetronomeMenuv+0x2dc>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b01      	cmp	r3, #1
 800479a:	d106      	bne.n	80047aa <_Z17drawMetronomeMenuv+0xba>
		  	  	  ssd1306_WriteString((char*)"ON", Font_7x10, White);
 800479c:	4a88      	ldr	r2, [pc, #544]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 800479e:	2301      	movs	r3, #1
 80047a0:	ca06      	ldmia	r2, {r1, r2}
 80047a2:	488b      	ldr	r0, [pc, #556]	; (80049d0 <_Z17drawMetronomeMenuv+0x2e0>)
 80047a4:	f001 ff5a 	bl	800665c <ssd1306_WriteString>
 80047a8:	e02f      	b.n	800480a <_Z17drawMetronomeMenuv+0x11a>
		        }else	{
		      	  ssd1306_WriteString((char*)"OFF", Font_7x10, White);
 80047aa:	4a85      	ldr	r2, [pc, #532]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 80047ac:	2301      	movs	r3, #1
 80047ae:	ca06      	ldmia	r2, {r1, r2}
 80047b0:	4888      	ldr	r0, [pc, #544]	; (80049d4 <_Z17drawMetronomeMenuv+0x2e4>)
 80047b2:	f001 ff53 	bl	800665c <ssd1306_WriteString>
 80047b6:	e028      	b.n	800480a <_Z17drawMetronomeMenuv+0x11a>
		   }
	  }else if(metronomeMenuOption==3){
 80047b8:	4b7e      	ldr	r3, [pc, #504]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b03      	cmp	r3, #3
 80047be:	d111      	bne.n	80047e4 <_Z17drawMetronomeMenuv+0xf4>
		  if(metronomeClick==true){
 80047c0:	4b85      	ldr	r3, [pc, #532]	; (80049d8 <_Z17drawMetronomeMenuv+0x2e8>)
 80047c2:	781b      	ldrb	r3, [r3, #0]
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d106      	bne.n	80047d6 <_Z17drawMetronomeMenuv+0xe6>
				  ssd1306_WriteString((char*)"ON", Font_7x10, White);
 80047c8:	4a7d      	ldr	r2, [pc, #500]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 80047ca:	2301      	movs	r3, #1
 80047cc:	ca06      	ldmia	r2, {r1, r2}
 80047ce:	4880      	ldr	r0, [pc, #512]	; (80049d0 <_Z17drawMetronomeMenuv+0x2e0>)
 80047d0:	f001 ff44 	bl	800665c <ssd1306_WriteString>
 80047d4:	e019      	b.n	800480a <_Z17drawMetronomeMenuv+0x11a>
				}else	{
				  ssd1306_WriteString((char*)"OFF", Font_7x10, White);
 80047d6:	4a7a      	ldr	r2, [pc, #488]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 80047d8:	2301      	movs	r3, #1
 80047da:	ca06      	ldmia	r2, {r1, r2}
 80047dc:	487d      	ldr	r0, [pc, #500]	; (80049d4 <_Z17drawMetronomeMenuv+0x2e4>)
 80047de:	f001 ff3d 	bl	800665c <ssd1306_WriteString>
 80047e2:	e012      	b.n	800480a <_Z17drawMetronomeMenuv+0x11a>
		   }

	  }else if(metronomeMenuOption==0){
 80047e4:	4b73      	ldr	r3, [pc, #460]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10e      	bne.n	800480a <_Z17drawMetronomeMenuv+0x11a>
		  char str[6];
			  sprintf(str, "%d", timeSignature);
 80047ec:	4b7b      	ldr	r3, [pc, #492]	; (80049dc <_Z17drawMetronomeMenuv+0x2ec>)
 80047ee:	681a      	ldr	r2, [r3, #0]
 80047f0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80047f4:	4974      	ldr	r1, [pc, #464]	; (80049c8 <_Z17drawMetronomeMenuv+0x2d8>)
 80047f6:	4618      	mov	r0, r3
 80047f8:	f010 fcbe 	bl	8015178 <siprintf>
			  ssd1306_WriteString(str, Font_7x10, White);
 80047fc:	4a70      	ldr	r2, [pc, #448]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 80047fe:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8004802:	2301      	movs	r3, #1
 8004804:	ca06      	ldmia	r2, {r1, r2}
 8004806:	f001 ff29 	bl	800665c <ssd1306_WriteString>
	  }


	  ssd1306_SetCursor(3+16+4, 24+4);
 800480a:	211c      	movs	r1, #28
 800480c:	2017      	movs	r0, #23
 800480e:	f001 ff4b 	bl	80066a8 <ssd1306_SetCursor>
	  ssd1306_WriteString(METRONOMEMENUSTRINGS[(metronomeMenuOption+5)%5], Font_7x10, White);
 8004812:	4b68      	ldr	r3, [pc, #416]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	1d59      	adds	r1, r3, #5
 8004818:	4b67      	ldr	r3, [pc, #412]	; (80049b8 <_Z17drawMetronomeMenuv+0x2c8>)
 800481a:	fb83 2301 	smull	r2, r3, r3, r1
 800481e:	105a      	asrs	r2, r3, #1
 8004820:	17cb      	asrs	r3, r1, #31
 8004822:	1ad2      	subs	r2, r2, r3
 8004824:	4613      	mov	r3, r2
 8004826:	009b      	lsls	r3, r3, #2
 8004828:	4413      	add	r3, r2
 800482a:	1aca      	subs	r2, r1, r3
 800482c:	4613      	mov	r3, r2
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	005b      	lsls	r3, r3, #1
 8004834:	4a61      	ldr	r2, [pc, #388]	; (80049bc <_Z17drawMetronomeMenuv+0x2cc>)
 8004836:	1898      	adds	r0, r3, r2
 8004838:	4a61      	ldr	r2, [pc, #388]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 800483a:	2301      	movs	r3, #1
 800483c:	ca06      	ldmia	r2, {r1, r2}
 800483e:	f001 ff0d 	bl	800665c <ssd1306_WriteString>
	  ssd1306_SetCursor(3+16+4+50, 24+4);
 8004842:	211c      	movs	r1, #28
 8004844:	2049      	movs	r0, #73	; 0x49
 8004846:	f001 ff2f 	bl	80066a8 <ssd1306_SetCursor>
	  if(metronomeMenuOption==0){
 800484a:	4b5a      	ldr	r3, [pc, #360]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d10f      	bne.n	8004872 <_Z17drawMetronomeMenuv+0x182>
		      char str[6];
		      itoa(currentBPM, str, 10);
 8004852:	4b5c      	ldr	r3, [pc, #368]	; (80049c4 <_Z17drawMetronomeMenuv+0x2d4>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f107 0120 	add.w	r1, r7, #32
 800485a:	220a      	movs	r2, #10
 800485c:	4618      	mov	r0, r3
 800485e:	f010 fb8a 	bl	8014f76 <itoa>
	  		  ssd1306_WriteString(str, Font_7x10, White);
 8004862:	4a57      	ldr	r2, [pc, #348]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 8004864:	f107 0020 	add.w	r0, r7, #32
 8004868:	2301      	movs	r3, #1
 800486a:	ca06      	ldmia	r2, {r1, r2}
 800486c:	f001 fef6 	bl	800665c <ssd1306_WriteString>
 8004870:	e03e      	b.n	80048f0 <_Z17drawMetronomeMenuv+0x200>
	  	  }else if(metronomeMenuOption==1){
 8004872:	4b50      	ldr	r3, [pc, #320]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	2b01      	cmp	r3, #1
 8004878:	d111      	bne.n	800489e <_Z17drawMetronomeMenuv+0x1ae>
	  		  if(metronomeLED==true){
 800487a:	4b54      	ldr	r3, [pc, #336]	; (80049cc <_Z17drawMetronomeMenuv+0x2dc>)
 800487c:	781b      	ldrb	r3, [r3, #0]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d106      	bne.n	8004890 <_Z17drawMetronomeMenuv+0x1a0>
	  		  	  	  ssd1306_WriteString((char*)"ON", Font_7x10, White);
 8004882:	4a4f      	ldr	r2, [pc, #316]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 8004884:	2301      	movs	r3, #1
 8004886:	ca06      	ldmia	r2, {r1, r2}
 8004888:	4851      	ldr	r0, [pc, #324]	; (80049d0 <_Z17drawMetronomeMenuv+0x2e0>)
 800488a:	f001 fee7 	bl	800665c <ssd1306_WriteString>
 800488e:	e02f      	b.n	80048f0 <_Z17drawMetronomeMenuv+0x200>
	  		        }else	{
	  		      	  ssd1306_WriteString((char*)"OFF", Font_7x10, White);
 8004890:	4a4b      	ldr	r2, [pc, #300]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 8004892:	2301      	movs	r3, #1
 8004894:	ca06      	ldmia	r2, {r1, r2}
 8004896:	484f      	ldr	r0, [pc, #316]	; (80049d4 <_Z17drawMetronomeMenuv+0x2e4>)
 8004898:	f001 fee0 	bl	800665c <ssd1306_WriteString>
 800489c:	e028      	b.n	80048f0 <_Z17drawMetronomeMenuv+0x200>
	  		   }
	  	  }else if(metronomeMenuOption==2){
 800489e:	4b45      	ldr	r3, [pc, #276]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	2b02      	cmp	r3, #2
 80048a4:	d111      	bne.n	80048ca <_Z17drawMetronomeMenuv+0x1da>
	  		  if(metronomeClick==true){
 80048a6:	4b4c      	ldr	r3, [pc, #304]	; (80049d8 <_Z17drawMetronomeMenuv+0x2e8>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d106      	bne.n	80048bc <_Z17drawMetronomeMenuv+0x1cc>
	  				  ssd1306_WriteString((char*)"ON", Font_7x10, White);
 80048ae:	4a44      	ldr	r2, [pc, #272]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 80048b0:	2301      	movs	r3, #1
 80048b2:	ca06      	ldmia	r2, {r1, r2}
 80048b4:	4846      	ldr	r0, [pc, #280]	; (80049d0 <_Z17drawMetronomeMenuv+0x2e0>)
 80048b6:	f001 fed1 	bl	800665c <ssd1306_WriteString>
 80048ba:	e019      	b.n	80048f0 <_Z17drawMetronomeMenuv+0x200>
	  				}else	{
	  				  ssd1306_WriteString((char*)"OFF", Font_7x10, White);
 80048bc:	4a40      	ldr	r2, [pc, #256]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 80048be:	2301      	movs	r3, #1
 80048c0:	ca06      	ldmia	r2, {r1, r2}
 80048c2:	4844      	ldr	r0, [pc, #272]	; (80049d4 <_Z17drawMetronomeMenuv+0x2e4>)
 80048c4:	f001 feca 	bl	800665c <ssd1306_WriteString>
 80048c8:	e012      	b.n	80048f0 <_Z17drawMetronomeMenuv+0x200>
	  		   }
	  	  }else if(metronomeMenuOption==4){
 80048ca:	4b3a      	ldr	r3, [pc, #232]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d10e      	bne.n	80048f0 <_Z17drawMetronomeMenuv+0x200>
	  		char str[6];
	  		sprintf(str, "%d", timeSignature);
 80048d2:	4b42      	ldr	r3, [pc, #264]	; (80049dc <_Z17drawMetronomeMenuv+0x2ec>)
 80048d4:	681a      	ldr	r2, [r3, #0]
 80048d6:	f107 0318 	add.w	r3, r7, #24
 80048da:	493b      	ldr	r1, [pc, #236]	; (80049c8 <_Z17drawMetronomeMenuv+0x2d8>)
 80048dc:	4618      	mov	r0, r3
 80048de:	f010 fc4b 	bl	8015178 <siprintf>
	  		ssd1306_WriteString(str, Font_7x10, White);
 80048e2:	4a37      	ldr	r2, [pc, #220]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 80048e4:	f107 0018 	add.w	r0, r7, #24
 80048e8:	2301      	movs	r3, #1
 80048ea:	ca06      	ldmia	r2, {r1, r2}
 80048ec:	f001 feb6 	bl	800665c <ssd1306_WriteString>
	  	  }

	  //ssd1306_DrawBitmap(3,46,MENUICONS[(currentPedalOption+2)%5],16,16,White);
	  ssd1306_SetCursor(3+16+4, 46+4);
 80048f0:	2132      	movs	r1, #50	; 0x32
 80048f2:	2017      	movs	r0, #23
 80048f4:	f001 fed8 	bl	80066a8 <ssd1306_SetCursor>
	  ssd1306_WriteString(METRONOMEMENUSTRINGS[(metronomeMenuOption+6)%5], Font_7x10, White);
 80048f8:	4b2e      	ldr	r3, [pc, #184]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	1d99      	adds	r1, r3, #6
 80048fe:	4b2e      	ldr	r3, [pc, #184]	; (80049b8 <_Z17drawMetronomeMenuv+0x2c8>)
 8004900:	fb83 2301 	smull	r2, r3, r3, r1
 8004904:	105a      	asrs	r2, r3, #1
 8004906:	17cb      	asrs	r3, r1, #31
 8004908:	1ad2      	subs	r2, r2, r3
 800490a:	4613      	mov	r3, r2
 800490c:	009b      	lsls	r3, r3, #2
 800490e:	4413      	add	r3, r2
 8004910:	1aca      	subs	r2, r1, r3
 8004912:	4613      	mov	r3, r2
 8004914:	009b      	lsls	r3, r3, #2
 8004916:	4413      	add	r3, r2
 8004918:	005b      	lsls	r3, r3, #1
 800491a:	4a28      	ldr	r2, [pc, #160]	; (80049bc <_Z17drawMetronomeMenuv+0x2cc>)
 800491c:	1898      	adds	r0, r3, r2
 800491e:	4a28      	ldr	r2, [pc, #160]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 8004920:	2301      	movs	r3, #1
 8004922:	ca06      	ldmia	r2, {r1, r2}
 8004924:	f001 fe9a 	bl	800665c <ssd1306_WriteString>
	  ssd1306_SetCursor(3+16+4+50, 46+4);
 8004928:	2132      	movs	r1, #50	; 0x32
 800492a:	2049      	movs	r0, #73	; 0x49
 800492c:	f001 febc 	bl	80066a8 <ssd1306_SetCursor>

	  if(metronomeMenuOption==3){
 8004930:	4b20      	ldr	r3, [pc, #128]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	2b03      	cmp	r3, #3
 8004936:	d10f      	bne.n	8004958 <_Z17drawMetronomeMenuv+0x268>
		  char str[6];
		  		      sprintf(str, "%d", timeSignature);
 8004938:	4b28      	ldr	r3, [pc, #160]	; (80049dc <_Z17drawMetronomeMenuv+0x2ec>)
 800493a:	681a      	ldr	r2, [r3, #0]
 800493c:	f107 0310 	add.w	r3, r7, #16
 8004940:	4921      	ldr	r1, [pc, #132]	; (80049c8 <_Z17drawMetronomeMenuv+0x2d8>)
 8004942:	4618      	mov	r0, r3
 8004944:	f010 fc18 	bl	8015178 <siprintf>
		  	  		  ssd1306_WriteString(str, Font_7x10, White);
 8004948:	4a1d      	ldr	r2, [pc, #116]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 800494a:	f107 0010 	add.w	r0, r7, #16
 800494e:	2301      	movs	r3, #1
 8004950:	ca06      	ldmia	r2, {r1, r2}
 8004952:	f001 fe83 	bl	800665c <ssd1306_WriteString>
 8004956:	e06a      	b.n	8004a2e <_Z17drawMetronomeMenuv+0x33e>
	  	  }else if(metronomeMenuOption==0){
 8004958:	4b16      	ldr	r3, [pc, #88]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	d111      	bne.n	8004984 <_Z17drawMetronomeMenuv+0x294>
	  		  if(metronomeLED==true){
 8004960:	4b1a      	ldr	r3, [pc, #104]	; (80049cc <_Z17drawMetronomeMenuv+0x2dc>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	d106      	bne.n	8004976 <_Z17drawMetronomeMenuv+0x286>
	  		  	  	  ssd1306_WriteString((char*)"ON", Font_7x10, White);
 8004968:	4a15      	ldr	r2, [pc, #84]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 800496a:	2301      	movs	r3, #1
 800496c:	ca06      	ldmia	r2, {r1, r2}
 800496e:	4818      	ldr	r0, [pc, #96]	; (80049d0 <_Z17drawMetronomeMenuv+0x2e0>)
 8004970:	f001 fe74 	bl	800665c <ssd1306_WriteString>
 8004974:	e05b      	b.n	8004a2e <_Z17drawMetronomeMenuv+0x33e>
	  		        }else	{
	  		      	  ssd1306_WriteString((char*)"OFF", Font_7x10, White);
 8004976:	4a12      	ldr	r2, [pc, #72]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 8004978:	2301      	movs	r3, #1
 800497a:	ca06      	ldmia	r2, {r1, r2}
 800497c:	4815      	ldr	r0, [pc, #84]	; (80049d4 <_Z17drawMetronomeMenuv+0x2e4>)
 800497e:	f001 fe6d 	bl	800665c <ssd1306_WriteString>
 8004982:	e054      	b.n	8004a2e <_Z17drawMetronomeMenuv+0x33e>
	  		   }
	  	  }else if(metronomeMenuOption==4){
 8004984:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <_Z17drawMetronomeMenuv+0x2c4>)
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	2b04      	cmp	r3, #4
 800498a:	d129      	bne.n	80049e0 <_Z17drawMetronomeMenuv+0x2f0>
	  		char str[6];
		    sprintf(str, "%d", currentBPM);
 800498c:	4b0d      	ldr	r3, [pc, #52]	; (80049c4 <_Z17drawMetronomeMenuv+0x2d4>)
 800498e:	681a      	ldr	r2, [r3, #0]
 8004990:	f107 0308 	add.w	r3, r7, #8
 8004994:	490c      	ldr	r1, [pc, #48]	; (80049c8 <_Z17drawMetronomeMenuv+0x2d8>)
 8004996:	4618      	mov	r0, r3
 8004998:	f010 fbee 	bl	8015178 <siprintf>
		    ssd1306_WriteString(str, Font_7x10, White);
 800499c:	4a08      	ldr	r2, [pc, #32]	; (80049c0 <_Z17drawMetronomeMenuv+0x2d0>)
 800499e:	f107 0008 	add.w	r0, r7, #8
 80049a2:	2301      	movs	r3, #1
 80049a4:	ca06      	ldmia	r2, {r1, r2}
 80049a6:	f001 fe59 	bl	800665c <ssd1306_WriteString>
 80049aa:	e040      	b.n	8004a2e <_Z17drawMetronomeMenuv+0x33e>
 80049ac:	08015dc0 	.word	0x08015dc0
 80049b0:	08015c50 	.word	0x08015c50
 80049b4:	200194c8 	.word	0x200194c8
 80049b8:	66666667 	.word	0x66666667
 80049bc:	200000b4 	.word	0x200000b4
 80049c0:	20000198 	.word	0x20000198
 80049c4:	20000188 	.word	0x20000188
 80049c8:	08015ad8 	.word	0x08015ad8
 80049cc:	20000634 	.word	0x20000634
 80049d0:	08015b78 	.word	0x08015b78
 80049d4:	08015b7c 	.word	0x08015b7c
 80049d8:	20000635 	.word	0x20000635
 80049dc:	2000018c 	.word	0x2000018c
	  	  }
	  	  else if(metronomeMenuOption==1){
 80049e0:	4b22      	ldr	r3, [pc, #136]	; (8004a6c <_Z17drawMetronomeMenuv+0x37c>)
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	2b01      	cmp	r3, #1
 80049e6:	d111      	bne.n	8004a0c <_Z17drawMetronomeMenuv+0x31c>
	  		  if(metronomeClick==true){
 80049e8:	4b21      	ldr	r3, [pc, #132]	; (8004a70 <_Z17drawMetronomeMenuv+0x380>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	2b01      	cmp	r3, #1
 80049ee:	d106      	bne.n	80049fe <_Z17drawMetronomeMenuv+0x30e>
	  				  ssd1306_WriteString((char*)"ON", Font_7x10, White);
 80049f0:	4a20      	ldr	r2, [pc, #128]	; (8004a74 <_Z17drawMetronomeMenuv+0x384>)
 80049f2:	2301      	movs	r3, #1
 80049f4:	ca06      	ldmia	r2, {r1, r2}
 80049f6:	4820      	ldr	r0, [pc, #128]	; (8004a78 <_Z17drawMetronomeMenuv+0x388>)
 80049f8:	f001 fe30 	bl	800665c <ssd1306_WriteString>
 80049fc:	e017      	b.n	8004a2e <_Z17drawMetronomeMenuv+0x33e>
	  				}else	{
	  				  ssd1306_WriteString((char*)"OFF", Font_7x10, White);
 80049fe:	4a1d      	ldr	r2, [pc, #116]	; (8004a74 <_Z17drawMetronomeMenuv+0x384>)
 8004a00:	2301      	movs	r3, #1
 8004a02:	ca06      	ldmia	r2, {r1, r2}
 8004a04:	481d      	ldr	r0, [pc, #116]	; (8004a7c <_Z17drawMetronomeMenuv+0x38c>)
 8004a06:	f001 fe29 	bl	800665c <ssd1306_WriteString>
 8004a0a:	e010      	b.n	8004a2e <_Z17drawMetronomeMenuv+0x33e>
	  		   }
	  	  }else if(timeSignature==3){
 8004a0c:	4b1c      	ldr	r3, [pc, #112]	; (8004a80 <_Z17drawMetronomeMenuv+0x390>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	2b03      	cmp	r3, #3
 8004a12:	d10c      	bne.n	8004a2e <_Z17drawMetronomeMenuv+0x33e>
	  		char str[6];
		  sprintf(str, "%d", timeSignature);
 8004a14:	4b1a      	ldr	r3, [pc, #104]	; (8004a80 <_Z17drawMetronomeMenuv+0x390>)
 8004a16:	681a      	ldr	r2, [r3, #0]
 8004a18:	463b      	mov	r3, r7
 8004a1a:	491a      	ldr	r1, [pc, #104]	; (8004a84 <_Z17drawMetronomeMenuv+0x394>)
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	f010 fbab 	bl	8015178 <siprintf>
		  ssd1306_WriteString(str, Font_7x10, White);
 8004a22:	4a14      	ldr	r2, [pc, #80]	; (8004a74 <_Z17drawMetronomeMenuv+0x384>)
 8004a24:	4638      	mov	r0, r7
 8004a26:	2301      	movs	r3, #1
 8004a28:	ca06      	ldmia	r2, {r1, r2}
 8004a2a:	f001 fe17 	bl	800665c <ssd1306_WriteString>
	  	  }
	  ssd1306_DrawBitmap(125,(64-7)*metronomeMenuOption/4,epd_bitmap__handle,3,7,White);
 8004a2e:	4b0f      	ldr	r3, [pc, #60]	; (8004a6c <_Z17drawMetronomeMenuv+0x37c>)
 8004a30:	681a      	ldr	r2, [r3, #0]
 8004a32:	4613      	mov	r3, r2
 8004a34:	00db      	lsls	r3, r3, #3
 8004a36:	1a9b      	subs	r3, r3, r2
 8004a38:	00db      	lsls	r3, r3, #3
 8004a3a:	4413      	add	r3, r2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	da00      	bge.n	8004a42 <_Z17drawMetronomeMenuv+0x352>
 8004a40:	3303      	adds	r3, #3
 8004a42:	109b      	asrs	r3, r3, #2
 8004a44:	b2d9      	uxtb	r1, r3
 8004a46:	2301      	movs	r3, #1
 8004a48:	9301      	str	r3, [sp, #4]
 8004a4a:	2307      	movs	r3, #7
 8004a4c:	9300      	str	r3, [sp, #0]
 8004a4e:	2303      	movs	r3, #3
 8004a50:	4a0d      	ldr	r2, [pc, #52]	; (8004a88 <_Z17drawMetronomeMenuv+0x398>)
 8004a52:	207d      	movs	r0, #125	; 0x7d
 8004a54:	f001 fe40 	bl	80066d8 <ssd1306_DrawBitmap>
	  ssd1306_UpdateScreen();
 8004a58:	f001 fcfc 	bl	8006454 <ssd1306_UpdateScreen>
	  osDelay(1);
 8004a5c:	2001      	movs	r0, #1
 8004a5e:	f009 fdbf 	bl	800e5e0 <osDelay>
}
 8004a62:	bf00      	nop
 8004a64:	3738      	adds	r7, #56	; 0x38
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bd80      	pop	{r7, pc}
 8004a6a:	bf00      	nop
 8004a6c:	200194c8 	.word	0x200194c8
 8004a70:	20000635 	.word	0x20000635
 8004a74:	20000198 	.word	0x20000198
 8004a78:	08015b78 	.word	0x08015b78
 8004a7c:	08015b7c 	.word	0x08015b7c
 8004a80:	2000018c 	.word	0x2000018c
 8004a84:	08015ad8 	.word	0x08015ad8
 8004a88:	08015d98 	.word	0x08015d98

08004a8c <_Z13drawChainMenuv>:

void drawChainMenu(){
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0

}
 8004a90:	bf00      	nop
 8004a92:	46bd      	mov	sp, r7
 8004a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a98:	4770      	bx	lr
	...

08004a9c <_Z20drawPedalMenuOptionsv>:

void drawPedalMenuOptions(){
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b082      	sub	sp, #8
 8004aa0:	af02      	add	r7, sp, #8
	  ssd1306_Fill(Black);
 8004aa2:	2000      	movs	r0, #0
 8004aa4:	f001 fcbe 	bl	8006424 <ssd1306_Fill>
	  ssd1306_DrawBitmap(126,0,epd_bitmap__scrollBar,1,64,White);
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	9301      	str	r3, [sp, #4]
 8004aac:	2340      	movs	r3, #64	; 0x40
 8004aae:	9300      	str	r3, [sp, #0]
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	4a3e      	ldr	r2, [pc, #248]	; (8004bac <_Z20drawPedalMenuOptionsv+0x110>)
 8004ab4:	2100      	movs	r1, #0
 8004ab6:	207e      	movs	r0, #126	; 0x7e
 8004ab8:	f001 fe0e 	bl	80066d8 <ssd1306_DrawBitmap>
	  ssd1306_DrawBitmap(0,22,epd_bitmap__border,106,21,White);
 8004abc:	2301      	movs	r3, #1
 8004abe:	9301      	str	r3, [sp, #4]
 8004ac0:	2315      	movs	r3, #21
 8004ac2:	9300      	str	r3, [sp, #0]
 8004ac4:	236a      	movs	r3, #106	; 0x6a
 8004ac6:	4a3a      	ldr	r2, [pc, #232]	; (8004bb0 <_Z20drawPedalMenuOptionsv+0x114>)
 8004ac8:	2116      	movs	r1, #22
 8004aca:	2000      	movs	r0, #0
 8004acc:	f001 fe04 	bl	80066d8 <ssd1306_DrawBitmap>

	  //ssd1306_DrawBitmap(3,2,PEDALNAMES[currentPedalOption%5],16,16,White);
	  ssd1306_SetCursor(3+16+4, 2+4);
 8004ad0:	2106      	movs	r1, #6
 8004ad2:	2017      	movs	r0, #23
 8004ad4:	f001 fde8 	bl	80066a8 <ssd1306_SetCursor>
	  ssd1306_WriteString(PEDALSMENUOPTIONSSTRINGS[(pedalMenuOption+2)%3], Font_7x10, White);
 8004ad8:	4b36      	ldr	r3, [pc, #216]	; (8004bb4 <_Z20drawPedalMenuOptionsv+0x118>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	1c99      	adds	r1, r3, #2
 8004ade:	4b36      	ldr	r3, [pc, #216]	; (8004bb8 <_Z20drawPedalMenuOptionsv+0x11c>)
 8004ae0:	fb83 3201 	smull	r3, r2, r3, r1
 8004ae4:	17cb      	asrs	r3, r1, #31
 8004ae6:	1ad2      	subs	r2, r2, r3
 8004ae8:	4613      	mov	r3, r2
 8004aea:	005b      	lsls	r3, r3, #1
 8004aec:	4413      	add	r3, r2
 8004aee:	1aca      	subs	r2, r1, r3
 8004af0:	4613      	mov	r3, r2
 8004af2:	009b      	lsls	r3, r3, #2
 8004af4:	4413      	add	r3, r2
 8004af6:	005b      	lsls	r3, r3, #1
 8004af8:	4a30      	ldr	r2, [pc, #192]	; (8004bbc <_Z20drawPedalMenuOptionsv+0x120>)
 8004afa:	1898      	adds	r0, r3, r2
 8004afc:	4a30      	ldr	r2, [pc, #192]	; (8004bc0 <_Z20drawPedalMenuOptionsv+0x124>)
 8004afe:	2301      	movs	r3, #1
 8004b00:	ca06      	ldmia	r2, {r1, r2}
 8004b02:	f001 fdab 	bl	800665c <ssd1306_WriteString>
	  //ssd1306_DrawBitmap(3,24,PEDALNAMES[(currentPedalOption+1)%5],16,16,White);
	  ssd1306_SetCursor(3+16+4, 24+4);
 8004b06:	211c      	movs	r1, #28
 8004b08:	2017      	movs	r0, #23
 8004b0a:	f001 fdcd 	bl	80066a8 <ssd1306_SetCursor>
	  ssd1306_WriteString(PEDALSMENUOPTIONSSTRINGS[(pedalMenuOption+3)%3], Font_7x10, White);
 8004b0e:	4b29      	ldr	r3, [pc, #164]	; (8004bb4 <_Z20drawPedalMenuOptionsv+0x118>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	1cd9      	adds	r1, r3, #3
 8004b14:	4b28      	ldr	r3, [pc, #160]	; (8004bb8 <_Z20drawPedalMenuOptionsv+0x11c>)
 8004b16:	fb83 3201 	smull	r3, r2, r3, r1
 8004b1a:	17cb      	asrs	r3, r1, #31
 8004b1c:	1ad2      	subs	r2, r2, r3
 8004b1e:	4613      	mov	r3, r2
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	4413      	add	r3, r2
 8004b24:	1aca      	subs	r2, r1, r3
 8004b26:	4613      	mov	r3, r2
 8004b28:	009b      	lsls	r3, r3, #2
 8004b2a:	4413      	add	r3, r2
 8004b2c:	005b      	lsls	r3, r3, #1
 8004b2e:	4a23      	ldr	r2, [pc, #140]	; (8004bbc <_Z20drawPedalMenuOptionsv+0x120>)
 8004b30:	1898      	adds	r0, r3, r2
 8004b32:	4a23      	ldr	r2, [pc, #140]	; (8004bc0 <_Z20drawPedalMenuOptionsv+0x124>)
 8004b34:	2301      	movs	r3, #1
 8004b36:	ca06      	ldmia	r2, {r1, r2}
 8004b38:	f001 fd90 	bl	800665c <ssd1306_WriteString>
	  //ssd1306_DrawBitmap(3,46,MENUICONS[(currentPedalOption+2)%5],16,16,White);
	  ssd1306_SetCursor(3+16+4, 46+4);
 8004b3c:	2132      	movs	r1, #50	; 0x32
 8004b3e:	2017      	movs	r0, #23
 8004b40:	f001 fdb2 	bl	80066a8 <ssd1306_SetCursor>
	  ssd1306_WriteString(PEDALSMENUOPTIONSSTRINGS[(pedalMenuOption+4)%3], Font_7x10, White);
 8004b44:	4b1b      	ldr	r3, [pc, #108]	; (8004bb4 <_Z20drawPedalMenuOptionsv+0x118>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	1d19      	adds	r1, r3, #4
 8004b4a:	4b1b      	ldr	r3, [pc, #108]	; (8004bb8 <_Z20drawPedalMenuOptionsv+0x11c>)
 8004b4c:	fb83 3201 	smull	r3, r2, r3, r1
 8004b50:	17cb      	asrs	r3, r1, #31
 8004b52:	1ad2      	subs	r2, r2, r3
 8004b54:	4613      	mov	r3, r2
 8004b56:	005b      	lsls	r3, r3, #1
 8004b58:	4413      	add	r3, r2
 8004b5a:	1aca      	subs	r2, r1, r3
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	009b      	lsls	r3, r3, #2
 8004b60:	4413      	add	r3, r2
 8004b62:	005b      	lsls	r3, r3, #1
 8004b64:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <_Z20drawPedalMenuOptionsv+0x120>)
 8004b66:	1898      	adds	r0, r3, r2
 8004b68:	4a15      	ldr	r2, [pc, #84]	; (8004bc0 <_Z20drawPedalMenuOptionsv+0x124>)
 8004b6a:	2301      	movs	r3, #1
 8004b6c:	ca06      	ldmia	r2, {r1, r2}
 8004b6e:	f001 fd75 	bl	800665c <ssd1306_WriteString>
	  ssd1306_DrawBitmap(125,(64-7)*pedalMenuOption/2,epd_bitmap__handle,3,7,White);
 8004b72:	4b10      	ldr	r3, [pc, #64]	; (8004bb4 <_Z20drawPedalMenuOptionsv+0x118>)
 8004b74:	681a      	ldr	r2, [r3, #0]
 8004b76:	4613      	mov	r3, r2
 8004b78:	00db      	lsls	r3, r3, #3
 8004b7a:	1a9b      	subs	r3, r3, r2
 8004b7c:	00db      	lsls	r3, r3, #3
 8004b7e:	4413      	add	r3, r2
 8004b80:	0fda      	lsrs	r2, r3, #31
 8004b82:	4413      	add	r3, r2
 8004b84:	105b      	asrs	r3, r3, #1
 8004b86:	b2d9      	uxtb	r1, r3
 8004b88:	2301      	movs	r3, #1
 8004b8a:	9301      	str	r3, [sp, #4]
 8004b8c:	2307      	movs	r3, #7
 8004b8e:	9300      	str	r3, [sp, #0]
 8004b90:	2303      	movs	r3, #3
 8004b92:	4a0c      	ldr	r2, [pc, #48]	; (8004bc4 <_Z20drawPedalMenuOptionsv+0x128>)
 8004b94:	207d      	movs	r0, #125	; 0x7d
 8004b96:	f001 fd9f 	bl	80066d8 <ssd1306_DrawBitmap>
	  ssd1306_UpdateScreen();
 8004b9a:	f001 fc5b 	bl	8006454 <ssd1306_UpdateScreen>
	  osDelay(1);
 8004b9e:	2001      	movs	r0, #1
 8004ba0:	f009 fd1e 	bl	800e5e0 <osDelay>
}
 8004ba4:	bf00      	nop
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	08015dc0 	.word	0x08015dc0
 8004bb0:	08015c50 	.word	0x08015c50
 8004bb4:	200194f0 	.word	0x200194f0
 8004bb8:	55555556 	.word	0x55555556
 8004bbc:	200000e8 	.word	0x200000e8
 8004bc0:	20000198 	.word	0x20000198
 8004bc4:	08015d98 	.word	0x08015d98

08004bc8 <_Z16freeOldFunctionsv>:

void deletePedal(int myP){

}

void freeOldFunctions(){
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b082      	sub	sp, #8
 8004bcc:	af00      	add	r7, sp, #0
	for(int i = 0; i < (int)sizeof(currentChainFunctions)/(int)sizeof(currentChainFunctions[0]);i++){
 8004bce:	2300      	movs	r3, #0
 8004bd0:	607b      	str	r3, [r7, #4]
 8004bd2:	e00a      	b.n	8004bea <_Z16freeOldFunctionsv+0x22>
		free(currentChainFunctions[i].structPointer);
 8004bd4:	4a09      	ldr	r2, [pc, #36]	; (8004bfc <_Z16freeOldFunctionsv+0x34>)
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	00db      	lsls	r3, r3, #3
 8004bda:	4413      	add	r3, r2
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	4618      	mov	r0, r3
 8004be0:	f010 f9d4 	bl	8014f8c <free>
	for(int i = 0; i < (int)sizeof(currentChainFunctions)/(int)sizeof(currentChainFunctions[0]);i++){
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	3301      	adds	r3, #1
 8004be8:	607b      	str	r3, [r7, #4]
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2b03      	cmp	r3, #3
 8004bee:	ddf1      	ble.n	8004bd4 <_Z16freeOldFunctionsv+0xc>
	}
}
 8004bf0:	bf00      	nop
 8004bf2:	bf00      	nop
 8004bf4:	3708      	adds	r7, #8
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	bf00      	nop
 8004bfc:	2001936c 	.word	0x2001936c

08004c00 <_Z21makeNewPedalFunctionsv>:

void makeNewPedalFunctions(){
 8004c00:	b5b0      	push	{r4, r5, r7, lr}
 8004c02:	b098      	sub	sp, #96	; 0x60
 8004c04:	af0e      	add	r7, sp, #56	; 0x38
    singlePedalChain currentPedalData = allPedalsData.allChains[pedalMenu];
 8004c06:	4bb2      	ldr	r3, [pc, #712]	; (8004ed0 <_Z21makeNewPedalFunctionsv+0x2d0>)
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	49b2      	ldr	r1, [pc, #712]	; (8004ed4 <_Z21makeNewPedalFunctionsv+0x2d4>)
 8004c0c:	4613      	mov	r3, r2
 8004c0e:	00db      	lsls	r3, r3, #3
 8004c10:	1a9b      	subs	r3, r3, r2
 8004c12:	009b      	lsls	r3, r3, #2
 8004c14:	440b      	add	r3, r1
 8004c16:	1d3c      	adds	r4, r7, #4
 8004c18:	461d      	mov	r5, r3
 8004c1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004c1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004c1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004c22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    for(int i = 0; i < MAX_PEDALS_PER_CHAIN;i++){
 8004c26:	2300      	movs	r3, #0
 8004c28:	627b      	str	r3, [r7, #36]	; 0x24
 8004c2a:	e1a5      	b.n	8004f78 <_Z21makeNewPedalFunctionsv+0x378>
    	uint8_t* params=currentPedalData.allPedals[i].parameters;
 8004c2c:	1d3a      	adds	r2, r7, #4
 8004c2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c30:	009b      	lsls	r3, r3, #2
 8004c32:	4413      	add	r3, r2
 8004c34:	623b      	str	r3, [r7, #32]
    	currentChainFunctions[i].pedalType=params[0];
 8004c36:	6a3b      	ldr	r3, [r7, #32]
 8004c38:	7819      	ldrb	r1, [r3, #0]
 8004c3a:	4aa7      	ldr	r2, [pc, #668]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3e:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
    	switch(params[0]){
 8004c42:	6a3b      	ldr	r3, [r7, #32]
 8004c44:	781b      	ldrb	r3, [r3, #0]
 8004c46:	2b09      	cmp	r3, #9
 8004c48:	f200 8193 	bhi.w	8004f72 <_Z21makeNewPedalFunctionsv+0x372>
 8004c4c:	a201      	add	r2, pc, #4	; (adr r2, 8004c54 <_Z21makeNewPedalFunctionsv+0x54>)
 8004c4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c52:	bf00      	nop
 8004c54:	08004c7d 	.word	0x08004c7d
 8004c58:	08004c8b 	.word	0x08004c8b
 8004c5c:	08004cc3 	.word	0x08004cc3
 8004c60:	08004d0d 	.word	0x08004d0d
 8004c64:	08004d5b 	.word	0x08004d5b
 8004c68:	08004da9 	.word	0x08004da9
 8004c6c:	08004de1 	.word	0x08004de1
 8004c70:	08004e1d 	.word	0x08004e1d
 8004c74:	08004e6b 	.word	0x08004e6b
 8004c78:	08004ee9 	.word	0x08004ee9
    		case noChang:
    			currentChainFunctions[i].structPointer=nullptr;
 8004c7c:	4a96      	ldr	r2, [pc, #600]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c80:	00db      	lsls	r3, r3, #3
 8004c82:	4413      	add	r3, r2
 8004c84:	2200      	movs	r2, #0
 8004c86:	605a      	str	r2, [r3, #4]
    	    	break;
 8004c88:	e173      	b.n	8004f72 <_Z21makeNewPedalFunctionsv+0x372>
    	    case OverA:
    	    	currentChainFunctions[i].structPointer = malloc(sizeof(Atan_OD));
 8004c8a:	2004      	movs	r0, #4
 8004c8c:	f010 f976 	bl	8014f7c <malloc>
 8004c90:	4603      	mov	r3, r0
 8004c92:	4619      	mov	r1, r3
 8004c94:	4a90      	ldr	r2, [pc, #576]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c98:	00db      	lsls	r3, r3, #3
 8004c9a:	4413      	add	r3, r2
 8004c9c:	6059      	str	r1, [r3, #4]
    	    	Atan_Overdrive_init((Atan_OD*)currentChainFunctions[i].structPointer,params[1]);
 8004c9e:	4a8e      	ldr	r2, [pc, #568]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca2:	00db      	lsls	r3, r3, #3
 8004ca4:	4413      	add	r3, r2
 8004ca6:	685a      	ldr	r2, [r3, #4]
 8004ca8:	6a3b      	ldr	r3, [r7, #32]
 8004caa:	3301      	adds	r3, #1
 8004cac:	781b      	ldrb	r3, [r3, #0]
 8004cae:	ee07 3a90 	vmov	s15, r3
 8004cb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cb6:	eeb0 0a67 	vmov.f32	s0, s15
 8004cba:	4610      	mov	r0, r2
 8004cbc:	f7fc f982 	bl	8000fc4 <_Z19Atan_Overdrive_initP7Atan_ODf>
    	    	break;
 8004cc0:	e157      	b.n	8004f72 <_Z21makeNewPedalFunctionsv+0x372>
    	    case OverC:
    	    	currentChainFunctions[i].structPointer = malloc(sizeof(cubic_overdrive));
 8004cc2:	2010      	movs	r0, #16
 8004cc4:	f010 f95a 	bl	8014f7c <malloc>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4619      	mov	r1, r3
 8004ccc:	4a82      	ldr	r2, [pc, #520]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd0:	00db      	lsls	r3, r3, #3
 8004cd2:	4413      	add	r3, r2
 8004cd4:	6059      	str	r1, [r3, #4]
    	    	cubic_overdrive_init((cubic_overdrive*)currentChainFunctions[i].structPointer,params[1],params[2]);
 8004cd6:	4a80      	ldr	r2, [pc, #512]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cda:	00db      	lsls	r3, r3, #3
 8004cdc:	4413      	add	r3, r2
 8004cde:	685a      	ldr	r2, [r3, #4]
 8004ce0:	6a3b      	ldr	r3, [r7, #32]
 8004ce2:	3301      	adds	r3, #1
 8004ce4:	781b      	ldrb	r3, [r3, #0]
 8004ce6:	ee07 3a90 	vmov	s15, r3
 8004cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004cee:	6a3b      	ldr	r3, [r7, #32]
 8004cf0:	3302      	adds	r3, #2
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	ee07 3a10 	vmov	s14, r3
 8004cf8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004cfc:	eef0 0a47 	vmov.f32	s1, s14
 8004d00:	eeb0 0a67 	vmov.f32	s0, s15
 8004d04:	4610      	mov	r0, r2
 8004d06:	f7fd fb7b 	bl	8002400 <_Z20cubic_overdrive_initP15cubic_overdriveff>
    	        break;
 8004d0a:	e132      	b.n	8004f72 <_Z21makeNewPedalFunctionsv+0x372>
    	    case eqHigh:
    	    	currentChainFunctions[i].structPointer = malloc(sizeof(HS));
 8004d0c:	2030      	movs	r0, #48	; 0x30
 8004d0e:	f010 f935 	bl	8014f7c <malloc>
 8004d12:	4603      	mov	r3, r0
 8004d14:	4619      	mov	r1, r3
 8004d16:	4a70      	ldr	r2, [pc, #448]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004d18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	6059      	str	r1, [r3, #4]
    	    	EQ_High_Shelving_Init((HS*)currentChainFunctions[i].structPointer,Fs,params[1],params[2]);
 8004d20:	4a6d      	ldr	r2, [pc, #436]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d24:	00db      	lsls	r3, r3, #3
 8004d26:	4413      	add	r3, r2
 8004d28:	685a      	ldr	r2, [r3, #4]
 8004d2a:	6a3b      	ldr	r3, [r7, #32]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	781b      	ldrb	r3, [r3, #0]
 8004d30:	ee07 3a90 	vmov	s15, r3
 8004d34:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d38:	6a3b      	ldr	r3, [r7, #32]
 8004d3a:	3302      	adds	r3, #2
 8004d3c:	781b      	ldrb	r3, [r3, #0]
 8004d3e:	ee07 3a10 	vmov	s14, r3
 8004d42:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004d46:	eeb0 1a47 	vmov.f32	s2, s14
 8004d4a:	eef0 0a67 	vmov.f32	s1, s15
 8004d4e:	ed9f 0a63 	vldr	s0, [pc, #396]	; 8004edc <_Z21makeNewPedalFunctionsv+0x2dc>
 8004d52:	4610      	mov	r0, r2
 8004d54:	f7fc fc38 	bl	80015c8 <_Z21EQ_High_Shelving_InitP2HSfff>
    	        break;
 8004d58:	e10b      	b.n	8004f72 <_Z21makeNewPedalFunctionsv+0x372>
    	    case eqLow:
    	    	currentChainFunctions[i].structPointer = malloc(sizeof(LS));
 8004d5a:	2030      	movs	r0, #48	; 0x30
 8004d5c:	f010 f90e 	bl	8014f7c <malloc>
 8004d60:	4603      	mov	r3, r0
 8004d62:	4619      	mov	r1, r3
 8004d64:	4a5c      	ldr	r2, [pc, #368]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004d66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d68:	00db      	lsls	r3, r3, #3
 8004d6a:	4413      	add	r3, r2
 8004d6c:	6059      	str	r1, [r3, #4]
    	    	EQ_Low_Shelving_Init((LS*)currentChainFunctions[i].structPointer,Fs,params[1],params[2]);
 8004d6e:	4a5a      	ldr	r2, [pc, #360]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d72:	00db      	lsls	r3, r3, #3
 8004d74:	4413      	add	r3, r2
 8004d76:	685a      	ldr	r2, [r3, #4]
 8004d78:	6a3b      	ldr	r3, [r7, #32]
 8004d7a:	3301      	adds	r3, #1
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	ee07 3a90 	vmov	s15, r3
 8004d82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004d86:	6a3b      	ldr	r3, [r7, #32]
 8004d88:	3302      	adds	r3, #2
 8004d8a:	781b      	ldrb	r3, [r3, #0]
 8004d8c:	ee07 3a10 	vmov	s14, r3
 8004d90:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004d94:	eeb0 1a47 	vmov.f32	s2, s14
 8004d98:	eef0 0a67 	vmov.f32	s1, s15
 8004d9c:	ed9f 0a4f 	vldr	s0, [pc, #316]	; 8004edc <_Z21makeNewPedalFunctionsv+0x2dc>
 8004da0:	4610      	mov	r0, r2
 8004da2:	f7fc fe70 	bl	8001a86 <_Z20EQ_Low_Shelving_InitP2LSfff>
    			break;
 8004da6:	e0e4      	b.n	8004f72 <_Z21makeNewPedalFunctionsv+0x372>
    	    case distE:
    	    	currentChainFunctions[i].structPointer = malloc(sizeof(Exp_Dist));
 8004da8:	2008      	movs	r0, #8
 8004daa:	f010 f8e7 	bl	8014f7c <malloc>
 8004dae:	4603      	mov	r3, r0
 8004db0:	4619      	mov	r1, r3
 8004db2:	4a49      	ldr	r2, [pc, #292]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	00db      	lsls	r3, r3, #3
 8004db8:	4413      	add	r3, r2
 8004dba:	6059      	str	r1, [r3, #4]
    	    	Exp_Distortion_Init_Default((Exp_Dist*)currentChainFunctions[i].structPointer,params[1]);
 8004dbc:	4a46      	ldr	r2, [pc, #280]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc0:	00db      	lsls	r3, r3, #3
 8004dc2:	4413      	add	r3, r2
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	6a3b      	ldr	r3, [r7, #32]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	ee07 3a90 	vmov	s15, r3
 8004dd0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dd4:	eeb0 0a67 	vmov.f32	s0, s15
 8004dd8:	4610      	mov	r0, r2
 8004dda:	f7fd f8c8 	bl	8001f6e <_Z27Exp_Distortion_Init_DefaultP8Exp_Distf>
    	    	break;
 8004dde:	e0c8      	b.n	8004f72 <_Z21makeNewPedalFunctionsv+0x372>
    	    case HP1:
    	    	currentChainFunctions[i].structPointer = malloc(sizeof(High_1st));
 8004de0:	2020      	movs	r0, #32
 8004de2:	f010 f8cb 	bl	8014f7c <malloc>
 8004de6:	4603      	mov	r3, r0
 8004de8:	4619      	mov	r1, r3
 8004dea:	4a3b      	ldr	r2, [pc, #236]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dee:	00db      	lsls	r3, r3, #3
 8004df0:	4413      	add	r3, r2
 8004df2:	6059      	str	r1, [r3, #4]
    	    	First_Order_High_Init((High_1st*)currentChainFunctions[i].structPointer,params[1],Fs);
 8004df4:	4a38      	ldr	r2, [pc, #224]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004df6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004df8:	00db      	lsls	r3, r3, #3
 8004dfa:	4413      	add	r3, r2
 8004dfc:	685a      	ldr	r2, [r3, #4]
 8004dfe:	6a3b      	ldr	r3, [r7, #32]
 8004e00:	3301      	adds	r3, #1
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e0c:	eddf 0a33 	vldr	s1, [pc, #204]	; 8004edc <_Z21makeNewPedalFunctionsv+0x2dc>
 8004e10:	eeb0 0a67 	vmov.f32	s0, s15
 8004e14:	4610      	mov	r0, r2
 8004e16:	f7fd f947 	bl	80020a8 <_Z21First_Order_High_InitP8High_1stff>
    			break;
 8004e1a:	e0aa      	b.n	8004f72 <_Z21makeNewPedalFunctionsv+0x372>
    	    case tremM:
    	    	currentChainFunctions[i].structPointer = malloc(sizeof(MOD_Tremolo));
 8004e1c:	2010      	movs	r0, #16
 8004e1e:	f010 f8ad 	bl	8014f7c <malloc>
 8004e22:	4603      	mov	r3, r0
 8004e24:	4619      	mov	r1, r3
 8004e26:	4a2c      	ldr	r2, [pc, #176]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2a:	00db      	lsls	r3, r3, #3
 8004e2c:	4413      	add	r3, r2
 8004e2e:	6059      	str	r1, [r3, #4]
    	    	MOD_Tremolo_init((MOD_Tremolo*)currentChainFunctions[i].structPointer,Fs,params[2],params[1]);
 8004e30:	4a29      	ldr	r2, [pc, #164]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e34:	00db      	lsls	r3, r3, #3
 8004e36:	4413      	add	r3, r2
 8004e38:	685a      	ldr	r2, [r3, #4]
 8004e3a:	6a3b      	ldr	r3, [r7, #32]
 8004e3c:	3302      	adds	r3, #2
 8004e3e:	781b      	ldrb	r3, [r3, #0]
 8004e40:	ee07 3a90 	vmov	s15, r3
 8004e44:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e48:	6a3b      	ldr	r3, [r7, #32]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	ee07 3a10 	vmov	s14, r3
 8004e52:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004e56:	eeb0 1a47 	vmov.f32	s2, s14
 8004e5a:	eef0 0a67 	vmov.f32	s1, s15
 8004e5e:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8004edc <_Z21makeNewPedalFunctionsv+0x2dc>
 8004e62:	4610      	mov	r0, r2
 8004e64:	f7fd f9f6 	bl	8002254 <_Z16MOD_Tremolo_initP11MOD_Tremolofff>
    			break;
 8004e68:	e083      	b.n	8004f72 <_Z21makeNewPedalFunctionsv+0x372>

    	    case Delay:
    	    	currentChainFunctions[i].structPointer = malloc(sizeof(delay));
 8004e6a:	2024      	movs	r0, #36	; 0x24
 8004e6c:	f010 f886 	bl	8014f7c <malloc>
 8004e70:	4603      	mov	r3, r0
 8004e72:	4619      	mov	r1, r3
 8004e74:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004e76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e78:	00db      	lsls	r3, r3, #3
 8004e7a:	4413      	add	r3, r2
 8004e7c:	6059      	str	r1, [r3, #4]
    	    	delay_init((delay*)currentChainFunctions[i].structPointer,Fs,params[1],params[2],params[3],xMemory,yMemory,maxMem);
 8004e7e:	4a16      	ldr	r2, [pc, #88]	; (8004ed8 <_Z21makeNewPedalFunctionsv+0x2d8>)
 8004e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e82:	00db      	lsls	r3, r3, #3
 8004e84:	4413      	add	r3, r2
 8004e86:	6858      	ldr	r0, [r3, #4]
 8004e88:	6a3b      	ldr	r3, [r7, #32]
 8004e8a:	3301      	adds	r3, #1
 8004e8c:	781b      	ldrb	r3, [r3, #0]
 8004e8e:	ee07 3a90 	vmov	s15, r3
 8004e92:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e96:	6a3b      	ldr	r3, [r7, #32]
 8004e98:	3302      	adds	r3, #2
 8004e9a:	781b      	ldrb	r3, [r3, #0]
 8004e9c:	ee07 3a10 	vmov	s14, r3
 8004ea0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004ea4:	6a3b      	ldr	r3, [r7, #32]
 8004ea6:	3303      	adds	r3, #3
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	ee06 3a90 	vmov	s13, r3
 8004eae:	eef8 6a66 	vcvt.f32.u32	s13, s13
 8004eb2:	f44f 53fa 	mov.w	r3, #8000	; 0x1f40
 8004eb6:	4a0a      	ldr	r2, [pc, #40]	; (8004ee0 <_Z21makeNewPedalFunctionsv+0x2e0>)
 8004eb8:	490a      	ldr	r1, [pc, #40]	; (8004ee4 <_Z21makeNewPedalFunctionsv+0x2e4>)
 8004eba:	eef0 1a66 	vmov.f32	s3, s13
 8004ebe:	eeb0 1a47 	vmov.f32	s2, s14
 8004ec2:	eef0 0a67 	vmov.f32	s1, s15
 8004ec6:	ed9f 0a05 	vldr	s0, [pc, #20]	; 8004edc <_Z21makeNewPedalFunctionsv+0x2dc>
 8004eca:	f7fc f9a7 	bl	800121c <_Z10delay_initP5delayffffPfS1_i>
    			break;
 8004ece:	e050      	b.n	8004f72 <_Z21makeNewPedalFunctionsv+0x372>
 8004ed0:	200194ec 	.word	0x200194ec
 8004ed4:	2001938c 	.word	0x2001938c
 8004ed8:	2001936c 	.word	0x2001936c
 8004edc:	47435000 	.word	0x47435000
 8004ee0:	200092f0 	.word	0x200092f0
 8004ee4:	200015f0 	.word	0x200015f0
    	    case Reverb:
//    	    	currentChainFunctions[i].structPointer = malloc(sizeof(my_distortion_struct));
//    	    	my_disortion_init((my_distortion_struct*)currentChainFunctions[i].structPointer);
//    			break;
				currentChainFunctions[i].structPointer = malloc(sizeof(reverb));
 8004ee8:	f44f 709a 	mov.w	r0, #308	; 0x134
 8004eec:	f010 f846 	bl	8014f7c <malloc>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	4619      	mov	r1, r3
 8004ef4:	4a25      	ldr	r2, [pc, #148]	; (8004f8c <_Z21makeNewPedalFunctionsv+0x38c>)
 8004ef6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ef8:	00db      	lsls	r3, r3, #3
 8004efa:	4413      	add	r3, r2
 8004efc:	6059      	str	r1, [r3, #4]
				reverb_init((reverb*)currentChainFunctions[i].structPointer,Fs,params[1],params[2],xMemory,
 8004efe:	4a23      	ldr	r2, [pc, #140]	; (8004f8c <_Z21makeNewPedalFunctionsv+0x38c>)
 8004f00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f02:	00db      	lsls	r3, r3, #3
 8004f04:	4413      	add	r3, r2
 8004f06:	6858      	ldr	r0, [r3, #4]
 8004f08:	6a3b      	ldr	r3, [r7, #32]
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	ee07 3a90 	vmov	s15, r3
 8004f12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f16:	6a3b      	ldr	r3, [r7, #32]
 8004f18:	3302      	adds	r3, #2
 8004f1a:	781b      	ldrb	r3, [r3, #0]
 8004f1c:	ee07 3a10 	vmov	s14, r3
 8004f20:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8004f24:	4b1a      	ldr	r3, [pc, #104]	; (8004f90 <_Z21makeNewPedalFunctionsv+0x390>)
 8004f26:	930c      	str	r3, [sp, #48]	; 0x30
 8004f28:	4b1a      	ldr	r3, [pc, #104]	; (8004f94 <_Z21makeNewPedalFunctionsv+0x394>)
 8004f2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8004f2c:	4b1a      	ldr	r3, [pc, #104]	; (8004f98 <_Z21makeNewPedalFunctionsv+0x398>)
 8004f2e:	930a      	str	r3, [sp, #40]	; 0x28
 8004f30:	4b1a      	ldr	r3, [pc, #104]	; (8004f9c <_Z21makeNewPedalFunctionsv+0x39c>)
 8004f32:	9309      	str	r3, [sp, #36]	; 0x24
 8004f34:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <_Z21makeNewPedalFunctionsv+0x3a0>)
 8004f36:	9308      	str	r3, [sp, #32]
 8004f38:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <_Z21makeNewPedalFunctionsv+0x3a4>)
 8004f3a:	9307      	str	r3, [sp, #28]
 8004f3c:	4b1a      	ldr	r3, [pc, #104]	; (8004fa8 <_Z21makeNewPedalFunctionsv+0x3a8>)
 8004f3e:	9306      	str	r3, [sp, #24]
 8004f40:	4b1a      	ldr	r3, [pc, #104]	; (8004fac <_Z21makeNewPedalFunctionsv+0x3ac>)
 8004f42:	9305      	str	r3, [sp, #20]
 8004f44:	4b1a      	ldr	r3, [pc, #104]	; (8004fb0 <_Z21makeNewPedalFunctionsv+0x3b0>)
 8004f46:	9304      	str	r3, [sp, #16]
 8004f48:	4b1a      	ldr	r3, [pc, #104]	; (8004fb4 <_Z21makeNewPedalFunctionsv+0x3b4>)
 8004f4a:	9303      	str	r3, [sp, #12]
 8004f4c:	4b1a      	ldr	r3, [pc, #104]	; (8004fb8 <_Z21makeNewPedalFunctionsv+0x3b8>)
 8004f4e:	9302      	str	r3, [sp, #8]
 8004f50:	4b1a      	ldr	r3, [pc, #104]	; (8004fbc <_Z21makeNewPedalFunctionsv+0x3bc>)
 8004f52:	9301      	str	r3, [sp, #4]
 8004f54:	4b1a      	ldr	r3, [pc, #104]	; (8004fc0 <_Z21makeNewPedalFunctionsv+0x3c0>)
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	4b1a      	ldr	r3, [pc, #104]	; (8004fc4 <_Z21makeNewPedalFunctionsv+0x3c4>)
 8004f5a:	f44f 52fa 	mov.w	r2, #8000	; 0x1f40
 8004f5e:	491a      	ldr	r1, [pc, #104]	; (8004fc8 <_Z21makeNewPedalFunctionsv+0x3c8>)
 8004f60:	eeb0 1a47 	vmov.f32	s2, s14
 8004f64:	eef0 0a67 	vmov.f32	s1, s15
 8004f68:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8004fcc <_Z21makeNewPedalFunctionsv+0x3cc>
 8004f6c:	f000 ff60 	bl	8005e30 <_Z11reverb_initP6reverbfffPfiP2CFS3_S3_S3_P6delay2S5_S5_S1_S1_S1_S1_S1_S1_S1_>
						maxMem, &CF1, &CF2, &CF3, &CF4, &AP1, &AP2, &AP3, yCF1, yCF2, yCF3, yCF4, yAP1, yAP2, yAP3);
				//MOD_Flanger_1_init((Flanger_1*)currentChainFunctions[i].structPointer,Fs,params[1],params[2],0.7,0.7,0.7,x,y,400);
				break;
 8004f70:	bf00      	nop
    for(int i = 0; i < MAX_PEDALS_PER_CHAIN;i++){
 8004f72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f74:	3301      	adds	r3, #1
 8004f76:	627b      	str	r3, [r7, #36]	; 0x24
 8004f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f7a:	2b03      	cmp	r3, #3
 8004f7c:	f77f ae56 	ble.w	8004c2c <_Z21makeNewPedalFunctionsv+0x2c>
    	}
    }
}
 8004f80:	bf00      	nop
 8004f82:	bf00      	nop
 8004f84:	3728      	adds	r7, #40	; 0x28
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bdb0      	pop	{r4, r5, r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	2001936c 	.word	0x2001936c
 8004f90:	200192a4 	.word	0x200192a4
 8004f94:	20019114 	.word	0x20019114
 8004f98:	20018c64 	.word	0x20018c64
 8004f9c:	20016874 	.word	0x20016874
 8004fa0:	200147a4 	.word	0x200147a4
 8004fa4:	20012ea4 	.word	0x20012ea4
 8004fa8:	200110f4 	.word	0x200110f4
 8004fac:	200110c8 	.word	0x200110c8
 8004fb0:	2001109c 	.word	0x2001109c
 8004fb4:	20011070 	.word	0x20011070
 8004fb8:	20011050 	.word	0x20011050
 8004fbc:	20011030 	.word	0x20011030
 8004fc0:	20011010 	.word	0x20011010
 8004fc4:	20010ff0 	.word	0x20010ff0
 8004fc8:	200015f0 	.word	0x200015f0
 8004fcc:	47435000 	.word	0x47435000

08004fd0 <_Z13makeNewPedalsv>:
void makeNewPedals(){
 8004fd0:	b580      	push	{r7, lr}
 8004fd2:	af00      	add	r7, sp, #0
	if (xSemaphoreTake(soundSem, portMAX_DELAY)){
 8004fd4:	4b0d      	ldr	r3, [pc, #52]	; (800500c <_Z13makeNewPedalsv+0x3c>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f04f 31ff 	mov.w	r1, #4294967295
 8004fdc:	4618      	mov	r0, r3
 8004fde:	f00a f847 	bl	800f070 <xQueueSemaphoreTake>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	bf14      	ite	ne
 8004fe8:	2301      	movne	r3, #1
 8004fea:	2300      	moveq	r3, #0
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d003      	beq.n	8004ffa <_Z13makeNewPedalsv+0x2a>
		freeOldFunctions();
 8004ff2:	f7ff fde9 	bl	8004bc8 <_Z16freeOldFunctionsv>
		makeNewPedalFunctions();
 8004ff6:	f7ff fe03 	bl	8004c00 <_Z21makeNewPedalFunctionsv>
	}
	xSemaphoreGive(soundSem);
 8004ffa:	4b04      	ldr	r3, [pc, #16]	; (800500c <_Z13makeNewPedalsv+0x3c>)
 8004ffc:	6818      	ldr	r0, [r3, #0]
 8004ffe:	2300      	movs	r3, #0
 8005000:	2200      	movs	r2, #0
 8005002:	2100      	movs	r1, #0
 8005004:	f009 fd2e 	bl	800ea64 <xQueueGenericSend>

}
 8005008:	bf00      	nop
 800500a:	bd80      	pop	{r7, pc}
 800500c:	20000630 	.word	0x20000630

08005010 <_Z10menuChangev>:
void menuChange(){
 8005010:	b5b0      	push	{r4, r5, r7, lr}
 8005012:	b086      	sub	sp, #24
 8005014:	af00      	add	r7, sp, #0
	if(currentScreen=="individualPedalsMenu"){  //this is each individual (distortion, delay...)
 8005016:	4999      	ldr	r1, [pc, #612]	; (800527c <_Z10menuChangev+0x26c>)
 8005018:	4899      	ldr	r0, [pc, #612]	; (8005280 <_Z10menuChangev+0x270>)
 800501a:	f000 fe94 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800501e:	4603      	mov	r3, r0
 8005020:	2b00      	cmp	r3, #0
 8005022:	d042      	beq.n	80050aa <_Z10menuChangev+0x9a>
        if(buttonPressed=="right"){
 8005024:	4997      	ldr	r1, [pc, #604]	; (8005284 <_Z10menuChangev+0x274>)
 8005026:	4898      	ldr	r0, [pc, #608]	; (8005288 <_Z10menuChangev+0x278>)
 8005028:	f000 fe8d 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800502c:	4603      	mov	r3, r0
 800502e:	2b00      	cmp	r3, #0
 8005030:	d011      	beq.n	8005056 <_Z10menuChangev+0x46>
            individualPedalMenu++;
 8005032:	4b96      	ldr	r3, [pc, #600]	; (800528c <_Z10menuChangev+0x27c>)
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	3301      	adds	r3, #1
 8005038:	4a94      	ldr	r2, [pc, #592]	; (800528c <_Z10menuChangev+0x27c>)
 800503a:	6013      	str	r3, [r2, #0]
            if(individualPedalMenu>=MAX_PEDALS_PER_CHAIN)individualPedalMenu=individualPedalMenu-MAX_PEDALS_PER_CHAIN;
 800503c:	4b93      	ldr	r3, [pc, #588]	; (800528c <_Z10menuChangev+0x27c>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	2b03      	cmp	r3, #3
 8005042:	dd04      	ble.n	800504e <_Z10menuChangev+0x3e>
 8005044:	4b91      	ldr	r3, [pc, #580]	; (800528c <_Z10menuChangev+0x27c>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	3b04      	subs	r3, #4
 800504a:	4a90      	ldr	r2, [pc, #576]	; (800528c <_Z10menuChangev+0x27c>)
 800504c:	6013      	str	r3, [r2, #0]
            drawIndividualPedalMenu();
 800504e:	f7fe ffc1 	bl	8003fd4 <_Z23drawIndividualPedalMenuv>
            	 savePedals();
            	 drawMenuScreen();
             }
		}
	}
}
 8005052:	f000 bd69 	b.w	8005b28 <_Z10menuChangev+0xb18>
        }else if(buttonPressed == "left"){
 8005056:	498e      	ldr	r1, [pc, #568]	; (8005290 <_Z10menuChangev+0x280>)
 8005058:	488b      	ldr	r0, [pc, #556]	; (8005288 <_Z10menuChangev+0x278>)
 800505a:	f000 fe74 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800505e:	4603      	mov	r3, r0
 8005060:	2b00      	cmp	r3, #0
 8005062:	d00f      	beq.n	8005084 <_Z10menuChangev+0x74>
        	individualPedalMenu--;
 8005064:	4b89      	ldr	r3, [pc, #548]	; (800528c <_Z10menuChangev+0x27c>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3b01      	subs	r3, #1
 800506a:	4a88      	ldr	r2, [pc, #544]	; (800528c <_Z10menuChangev+0x27c>)
 800506c:	6013      	str	r3, [r2, #0]
        	if(individualPedalMenu<0)individualPedalMenu=MAX_PEDALS_PER_CHAIN-1;
 800506e:	4b87      	ldr	r3, [pc, #540]	; (800528c <_Z10menuChangev+0x27c>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	2b00      	cmp	r3, #0
 8005074:	da02      	bge.n	800507c <_Z10menuChangev+0x6c>
 8005076:	4b85      	ldr	r3, [pc, #532]	; (800528c <_Z10menuChangev+0x27c>)
 8005078:	2203      	movs	r2, #3
 800507a:	601a      	str	r2, [r3, #0]
            drawIndividualPedalMenu();
 800507c:	f7fe ffaa 	bl	8003fd4 <_Z23drawIndividualPedalMenuv>
}
 8005080:	f000 bd52 	b.w	8005b28 <_Z10menuChangev+0xb18>
        }else if(buttonPressed == "plus"){
 8005084:	4983      	ldr	r1, [pc, #524]	; (8005294 <_Z10menuChangev+0x284>)
 8005086:	4880      	ldr	r0, [pc, #512]	; (8005288 <_Z10menuChangev+0x278>)
 8005088:	f000 fe5d 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800508c:	4603      	mov	r3, r0
 800508e:	2b00      	cmp	r3, #0
 8005090:	f000 854a 	beq.w	8005b28 <_Z10menuChangev+0xb18>
        	individualPedalMenuOption=0;
 8005094:	4b80      	ldr	r3, [pc, #512]	; (8005298 <_Z10menuChangev+0x288>)
 8005096:	2200      	movs	r2, #0
 8005098:	601a      	str	r2, [r3, #0]
        	currentScreen="individualPedalsMenuOption";
 800509a:	4980      	ldr	r1, [pc, #512]	; (800529c <_Z10menuChangev+0x28c>)
 800509c:	4878      	ldr	r0, [pc, #480]	; (8005280 <_Z10menuChangev+0x270>)
 800509e:	f00c fc00 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
        	drawIndividualPedalMenuOptions();
 80050a2:	f7ff f8a3 	bl	80041ec <_Z30drawIndividualPedalMenuOptionsv>
}
 80050a6:	f000 bd3f 	b.w	8005b28 <_Z10menuChangev+0xb18>
	}else if(currentScreen=="individualPedalsMenuOption"){
 80050aa:	497c      	ldr	r1, [pc, #496]	; (800529c <_Z10menuChangev+0x28c>)
 80050ac:	4874      	ldr	r0, [pc, #464]	; (8005280 <_Z10menuChangev+0x270>)
 80050ae:	f000 fe4a 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80050b2:	4603      	mov	r3, r0
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d06c      	beq.n	8005192 <_Z10menuChangev+0x182>
        if(buttonPressed=="right"){
 80050b8:	4972      	ldr	r1, [pc, #456]	; (8005284 <_Z10menuChangev+0x274>)
 80050ba:	4873      	ldr	r0, [pc, #460]	; (8005288 <_Z10menuChangev+0x278>)
 80050bc:	f000 fe43 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80050c0:	4603      	mov	r3, r0
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d015      	beq.n	80050f2 <_Z10menuChangev+0xe2>
        	individualPedalMenuOption++;
 80050c6:	4b74      	ldr	r3, [pc, #464]	; (8005298 <_Z10menuChangev+0x288>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	3301      	adds	r3, #1
 80050cc:	4a72      	ldr	r2, [pc, #456]	; (8005298 <_Z10menuChangev+0x288>)
 80050ce:	6013      	str	r3, [r2, #0]
        	individualPedalMenuOption=individualPedalMenuOption%(sizeof(INDIVIDUALPEDALOPTIONSTRINGS)/sizeof(INDIVIDUALPEDALOPTIONSTRINGS[0]));
 80050d0:	4b71      	ldr	r3, [pc, #452]	; (8005298 <_Z10menuChangev+0x288>)
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	4619      	mov	r1, r3
 80050d6:	4b72      	ldr	r3, [pc, #456]	; (80052a0 <_Z10menuChangev+0x290>)
 80050d8:	fba3 2301 	umull	r2, r3, r3, r1
 80050dc:	085a      	lsrs	r2, r3, #1
 80050de:	4613      	mov	r3, r2
 80050e0:	005b      	lsls	r3, r3, #1
 80050e2:	4413      	add	r3, r2
 80050e4:	1aca      	subs	r2, r1, r3
 80050e6:	4b6c      	ldr	r3, [pc, #432]	; (8005298 <_Z10menuChangev+0x288>)
 80050e8:	601a      	str	r2, [r3, #0]
        	drawIndividualPedalMenuOptions();
 80050ea:	f7ff f87f 	bl	80041ec <_Z30drawIndividualPedalMenuOptionsv>
}
 80050ee:	f000 bd1b 	b.w	8005b28 <_Z10menuChangev+0xb18>
        }else if(buttonPressed == "left"){
 80050f2:	4967      	ldr	r1, [pc, #412]	; (8005290 <_Z10menuChangev+0x280>)
 80050f4:	4864      	ldr	r0, [pc, #400]	; (8005288 <_Z10menuChangev+0x278>)
 80050f6:	f000 fe26 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80050fa:	4603      	mov	r3, r0
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d00f      	beq.n	8005120 <_Z10menuChangev+0x110>
        	individualPedalMenuOption--;
 8005100:	4b65      	ldr	r3, [pc, #404]	; (8005298 <_Z10menuChangev+0x288>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	3b01      	subs	r3, #1
 8005106:	4a64      	ldr	r2, [pc, #400]	; (8005298 <_Z10menuChangev+0x288>)
 8005108:	6013      	str	r3, [r2, #0]
        	if(individualPedalMenuOption<0)individualPedalMenuOption=(sizeof(INDIVIDUALPEDALOPTIONSTRINGS)/sizeof(INDIVIDUALPEDALOPTIONSTRINGS[0]))-1;
 800510a:	4b63      	ldr	r3, [pc, #396]	; (8005298 <_Z10menuChangev+0x288>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2b00      	cmp	r3, #0
 8005110:	da02      	bge.n	8005118 <_Z10menuChangev+0x108>
 8005112:	4b61      	ldr	r3, [pc, #388]	; (8005298 <_Z10menuChangev+0x288>)
 8005114:	2202      	movs	r2, #2
 8005116:	601a      	str	r2, [r3, #0]
        	drawIndividualPedalMenuOptions();
 8005118:	f7ff f868 	bl	80041ec <_Z30drawIndividualPedalMenuOptionsv>
}
 800511c:	f000 bd04 	b.w	8005b28 <_Z10menuChangev+0xb18>
        }else if(buttonPressed == "plus"){
 8005120:	495c      	ldr	r1, [pc, #368]	; (8005294 <_Z10menuChangev+0x284>)
 8005122:	4859      	ldr	r0, [pc, #356]	; (8005288 <_Z10menuChangev+0x278>)
 8005124:	f000 fe0f 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005128:	4603      	mov	r3, r0
 800512a:	2b00      	cmp	r3, #0
 800512c:	f000 84fc 	beq.w	8005b28 <_Z10menuChangev+0xb18>
            if(individualPedalMenuOption==2){
 8005130:	4b59      	ldr	r3, [pc, #356]	; (8005298 <_Z10menuChangev+0x288>)
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d10a      	bne.n	800514e <_Z10menuChangev+0x13e>
            	individualPedalMenuOption=0;
 8005138:	4b57      	ldr	r3, [pc, #348]	; (8005298 <_Z10menuChangev+0x288>)
 800513a:	2200      	movs	r2, #0
 800513c:	601a      	str	r2, [r3, #0]
            	currentScreen="pedalMenu";
 800513e:	4959      	ldr	r1, [pc, #356]	; (80052a4 <_Z10menuChangev+0x294>)
 8005140:	484f      	ldr	r0, [pc, #316]	; (8005280 <_Z10menuChangev+0x270>)
 8005142:	f00c fbae 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
            	drawPedalMenu();
 8005146:	f7fe fcfd 	bl	8003b44 <_Z13drawPedalMenuv>
}
 800514a:	f000 bced 	b.w	8005b28 <_Z10menuChangev+0xb18>
            }else if(individualPedalMenuOption==1){
 800514e:	4b52      	ldr	r3, [pc, #328]	; (8005298 <_Z10menuChangev+0x288>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d10d      	bne.n	8005172 <_Z10menuChangev+0x162>
            	individualPedalMenuOption=0;
 8005156:	4b50      	ldr	r3, [pc, #320]	; (8005298 <_Z10menuChangev+0x288>)
 8005158:	2200      	movs	r2, #0
 800515a:	601a      	str	r2, [r3, #0]
            	choosePedalMenu=0;
 800515c:	4b52      	ldr	r3, [pc, #328]	; (80052a8 <_Z10menuChangev+0x298>)
 800515e:	2200      	movs	r2, #0
 8005160:	601a      	str	r2, [r3, #0]
            	currentScreen="choosePedalMenu";
 8005162:	4952      	ldr	r1, [pc, #328]	; (80052ac <_Z10menuChangev+0x29c>)
 8005164:	4846      	ldr	r0, [pc, #280]	; (8005280 <_Z10menuChangev+0x270>)
 8005166:	f00c fb9c 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
            	drawchoosePedalMenu();
 800516a:	f7ff fa2d 	bl	80045c8 <_Z19drawchoosePedalMenuv>
}
 800516e:	f000 bcdb 	b.w	8005b28 <_Z10menuChangev+0xb18>
            }else if(individualPedalMenuOption==0){
 8005172:	4b49      	ldr	r3, [pc, #292]	; (8005298 <_Z10menuChangev+0x288>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	2b00      	cmp	r3, #0
 8005178:	f040 84d6 	bne.w	8005b28 <_Z10menuChangev+0xb18>
                parameterMenu=0;
 800517c:	4b4c      	ldr	r3, [pc, #304]	; (80052b0 <_Z10menuChangev+0x2a0>)
 800517e:	2200      	movs	r2, #0
 8005180:	601a      	str	r2, [r3, #0]
                currentScreen="parameterEditMenu";
 8005182:	494c      	ldr	r1, [pc, #304]	; (80052b4 <_Z10menuChangev+0x2a4>)
 8005184:	483e      	ldr	r0, [pc, #248]	; (8005280 <_Z10menuChangev+0x270>)
 8005186:	f00c fb8c 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
                drawParameterEditMenu();
 800518a:	f7ff f92f 	bl	80043ec <_Z21drawParameterEditMenuv>
}
 800518e:	f000 bccb 	b.w	8005b28 <_Z10menuChangev+0xb18>
	}else if(currentScreen == "parameterEditMenu"){
 8005192:	4948      	ldr	r1, [pc, #288]	; (80052b4 <_Z10menuChangev+0x2a4>)
 8005194:	483a      	ldr	r0, [pc, #232]	; (8005280 <_Z10menuChangev+0x270>)
 8005196:	f000 fdd6 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800519a:	4603      	mov	r3, r0
 800519c:	2b00      	cmp	r3, #0
 800519e:	f000 813c 	beq.w	800541a <_Z10menuChangev+0x40a>
		if(buttonPressed=="plus"){
 80051a2:	493c      	ldr	r1, [pc, #240]	; (8005294 <_Z10menuChangev+0x284>)
 80051a4:	4838      	ldr	r0, [pc, #224]	; (8005288 <_Z10menuChangev+0x278>)
 80051a6:	f000 fdce 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d00a      	beq.n	80051c6 <_Z10menuChangev+0x1b6>
			parameterMenu=0;
 80051b0:	4b3f      	ldr	r3, [pc, #252]	; (80052b0 <_Z10menuChangev+0x2a0>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	601a      	str	r2, [r3, #0]
			currentScreen = "individualPedalsMenu";
 80051b6:	4931      	ldr	r1, [pc, #196]	; (800527c <_Z10menuChangev+0x26c>)
 80051b8:	4831      	ldr	r0, [pc, #196]	; (8005280 <_Z10menuChangev+0x270>)
 80051ba:	f00c fb72 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			drawIndividualPedalMenu();
 80051be:	f7fe ff09 	bl	8003fd4 <_Z23drawIndividualPedalMenuv>
}
 80051c2:	f000 bcb1 	b.w	8005b28 <_Z10menuChangev+0xb18>
		}else if(buttonPressed=="right"){
 80051c6:	492f      	ldr	r1, [pc, #188]	; (8005284 <_Z10menuChangev+0x274>)
 80051c8:	482f      	ldr	r0, [pc, #188]	; (8005288 <_Z10menuChangev+0x278>)
 80051ca:	f000 fdbc 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80051ce:	4603      	mov	r3, r0
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d025      	beq.n	8005220 <_Z10menuChangev+0x210>
			numToArray(allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[0],&num);
 80051d4:	4b38      	ldr	r3, [pc, #224]	; (80052b8 <_Z10menuChangev+0x2a8>)
 80051d6:	681a      	ldr	r2, [r3, #0]
 80051d8:	4b2c      	ldr	r3, [pc, #176]	; (800528c <_Z10menuChangev+0x27c>)
 80051da:	6819      	ldr	r1, [r3, #0]
 80051dc:	4837      	ldr	r0, [pc, #220]	; (80052bc <_Z10menuChangev+0x2ac>)
 80051de:	4613      	mov	r3, r2
 80051e0:	00db      	lsls	r3, r3, #3
 80051e2:	1a9b      	subs	r3, r3, r2
 80051e4:	440b      	add	r3, r1
 80051e6:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 80051ea:	461a      	mov	r2, r3
 80051ec:	f107 030c 	add.w	r3, r7, #12
 80051f0:	4619      	mov	r1, r3
 80051f2:	4610      	mov	r0, r2
 80051f4:	f7ff f88c 	bl	8004310 <_Z10numToArrayiPi>
			if(num!=0){
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d00c      	beq.n	8005218 <_Z10menuChangev+0x208>
				parameterMenu++;
 80051fe:	4b2c      	ldr	r3, [pc, #176]	; (80052b0 <_Z10menuChangev+0x2a0>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	3301      	adds	r3, #1
 8005204:	4a2a      	ldr	r2, [pc, #168]	; (80052b0 <_Z10menuChangev+0x2a0>)
 8005206:	6013      	str	r3, [r2, #0]
				if(parameterMenu>=num)parameterMenu=0;
 8005208:	4b29      	ldr	r3, [pc, #164]	; (80052b0 <_Z10menuChangev+0x2a0>)
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	429a      	cmp	r2, r3
 8005210:	db02      	blt.n	8005218 <_Z10menuChangev+0x208>
 8005212:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <_Z10menuChangev+0x2a0>)
 8005214:	2200      	movs	r2, #0
 8005216:	601a      	str	r2, [r3, #0]
			drawParameterEditMenu();
 8005218:	f7ff f8e8 	bl	80043ec <_Z21drawParameterEditMenuv>
}
 800521c:	f000 bc84 	b.w	8005b28 <_Z10menuChangev+0xb18>
		}else if(buttonPressed=="left"){
 8005220:	491b      	ldr	r1, [pc, #108]	; (8005290 <_Z10menuChangev+0x280>)
 8005222:	4819      	ldr	r0, [pc, #100]	; (8005288 <_Z10menuChangev+0x278>)
 8005224:	f000 fd8f 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d048      	beq.n	80052c0 <_Z10menuChangev+0x2b0>
			numToArray(allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[0],&num);
 800522e:	4b22      	ldr	r3, [pc, #136]	; (80052b8 <_Z10menuChangev+0x2a8>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	4b16      	ldr	r3, [pc, #88]	; (800528c <_Z10menuChangev+0x27c>)
 8005234:	6819      	ldr	r1, [r3, #0]
 8005236:	4821      	ldr	r0, [pc, #132]	; (80052bc <_Z10menuChangev+0x2ac>)
 8005238:	4613      	mov	r3, r2
 800523a:	00db      	lsls	r3, r3, #3
 800523c:	1a9b      	subs	r3, r3, r2
 800523e:	440b      	add	r3, r1
 8005240:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 8005244:	461a      	mov	r2, r3
 8005246:	f107 0308 	add.w	r3, r7, #8
 800524a:	4619      	mov	r1, r3
 800524c:	4610      	mov	r0, r2
 800524e:	f7ff f85f 	bl	8004310 <_Z10numToArrayiPi>
			if(num!=0){
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d00c      	beq.n	8005272 <_Z10menuChangev+0x262>
				parameterMenu--;
 8005258:	4b15      	ldr	r3, [pc, #84]	; (80052b0 <_Z10menuChangev+0x2a0>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	3b01      	subs	r3, #1
 800525e:	4a14      	ldr	r2, [pc, #80]	; (80052b0 <_Z10menuChangev+0x2a0>)
 8005260:	6013      	str	r3, [r2, #0]
				if(parameterMenu<0)parameterMenu=num-1;
 8005262:	4b13      	ldr	r3, [pc, #76]	; (80052b0 <_Z10menuChangev+0x2a0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	2b00      	cmp	r3, #0
 8005268:	da03      	bge.n	8005272 <_Z10menuChangev+0x262>
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	3b01      	subs	r3, #1
 800526e:	4a10      	ldr	r2, [pc, #64]	; (80052b0 <_Z10menuChangev+0x2a0>)
 8005270:	6013      	str	r3, [r2, #0]
			drawParameterEditMenu();
 8005272:	f7ff f8bb 	bl	80043ec <_Z21drawParameterEditMenuv>
}
 8005276:	f000 bc57 	b.w	8005b28 <_Z10menuChangev+0xb18>
 800527a:	bf00      	nop
 800527c:	08015b80 	.word	0x08015b80
 8005280:	200194cc 	.word	0x200194cc
 8005284:	08015ab4 	.word	0x08015ab4
 8005288:	20000638 	.word	0x20000638
 800528c:	200194e4 	.word	0x200194e4
 8005290:	08015abc 	.word	0x08015abc
 8005294:	08015ad0 	.word	0x08015ad0
 8005298:	200194e8 	.word	0x200194e8
 800529c:	08015b98 	.word	0x08015b98
 80052a0:	aaaaaaab 	.word	0xaaaaaaab
 80052a4:	08015bb4 	.word	0x08015bb4
 80052a8:	2001a4b8 	.word	0x2001a4b8
 80052ac:	08015bc0 	.word	0x08015bc0
 80052b0:	200194f4 	.word	0x200194f4
 80052b4:	08015bd0 	.word	0x08015bd0
 80052b8:	200194ec 	.word	0x200194ec
 80052bc:	2001938c 	.word	0x2001938c
		}else if(buttonPressed=="rotation"){
 80052c0:	4998      	ldr	r1, [pc, #608]	; (8005524 <_Z10menuChangev+0x514>)
 80052c2:	4899      	ldr	r0, [pc, #612]	; (8005528 <_Z10menuChangev+0x518>)
 80052c4:	f000 fd3f 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80052c8:	4603      	mov	r3, r0
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 842c 	beq.w	8005b28 <_Z10menuChangev+0xb18>
			numToArray(allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[0],&num);
 80052d0:	4b96      	ldr	r3, [pc, #600]	; (800552c <_Z10menuChangev+0x51c>)
 80052d2:	681a      	ldr	r2, [r3, #0]
 80052d4:	4b96      	ldr	r3, [pc, #600]	; (8005530 <_Z10menuChangev+0x520>)
 80052d6:	6819      	ldr	r1, [r3, #0]
 80052d8:	4896      	ldr	r0, [pc, #600]	; (8005534 <_Z10menuChangev+0x524>)
 80052da:	4613      	mov	r3, r2
 80052dc:	00db      	lsls	r3, r3, #3
 80052de:	1a9b      	subs	r3, r3, r2
 80052e0:	440b      	add	r3, r1
 80052e2:	f810 3023 	ldrb.w	r3, [r0, r3, lsl #2]
 80052e6:	461a      	mov	r2, r3
 80052e8:	1d3b      	adds	r3, r7, #4
 80052ea:	4619      	mov	r1, r3
 80052ec:	4610      	mov	r0, r2
 80052ee:	f7ff f80f 	bl	8004310 <_Z10numToArrayiPi>
			if(rotationDirection==1&&num>0){
 80052f2:	4b91      	ldr	r3, [pc, #580]	; (8005538 <_Z10menuChangev+0x528>)
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	2b01      	cmp	r3, #1
 80052f8:	d144      	bne.n	8005384 <_Z10menuChangev+0x374>
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	dd41      	ble.n	8005384 <_Z10menuChangev+0x374>
				allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[parameterMenu+1]++;
 8005300:	4b8a      	ldr	r3, [pc, #552]	; (800552c <_Z10menuChangev+0x51c>)
 8005302:	681a      	ldr	r2, [r3, #0]
 8005304:	4b8a      	ldr	r3, [pc, #552]	; (8005530 <_Z10menuChangev+0x520>)
 8005306:	6818      	ldr	r0, [r3, #0]
 8005308:	4b8c      	ldr	r3, [pc, #560]	; (800553c <_Z10menuChangev+0x52c>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	1c59      	adds	r1, r3, #1
 800530e:	4c89      	ldr	r4, [pc, #548]	; (8005534 <_Z10menuChangev+0x524>)
 8005310:	4613      	mov	r3, r2
 8005312:	00db      	lsls	r3, r3, #3
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	4403      	add	r3, r0
 8005318:	009b      	lsls	r3, r3, #2
 800531a:	4423      	add	r3, r4
 800531c:	440b      	add	r3, r1
 800531e:	781b      	ldrb	r3, [r3, #0]
 8005320:	3301      	adds	r3, #1
 8005322:	b2dd      	uxtb	r5, r3
 8005324:	4c83      	ldr	r4, [pc, #524]	; (8005534 <_Z10menuChangev+0x524>)
 8005326:	4613      	mov	r3, r2
 8005328:	00db      	lsls	r3, r3, #3
 800532a:	1a9b      	subs	r3, r3, r2
 800532c:	4403      	add	r3, r0
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	4423      	add	r3, r4
 8005332:	440b      	add	r3, r1
 8005334:	462a      	mov	r2, r5
 8005336:	701a      	strb	r2, [r3, #0]
				if(allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[parameterMenu+1]>=100)allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[parameterMenu+1]=100;
 8005338:	4b7c      	ldr	r3, [pc, #496]	; (800552c <_Z10menuChangev+0x51c>)
 800533a:	681a      	ldr	r2, [r3, #0]
 800533c:	4b7c      	ldr	r3, [pc, #496]	; (8005530 <_Z10menuChangev+0x520>)
 800533e:	6818      	ldr	r0, [r3, #0]
 8005340:	4b7e      	ldr	r3, [pc, #504]	; (800553c <_Z10menuChangev+0x52c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	1c59      	adds	r1, r3, #1
 8005346:	4c7b      	ldr	r4, [pc, #492]	; (8005534 <_Z10menuChangev+0x524>)
 8005348:	4613      	mov	r3, r2
 800534a:	00db      	lsls	r3, r3, #3
 800534c:	1a9b      	subs	r3, r3, r2
 800534e:	4403      	add	r3, r0
 8005350:	009b      	lsls	r3, r3, #2
 8005352:	4423      	add	r3, r4
 8005354:	440b      	add	r3, r1
 8005356:	781b      	ldrb	r3, [r3, #0]
 8005358:	2b63      	cmp	r3, #99	; 0x63
 800535a:	d910      	bls.n	800537e <_Z10menuChangev+0x36e>
 800535c:	4b73      	ldr	r3, [pc, #460]	; (800552c <_Z10menuChangev+0x51c>)
 800535e:	681a      	ldr	r2, [r3, #0]
 8005360:	4b73      	ldr	r3, [pc, #460]	; (8005530 <_Z10menuChangev+0x520>)
 8005362:	6818      	ldr	r0, [r3, #0]
 8005364:	4b75      	ldr	r3, [pc, #468]	; (800553c <_Z10menuChangev+0x52c>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	1c59      	adds	r1, r3, #1
 800536a:	4c72      	ldr	r4, [pc, #456]	; (8005534 <_Z10menuChangev+0x524>)
 800536c:	4613      	mov	r3, r2
 800536e:	00db      	lsls	r3, r3, #3
 8005370:	1a9b      	subs	r3, r3, r2
 8005372:	4403      	add	r3, r0
 8005374:	009b      	lsls	r3, r3, #2
 8005376:	4423      	add	r3, r4
 8005378:	440b      	add	r3, r1
 800537a:	2264      	movs	r2, #100	; 0x64
 800537c:	701a      	strb	r2, [r3, #0]
				makeNewPedals();
 800537e:	f7ff fe27 	bl	8004fd0 <_Z13makeNewPedalsv>
 8005382:	e047      	b.n	8005414 <_Z10menuChangev+0x404>
			}else if(rotationDirection==0&&num>0){
 8005384:	4b6c      	ldr	r3, [pc, #432]	; (8005538 <_Z10menuChangev+0x528>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d143      	bne.n	8005414 <_Z10menuChangev+0x404>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	2b00      	cmp	r3, #0
 8005390:	dd40      	ble.n	8005414 <_Z10menuChangev+0x404>
				allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[parameterMenu+1]--;
 8005392:	4b66      	ldr	r3, [pc, #408]	; (800552c <_Z10menuChangev+0x51c>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	4b66      	ldr	r3, [pc, #408]	; (8005530 <_Z10menuChangev+0x520>)
 8005398:	6818      	ldr	r0, [r3, #0]
 800539a:	4b68      	ldr	r3, [pc, #416]	; (800553c <_Z10menuChangev+0x52c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	1c59      	adds	r1, r3, #1
 80053a0:	4c64      	ldr	r4, [pc, #400]	; (8005534 <_Z10menuChangev+0x524>)
 80053a2:	4613      	mov	r3, r2
 80053a4:	00db      	lsls	r3, r3, #3
 80053a6:	1a9b      	subs	r3, r3, r2
 80053a8:	4403      	add	r3, r0
 80053aa:	009b      	lsls	r3, r3, #2
 80053ac:	4423      	add	r3, r4
 80053ae:	440b      	add	r3, r1
 80053b0:	781b      	ldrb	r3, [r3, #0]
 80053b2:	3b01      	subs	r3, #1
 80053b4:	b2dd      	uxtb	r5, r3
 80053b6:	4c5f      	ldr	r4, [pc, #380]	; (8005534 <_Z10menuChangev+0x524>)
 80053b8:	4613      	mov	r3, r2
 80053ba:	00db      	lsls	r3, r3, #3
 80053bc:	1a9b      	subs	r3, r3, r2
 80053be:	4403      	add	r3, r0
 80053c0:	009b      	lsls	r3, r3, #2
 80053c2:	4423      	add	r3, r4
 80053c4:	440b      	add	r3, r1
 80053c6:	462a      	mov	r2, r5
 80053c8:	701a      	strb	r2, [r3, #0]
				if(allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[parameterMenu+1]>240)allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[parameterMenu+1]=0;
 80053ca:	4b58      	ldr	r3, [pc, #352]	; (800552c <_Z10menuChangev+0x51c>)
 80053cc:	681a      	ldr	r2, [r3, #0]
 80053ce:	4b58      	ldr	r3, [pc, #352]	; (8005530 <_Z10menuChangev+0x520>)
 80053d0:	6818      	ldr	r0, [r3, #0]
 80053d2:	4b5a      	ldr	r3, [pc, #360]	; (800553c <_Z10menuChangev+0x52c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	1c59      	adds	r1, r3, #1
 80053d8:	4c56      	ldr	r4, [pc, #344]	; (8005534 <_Z10menuChangev+0x524>)
 80053da:	4613      	mov	r3, r2
 80053dc:	00db      	lsls	r3, r3, #3
 80053de:	1a9b      	subs	r3, r3, r2
 80053e0:	4403      	add	r3, r0
 80053e2:	009b      	lsls	r3, r3, #2
 80053e4:	4423      	add	r3, r4
 80053e6:	440b      	add	r3, r1
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2bf0      	cmp	r3, #240	; 0xf0
 80053ec:	d910      	bls.n	8005410 <_Z10menuChangev+0x400>
 80053ee:	4b4f      	ldr	r3, [pc, #316]	; (800552c <_Z10menuChangev+0x51c>)
 80053f0:	681a      	ldr	r2, [r3, #0]
 80053f2:	4b4f      	ldr	r3, [pc, #316]	; (8005530 <_Z10menuChangev+0x520>)
 80053f4:	6818      	ldr	r0, [r3, #0]
 80053f6:	4b51      	ldr	r3, [pc, #324]	; (800553c <_Z10menuChangev+0x52c>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	1c59      	adds	r1, r3, #1
 80053fc:	4c4d      	ldr	r4, [pc, #308]	; (8005534 <_Z10menuChangev+0x524>)
 80053fe:	4613      	mov	r3, r2
 8005400:	00db      	lsls	r3, r3, #3
 8005402:	1a9b      	subs	r3, r3, r2
 8005404:	4403      	add	r3, r0
 8005406:	009b      	lsls	r3, r3, #2
 8005408:	4423      	add	r3, r4
 800540a:	440b      	add	r3, r1
 800540c:	2200      	movs	r2, #0
 800540e:	701a      	strb	r2, [r3, #0]
				makeNewPedals();
 8005410:	f7ff fdde 	bl	8004fd0 <_Z13makeNewPedalsv>
			drawParameterEditMenu();
 8005414:	f7fe ffea 	bl	80043ec <_Z21drawParameterEditMenuv>
}
 8005418:	e386      	b.n	8005b28 <_Z10menuChangev+0xb18>
	}else if(currentScreen=="choosePedalMenu"){
 800541a:	4949      	ldr	r1, [pc, #292]	; (8005540 <_Z10menuChangev+0x530>)
 800541c:	4849      	ldr	r0, [pc, #292]	; (8005544 <_Z10menuChangev+0x534>)
 800541e:	f000 fc92 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	f000 8099 	beq.w	800555c <_Z10menuChangev+0x54c>
		if(buttonPressed=="right"){
 800542a:	4947      	ldr	r1, [pc, #284]	; (8005548 <_Z10menuChangev+0x538>)
 800542c:	483e      	ldr	r0, [pc, #248]	; (8005528 <_Z10menuChangev+0x518>)
 800542e:	f000 fc8a 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005432:	4603      	mov	r3, r0
 8005434:	2b00      	cmp	r3, #0
 8005436:	d011      	beq.n	800545c <_Z10menuChangev+0x44c>
			int num = sizeof(INDIVIDUALPEDALSSTRING)/sizeof(INDIVIDUALPEDALSSTRING[0]);
 8005438:	230a      	movs	r3, #10
 800543a:	613b      	str	r3, [r7, #16]
			choosePedalMenu++;
 800543c:	4b43      	ldr	r3, [pc, #268]	; (800554c <_Z10menuChangev+0x53c>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	3301      	adds	r3, #1
 8005442:	4a42      	ldr	r2, [pc, #264]	; (800554c <_Z10menuChangev+0x53c>)
 8005444:	6013      	str	r3, [r2, #0]
			if(choosePedalMenu>=num)choosePedalMenu=0;
 8005446:	4b41      	ldr	r3, [pc, #260]	; (800554c <_Z10menuChangev+0x53c>)
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	693a      	ldr	r2, [r7, #16]
 800544c:	429a      	cmp	r2, r3
 800544e:	dc02      	bgt.n	8005456 <_Z10menuChangev+0x446>
 8005450:	4b3e      	ldr	r3, [pc, #248]	; (800554c <_Z10menuChangev+0x53c>)
 8005452:	2200      	movs	r2, #0
 8005454:	601a      	str	r2, [r3, #0]
			drawchoosePedalMenu();
 8005456:	f7ff f8b7 	bl	80045c8 <_Z19drawchoosePedalMenuv>
}
 800545a:	e365      	b.n	8005b28 <_Z10menuChangev+0xb18>
		}else if(buttonPressed == "left"){
 800545c:	493c      	ldr	r1, [pc, #240]	; (8005550 <_Z10menuChangev+0x540>)
 800545e:	4832      	ldr	r0, [pc, #200]	; (8005528 <_Z10menuChangev+0x518>)
 8005460:	f000 fc71 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d011      	beq.n	800548e <_Z10menuChangev+0x47e>
			int num = sizeof(INDIVIDUALPEDALSSTRING)/sizeof(INDIVIDUALPEDALSSTRING[0]);
 800546a:	230a      	movs	r3, #10
 800546c:	617b      	str	r3, [r7, #20]
			choosePedalMenu--;
 800546e:	4b37      	ldr	r3, [pc, #220]	; (800554c <_Z10menuChangev+0x53c>)
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	3b01      	subs	r3, #1
 8005474:	4a35      	ldr	r2, [pc, #212]	; (800554c <_Z10menuChangev+0x53c>)
 8005476:	6013      	str	r3, [r2, #0]
			if(choosePedalMenu<0)choosePedalMenu=num-1;
 8005478:	4b34      	ldr	r3, [pc, #208]	; (800554c <_Z10menuChangev+0x53c>)
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	da03      	bge.n	8005488 <_Z10menuChangev+0x478>
 8005480:	697b      	ldr	r3, [r7, #20]
 8005482:	3b01      	subs	r3, #1
 8005484:	4a31      	ldr	r2, [pc, #196]	; (800554c <_Z10menuChangev+0x53c>)
 8005486:	6013      	str	r3, [r2, #0]
			drawchoosePedalMenu();
 8005488:	f7ff f89e 	bl	80045c8 <_Z19drawchoosePedalMenuv>
}
 800548c:	e34c      	b.n	8005b28 <_Z10menuChangev+0xb18>
		}else if(buttonPressed == "plus"){
 800548e:	4931      	ldr	r1, [pc, #196]	; (8005554 <_Z10menuChangev+0x544>)
 8005490:	4825      	ldr	r0, [pc, #148]	; (8005528 <_Z10menuChangev+0x518>)
 8005492:	f000 fc58 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005496:	4603      	mov	r3, r0
 8005498:	2b00      	cmp	r3, #0
 800549a:	f000 8345 	beq.w	8005b28 <_Z10menuChangev+0xb18>
			allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[0]=choosePedalMenu;
 800549e:	4b2b      	ldr	r3, [pc, #172]	; (800554c <_Z10menuChangev+0x53c>)
 80054a0:	6818      	ldr	r0, [r3, #0]
 80054a2:	4b22      	ldr	r3, [pc, #136]	; (800552c <_Z10menuChangev+0x51c>)
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	4b22      	ldr	r3, [pc, #136]	; (8005530 <_Z10menuChangev+0x520>)
 80054a8:	6819      	ldr	r1, [r3, #0]
 80054aa:	b2c4      	uxtb	r4, r0
 80054ac:	4821      	ldr	r0, [pc, #132]	; (8005534 <_Z10menuChangev+0x524>)
 80054ae:	4613      	mov	r3, r2
 80054b0:	00db      	lsls	r3, r3, #3
 80054b2:	1a9b      	subs	r3, r3, r2
 80054b4:	440b      	add	r3, r1
 80054b6:	4622      	mov	r2, r4
 80054b8:	f800 2023 	strb.w	r2, [r0, r3, lsl #2]
			allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[1]=50;
 80054bc:	4b1b      	ldr	r3, [pc, #108]	; (800552c <_Z10menuChangev+0x51c>)
 80054be:	681a      	ldr	r2, [r3, #0]
 80054c0:	4b1b      	ldr	r3, [pc, #108]	; (8005530 <_Z10menuChangev+0x520>)
 80054c2:	6819      	ldr	r1, [r3, #0]
 80054c4:	481b      	ldr	r0, [pc, #108]	; (8005534 <_Z10menuChangev+0x524>)
 80054c6:	4613      	mov	r3, r2
 80054c8:	00db      	lsls	r3, r3, #3
 80054ca:	1a9b      	subs	r3, r3, r2
 80054cc:	440b      	add	r3, r1
 80054ce:	009b      	lsls	r3, r3, #2
 80054d0:	4403      	add	r3, r0
 80054d2:	2232      	movs	r2, #50	; 0x32
 80054d4:	705a      	strb	r2, [r3, #1]
			allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[2]=50;
 80054d6:	4b15      	ldr	r3, [pc, #84]	; (800552c <_Z10menuChangev+0x51c>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b15      	ldr	r3, [pc, #84]	; (8005530 <_Z10menuChangev+0x520>)
 80054dc:	6819      	ldr	r1, [r3, #0]
 80054de:	4815      	ldr	r0, [pc, #84]	; (8005534 <_Z10menuChangev+0x524>)
 80054e0:	4613      	mov	r3, r2
 80054e2:	00db      	lsls	r3, r3, #3
 80054e4:	1a9b      	subs	r3, r3, r2
 80054e6:	440b      	add	r3, r1
 80054e8:	009b      	lsls	r3, r3, #2
 80054ea:	4403      	add	r3, r0
 80054ec:	2232      	movs	r2, #50	; 0x32
 80054ee:	709a      	strb	r2, [r3, #2]
			allPedalsData.allChains[pedalMenu].allPedals[individualPedalMenu].parameters[3]=50;
 80054f0:	4b0e      	ldr	r3, [pc, #56]	; (800552c <_Z10menuChangev+0x51c>)
 80054f2:	681a      	ldr	r2, [r3, #0]
 80054f4:	4b0e      	ldr	r3, [pc, #56]	; (8005530 <_Z10menuChangev+0x520>)
 80054f6:	6819      	ldr	r1, [r3, #0]
 80054f8:	480e      	ldr	r0, [pc, #56]	; (8005534 <_Z10menuChangev+0x524>)
 80054fa:	4613      	mov	r3, r2
 80054fc:	00db      	lsls	r3, r3, #3
 80054fe:	1a9b      	subs	r3, r3, r2
 8005500:	440b      	add	r3, r1
 8005502:	009b      	lsls	r3, r3, #2
 8005504:	4403      	add	r3, r0
 8005506:	2232      	movs	r2, #50	; 0x32
 8005508:	70da      	strb	r2, [r3, #3]
			choosePedalMenu=0;
 800550a:	4b10      	ldr	r3, [pc, #64]	; (800554c <_Z10menuChangev+0x53c>)
 800550c:	2200      	movs	r2, #0
 800550e:	601a      	str	r2, [r3, #0]
			currentScreen="individualPedalsMenu";
 8005510:	4911      	ldr	r1, [pc, #68]	; (8005558 <_Z10menuChangev+0x548>)
 8005512:	480c      	ldr	r0, [pc, #48]	; (8005544 <_Z10menuChangev+0x534>)
 8005514:	f00c f9c5 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			drawIndividualPedalMenu();
 8005518:	f7fe fd5c 	bl	8003fd4 <_Z23drawIndividualPedalMenuv>
			makeNewPedals();
 800551c:	f7ff fd58 	bl	8004fd0 <_Z13makeNewPedalsv>
}
 8005520:	e302      	b.n	8005b28 <_Z10menuChangev+0xb18>
 8005522:	bf00      	nop
 8005524:	08015ac4 	.word	0x08015ac4
 8005528:	20000638 	.word	0x20000638
 800552c:	200194ec 	.word	0x200194ec
 8005530:	200194e4 	.word	0x200194e4
 8005534:	2001938c 	.word	0x2001938c
 8005538:	20000184 	.word	0x20000184
 800553c:	200194f4 	.word	0x200194f4
 8005540:	08015bc0 	.word	0x08015bc0
 8005544:	200194cc 	.word	0x200194cc
 8005548:	08015ab4 	.word	0x08015ab4
 800554c:	2001a4b8 	.word	0x2001a4b8
 8005550:	08015abc 	.word	0x08015abc
 8005554:	08015ad0 	.word	0x08015ad0
 8005558:	08015b80 	.word	0x08015b80
	}else if(currentScreen=="editName"){
 800555c:	4999      	ldr	r1, [pc, #612]	; (80057c4 <_Z10menuChangev+0x7b4>)
 800555e:	489a      	ldr	r0, [pc, #616]	; (80057c8 <_Z10menuChangev+0x7b8>)
 8005560:	f000 fbf1 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005564:	4603      	mov	r3, r0
 8005566:	2b00      	cmp	r3, #0
 8005568:	f000 80bd 	beq.w	80056e6 <_Z10menuChangev+0x6d6>
		if(buttonPressed == "right"){
 800556c:	4997      	ldr	r1, [pc, #604]	; (80057cc <_Z10menuChangev+0x7bc>)
 800556e:	4898      	ldr	r0, [pc, #608]	; (80057d0 <_Z10menuChangev+0x7c0>)
 8005570:	f000 fbe9 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005574:	4603      	mov	r3, r0
 8005576:	2b00      	cmp	r3, #0
 8005578:	d035      	beq.n	80055e6 <_Z10menuChangev+0x5d6>
            if(nameArray.length()>=PEDAL_NAME_SIZE-1){
 800557a:	4896      	ldr	r0, [pc, #600]	; (80057d4 <_Z10menuChangev+0x7c4>)
 800557c:	f00c f8d7 	bl	801172e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 8005580:	4603      	mov	r3, r0
 8005582:	2b0a      	cmp	r3, #10
 8005584:	bf8c      	ite	hi
 8005586:	2301      	movhi	r3, #1
 8005588:	2300      	movls	r3, #0
 800558a:	b2db      	uxtb	r3, r3
 800558c:	2b00      	cmp	r3, #0
 800558e:	d01e      	beq.n	80055ce <_Z10menuChangev+0x5be>
            	strcpy(allPedalsData.allChains[pedalMenu].name,nameArray.c_str());
 8005590:	4b91      	ldr	r3, [pc, #580]	; (80057d8 <_Z10menuChangev+0x7c8>)
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	4613      	mov	r3, r2
 8005596:	00db      	lsls	r3, r3, #3
 8005598:	1a9b      	subs	r3, r3, r2
 800559a:	009b      	lsls	r3, r3, #2
 800559c:	3310      	adds	r3, #16
 800559e:	4a8f      	ldr	r2, [pc, #572]	; (80057dc <_Z10menuChangev+0x7cc>)
 80055a0:	189c      	adds	r4, r3, r2
 80055a2:	488c      	ldr	r0, [pc, #560]	; (80057d4 <_Z10menuChangev+0x7c4>)
 80055a4:	f00c f981 	bl	80118aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80055a8:	4603      	mov	r3, r0
 80055aa:	4619      	mov	r1, r3
 80055ac:	4620      	mov	r0, r4
 80055ae:	f00f feb5 	bl	801531c <strcpy>
				currentScreen = "pedalMenu";
 80055b2:	498b      	ldr	r1, [pc, #556]	; (80057e0 <_Z10menuChangev+0x7d0>)
 80055b4:	4884      	ldr	r0, [pc, #528]	; (80057c8 <_Z10menuChangev+0x7b8>)
 80055b6:	f00c f974 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				currentCharacter = 'a';
 80055ba:	4b8a      	ldr	r3, [pc, #552]	; (80057e4 <_Z10menuChangev+0x7d4>)
 80055bc:	2261      	movs	r2, #97	; 0x61
 80055be:	701a      	strb	r2, [r3, #0]
				nameArray = "a";
 80055c0:	4989      	ldr	r1, [pc, #548]	; (80057e8 <_Z10menuChangev+0x7d8>)
 80055c2:	4884      	ldr	r0, [pc, #528]	; (80057d4 <_Z10menuChangev+0x7c4>)
 80055c4:	f00c f96d 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				drawPedalMenu();
 80055c8:	f7fe fabc 	bl	8003b44 <_Z13drawPedalMenuv>
}
 80055cc:	e2ac      	b.n	8005b28 <_Z10menuChangev+0xb18>
            	currentCharacter='a';
 80055ce:	4b85      	ldr	r3, [pc, #532]	; (80057e4 <_Z10menuChangev+0x7d4>)
 80055d0:	2261      	movs	r2, #97	; 0x61
 80055d2:	701a      	strb	r2, [r3, #0]
            	nameArray.push_back(currentCharacter);
 80055d4:	4b83      	ldr	r3, [pc, #524]	; (80057e4 <_Z10menuChangev+0x7d4>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	4619      	mov	r1, r3
 80055da:	487e      	ldr	r0, [pc, #504]	; (80057d4 <_Z10menuChangev+0x7c4>)
 80055dc:	f00c f8ae 	bl	801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>
        		drawEditNameMenu();
 80055e0:	f7fe fcc2 	bl	8003f68 <_Z16drawEditNameMenuv>
}
 80055e4:	e2a0      	b.n	8005b28 <_Z10menuChangev+0xb18>
		}else if(buttonPressed == "left"){
 80055e6:	4981      	ldr	r1, [pc, #516]	; (80057ec <_Z10menuChangev+0x7dc>)
 80055e8:	4879      	ldr	r0, [pc, #484]	; (80057d0 <_Z10menuChangev+0x7c0>)
 80055ea:	f000 fbac 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d018      	beq.n	8005626 <_Z10menuChangev+0x616>
			if(nameArray.length()>1){
 80055f4:	4877      	ldr	r0, [pc, #476]	; (80057d4 <_Z10menuChangev+0x7c4>)
 80055f6:	f00c f89a 	bl	801172e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	bf8c      	ite	hi
 8005600:	2301      	movhi	r3, #1
 8005602:	2300      	movls	r3, #0
 8005604:	b2db      	uxtb	r3, r3
 8005606:	2b00      	cmp	r3, #0
 8005608:	f000 828e 	beq.w	8005b28 <_Z10menuChangev+0xb18>
				nameArray.pop_back();
 800560c:	4871      	ldr	r0, [pc, #452]	; (80057d4 <_Z10menuChangev+0x7c4>)
 800560e:	f00c f8b4 	bl	801177a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>
				currentCharacter = nameArray.back();
 8005612:	4870      	ldr	r0, [pc, #448]	; (80057d4 <_Z10menuChangev+0x7c4>)
 8005614:	f00c f88d 	bl	8011732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 8005618:	4603      	mov	r3, r0
 800561a:	781a      	ldrb	r2, [r3, #0]
 800561c:	4b71      	ldr	r3, [pc, #452]	; (80057e4 <_Z10menuChangev+0x7d4>)
 800561e:	701a      	strb	r2, [r3, #0]
        		drawEditNameMenu();
 8005620:	f7fe fca2 	bl	8003f68 <_Z16drawEditNameMenuv>
}
 8005624:	e280      	b.n	8005b28 <_Z10menuChangev+0xb18>
        }else if(buttonPressed == "rotation"){
 8005626:	4972      	ldr	r1, [pc, #456]	; (80057f0 <_Z10menuChangev+0x7e0>)
 8005628:	4869      	ldr	r0, [pc, #420]	; (80057d0 <_Z10menuChangev+0x7c0>)
 800562a:	f000 fb8c 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800562e:	4603      	mov	r3, r0
 8005630:	2b00      	cmp	r3, #0
 8005632:	d031      	beq.n	8005698 <_Z10menuChangev+0x688>
        	if(rotationDirection==1){
 8005634:	4b6f      	ldr	r3, [pc, #444]	; (80057f4 <_Z10menuChangev+0x7e4>)
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	2b01      	cmp	r3, #1
 800563a:	d116      	bne.n	800566a <_Z10menuChangev+0x65a>
        		currentCharacter+=1;
 800563c:	4b69      	ldr	r3, [pc, #420]	; (80057e4 <_Z10menuChangev+0x7d4>)
 800563e:	781b      	ldrb	r3, [r3, #0]
 8005640:	3301      	adds	r3, #1
 8005642:	b2da      	uxtb	r2, r3
 8005644:	4b67      	ldr	r3, [pc, #412]	; (80057e4 <_Z10menuChangev+0x7d4>)
 8005646:	701a      	strb	r2, [r3, #0]
        		if(currentCharacter>'z')currentCharacter='a';
 8005648:	4b66      	ldr	r3, [pc, #408]	; (80057e4 <_Z10menuChangev+0x7d4>)
 800564a:	781b      	ldrb	r3, [r3, #0]
 800564c:	2b7a      	cmp	r3, #122	; 0x7a
 800564e:	d902      	bls.n	8005656 <_Z10menuChangev+0x646>
 8005650:	4b64      	ldr	r3, [pc, #400]	; (80057e4 <_Z10menuChangev+0x7d4>)
 8005652:	2261      	movs	r2, #97	; 0x61
 8005654:	701a      	strb	r2, [r3, #0]
        		nameArray.back()=currentCharacter;
 8005656:	485f      	ldr	r0, [pc, #380]	; (80057d4 <_Z10menuChangev+0x7c4>)
 8005658:	f00c f86b 	bl	8011732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 800565c:	4603      	mov	r3, r0
 800565e:	4a61      	ldr	r2, [pc, #388]	; (80057e4 <_Z10menuChangev+0x7d4>)
 8005660:	7812      	ldrb	r2, [r2, #0]
 8005662:	701a      	strb	r2, [r3, #0]
        		drawEditNameMenu();
 8005664:	f7fe fc80 	bl	8003f68 <_Z16drawEditNameMenuv>
}
 8005668:	e25e      	b.n	8005b28 <_Z10menuChangev+0xb18>
        		currentCharacter-=1;
 800566a:	4b5e      	ldr	r3, [pc, #376]	; (80057e4 <_Z10menuChangev+0x7d4>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	3b01      	subs	r3, #1
 8005670:	b2da      	uxtb	r2, r3
 8005672:	4b5c      	ldr	r3, [pc, #368]	; (80057e4 <_Z10menuChangev+0x7d4>)
 8005674:	701a      	strb	r2, [r3, #0]
        		if(currentCharacter<'a')currentCharacter='z';
 8005676:	4b5b      	ldr	r3, [pc, #364]	; (80057e4 <_Z10menuChangev+0x7d4>)
 8005678:	781b      	ldrb	r3, [r3, #0]
 800567a:	2b60      	cmp	r3, #96	; 0x60
 800567c:	d802      	bhi.n	8005684 <_Z10menuChangev+0x674>
 800567e:	4b59      	ldr	r3, [pc, #356]	; (80057e4 <_Z10menuChangev+0x7d4>)
 8005680:	227a      	movs	r2, #122	; 0x7a
 8005682:	701a      	strb	r2, [r3, #0]
        		nameArray.back()=currentCharacter;
 8005684:	4853      	ldr	r0, [pc, #332]	; (80057d4 <_Z10menuChangev+0x7c4>)
 8005686:	f00c f854 	bl	8011732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>
 800568a:	4603      	mov	r3, r0
 800568c:	4a55      	ldr	r2, [pc, #340]	; (80057e4 <_Z10menuChangev+0x7d4>)
 800568e:	7812      	ldrb	r2, [r2, #0]
 8005690:	701a      	strb	r2, [r3, #0]
        		drawEditNameMenu();
 8005692:	f7fe fc69 	bl	8003f68 <_Z16drawEditNameMenuv>
}
 8005696:	e247      	b.n	8005b28 <_Z10menuChangev+0xb18>
        }else if(buttonPressed == "plus"){
 8005698:	4957      	ldr	r1, [pc, #348]	; (80057f8 <_Z10menuChangev+0x7e8>)
 800569a:	484d      	ldr	r0, [pc, #308]	; (80057d0 <_Z10menuChangev+0x7c0>)
 800569c:	f000 fb53 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80056a0:	4603      	mov	r3, r0
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	f000 8240 	beq.w	8005b28 <_Z10menuChangev+0xb18>
        	strcpy(allPedalsData.allChains[pedalMenu].name,nameArray.c_str());
 80056a8:	4b4b      	ldr	r3, [pc, #300]	; (80057d8 <_Z10menuChangev+0x7c8>)
 80056aa:	681a      	ldr	r2, [r3, #0]
 80056ac:	4613      	mov	r3, r2
 80056ae:	00db      	lsls	r3, r3, #3
 80056b0:	1a9b      	subs	r3, r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	3310      	adds	r3, #16
 80056b6:	4a49      	ldr	r2, [pc, #292]	; (80057dc <_Z10menuChangev+0x7cc>)
 80056b8:	189c      	adds	r4, r3, r2
 80056ba:	4846      	ldr	r0, [pc, #280]	; (80057d4 <_Z10menuChangev+0x7c4>)
 80056bc:	f00c f8f5 	bl	80118aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>
 80056c0:	4603      	mov	r3, r0
 80056c2:	4619      	mov	r1, r3
 80056c4:	4620      	mov	r0, r4
 80056c6:	f00f fe29 	bl	801531c <strcpy>
            currentScreen = "pedalMenu";
 80056ca:	4945      	ldr	r1, [pc, #276]	; (80057e0 <_Z10menuChangev+0x7d0>)
 80056cc:	483e      	ldr	r0, [pc, #248]	; (80057c8 <_Z10menuChangev+0x7b8>)
 80056ce:	f00c f8e8 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
            currentCharacter = 'a';
 80056d2:	4b44      	ldr	r3, [pc, #272]	; (80057e4 <_Z10menuChangev+0x7d4>)
 80056d4:	2261      	movs	r2, #97	; 0x61
 80056d6:	701a      	strb	r2, [r3, #0]
            nameArray = "a";
 80056d8:	4943      	ldr	r1, [pc, #268]	; (80057e8 <_Z10menuChangev+0x7d8>)
 80056da:	483e      	ldr	r0, [pc, #248]	; (80057d4 <_Z10menuChangev+0x7c4>)
 80056dc:	f00c f8e1 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
            drawPedalMenu();
 80056e0:	f7fe fa30 	bl	8003b44 <_Z13drawPedalMenuv>
}
 80056e4:	e220      	b.n	8005b28 <_Z10menuChangev+0xb18>
	}else if(currentScreen=="pedalMenuOption"){  //chose options for the bunch(edit,delete,return)
 80056e6:	4945      	ldr	r1, [pc, #276]	; (80057fc <_Z10menuChangev+0x7ec>)
 80056e8:	4837      	ldr	r0, [pc, #220]	; (80057c8 <_Z10menuChangev+0x7b8>)
 80056ea:	f000 fb2c 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	f000 808b 	beq.w	800580c <_Z10menuChangev+0x7fc>
		if(buttonPressed == "right"){
 80056f6:	4935      	ldr	r1, [pc, #212]	; (80057cc <_Z10menuChangev+0x7bc>)
 80056f8:	4835      	ldr	r0, [pc, #212]	; (80057d0 <_Z10menuChangev+0x7c0>)
 80056fa:	f000 fb24 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80056fe:	4603      	mov	r3, r0
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00e      	beq.n	8005722 <_Z10menuChangev+0x712>
			pedalMenuOption++;
 8005704:	4b3e      	ldr	r3, [pc, #248]	; (8005800 <_Z10menuChangev+0x7f0>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	3301      	adds	r3, #1
 800570a:	4a3d      	ldr	r2, [pc, #244]	; (8005800 <_Z10menuChangev+0x7f0>)
 800570c:	6013      	str	r3, [r2, #0]
			if(pedalMenuOption>=3)pedalMenuOption=0;
 800570e:	4b3c      	ldr	r3, [pc, #240]	; (8005800 <_Z10menuChangev+0x7f0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	2b02      	cmp	r3, #2
 8005714:	dd02      	ble.n	800571c <_Z10menuChangev+0x70c>
 8005716:	4b3a      	ldr	r3, [pc, #232]	; (8005800 <_Z10menuChangev+0x7f0>)
 8005718:	2200      	movs	r2, #0
 800571a:	601a      	str	r2, [r3, #0]
			drawPedalMenuOptions();
 800571c:	f7ff f9be 	bl	8004a9c <_Z20drawPedalMenuOptionsv>
}
 8005720:	e202      	b.n	8005b28 <_Z10menuChangev+0xb18>
		}else if(buttonPressed == "left"){
 8005722:	4932      	ldr	r1, [pc, #200]	; (80057ec <_Z10menuChangev+0x7dc>)
 8005724:	482a      	ldr	r0, [pc, #168]	; (80057d0 <_Z10menuChangev+0x7c0>)
 8005726:	f000 fb0e 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 800572a:	4603      	mov	r3, r0
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00e      	beq.n	800574e <_Z10menuChangev+0x73e>
			pedalMenuOption--;
 8005730:	4b33      	ldr	r3, [pc, #204]	; (8005800 <_Z10menuChangev+0x7f0>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	3b01      	subs	r3, #1
 8005736:	4a32      	ldr	r2, [pc, #200]	; (8005800 <_Z10menuChangev+0x7f0>)
 8005738:	6013      	str	r3, [r2, #0]
			if(pedalMenuOption<0)pedalMenuOption=2;
 800573a:	4b31      	ldr	r3, [pc, #196]	; (8005800 <_Z10menuChangev+0x7f0>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	da02      	bge.n	8005748 <_Z10menuChangev+0x738>
 8005742:	4b2f      	ldr	r3, [pc, #188]	; (8005800 <_Z10menuChangev+0x7f0>)
 8005744:	2202      	movs	r2, #2
 8005746:	601a      	str	r2, [r3, #0]
			drawPedalMenuOptions();
 8005748:	f7ff f9a8 	bl	8004a9c <_Z20drawPedalMenuOptionsv>
}
 800574c:	e1ec      	b.n	8005b28 <_Z10menuChangev+0xb18>
		}else if(buttonPressed == "plus"){
 800574e:	492a      	ldr	r1, [pc, #168]	; (80057f8 <_Z10menuChangev+0x7e8>)
 8005750:	481f      	ldr	r0, [pc, #124]	; (80057d0 <_Z10menuChangev+0x7c0>)
 8005752:	f000 faf8 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005756:	4603      	mov	r3, r0
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 81e5 	beq.w	8005b28 <_Z10menuChangev+0xb18>
			if(pedalMenuOption==2){
 800575e:	4b28      	ldr	r3, [pc, #160]	; (8005800 <_Z10menuChangev+0x7f0>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	2b02      	cmp	r3, #2
 8005764:	d109      	bne.n	800577a <_Z10menuChangev+0x76a>
				pedalMenuOption=0;
 8005766:	4b26      	ldr	r3, [pc, #152]	; (8005800 <_Z10menuChangev+0x7f0>)
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]
				currentScreen="menu";
 800576c:	4925      	ldr	r1, [pc, #148]	; (8005804 <_Z10menuChangev+0x7f4>)
 800576e:	4816      	ldr	r0, [pc, #88]	; (80057c8 <_Z10menuChangev+0x7b8>)
 8005770:	f00c f897 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				drawMenuScreen();
 8005774:	f7fe f90a 	bl	800398c <_Z14drawMenuScreenv>
}
 8005778:	e1d6      	b.n	8005b28 <_Z10menuChangev+0xb18>
			}else if(pedalMenuOption == 1){
 800577a:	4b21      	ldr	r3, [pc, #132]	; (8005800 <_Z10menuChangev+0x7f0>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	2b01      	cmp	r3, #1
 8005780:	d110      	bne.n	80057a4 <_Z10menuChangev+0x794>
				pedalMenuOption=0;
 8005782:	4b1f      	ldr	r3, [pc, #124]	; (8005800 <_Z10menuChangev+0x7f0>)
 8005784:	2200      	movs	r2, #0
 8005786:	601a      	str	r2, [r3, #0]
				currentCharacter='a';
 8005788:	4b16      	ldr	r3, [pc, #88]	; (80057e4 <_Z10menuChangev+0x7d4>)
 800578a:	2261      	movs	r2, #97	; 0x61
 800578c:	701a      	strb	r2, [r3, #0]
				nameArray="a";
 800578e:	4916      	ldr	r1, [pc, #88]	; (80057e8 <_Z10menuChangev+0x7d8>)
 8005790:	4810      	ldr	r0, [pc, #64]	; (80057d4 <_Z10menuChangev+0x7c4>)
 8005792:	f00c f886 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				currentScreen="editName";
 8005796:	490b      	ldr	r1, [pc, #44]	; (80057c4 <_Z10menuChangev+0x7b4>)
 8005798:	480b      	ldr	r0, [pc, #44]	; (80057c8 <_Z10menuChangev+0x7b8>)
 800579a:	f00c f882 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				drawEditNameMenu();
 800579e:	f7fe fbe3 	bl	8003f68 <_Z16drawEditNameMenuv>
}
 80057a2:	e1c1      	b.n	8005b28 <_Z10menuChangev+0xb18>
			}else if(pedalMenuOption == 0){
 80057a4:	4b16      	ldr	r3, [pc, #88]	; (8005800 <_Z10menuChangev+0x7f0>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	f040 81bd 	bne.w	8005b28 <_Z10menuChangev+0xb18>
				pedalMenuOption=0;
 80057ae:	4b14      	ldr	r3, [pc, #80]	; (8005800 <_Z10menuChangev+0x7f0>)
 80057b0:	2200      	movs	r2, #0
 80057b2:	601a      	str	r2, [r3, #0]
				currentScreen="individualPedalsMenu";
 80057b4:	4914      	ldr	r1, [pc, #80]	; (8005808 <_Z10menuChangev+0x7f8>)
 80057b6:	4804      	ldr	r0, [pc, #16]	; (80057c8 <_Z10menuChangev+0x7b8>)
 80057b8:	f00c f873 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				drawIndividualPedalMenu();
 80057bc:	f7fe fc0a 	bl	8003fd4 <_Z23drawIndividualPedalMenuv>
}
 80057c0:	e1b2      	b.n	8005b28 <_Z10menuChangev+0xb18>
 80057c2:	bf00      	nop
 80057c4:	08015be4 	.word	0x08015be4
 80057c8:	200194cc 	.word	0x200194cc
 80057cc:	08015ab4 	.word	0x08015ab4
 80057d0:	20000638 	.word	0x20000638
 80057d4:	2001a49c 	.word	0x2001a49c
 80057d8:	200194ec 	.word	0x200194ec
 80057dc:	2001938c 	.word	0x2001938c
 80057e0:	08015bb4 	.word	0x08015bb4
 80057e4:	2001a4b4 	.word	0x2001a4b4
 80057e8:	08015bf0 	.word	0x08015bf0
 80057ec:	08015abc 	.word	0x08015abc
 80057f0:	08015ac4 	.word	0x08015ac4
 80057f4:	20000184 	.word	0x20000184
 80057f8:	08015ad0 	.word	0x08015ad0
 80057fc:	08015bf4 	.word	0x08015bf4
 8005800:	200194f0 	.word	0x200194f0
 8005804:	08015c04 	.word	0x08015c04
 8005808:	08015b80 	.word	0x08015b80
	}else if(currentScreen=="pedalMenu"){ //this is a bunch (distort + delay + fuzz +...)
 800580c:	4990      	ldr	r1, [pc, #576]	; (8005a50 <_Z10menuChangev+0xa40>)
 800580e:	4891      	ldr	r0, [pc, #580]	; (8005a54 <_Z10menuChangev+0xa44>)
 8005810:	f000 fa99 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d03e      	beq.n	8005898 <_Z10menuChangev+0x888>
		if(buttonPressed=="right"){
 800581a:	498f      	ldr	r1, [pc, #572]	; (8005a58 <_Z10menuChangev+0xa48>)
 800581c:	488f      	ldr	r0, [pc, #572]	; (8005a5c <_Z10menuChangev+0xa4c>)
 800581e:	f000 fa92 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005822:	4603      	mov	r3, r0
 8005824:	2b00      	cmp	r3, #0
 8005826:	d010      	beq.n	800584a <_Z10menuChangev+0x83a>
			pedalMenu++;
 8005828:	4b8d      	ldr	r3, [pc, #564]	; (8005a60 <_Z10menuChangev+0xa50>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	3301      	adds	r3, #1
 800582e:	4a8c      	ldr	r2, [pc, #560]	; (8005a60 <_Z10menuChangev+0xa50>)
 8005830:	6013      	str	r3, [r2, #0]
			if(pedalMenu>=MAX_CHAINS){
 8005832:	4b8b      	ldr	r3, [pc, #556]	; (8005a60 <_Z10menuChangev+0xa50>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	2b09      	cmp	r3, #9
 8005838:	dd02      	ble.n	8005840 <_Z10menuChangev+0x830>
				pedalMenu=0;
 800583a:	4b89      	ldr	r3, [pc, #548]	; (8005a60 <_Z10menuChangev+0xa50>)
 800583c:	2200      	movs	r2, #0
 800583e:	601a      	str	r2, [r3, #0]
			makeNewPedals();
 8005840:	f7ff fbc6 	bl	8004fd0 <_Z13makeNewPedalsv>
			drawPedalMenu();
 8005844:	f7fe f97e 	bl	8003b44 <_Z13drawPedalMenuv>
}
 8005848:	e16e      	b.n	8005b28 <_Z10menuChangev+0xb18>
		}else if (buttonPressed=="left"){
 800584a:	4986      	ldr	r1, [pc, #536]	; (8005a64 <_Z10menuChangev+0xa54>)
 800584c:	4883      	ldr	r0, [pc, #524]	; (8005a5c <_Z10menuChangev+0xa4c>)
 800584e:	f000 fa7a 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005852:	4603      	mov	r3, r0
 8005854:	2b00      	cmp	r3, #0
 8005856:	d010      	beq.n	800587a <_Z10menuChangev+0x86a>
			pedalMenu --;
 8005858:	4b81      	ldr	r3, [pc, #516]	; (8005a60 <_Z10menuChangev+0xa50>)
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3b01      	subs	r3, #1
 800585e:	4a80      	ldr	r2, [pc, #512]	; (8005a60 <_Z10menuChangev+0xa50>)
 8005860:	6013      	str	r3, [r2, #0]
			if(pedalMenu<0){
 8005862:	4b7f      	ldr	r3, [pc, #508]	; (8005a60 <_Z10menuChangev+0xa50>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	2b00      	cmp	r3, #0
 8005868:	da02      	bge.n	8005870 <_Z10menuChangev+0x860>
				pedalMenu=MAX_CHAINS-1;
 800586a:	4b7d      	ldr	r3, [pc, #500]	; (8005a60 <_Z10menuChangev+0xa50>)
 800586c:	2209      	movs	r2, #9
 800586e:	601a      	str	r2, [r3, #0]
			makeNewPedals();
 8005870:	f7ff fbae 	bl	8004fd0 <_Z13makeNewPedalsv>
			drawPedalMenu();
 8005874:	f7fe f966 	bl	8003b44 <_Z13drawPedalMenuv>
}
 8005878:	e156      	b.n	8005b28 <_Z10menuChangev+0xb18>
		}else if(buttonPressed=="plus"){
 800587a:	497b      	ldr	r1, [pc, #492]	; (8005a68 <_Z10menuChangev+0xa58>)
 800587c:	4877      	ldr	r0, [pc, #476]	; (8005a5c <_Z10menuChangev+0xa4c>)
 800587e:	f000 fa62 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	f000 814f 	beq.w	8005b28 <_Z10menuChangev+0xb18>
			currentScreen="pedalMenuOption";
 800588a:	4978      	ldr	r1, [pc, #480]	; (8005a6c <_Z10menuChangev+0xa5c>)
 800588c:	4871      	ldr	r0, [pc, #452]	; (8005a54 <_Z10menuChangev+0xa44>)
 800588e:	f00c f808 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
			drawPedalMenuOptions();
 8005892:	f7ff f903 	bl	8004a9c <_Z20drawPedalMenuOptionsv>
}
 8005896:	e147      	b.n	8005b28 <_Z10menuChangev+0xb18>
	}else if(currentScreen=="metronomeMenu"){
 8005898:	4975      	ldr	r1, [pc, #468]	; (8005a70 <_Z10menuChangev+0xa60>)
 800589a:	486e      	ldr	r0, [pc, #440]	; (8005a54 <_Z10menuChangev+0xa44>)
 800589c:	f000 fa53 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80058a0:	4603      	mov	r3, r0
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	f000 80b6 	beq.w	8005a14 <_Z10menuChangev+0xa04>
		if(buttonPressed=="right"){
 80058a8:	496b      	ldr	r1, [pc, #428]	; (8005a58 <_Z10menuChangev+0xa48>)
 80058aa:	486c      	ldr	r0, [pc, #432]	; (8005a5c <_Z10menuChangev+0xa4c>)
 80058ac:	f000 fa4b 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d00e      	beq.n	80058d4 <_Z10menuChangev+0x8c4>
			metronomeMenuOption++;
 80058b6:	4b6f      	ldr	r3, [pc, #444]	; (8005a74 <_Z10menuChangev+0xa64>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	3301      	adds	r3, #1
 80058bc:	4a6d      	ldr	r2, [pc, #436]	; (8005a74 <_Z10menuChangev+0xa64>)
 80058be:	6013      	str	r3, [r2, #0]
			if(metronomeMenuOption>4)  metronomeMenuOption=0;
 80058c0:	4b6c      	ldr	r3, [pc, #432]	; (8005a74 <_Z10menuChangev+0xa64>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	2b04      	cmp	r3, #4
 80058c6:	dd02      	ble.n	80058ce <_Z10menuChangev+0x8be>
 80058c8:	4b6a      	ldr	r3, [pc, #424]	; (8005a74 <_Z10menuChangev+0xa64>)
 80058ca:	2200      	movs	r2, #0
 80058cc:	601a      	str	r2, [r3, #0]
			drawMetronomeMenu();
 80058ce:	f7fe ff0f 	bl	80046f0 <_Z17drawMetronomeMenuv>
}
 80058d2:	e129      	b.n	8005b28 <_Z10menuChangev+0xb18>
		}else if(buttonPressed=="left"){
 80058d4:	4963      	ldr	r1, [pc, #396]	; (8005a64 <_Z10menuChangev+0xa54>)
 80058d6:	4861      	ldr	r0, [pc, #388]	; (8005a5c <_Z10menuChangev+0xa4c>)
 80058d8:	f000 fa35 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80058dc:	4603      	mov	r3, r0
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d00e      	beq.n	8005900 <_Z10menuChangev+0x8f0>
			metronomeMenuOption--;
 80058e2:	4b64      	ldr	r3, [pc, #400]	; (8005a74 <_Z10menuChangev+0xa64>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	4a62      	ldr	r2, [pc, #392]	; (8005a74 <_Z10menuChangev+0xa64>)
 80058ea:	6013      	str	r3, [r2, #0]
			if(metronomeMenuOption<0)  metronomeMenuOption=4;
 80058ec:	4b61      	ldr	r3, [pc, #388]	; (8005a74 <_Z10menuChangev+0xa64>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	da02      	bge.n	80058fa <_Z10menuChangev+0x8ea>
 80058f4:	4b5f      	ldr	r3, [pc, #380]	; (8005a74 <_Z10menuChangev+0xa64>)
 80058f6:	2204      	movs	r2, #4
 80058f8:	601a      	str	r2, [r3, #0]
			drawMetronomeMenu();
 80058fa:	f7fe fef9 	bl	80046f0 <_Z17drawMetronomeMenuv>
}
 80058fe:	e113      	b.n	8005b28 <_Z10menuChangev+0xb18>
		}else if(buttonPressed=="rotation"){
 8005900:	495d      	ldr	r1, [pc, #372]	; (8005a78 <_Z10menuChangev+0xa68>)
 8005902:	4856      	ldr	r0, [pc, #344]	; (8005a5c <_Z10menuChangev+0xa4c>)
 8005904:	f000 fa1f 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005908:	4603      	mov	r3, r0
 800590a:	2b00      	cmp	r3, #0
 800590c:	d052      	beq.n	80059b4 <_Z10menuChangev+0x9a4>
			if(metronomeMenuOption==0){
 800590e:	4b59      	ldr	r3, [pc, #356]	; (8005a74 <_Z10menuChangev+0xa64>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d121      	bne.n	800595a <_Z10menuChangev+0x94a>
				if(rotationDirection==1){
 8005916:	4b59      	ldr	r3, [pc, #356]	; (8005a7c <_Z10menuChangev+0xa6c>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	2b01      	cmp	r3, #1
 800591c:	d10e      	bne.n	800593c <_Z10menuChangev+0x92c>
					currentBPM++;
 800591e:	4b58      	ldr	r3, [pc, #352]	; (8005a80 <_Z10menuChangev+0xa70>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	3301      	adds	r3, #1
 8005924:	4a56      	ldr	r2, [pc, #344]	; (8005a80 <_Z10menuChangev+0xa70>)
 8005926:	6013      	str	r3, [r2, #0]
					if(currentBPM>240)currentBPM=240;
 8005928:	4b55      	ldr	r3, [pc, #340]	; (8005a80 <_Z10menuChangev+0xa70>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	2bf0      	cmp	r3, #240	; 0xf0
 800592e:	dd02      	ble.n	8005936 <_Z10menuChangev+0x926>
 8005930:	4b53      	ldr	r3, [pc, #332]	; (8005a80 <_Z10menuChangev+0xa70>)
 8005932:	22f0      	movs	r2, #240	; 0xf0
 8005934:	601a      	str	r2, [r3, #0]
					drawMetronomeMenu();
 8005936:	f7fe fedb 	bl	80046f0 <_Z17drawMetronomeMenuv>
}
 800593a:	e0f5      	b.n	8005b28 <_Z10menuChangev+0xb18>
					currentBPM--;
 800593c:	4b50      	ldr	r3, [pc, #320]	; (8005a80 <_Z10menuChangev+0xa70>)
 800593e:	681b      	ldr	r3, [r3, #0]
 8005940:	3b01      	subs	r3, #1
 8005942:	4a4f      	ldr	r2, [pc, #316]	; (8005a80 <_Z10menuChangev+0xa70>)
 8005944:	6013      	str	r3, [r2, #0]
					if(currentBPM<20)currentBPM=20;
 8005946:	4b4e      	ldr	r3, [pc, #312]	; (8005a80 <_Z10menuChangev+0xa70>)
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	2b13      	cmp	r3, #19
 800594c:	dc02      	bgt.n	8005954 <_Z10menuChangev+0x944>
 800594e:	4b4c      	ldr	r3, [pc, #304]	; (8005a80 <_Z10menuChangev+0xa70>)
 8005950:	2214      	movs	r2, #20
 8005952:	601a      	str	r2, [r3, #0]
					drawMetronomeMenu();
 8005954:	f7fe fecc 	bl	80046f0 <_Z17drawMetronomeMenuv>
}
 8005958:	e0e6      	b.n	8005b28 <_Z10menuChangev+0xb18>
			}else if(metronomeMenuOption==4){
 800595a:	4b46      	ldr	r3, [pc, #280]	; (8005a74 <_Z10menuChangev+0xa64>)
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	2b04      	cmp	r3, #4
 8005960:	f040 80e2 	bne.w	8005b28 <_Z10menuChangev+0xb18>
				if(rotationDirection==1){
 8005964:	4b45      	ldr	r3, [pc, #276]	; (8005a7c <_Z10menuChangev+0xa6c>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d111      	bne.n	8005990 <_Z10menuChangev+0x980>
					timesSigned=0;
 800596c:	4b45      	ldr	r3, [pc, #276]	; (8005a84 <_Z10menuChangev+0xa74>)
 800596e:	2200      	movs	r2, #0
 8005970:	601a      	str	r2, [r3, #0]
					timeSignature++;
 8005972:	4b45      	ldr	r3, [pc, #276]	; (8005a88 <_Z10menuChangev+0xa78>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	3301      	adds	r3, #1
 8005978:	4a43      	ldr	r2, [pc, #268]	; (8005a88 <_Z10menuChangev+0xa78>)
 800597a:	6013      	str	r3, [r2, #0]
					if(timeSignature>19)timeSignature=19;
 800597c:	4b42      	ldr	r3, [pc, #264]	; (8005a88 <_Z10menuChangev+0xa78>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b13      	cmp	r3, #19
 8005982:	dd02      	ble.n	800598a <_Z10menuChangev+0x97a>
 8005984:	4b40      	ldr	r3, [pc, #256]	; (8005a88 <_Z10menuChangev+0xa78>)
 8005986:	2213      	movs	r2, #19
 8005988:	601a      	str	r2, [r3, #0]
					drawMetronomeMenu();
 800598a:	f7fe feb1 	bl	80046f0 <_Z17drawMetronomeMenuv>
}
 800598e:	e0cb      	b.n	8005b28 <_Z10menuChangev+0xb18>
					timesSigned=0;
 8005990:	4b3c      	ldr	r3, [pc, #240]	; (8005a84 <_Z10menuChangev+0xa74>)
 8005992:	2200      	movs	r2, #0
 8005994:	601a      	str	r2, [r3, #0]
					timeSignature--;
 8005996:	4b3c      	ldr	r3, [pc, #240]	; (8005a88 <_Z10menuChangev+0xa78>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	3b01      	subs	r3, #1
 800599c:	4a3a      	ldr	r2, [pc, #232]	; (8005a88 <_Z10menuChangev+0xa78>)
 800599e:	6013      	str	r3, [r2, #0]
					if(timeSignature<1)timeSignature=1;
 80059a0:	4b39      	ldr	r3, [pc, #228]	; (8005a88 <_Z10menuChangev+0xa78>)
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	dc02      	bgt.n	80059ae <_Z10menuChangev+0x99e>
 80059a8:	4b37      	ldr	r3, [pc, #220]	; (8005a88 <_Z10menuChangev+0xa78>)
 80059aa:	2201      	movs	r2, #1
 80059ac:	601a      	str	r2, [r3, #0]
					drawMetronomeMenu();
 80059ae:	f7fe fe9f 	bl	80046f0 <_Z17drawMetronomeMenuv>
}
 80059b2:	e0b9      	b.n	8005b28 <_Z10menuChangev+0xb18>
		}else if(buttonPressed=="plus"){
 80059b4:	492c      	ldr	r1, [pc, #176]	; (8005a68 <_Z10menuChangev+0xa58>)
 80059b6:	4829      	ldr	r0, [pc, #164]	; (8005a5c <_Z10menuChangev+0xa4c>)
 80059b8:	f000 f9c5 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	f000 80b2 	beq.w	8005b28 <_Z10menuChangev+0xb18>
			if(metronomeMenuOption==1){
 80059c4:	4b2b      	ldr	r3, [pc, #172]	; (8005a74 <_Z10menuChangev+0xa64>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	d109      	bne.n	80059e0 <_Z10menuChangev+0x9d0>
				metronomeLED=!metronomeLED;
 80059cc:	4b2f      	ldr	r3, [pc, #188]	; (8005a8c <_Z10menuChangev+0xa7c>)
 80059ce:	781b      	ldrb	r3, [r3, #0]
 80059d0:	f083 0301 	eor.w	r3, r3, #1
 80059d4:	b2da      	uxtb	r2, r3
 80059d6:	4b2d      	ldr	r3, [pc, #180]	; (8005a8c <_Z10menuChangev+0xa7c>)
 80059d8:	701a      	strb	r2, [r3, #0]
				drawMetronomeMenu();
 80059da:	f7fe fe89 	bl	80046f0 <_Z17drawMetronomeMenuv>
}
 80059de:	e0a3      	b.n	8005b28 <_Z10menuChangev+0xb18>
			}else if(metronomeMenuOption==2){
 80059e0:	4b24      	ldr	r3, [pc, #144]	; (8005a74 <_Z10menuChangev+0xa64>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b02      	cmp	r3, #2
 80059e6:	d109      	bne.n	80059fc <_Z10menuChangev+0x9ec>
				metronomeClick=!metronomeClick;
 80059e8:	4b29      	ldr	r3, [pc, #164]	; (8005a90 <_Z10menuChangev+0xa80>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	f083 0301 	eor.w	r3, r3, #1
 80059f0:	b2da      	uxtb	r2, r3
 80059f2:	4b27      	ldr	r3, [pc, #156]	; (8005a90 <_Z10menuChangev+0xa80>)
 80059f4:	701a      	strb	r2, [r3, #0]
				drawMetronomeMenu();
 80059f6:	f7fe fe7b 	bl	80046f0 <_Z17drawMetronomeMenuv>
}
 80059fa:	e095      	b.n	8005b28 <_Z10menuChangev+0xb18>
			}else if(metronomeMenuOption==3){
 80059fc:	4b1d      	ldr	r3, [pc, #116]	; (8005a74 <_Z10menuChangev+0xa64>)
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	2b03      	cmp	r3, #3
 8005a02:	f040 8091 	bne.w	8005b28 <_Z10menuChangev+0xb18>
				currentScreen="menu";
 8005a06:	4923      	ldr	r1, [pc, #140]	; (8005a94 <_Z10menuChangev+0xa84>)
 8005a08:	4812      	ldr	r0, [pc, #72]	; (8005a54 <_Z10menuChangev+0xa44>)
 8005a0a:	f00b ff4a 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
				drawMenuScreen();
 8005a0e:	f7fd ffbd 	bl	800398c <_Z14drawMenuScreenv>
}
 8005a12:	e089      	b.n	8005b28 <_Z10menuChangev+0xb18>
	}else if(currentScreen=="menu"){
 8005a14:	491f      	ldr	r1, [pc, #124]	; (8005a94 <_Z10menuChangev+0xa84>)
 8005a16:	480f      	ldr	r0, [pc, #60]	; (8005a54 <_Z10menuChangev+0xa44>)
 8005a18:	f000 f995 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005a1c:	4603      	mov	r3, r0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	f000 8082 	beq.w	8005b28 <_Z10menuChangev+0xb18>
		if(buttonPressed=="right"){
 8005a24:	490c      	ldr	r1, [pc, #48]	; (8005a58 <_Z10menuChangev+0xa48>)
 8005a26:	480d      	ldr	r0, [pc, #52]	; (8005a5c <_Z10menuChangev+0xa4c>)
 8005a28:	f000 f98d 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d034      	beq.n	8005a9c <_Z10menuChangev+0xa8c>
			currentMenuOption++;
 8005a32:	4b19      	ldr	r3, [pc, #100]	; (8005a98 <_Z10menuChangev+0xa88>)
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	3301      	adds	r3, #1
 8005a38:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <_Z10menuChangev+0xa88>)
 8005a3a:	6013      	str	r3, [r2, #0]
            if(currentMenuOption>3)  currentMenuOption=0;
 8005a3c:	4b16      	ldr	r3, [pc, #88]	; (8005a98 <_Z10menuChangev+0xa88>)
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	2b03      	cmp	r3, #3
 8005a42:	dd02      	ble.n	8005a4a <_Z10menuChangev+0xa3a>
 8005a44:	4b14      	ldr	r3, [pc, #80]	; (8005a98 <_Z10menuChangev+0xa88>)
 8005a46:	2200      	movs	r2, #0
 8005a48:	601a      	str	r2, [r3, #0]
			drawMenuScreen();
 8005a4a:	f7fd ff9f 	bl	800398c <_Z14drawMenuScreenv>
}
 8005a4e:	e06b      	b.n	8005b28 <_Z10menuChangev+0xb18>
 8005a50:	08015bb4 	.word	0x08015bb4
 8005a54:	200194cc 	.word	0x200194cc
 8005a58:	08015ab4 	.word	0x08015ab4
 8005a5c:	20000638 	.word	0x20000638
 8005a60:	200194ec 	.word	0x200194ec
 8005a64:	08015abc 	.word	0x08015abc
 8005a68:	08015ad0 	.word	0x08015ad0
 8005a6c:	08015bf4 	.word	0x08015bf4
 8005a70:	08015c0c 	.word	0x08015c0c
 8005a74:	200194c8 	.word	0x200194c8
 8005a78:	08015ac4 	.word	0x08015ac4
 8005a7c:	20000184 	.word	0x20000184
 8005a80:	20000188 	.word	0x20000188
 8005a84:	200194f8 	.word	0x200194f8
 8005a88:	2000018c 	.word	0x2000018c
 8005a8c:	20000634 	.word	0x20000634
 8005a90:	20000635 	.word	0x20000635
 8005a94:	08015c04 	.word	0x08015c04
 8005a98:	200194c4 	.word	0x200194c4
		}else if(buttonPressed=="left"){
 8005a9c:	4924      	ldr	r1, [pc, #144]	; (8005b30 <_Z10menuChangev+0xb20>)
 8005a9e:	4825      	ldr	r0, [pc, #148]	; (8005b34 <_Z10menuChangev+0xb24>)
 8005aa0:	f000 f951 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005aa4:	4603      	mov	r3, r0
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d00e      	beq.n	8005ac8 <_Z10menuChangev+0xab8>
			currentMenuOption--;
 8005aaa:	4b23      	ldr	r3, [pc, #140]	; (8005b38 <_Z10menuChangev+0xb28>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	3b01      	subs	r3, #1
 8005ab0:	4a21      	ldr	r2, [pc, #132]	; (8005b38 <_Z10menuChangev+0xb28>)
 8005ab2:	6013      	str	r3, [r2, #0]
            if(currentMenuOption<0)  currentMenuOption=3;
 8005ab4:	4b20      	ldr	r3, [pc, #128]	; (8005b38 <_Z10menuChangev+0xb28>)
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	da02      	bge.n	8005ac2 <_Z10menuChangev+0xab2>
 8005abc:	4b1e      	ldr	r3, [pc, #120]	; (8005b38 <_Z10menuChangev+0xb28>)
 8005abe:	2203      	movs	r2, #3
 8005ac0:	601a      	str	r2, [r3, #0]
			drawMenuScreen();
 8005ac2:	f7fd ff63 	bl	800398c <_Z14drawMenuScreenv>
}
 8005ac6:	e02f      	b.n	8005b28 <_Z10menuChangev+0xb18>
		}else if(buttonPressed=="plus"){
 8005ac8:	491c      	ldr	r1, [pc, #112]	; (8005b3c <_Z10menuChangev+0xb2c>)
 8005aca:	481a      	ldr	r0, [pc, #104]	; (8005b34 <_Z10menuChangev+0xb24>)
 8005acc:	f000 f93b 	bl	8005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>
 8005ad0:	4603      	mov	r3, r0
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d028      	beq.n	8005b28 <_Z10menuChangev+0xb18>
             if(currentMenuOption==0){
 8005ad6:	4b18      	ldr	r3, [pc, #96]	; (8005b38 <_Z10menuChangev+0xb28>)
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d106      	bne.n	8005aec <_Z10menuChangev+0xadc>
            	 currentScreen="guitarChainMenu";
 8005ade:	4918      	ldr	r1, [pc, #96]	; (8005b40 <_Z10menuChangev+0xb30>)
 8005ae0:	4818      	ldr	r0, [pc, #96]	; (8005b44 <_Z10menuChangev+0xb34>)
 8005ae2:	f00b fede 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
            	 drawChainMenu();
 8005ae6:	f7fe ffd1 	bl	8004a8c <_Z13drawChainMenuv>
}
 8005aea:	e01d      	b.n	8005b28 <_Z10menuChangev+0xb18>
             }else if(currentMenuOption==1){
 8005aec:	4b12      	ldr	r3, [pc, #72]	; (8005b38 <_Z10menuChangev+0xb28>)
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	2b01      	cmp	r3, #1
 8005af2:	d106      	bne.n	8005b02 <_Z10menuChangev+0xaf2>
            	 currentScreen="metronomeMenu";
 8005af4:	4914      	ldr	r1, [pc, #80]	; (8005b48 <_Z10menuChangev+0xb38>)
 8005af6:	4813      	ldr	r0, [pc, #76]	; (8005b44 <_Z10menuChangev+0xb34>)
 8005af8:	f00b fed3 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
            	 drawMetronomeMenu();
 8005afc:	f7fe fdf8 	bl	80046f0 <_Z17drawMetronomeMenuv>
}
 8005b00:	e012      	b.n	8005b28 <_Z10menuChangev+0xb18>
             }else if(currentMenuOption==2){
 8005b02:	4b0d      	ldr	r3, [pc, #52]	; (8005b38 <_Z10menuChangev+0xb28>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	2b02      	cmp	r3, #2
 8005b08:	d106      	bne.n	8005b18 <_Z10menuChangev+0xb08>
            	 currentScreen="pedalMenu";
 8005b0a:	4910      	ldr	r1, [pc, #64]	; (8005b4c <_Z10menuChangev+0xb3c>)
 8005b0c:	480d      	ldr	r0, [pc, #52]	; (8005b44 <_Z10menuChangev+0xb34>)
 8005b0e:	f00b fec8 	bl	80118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>
            	 drawPedalMenu();
 8005b12:	f7fe f817 	bl	8003b44 <_Z13drawPedalMenuv>
}
 8005b16:	e007      	b.n	8005b28 <_Z10menuChangev+0xb18>
             }else if(currentMenuOption==3){
 8005b18:	4b07      	ldr	r3, [pc, #28]	; (8005b38 <_Z10menuChangev+0xb28>)
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	2b03      	cmp	r3, #3
 8005b1e:	d103      	bne.n	8005b28 <_Z10menuChangev+0xb18>
            	 savePedals();
 8005b20:	f7fe f90c 	bl	8003d3c <_Z10savePedalsv>
            	 drawMenuScreen();
 8005b24:	f7fd ff32 	bl	800398c <_Z14drawMenuScreenv>
}
 8005b28:	bf00      	nop
 8005b2a:	3718      	adds	r7, #24
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	bdb0      	pop	{r4, r5, r7, pc}
 8005b30:	08015abc 	.word	0x08015abc
 8005b34:	20000638 	.word	0x20000638
 8005b38:	200194c4 	.word	0x200194c4
 8005b3c:	08015ad0 	.word	0x08015ad0
 8005b40:	08015c1c 	.word	0x08015c1c
 8005b44:	200194cc 	.word	0x200194cc
 8005b48:	08015c0c 	.word	0x08015c0c
 8005b4c:	08015bb4 	.word	0x08015bb4

08005b50 <_Z12StartBlinkerPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinker */
void StartBlinker(void *argument)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
//	        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pulse);
//	        osDelay(10);
//
//  }
  for(;;){
	  if (xSemaphoreTake(blinkSem, portMAX_DELAY)){
 8005b58:	4b0f      	ldr	r3, [pc, #60]	; (8005b98 <_Z12StartBlinkerPv+0x48>)
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b60:	4618      	mov	r0, r3
 8005b62:	f009 fa85 	bl	800f070 <xQueueSemaphoreTake>
 8005b66:	4603      	mov	r3, r0
 8005b68:	2b00      	cmp	r3, #0
 8005b6a:	bf14      	ite	ne
 8005b6c:	2301      	movne	r3, #1
 8005b6e:	2300      	moveq	r3, #0
 8005b70:	b2db      	uxtb	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d0f0      	beq.n	8005b58 <_Z12StartBlinkerPv+0x8>
		  HAL_GPIO_WritePin(flashLED_GPIO_Port, flashLED_Pin,GPIO_PIN_SET);
 8005b76:	2201      	movs	r2, #1
 8005b78:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b7c:	4807      	ldr	r0, [pc, #28]	; (8005b9c <_Z12StartBlinkerPv+0x4c>)
 8005b7e:	f003 fb55 	bl	800922c <HAL_GPIO_WritePin>
		  osDelay(10);
 8005b82:	200a      	movs	r0, #10
 8005b84:	f008 fd2c 	bl	800e5e0 <osDelay>
		  HAL_GPIO_WritePin(flashLED_GPIO_Port, flashLED_Pin,GPIO_PIN_RESET);
 8005b88:	2200      	movs	r2, #0
 8005b8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005b8e:	4803      	ldr	r0, [pc, #12]	; (8005b9c <_Z12StartBlinkerPv+0x4c>)
 8005b90:	f003 fb4c 	bl	800922c <HAL_GPIO_WritePin>
	  if (xSemaphoreTake(blinkSem, portMAX_DELAY)){
 8005b94:	e7e0      	b.n	8005b58 <_Z12StartBlinkerPv+0x8>
 8005b96:	bf00      	nop
 8005b98:	20000628 	.word	0x20000628
 8005b9c:	40020400 	.word	0x40020400

08005ba0 <_Z9StartOledPv>:
//uint8_t loop[1000];
/* USER CODE END Header_StartOled */


void StartOled(void *argument)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af02      	add	r7, sp, #8
 8005ba6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOled */
  /* Infinite loop */

	  if (EE24_Init(&ee24, &hi2c2, EE24_ADDRESS_DEFAULT)){
 8005ba8:	22a0      	movs	r2, #160	; 0xa0
 8005baa:	491d      	ldr	r1, [pc, #116]	; (8005c20 <_Z9StartOledPv+0x80>)
 8005bac:	481d      	ldr	r0, [pc, #116]	; (8005c24 <_Z9StartOledPv+0x84>)
 8005bae:	f7fc fcff 	bl	80025b0 <EE24_Init>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d009      	beq.n	8005bcc <_Z9StartOledPv+0x2c>
//			for(int i = 0; i < 1000; i++){loop[i]=0;}
//			EE24_Write(&ee24, 0, loop, sizeof(loop), 1000);

	     EE24_Read(&ee24, 0, (uint8_t*)&allPedalsData, sizeof(allPedalsData), 1000);
 8005bb8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005bbc:	9300      	str	r3, [sp, #0]
 8005bbe:	f44f 738c 	mov.w	r3, #280	; 0x118
 8005bc2:	4a19      	ldr	r2, [pc, #100]	; (8005c28 <_Z9StartOledPv+0x88>)
 8005bc4:	2100      	movs	r1, #0
 8005bc6:	4817      	ldr	r0, [pc, #92]	; (8005c24 <_Z9StartOledPv+0x84>)
 8005bc8:	f7fc fd1a 	bl	8002600 <EE24_Read>
	  }
	  makeNewPedals();
 8005bcc:	f7ff fa00 	bl	8004fd0 <_Z13makeNewPedalsv>

    ssd1306_SetCursor(3+16+4, 22+4);
 8005bd0:	211a      	movs	r1, #26
 8005bd2:	2017      	movs	r0, #23
 8005bd4:	f000 fd68 	bl	80066a8 <ssd1306_SetCursor>

		ssd1306_WriteString((char*)"welcome!", Font_7x10, White);
 8005bd8:	4a14      	ldr	r2, [pc, #80]	; (8005c2c <_Z9StartOledPv+0x8c>)
 8005bda:	2301      	movs	r3, #1
 8005bdc:	ca06      	ldmia	r2, {r1, r2}
 8005bde:	4814      	ldr	r0, [pc, #80]	; (8005c30 <_Z9StartOledPv+0x90>)
 8005be0:	f000 fd3c 	bl	800665c <ssd1306_WriteString>
	      ssd1306_UpdateScreen();
 8005be4:	f000 fc36 	bl	8006454 <ssd1306_UpdateScreen>

		xSemaphoreGiveFromISR(screenChangeSem, NULL);
 8005be8:	4b12      	ldr	r3, [pc, #72]	; (8005c34 <_Z9StartOledPv+0x94>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2100      	movs	r1, #0
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f009 f8d1 	bl	800ed96 <xQueueGiveFromISR>
		osDelay(3000);
 8005bf4:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8005bf8:	f008 fcf2 	bl	800e5e0 <osDelay>
  for(;;){

   if (xSemaphoreTake(screenChangeSem, portMAX_DELAY)){
 8005bfc:	4b0d      	ldr	r3, [pc, #52]	; (8005c34 <_Z9StartOledPv+0x94>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	f04f 31ff 	mov.w	r1, #4294967295
 8005c04:	4618      	mov	r0, r3
 8005c06:	f009 fa33 	bl	800f070 <xQueueSemaphoreTake>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	bf14      	ite	ne
 8005c10:	2301      	movne	r3, #1
 8005c12:	2300      	moveq	r3, #0
 8005c14:	b2db      	uxtb	r3, r3
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d0f0      	beq.n	8005bfc <_Z9StartOledPv+0x5c>
	      menuChange();
 8005c1a:	f7ff f9f9 	bl	8005010 <_Z10menuChangev>
   if (xSemaphoreTake(screenChangeSem, portMAX_DELAY)){
 8005c1e:	e7ed      	b.n	8005bfc <_Z9StartOledPv+0x5c>
 8005c20:	2000039c 	.word	0x2000039c
 8005c24:	2000061c 	.word	0x2000061c
 8005c28:	2001938c 	.word	0x2001938c
 8005c2c:	20000198 	.word	0x20000198
 8005c30:	08015c2c 	.word	0x08015c2c
 8005c34:	20000624 	.word	0x20000624

08005c38 <_Z18startMetronomeSyncPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startMetronomeSync */
void startMetronomeSync(void *argument)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b082      	sub	sp, #8
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startMetronomeSync */
  /* Infinite loop */
  for(;;)
  {
    if(metronomeLED)
 8005c40:	4b1d      	ldr	r3, [pc, #116]	; (8005cb8 <_Z18startMetronomeSyncPv+0x80>)
 8005c42:	781b      	ldrb	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d005      	beq.n	8005c54 <_Z18startMetronomeSyncPv+0x1c>
	xSemaphoreGiveFromISR(blinkSem, NULL);
 8005c48:	4b1c      	ldr	r3, [pc, #112]	; (8005cbc <_Z18startMetronomeSyncPv+0x84>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2100      	movs	r1, #0
 8005c4e:	4618      	mov	r0, r3
 8005c50:	f009 f8a1 	bl	800ed96 <xQueueGiveFromISR>
    if(metronomeClick)
 8005c54:	4b1a      	ldr	r3, [pc, #104]	; (8005cc0 <_Z18startMetronomeSyncPv+0x88>)
 8005c56:	781b      	ldrb	r3, [r3, #0]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d005      	beq.n	8005c68 <_Z18startMetronomeSyncPv+0x30>
	xSemaphoreGiveFromISR(clickSem, NULL);
 8005c5c:	4b19      	ldr	r3, [pc, #100]	; (8005cc4 <_Z18startMetronomeSyncPv+0x8c>)
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	2100      	movs	r1, #0
 8005c62:	4618      	mov	r0, r3
 8005c64:	f009 f897 	bl	800ed96 <xQueueGiveFromISR>

    osDelay((60000.0/currentBPM));
 8005c68:	4b17      	ldr	r3, [pc, #92]	; (8005cc8 <_Z18startMetronomeSyncPv+0x90>)
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	4618      	mov	r0, r3
 8005c6e:	f7fa fc79 	bl	8000564 <__aeabi_i2d>
 8005c72:	4602      	mov	r2, r0
 8005c74:	460b      	mov	r3, r1
 8005c76:	a10e      	add	r1, pc, #56	; (adr r1, 8005cb0 <_Z18startMetronomeSyncPv+0x78>)
 8005c78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005c7c:	f7fa fe06 	bl	800088c <__aeabi_ddiv>
 8005c80:	4602      	mov	r2, r0
 8005c82:	460b      	mov	r3, r1
 8005c84:	4610      	mov	r0, r2
 8005c86:	4619      	mov	r1, r3
 8005c88:	f7fa ffae 	bl	8000be8 <__aeabi_d2uiz>
 8005c8c:	4603      	mov	r3, r0
 8005c8e:	4618      	mov	r0, r3
 8005c90:	f008 fca6 	bl	800e5e0 <osDelay>
    timesSigned = (timesSigned+1)%timeSignature;
 8005c94:	4b0d      	ldr	r3, [pc, #52]	; (8005ccc <_Z18startMetronomeSyncPv+0x94>)
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	3301      	adds	r3, #1
 8005c9a:	4a0d      	ldr	r2, [pc, #52]	; (8005cd0 <_Z18startMetronomeSyncPv+0x98>)
 8005c9c:	6812      	ldr	r2, [r2, #0]
 8005c9e:	fb93 f1f2 	sdiv	r1, r3, r2
 8005ca2:	fb01 f202 	mul.w	r2, r1, r2
 8005ca6:	1a9b      	subs	r3, r3, r2
 8005ca8:	4a08      	ldr	r2, [pc, #32]	; (8005ccc <_Z18startMetronomeSyncPv+0x94>)
 8005caa:	6013      	str	r3, [r2, #0]
    if(metronomeLED)
 8005cac:	e7c8      	b.n	8005c40 <_Z18startMetronomeSyncPv+0x8>
 8005cae:	bf00      	nop
 8005cb0:	00000000 	.word	0x00000000
 8005cb4:	40ed4c00 	.word	0x40ed4c00
 8005cb8:	20000634 	.word	0x20000634
 8005cbc:	20000628 	.word	0x20000628
 8005cc0:	20000635 	.word	0x20000635
 8005cc4:	2000062c 	.word	0x2000062c
 8005cc8:	20000188 	.word	0x20000188
 8005ccc:	200194f8 	.word	0x200194f8
 8005cd0:	2000018c 	.word	0x2000018c

08005cd4 <_Z10startClickPv>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_startClick */
void startClick(void *argument)
{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b082      	sub	sp, #8
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN startClick */
  /* Infinite loop */
	//int i;
	for(;;){
		if (xSemaphoreTake(clickSem, portMAX_DELAY)){
 8005cdc:	4b0c      	ldr	r3, [pc, #48]	; (8005d10 <_Z10startClickPv+0x3c>)
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f04f 31ff 	mov.w	r1, #4294967295
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f009 f9c3 	bl	800f070 <xQueueSemaphoreTake>
 8005cea:	4603      	mov	r3, r0
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	bf14      	ite	ne
 8005cf0:	2301      	movne	r3, #1
 8005cf2:	2300      	moveq	r3, #0
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d0f0      	beq.n	8005cdc <_Z10startClickPv+0x8>
//			getSinVal();
//			osDelay(50);
//			makeArray0();
			metronomeIsOn=true;
 8005cfa:	4b06      	ldr	r3, [pc, #24]	; (8005d14 <_Z10startClickPv+0x40>)
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	701a      	strb	r2, [r3, #0]
			osDelay(50);
 8005d00:	2032      	movs	r0, #50	; 0x32
 8005d02:	f008 fc6d 	bl	800e5e0 <osDelay>
			metronomeIsOn=false;
 8005d06:	4b03      	ldr	r3, [pc, #12]	; (8005d14 <_Z10startClickPv+0x40>)
 8005d08:	2200      	movs	r2, #0
 8005d0a:	701a      	strb	r2, [r3, #0]
		if (xSemaphoreTake(clickSem, portMAX_DELAY)){
 8005d0c:	e7e6      	b.n	8005cdc <_Z10startClickPv+0x8>
 8005d0e:	bf00      	nop
 8005d10:	2000062c 	.word	0x2000062c
 8005d14:	20000636 	.word	0x20000636

08005d18 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b082      	sub	sp, #8
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4a04      	ldr	r2, [pc, #16]	; (8005d38 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8005d26:	4293      	cmp	r3, r2
 8005d28:	d101      	bne.n	8005d2e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8005d2a:	f001 fae3 	bl	80072f4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8005d2e:	bf00      	nop
 8005d30:	3708      	adds	r7, #8
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	40001000 	.word	0x40001000

08005d3c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005d40:	b672      	cpsid	i
}
 8005d42:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005d44:	e7fe      	b.n	8005d44 <Error_Handler+0x8>

08005d46 <_ZSteqIcSt11char_traitsIcESaIcEEbRKNSt7__cxx1112basic_stringIT_T0_T1_EEPKS5_>:
   *  @param __rhs  C string.
   *  @return  True if @a __lhs.compare(@a __rhs) == 0.  False otherwise.
   */
  template<typename _CharT, typename _Traits, typename _Alloc>
    inline bool
    operator==(const basic_string<_CharT, _Traits, _Alloc>& __lhs,
 8005d46:	b580      	push	{r7, lr}
 8005d48:	b082      	sub	sp, #8
 8005d4a:	af00      	add	r7, sp, #0
 8005d4c:	6078      	str	r0, [r7, #4]
 8005d4e:	6039      	str	r1, [r7, #0]
	       const _CharT* __rhs)
    { return __lhs.compare(__rhs) == 0; }
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f00b fdab 	bl	80118ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	bf0c      	ite	eq
 8005d5e:	2301      	moveq	r3, #1
 8005d60:	2300      	movne	r3, #0
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	4618      	mov	r0, r3
 8005d66:	3708      	adds	r7, #8
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <_Z41__static_initialization_and_destruction_0ii>:
  {
  }

  /* USER CODE END Error_Handler_Debug */
}
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d129      	bne.n	8005dd0 <_Z41__static_initialization_and_destruction_0ii+0x64>
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005d82:	4293      	cmp	r3, r2
 8005d84:	d124      	bne.n	8005dd0 <_Z41__static_initialization_and_destruction_0ii+0x64>
string buttonPressed="right";
 8005d86:	f107 0308 	add.w	r3, r7, #8
 8005d8a:	4618      	mov	r0, r3
 8005d8c:	f00b fc06 	bl	801159c <_ZNSaIcEC1Ev>
 8005d90:	f107 0308 	add.w	r3, r7, #8
 8005d94:	461a      	mov	r2, r3
 8005d96:	4919      	ldr	r1, [pc, #100]	; (8005dfc <_Z41__static_initialization_and_destruction_0ii+0x90>)
 8005d98:	4819      	ldr	r0, [pc, #100]	; (8005e00 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005d9a:	f00b fdc1 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005d9e:	f107 0308 	add.w	r3, r7, #8
 8005da2:	4618      	mov	r0, r3
 8005da4:	f00b fbfb 	bl	801159e <_ZNSaIcED1Ev>
string currentScreen="menu";
 8005da8:	f107 030c 	add.w	r3, r7, #12
 8005dac:	4618      	mov	r0, r3
 8005dae:	f00b fbf5 	bl	801159c <_ZNSaIcEC1Ev>
 8005db2:	f107 030c 	add.w	r3, r7, #12
 8005db6:	461a      	mov	r2, r3
 8005db8:	4912      	ldr	r1, [pc, #72]	; (8005e04 <_Z41__static_initialization_and_destruction_0ii+0x98>)
 8005dba:	4813      	ldr	r0, [pc, #76]	; (8005e08 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8005dbc:	f00b fdb0 	bl	8011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>
 8005dc0:	f107 030c 	add.w	r3, r7, #12
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f00b fbea 	bl	801159e <_ZNSaIcED1Ev>
string nameArray;
 8005dca:	4810      	ldr	r0, [pc, #64]	; (8005e0c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005dcc:	f00b fca2 	bl	8011714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d10d      	bne.n	8005df2 <_Z41__static_initialization_and_destruction_0ii+0x86>
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8005ddc:	4293      	cmp	r3, r2
 8005dde:	d108      	bne.n	8005df2 <_Z41__static_initialization_and_destruction_0ii+0x86>
 8005de0:	480a      	ldr	r0, [pc, #40]	; (8005e0c <_Z41__static_initialization_and_destruction_0ii+0xa0>)
 8005de2:	f00b fc9e 	bl	8011722 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
string currentScreen="menu";
 8005de6:	4808      	ldr	r0, [pc, #32]	; (8005e08 <_Z41__static_initialization_and_destruction_0ii+0x9c>)
 8005de8:	f00b fc9b 	bl	8011722 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
string buttonPressed="right";
 8005dec:	4804      	ldr	r0, [pc, #16]	; (8005e00 <_Z41__static_initialization_and_destruction_0ii+0x94>)
 8005dee:	f00b fc98 	bl	8011722 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>
}
 8005df2:	bf00      	nop
 8005df4:	3710      	adds	r7, #16
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	08015ab4 	.word	0x08015ab4
 8005e00:	20000638 	.word	0x20000638
 8005e04:	08015c04 	.word	0x08015c04
 8005e08:	200194cc 	.word	0x200194cc
 8005e0c:	2001a49c 	.word	0x2001a49c

08005e10 <_GLOBAL__sub_I_INDIVIDUALPEDALSSTRING>:
 8005e10:	b580      	push	{r7, lr}
 8005e12:	af00      	add	r7, sp, #0
 8005e14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e18:	2001      	movs	r0, #1
 8005e1a:	f7ff ffa7 	bl	8005d6c <_Z41__static_initialization_and_destruction_0ii>
 8005e1e:	bd80      	pop	{r7, pc}

08005e20 <_GLOBAL__sub_D_INDIVIDUALPEDALSSTRING>:
 8005e20:	b580      	push	{r7, lr}
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8005e28:	2000      	movs	r0, #0
 8005e2a:	f7ff ff9f 	bl	8005d6c <_Z41__static_initialization_and_destruction_0ii>
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <_Z11reverb_initP6reverbfffPfiP2CFS3_S3_S3_P6delay2S5_S5_S1_S1_S1_S1_S1_S1_S1_>:

#include "reverb.h"

void reverb_init(reverb *filt, float fs, float delay_s,float amount,  float *x_ptr, int maxN,CF* CF1,
		CF* CF2,CF* CF3,CF* CF4,delay2* AP1,delay2* AP2,delay2* AP3, float *yCF1, float *yCF2, float *yCF3,
		float *yCF4, float *yAP1, float *yAP2, float *yAP3){
 8005e30:	b5b0      	push	{r4, r5, r7, lr}
 8005e32:	b08a      	sub	sp, #40	; 0x28
 8005e34:	af02      	add	r7, sp, #8
 8005e36:	61f8      	str	r0, [r7, #28]
 8005e38:	ed87 0a06 	vstr	s0, [r7, #24]
 8005e3c:	edc7 0a05 	vstr	s1, [r7, #20]
 8005e40:	ed87 1a04 	vstr	s2, [r7, #16]
 8005e44:	60f9      	str	r1, [r7, #12]
 8005e46:	60ba      	str	r2, [r7, #8]
 8005e48:	607b      	str	r3, [r7, #4]

	/* Initialize Helpers */
	CF_init(CF1, fs, -1, -1, 100, yCF1, 1900);
 8005e4a:	f240 726c 	movw	r2, #1900	; 0x76c
 8005e4e:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005e50:	eddf 1a70 	vldr	s3, [pc, #448]	; 8006014 <_Z11reverb_initP6reverbfffPfiP2CFS3_S3_S3_P6delay2S5_S5_S1_S1_S1_S1_S1_S1_S1_+0x1e4>
 8005e54:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8005e58:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8005e5c:	ed97 0a06 	vldr	s0, [r7, #24]
 8005e60:	6878      	ldr	r0, [r7, #4]
 8005e62:	f7fb f921 	bl	80010a8 <_Z7CF_initP2CFffffPfi>
	CF_init(CF2, fs, -1, -1, 100, yCF2, 1600);
 8005e66:	f44f 62c8 	mov.w	r2, #1600	; 0x640
 8005e6a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8005e6c:	eddf 1a69 	vldr	s3, [pc, #420]	; 8006014 <_Z11reverb_initP6reverbfffPfiP2CFS3_S3_S3_P6delay2S5_S5_S1_S1_S1_S1_S1_S1_S1_+0x1e4>
 8005e70:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8005e74:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8005e78:	ed97 0a06 	vldr	s0, [r7, #24]
 8005e7c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e7e:	f7fb f913 	bl	80010a8 <_Z7CF_initP2CFffffPfi>
	CF_init(CF3, fs, -1, -1, 100, yCF3, 2100);
 8005e82:	f640 0234 	movw	r2, #2100	; 0x834
 8005e86:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005e88:	eddf 1a62 	vldr	s3, [pc, #392]	; 8006014 <_Z11reverb_initP6reverbfffPfiP2CFS3_S3_S3_P6delay2S5_S5_S1_S1_S1_S1_S1_S1_S1_+0x1e4>
 8005e8c:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8005e90:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8005e94:	ed97 0a06 	vldr	s0, [r7, #24]
 8005e98:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8005e9a:	f7fb f905 	bl	80010a8 <_Z7CF_initP2CFffffPfi>
	CF_init(CF4, fs, -1, -1, 100, yCF4, 2300);
 8005e9e:	f640 02fc 	movw	r2, #2300	; 0x8fc
 8005ea2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005ea4:	eddf 1a5b 	vldr	s3, [pc, #364]	; 8006014 <_Z11reverb_initP6reverbfffPfiP2CFS3_S3_S3_P6delay2S5_S5_S1_S1_S1_S1_S1_S1_S1_+0x1e4>
 8005ea8:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8005eac:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8005eb0:	ed97 0a06 	vldr	s0, [r7, #24]
 8005eb4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005eb6:	f7fb f8f7 	bl	80010a8 <_Z7CF_initP2CFffffPfi>

	delay2_init(AP1, fs, -1, -1, 100, x_ptr, yAP1, maxN,300);
 8005eba:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8005ebe:	9300      	str	r3, [sp, #0]
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005ec4:	68f9      	ldr	r1, [r7, #12]
 8005ec6:	eddf 1a53 	vldr	s3, [pc, #332]	; 8006014 <_Z11reverb_initP6reverbfffPfiP2CFS3_S3_S3_P6delay2S5_S5_S1_S1_S1_S1_S1_S1_S1_+0x1e4>
 8005eca:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8005ece:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8005ed2:	ed97 0a06 	vldr	s0, [r7, #24]
 8005ed6:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8005ed8:	f7fb fa74 	bl	80013c4 <_Z11delay2_initP6delay2ffffPfS1_ii>
	delay2_init(AP2, fs, -1, -1, 100, x_ptr, yAP2,maxN, 100);
 8005edc:	2364      	movs	r3, #100	; 0x64
 8005ede:	9300      	str	r3, [sp, #0]
 8005ee0:	68bb      	ldr	r3, [r7, #8]
 8005ee2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005ee4:	68f9      	ldr	r1, [r7, #12]
 8005ee6:	eddf 1a4b 	vldr	s3, [pc, #300]	; 8006014 <_Z11reverb_initP6reverbfffPfiP2CFS3_S3_S3_P6delay2S5_S5_S1_S1_S1_S1_S1_S1_S1_+0x1e4>
 8005eea:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8005eee:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8005ef2:	ed97 0a06 	vldr	s0, [r7, #24]
 8005ef6:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8005ef8:	f7fb fa64 	bl	80013c4 <_Z11delay2_initP6delay2ffffPfS1_ii>
	delay2_init(AP3, fs, -1, -1, 100, x_ptr, yAP3,maxN, 50);
 8005efc:	2332      	movs	r3, #50	; 0x32
 8005efe:	9300      	str	r3, [sp, #0]
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005f04:	68f9      	ldr	r1, [r7, #12]
 8005f06:	eddf 1a43 	vldr	s3, [pc, #268]	; 8006014 <_Z11reverb_initP6reverbfffPfiP2CFS3_S3_S3_P6delay2S5_S5_S1_S1_S1_S1_S1_S1_S1_+0x1e4>
 8005f0a:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8005f0e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8005f12:	ed97 0a06 	vldr	s0, [r7, #24]
 8005f16:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005f18:	f7fb fa54 	bl	80013c4 <_Z11delay2_initP6delay2ffffPfS1_ii>


	/* Set Parameters */
	filt->AP1=*AP1;
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005f20:	f103 04b0 	add.w	r4, r3, #176	; 0xb0
 8005f24:	4615      	mov	r5, r2
 8005f26:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f28:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f2a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f2c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f2e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005f32:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	filt->AP2=*AP2;
 8005f36:	69fb      	ldr	r3, [r7, #28]
 8005f38:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f3a:	f103 04dc 	add.w	r4, r3, #220	; 0xdc
 8005f3e:	4615      	mov	r5, r2
 8005f40:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f42:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f44:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f46:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f48:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005f4c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	filt->AP3=*AP3;
 8005f50:	69fb      	ldr	r3, [r7, #28]
 8005f52:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f54:	f503 7484 	add.w	r4, r3, #264	; 0x108
 8005f58:	4615      	mov	r5, r2
 8005f5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f5e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f60:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f62:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8005f66:	e884 0007 	stmia.w	r4, {r0, r1, r2}

	filt->CF1=*CF1;
 8005f6a:	69fb      	ldr	r3, [r7, #28]
 8005f6c:	687a      	ldr	r2, [r7, #4]
 8005f6e:	f103 0430 	add.w	r4, r3, #48	; 0x30
 8005f72:	4615      	mov	r5, r2
 8005f74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f78:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005f7c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	filt->CF2=*CF2;
 8005f80:	69fb      	ldr	r3, [r7, #28]
 8005f82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005f84:	f103 0450 	add.w	r4, r3, #80	; 0x50
 8005f88:	4615      	mov	r5, r2
 8005f8a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005f8c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005f8e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005f92:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	filt->CF3=*CF3;
 8005f96:	69fb      	ldr	r3, [r7, #28]
 8005f98:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f9a:	f103 0470 	add.w	r4, r3, #112	; 0x70
 8005f9e:	4615      	mov	r5, r2
 8005fa0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fa2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fa4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005fa8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	filt->CF4=*CF4;
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005fb0:	f103 0490 	add.w	r4, r3, #144	; 0x90
 8005fb4:	4615      	mov	r5, r2
 8005fb6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005fb8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005fba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8005fbe:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	filt->yAP1=yAP1;
 8005fc2:	69fb      	ldr	r3, [r7, #28]
 8005fc4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005fc6:	625a      	str	r2, [r3, #36]	; 0x24
	filt->yAP2=yAP2;
 8005fc8:	69fb      	ldr	r3, [r7, #28]
 8005fca:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005fcc:	629a      	str	r2, [r3, #40]	; 0x28
	filt->yAP3=yAP3;
 8005fce:	69fb      	ldr	r3, [r7, #28]
 8005fd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8005fd2:	62da      	str	r2, [r3, #44]	; 0x2c

	filt->yCF1=yCF1;
 8005fd4:	69fb      	ldr	r3, [r7, #28]
 8005fd6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005fd8:	615a      	str	r2, [r3, #20]
	filt->yCF2=yCF2;
 8005fda:	69fb      	ldr	r3, [r7, #28]
 8005fdc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005fde:	619a      	str	r2, [r3, #24]
	filt->yCF3=yCF3;
 8005fe0:	69fb      	ldr	r3, [r7, #28]
 8005fe2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fe4:	61da      	str	r2, [r3, #28]
	filt->yCF4=yCF4;
 8005fe6:	69fb      	ldr	r3, [r7, #28]
 8005fe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fea:	621a      	str	r2, [r3, #32]

    filt->x_ptr=x_ptr;
 8005fec:	69fb      	ldr	r3, [r7, #28]
 8005fee:	68fa      	ldr	r2, [r7, #12]
 8005ff0:	611a      	str	r2, [r3, #16]
	filt->fs = fs;
 8005ff2:	69fb      	ldr	r3, [r7, #28]
 8005ff4:	69ba      	ldr	r2, [r7, #24]
 8005ff6:	601a      	str	r2, [r3, #0]
	filt->maxN = maxN;
 8005ff8:	69fb      	ldr	r3, [r7, #28]
 8005ffa:	68ba      	ldr	r2, [r7, #8]
 8005ffc:	605a      	str	r2, [r3, #4]
	reverb_Set_Params(filt, delay_s, amount);
 8005ffe:	edd7 0a04 	vldr	s1, [r7, #16]
 8006002:	ed97 0a05 	vldr	s0, [r7, #20]
 8006006:	69f8      	ldr	r0, [r7, #28]
 8006008:	f000 f806 	bl	8006018 <_Z17reverb_Set_ParamsP6reverbff>

}
 800600c:	bf00      	nop
 800600e:	3720      	adds	r7, #32
 8006010:	46bd      	mov	sp, r7
 8006012:	bdb0      	pop	{r4, r5, r7, pc}
 8006014:	42c80000 	.word	0x42c80000

08006018 <_Z17reverb_Set_ParamsP6reverbff>:

void reverb_Set_Params(reverb *filt, float delay,float amount){
 8006018:	b480      	push	{r7}
 800601a:	b085      	sub	sp, #20
 800601c:	af00      	add	r7, sp, #0
 800601e:	60f8      	str	r0, [r7, #12]
 8006020:	ed87 0a02 	vstr	s0, [r7, #8]
 8006024:	edc7 0a01 	vstr	s1, [r7, #4]
	filt->delay_s = delay;
 8006028:	edd7 7a02 	vldr	s15, [r7, #8]
 800602c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006030:	ee17 2a90 	vmov	r2, s15
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	609a      	str	r2, [r3, #8]
	filt->amount = amount;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	687a      	ldr	r2, [r7, #4]
 800603c:	60da      	str	r2, [r3, #12]

	/* re-adjust delay2s in AP and CF */
	filt->CF1.N = .03604f * filt->fs * filt->delay_s;
 800603e:	68fb      	ldr	r3, [r7, #12]
 8006040:	edd3 7a00 	vldr	s15, [r3]
 8006044:	ed9f 7a59 	vldr	s14, [pc, #356]	; 80061ac <_Z17reverb_Set_ParamsP6reverbff+0x194>
 8006048:	ee27 7a87 	vmul.f32	s14, s15, s14
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	689b      	ldr	r3, [r3, #8]
 8006050:	ee07 3a90 	vmov	s15, r3
 8006054:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006058:	ee67 7a27 	vmul.f32	s15, s14, s15
 800605c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006060:	ee17 2a90 	vmov	r2, s15
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	63da      	str	r2, [r3, #60]	; 0x3c
	filt->CF2.N = .03112f * filt->fs * filt->delay_s;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	edd3 7a00 	vldr	s15, [r3]
 800606e:	ed9f 7a50 	vldr	s14, [pc, #320]	; 80061b0 <_Z17reverb_Set_ParamsP6reverbff+0x198>
 8006072:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	689b      	ldr	r3, [r3, #8]
 800607a:	ee07 3a90 	vmov	s15, r3
 800607e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006082:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006086:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800608a:	ee17 2a90 	vmov	r2, s15
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	65da      	str	r2, [r3, #92]	; 0x5c
	filt->CF3.N = .04044f * filt->fs * filt->delay_s;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	edd3 7a00 	vldr	s15, [r3]
 8006098:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80061b4 <_Z17reverb_Set_ParamsP6reverbff+0x19c>
 800609c:	ee27 7a87 	vmul.f32	s14, s15, s14
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	689b      	ldr	r3, [r3, #8]
 80060a4:	ee07 3a90 	vmov	s15, r3
 80060a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060b4:	ee17 2a90 	vmov	r2, s15
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	67da      	str	r2, [r3, #124]	; 0x7c
	filt->CF4.N = .04492f * filt->fs * filt->delay_s;
 80060bc:	68fb      	ldr	r3, [r7, #12]
 80060be:	edd3 7a00 	vldr	s15, [r3]
 80060c2:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 80061b8 <_Z17reverb_Set_ParamsP6reverbff+0x1a0>
 80060c6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	689b      	ldr	r3, [r3, #8]
 80060ce:	ee07 3a90 	vmov	s15, r3
 80060d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80060d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80060de:	ee17 2a90 	vmov	r2, s15
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c

	filt->AP1.N =  .005f * filt->fs * filt->delay_s;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	edd3 7a00 	vldr	s15, [r3]
 80060ee:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80061bc <_Z17reverb_Set_ParamsP6reverbff+0x1a4>
 80060f2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	689b      	ldr	r3, [r3, #8]
 80060fa:	ee07 3a90 	vmov	s15, r3
 80060fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006102:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006106:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800610a:	ee17 2a90 	vmov	r2, s15
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
	filt->AP2.N =  .00168f * filt->fs * filt->delay_s;
 8006114:	68fb      	ldr	r3, [r7, #12]
 8006116:	edd3 7a00 	vldr	s15, [r3]
 800611a:	ed9f 7a29 	vldr	s14, [pc, #164]	; 80061c0 <_Z17reverb_Set_ParamsP6reverbff+0x1a8>
 800611e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	689b      	ldr	r3, [r3, #8]
 8006126:	ee07 3a90 	vmov	s15, r3
 800612a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800612e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006132:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006136:	ee17 2a90 	vmov	r2, s15
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8c3 20ec 	str.w	r2, [r3, #236]	; 0xec
	filt->AP3.N =  .00048f * filt->fs * filt->delay_s;
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	edd3 7a00 	vldr	s15, [r3]
 8006146:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80061c4 <_Z17reverb_Set_ParamsP6reverbff+0x1ac>
 800614a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	ee07 3a90 	vmov	s15, r3
 8006156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800615a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006162:	ee17 2a90 	vmov	r2, s15
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118

	filt->CF1.g = g1;
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	4a16      	ldr	r2, [pc, #88]	; (80061c8 <_Z17reverb_Set_ParamsP6reverbff+0x1b0>)
 8006170:	641a      	str	r2, [r3, #64]	; 0x40
	filt->CF2.g = g2;
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	4a15      	ldr	r2, [pc, #84]	; (80061cc <_Z17reverb_Set_ParamsP6reverbff+0x1b4>)
 8006176:	661a      	str	r2, [r3, #96]	; 0x60
	filt->CF3.g = g3;
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	4a15      	ldr	r2, [pc, #84]	; (80061d0 <_Z17reverb_Set_ParamsP6reverbff+0x1b8>)
 800617c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	filt->CF4.g = g4;
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	4a14      	ldr	r2, [pc, #80]	; (80061d4 <_Z17reverb_Set_ParamsP6reverbff+0x1bc>)
 8006184:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0

	filt->AP1.g = AP_g;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	4a13      	ldr	r2, [pc, #76]	; (80061d8 <_Z17reverb_Set_ParamsP6reverbff+0x1c0>)
 800618c:	f8c3 20c4 	str.w	r2, [r3, #196]	; 0xc4
	filt->AP2.g = AP_g;
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	4a11      	ldr	r2, [pc, #68]	; (80061d8 <_Z17reverb_Set_ParamsP6reverbff+0x1c0>)
 8006194:	f8c3 20f0 	str.w	r2, [r3, #240]	; 0xf0
	filt->AP3.g = AP_g;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	4a0f      	ldr	r2, [pc, #60]	; (80061d8 <_Z17reverb_Set_ParamsP6reverbff+0x1c0>)
 800619c:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c



}
 80061a0:	bf00      	nop
 80061a2:	3714      	adds	r7, #20
 80061a4:	46bd      	mov	sp, r7
 80061a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061aa:	4770      	bx	lr
 80061ac:	3d139eae 	.word	0x3d139eae
 80061b0:	3cfeef5f 	.word	0x3cfeef5f
 80061b4:	3d25a46a 	.word	0x3d25a46a
 80061b8:	3d37fe09 	.word	0x3d37fe09
 80061bc:	3ba3d70a 	.word	0x3ba3d70a
 80061c0:	3adc3372 	.word	0x3adc3372
 80061c4:	39fba882 	.word	0x39fba882
 80061c8:	3f4e147b 	.word	0x3f4e147b
 80061cc:	3f53b646 	.word	0x3f53b646
 80061d0:	3f4872b0 	.word	0x3f4872b0
 80061d4:	3f439581 	.word	0x3f439581
 80061d8:	3f333333 	.word	0x3f333333

080061dc <_Z13reverb_UpdateP6reverbf>:

float reverb_Update(reverb *filt, float x){
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	ed87 0a00 	vstr	s0, [r7]

	float x_CF1 = CF_Update( &(filt->CF1) , x );
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	3330      	adds	r3, #48	; 0x30
 80061ec:	ed97 0a00 	vldr	s0, [r7]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f7fa ffcb 	bl	800118c <_Z9CF_UpdateP2CFf>
 80061f6:	ed87 0a07 	vstr	s0, [r7, #28]
	float x_CF2 = CF_Update( &(filt->CF2) , x );
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	3350      	adds	r3, #80	; 0x50
 80061fe:	ed97 0a00 	vldr	s0, [r7]
 8006202:	4618      	mov	r0, r3
 8006204:	f7fa ffc2 	bl	800118c <_Z9CF_UpdateP2CFf>
 8006208:	ed87 0a06 	vstr	s0, [r7, #24]
	float x_CF3 = CF_Update( &(filt->CF3) , x );
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	3370      	adds	r3, #112	; 0x70
 8006210:	ed97 0a00 	vldr	s0, [r7]
 8006214:	4618      	mov	r0, r3
 8006216:	f7fa ffb9 	bl	800118c <_Z9CF_UpdateP2CFf>
 800621a:	ed87 0a05 	vstr	s0, [r7, #20]
	float x_CF4 = CF_Update( &(filt->CF4) , x );
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	3390      	adds	r3, #144	; 0x90
 8006222:	ed97 0a00 	vldr	s0, [r7]
 8006226:	4618      	mov	r0, r3
 8006228:	f7fa ffb0 	bl	800118c <_Z9CF_UpdateP2CFf>
 800622c:	ed87 0a04 	vstr	s0, [r7, #16]

	float y = 0.25f*(x_CF1 + x_CF2 + x_CF3 + x_CF4);
 8006230:	ed97 7a07 	vldr	s14, [r7, #28]
 8006234:	edd7 7a06 	vldr	s15, [r7, #24]
 8006238:	ee37 7a27 	vadd.f32	s14, s14, s15
 800623c:	edd7 7a05 	vldr	s15, [r7, #20]
 8006240:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006244:	edd7 7a04 	vldr	s15, [r7, #16]
 8006248:	ee77 7a27 	vadd.f32	s15, s14, s15
 800624c:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8006250:	ee67 7a87 	vmul.f32	s15, s15, s14
 8006254:	edc7 7a03 	vstr	s15, [r7, #12]
	//float y=x;
	y = delay2_Update( &(filt->AP1), y);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	33b0      	adds	r3, #176	; 0xb0
 800625c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006260:	4618      	mov	r0, r3
 8006262:	f7fb f92b 	bl	80014bc <_Z13delay2_UpdateP6delay2f>
 8006266:	ed87 0a03 	vstr	s0, [r7, #12]
	y = delay2_Update( &(filt->AP2), y);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	33dc      	adds	r3, #220	; 0xdc
 800626e:	ed97 0a03 	vldr	s0, [r7, #12]
 8006272:	4618      	mov	r0, r3
 8006274:	f7fb f922 	bl	80014bc <_Z13delay2_UpdateP6delay2f>
 8006278:	ed87 0a03 	vstr	s0, [r7, #12]
	y = delay2_Update( &(filt->AP3), y);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f503 7384 	add.w	r3, r3, #264	; 0x108
 8006282:	ed97 0a03 	vldr	s0, [r7, #12]
 8006286:	4618      	mov	r0, r3
 8006288:	f7fb f918 	bl	80014bc <_Z13delay2_UpdateP6delay2f>
 800628c:	ed87 0a03 	vstr	s0, [r7, #12]

	y = filt->amount*y + (1-filt->amount)*x;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	ed93 7a03 	vldr	s14, [r3, #12]
 8006296:	edd7 7a03 	vldr	s15, [r7, #12]
 800629a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	edd3 7a03 	vldr	s15, [r3, #12]
 80062a4:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062a8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80062ac:	edd7 7a00 	vldr	s15, [r7]
 80062b0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80062b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062b8:	edc7 7a03 	vstr	s15, [r7, #12]
    filt->x_ptr[filt->AP1.indx] = x;
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	691a      	ldr	r2, [r3, #16]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 80062c6:	009b      	lsls	r3, r3, #2
 80062c8:	4413      	add	r3, r2
 80062ca:	683a      	ldr	r2, [r7, #0]
 80062cc:	601a      	str	r2, [r3, #0]

	return y;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	ee07 3a90 	vmov	s15, r3

}
 80062d4:	eeb0 0a67 	vmov.f32	s0, s15
 80062d8:	3720      	adds	r7, #32
 80062da:	46bd      	mov	sp, r7
 80062dc:	bd80      	pop	{r7, pc}

080062de <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 80062de:	b480      	push	{r7}
 80062e0:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 80062e2:	bf00      	nop
 80062e4:	46bd      	mov	sp, r7
 80062e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ea:	4770      	bx	lr

080062ec <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 80062ec:	b580      	push	{r7, lr}
 80062ee:	b086      	sub	sp, #24
 80062f0:	af04      	add	r7, sp, #16
 80062f2:	4603      	mov	r3, r0
 80062f4:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 80062f6:	f04f 33ff 	mov.w	r3, #4294967295
 80062fa:	9302      	str	r3, [sp, #8]
 80062fc:	2301      	movs	r3, #1
 80062fe:	9301      	str	r3, [sp, #4]
 8006300:	1dfb      	adds	r3, r7, #7
 8006302:	9300      	str	r3, [sp, #0]
 8006304:	2301      	movs	r3, #1
 8006306:	2200      	movs	r2, #0
 8006308:	2178      	movs	r1, #120	; 0x78
 800630a:	4803      	ldr	r0, [pc, #12]	; (8006318 <ssd1306_WriteCommand+0x2c>)
 800630c:	f003 f934 	bl	8009578 <HAL_I2C_Mem_Write>
}
 8006310:	bf00      	nop
 8006312:	3708      	adds	r7, #8
 8006314:	46bd      	mov	sp, r7
 8006316:	bd80      	pop	{r7, pc}
 8006318:	20000348 	.word	0x20000348

0800631c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 800631c:	b580      	push	{r7, lr}
 800631e:	b086      	sub	sp, #24
 8006320:	af04      	add	r7, sp, #16
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	b29b      	uxth	r3, r3
 800632a:	f04f 32ff 	mov.w	r2, #4294967295
 800632e:	9202      	str	r2, [sp, #8]
 8006330:	9301      	str	r3, [sp, #4]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	9300      	str	r3, [sp, #0]
 8006336:	2301      	movs	r3, #1
 8006338:	2240      	movs	r2, #64	; 0x40
 800633a:	2178      	movs	r1, #120	; 0x78
 800633c:	4803      	ldr	r0, [pc, #12]	; (800634c <ssd1306_WriteData+0x30>)
 800633e:	f003 f91b 	bl	8009578 <HAL_I2C_Mem_Write>
}
 8006342:	bf00      	nop
 8006344:	3708      	adds	r7, #8
 8006346:	46bd      	mov	sp, r7
 8006348:	bd80      	pop	{r7, pc}
 800634a:	bf00      	nop
 800634c:	20000348 	.word	0x20000348

08006350 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8006350:	b580      	push	{r7, lr}
 8006352:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8006354:	f7ff ffc3 	bl	80062de <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8006358:	2064      	movs	r0, #100	; 0x64
 800635a:	f000 ffeb 	bl	8007334 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 800635e:	2000      	movs	r0, #0
 8006360:	f000 fa28 	bl	80067b4 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8006364:	2020      	movs	r0, #32
 8006366:	f7ff ffc1 	bl	80062ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 800636a:	2000      	movs	r0, #0
 800636c:	f7ff ffbe 	bl	80062ec <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8006370:	20b0      	movs	r0, #176	; 0xb0
 8006372:	f7ff ffbb 	bl	80062ec <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8006376:	20c8      	movs	r0, #200	; 0xc8
 8006378:	f7ff ffb8 	bl	80062ec <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 800637c:	2000      	movs	r0, #0
 800637e:	f7ff ffb5 	bl	80062ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8006382:	2010      	movs	r0, #16
 8006384:	f7ff ffb2 	bl	80062ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8006388:	2040      	movs	r0, #64	; 0x40
 800638a:	f7ff ffaf 	bl	80062ec <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 800638e:	20ff      	movs	r0, #255	; 0xff
 8006390:	f000 f9fd 	bl	800678e <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8006394:	20a1      	movs	r0, #161	; 0xa1
 8006396:	f7ff ffa9 	bl	80062ec <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 800639a:	20a6      	movs	r0, #166	; 0xa6
 800639c:	f7ff ffa6 	bl	80062ec <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 80063a0:	20a8      	movs	r0, #168	; 0xa8
 80063a2:	f7ff ffa3 	bl	80062ec <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 80063a6:	203f      	movs	r0, #63	; 0x3f
 80063a8:	f7ff ffa0 	bl	80062ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 80063ac:	20a4      	movs	r0, #164	; 0xa4
 80063ae:	f7ff ff9d 	bl	80062ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 80063b2:	20d3      	movs	r0, #211	; 0xd3
 80063b4:	f7ff ff9a 	bl	80062ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 80063b8:	2000      	movs	r0, #0
 80063ba:	f7ff ff97 	bl	80062ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 80063be:	20d5      	movs	r0, #213	; 0xd5
 80063c0:	f7ff ff94 	bl	80062ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 80063c4:	20f0      	movs	r0, #240	; 0xf0
 80063c6:	f7ff ff91 	bl	80062ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 80063ca:	20d9      	movs	r0, #217	; 0xd9
 80063cc:	f7ff ff8e 	bl	80062ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 80063d0:	2022      	movs	r0, #34	; 0x22
 80063d2:	f7ff ff8b 	bl	80062ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 80063d6:	20da      	movs	r0, #218	; 0xda
 80063d8:	f7ff ff88 	bl	80062ec <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 80063dc:	2012      	movs	r0, #18
 80063de:	f7ff ff85 	bl	80062ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 80063e2:	20db      	movs	r0, #219	; 0xdb
 80063e4:	f7ff ff82 	bl	80062ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 80063e8:	2020      	movs	r0, #32
 80063ea:	f7ff ff7f 	bl	80062ec <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 80063ee:	208d      	movs	r0, #141	; 0x8d
 80063f0:	f7ff ff7c 	bl	80062ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 80063f4:	2014      	movs	r0, #20
 80063f6:	f7ff ff79 	bl	80062ec <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 80063fa:	2001      	movs	r0, #1
 80063fc:	f000 f9da 	bl	80067b4 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8006400:	2000      	movs	r0, #0
 8006402:	f000 f80f 	bl	8006424 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8006406:	f000 f825 	bl	8006454 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800640a:	4b05      	ldr	r3, [pc, #20]	; (8006420 <ssd1306_Init+0xd0>)
 800640c:	2200      	movs	r2, #0
 800640e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8006410:	4b03      	ldr	r3, [pc, #12]	; (8006420 <ssd1306_Init+0xd0>)
 8006412:	2200      	movs	r2, #0
 8006414:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8006416:	4b02      	ldr	r3, [pc, #8]	; (8006420 <ssd1306_Init+0xd0>)
 8006418:	2201      	movs	r2, #1
 800641a:	711a      	strb	r2, [r3, #4]
}
 800641c:	bf00      	nop
 800641e:	bd80      	pop	{r7, pc}
 8006420:	2001a8bc 	.word	0x2001a8bc

08006424 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0
 800642a:	4603      	mov	r3, r0
 800642c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800642e:	79fb      	ldrb	r3, [r7, #7]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d101      	bne.n	8006438 <ssd1306_Fill+0x14>
 8006434:	2300      	movs	r3, #0
 8006436:	e000      	b.n	800643a <ssd1306_Fill+0x16>
 8006438:	23ff      	movs	r3, #255	; 0xff
 800643a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800643e:	4619      	mov	r1, r3
 8006440:	4803      	ldr	r0, [pc, #12]	; (8006450 <ssd1306_Fill+0x2c>)
 8006442:	f00e fee3 	bl	801520c <memset>
}
 8006446:	bf00      	nop
 8006448:	3708      	adds	r7, #8
 800644a:	46bd      	mov	sp, r7
 800644c:	bd80      	pop	{r7, pc}
 800644e:	bf00      	nop
 8006450:	2001a4bc 	.word	0x2001a4bc

08006454 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8006454:	b580      	push	{r7, lr}
 8006456:	b082      	sub	sp, #8
 8006458:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 800645a:	2300      	movs	r3, #0
 800645c:	71fb      	strb	r3, [r7, #7]
 800645e:	e016      	b.n	800648e <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8006460:	79fb      	ldrb	r3, [r7, #7]
 8006462:	3b50      	subs	r3, #80	; 0x50
 8006464:	b2db      	uxtb	r3, r3
 8006466:	4618      	mov	r0, r3
 8006468:	f7ff ff40 	bl	80062ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 800646c:	2000      	movs	r0, #0
 800646e:	f7ff ff3d 	bl	80062ec <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8006472:	2010      	movs	r0, #16
 8006474:	f7ff ff3a 	bl	80062ec <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8006478:	79fb      	ldrb	r3, [r7, #7]
 800647a:	01db      	lsls	r3, r3, #7
 800647c:	4a08      	ldr	r2, [pc, #32]	; (80064a0 <ssd1306_UpdateScreen+0x4c>)
 800647e:	4413      	add	r3, r2
 8006480:	2180      	movs	r1, #128	; 0x80
 8006482:	4618      	mov	r0, r3
 8006484:	f7ff ff4a 	bl	800631c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	3301      	adds	r3, #1
 800648c:	71fb      	strb	r3, [r7, #7]
 800648e:	79fb      	ldrb	r3, [r7, #7]
 8006490:	2b07      	cmp	r3, #7
 8006492:	d9e5      	bls.n	8006460 <ssd1306_UpdateScreen+0xc>
    }
}
 8006494:	bf00      	nop
 8006496:	bf00      	nop
 8006498:	3708      	adds	r7, #8
 800649a:	46bd      	mov	sp, r7
 800649c:	bd80      	pop	{r7, pc}
 800649e:	bf00      	nop
 80064a0:	2001a4bc 	.word	0x2001a4bc

080064a4 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 80064a4:	b480      	push	{r7}
 80064a6:	b083      	sub	sp, #12
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	4603      	mov	r3, r0
 80064ac:	71fb      	strb	r3, [r7, #7]
 80064ae:	460b      	mov	r3, r1
 80064b0:	71bb      	strb	r3, [r7, #6]
 80064b2:	4613      	mov	r3, r2
 80064b4:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 80064b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	db3d      	blt.n	800653a <ssd1306_DrawPixel+0x96>
 80064be:	79bb      	ldrb	r3, [r7, #6]
 80064c0:	2b3f      	cmp	r3, #63	; 0x3f
 80064c2:	d83a      	bhi.n	800653a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 80064c4:	797b      	ldrb	r3, [r7, #5]
 80064c6:	2b01      	cmp	r3, #1
 80064c8:	d11a      	bne.n	8006500 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 80064ca:	79fa      	ldrb	r2, [r7, #7]
 80064cc:	79bb      	ldrb	r3, [r7, #6]
 80064ce:	08db      	lsrs	r3, r3, #3
 80064d0:	b2d8      	uxtb	r0, r3
 80064d2:	4603      	mov	r3, r0
 80064d4:	01db      	lsls	r3, r3, #7
 80064d6:	4413      	add	r3, r2
 80064d8:	4a1b      	ldr	r2, [pc, #108]	; (8006548 <ssd1306_DrawPixel+0xa4>)
 80064da:	5cd3      	ldrb	r3, [r2, r3]
 80064dc:	b25a      	sxtb	r2, r3
 80064de:	79bb      	ldrb	r3, [r7, #6]
 80064e0:	f003 0307 	and.w	r3, r3, #7
 80064e4:	2101      	movs	r1, #1
 80064e6:	fa01 f303 	lsl.w	r3, r1, r3
 80064ea:	b25b      	sxtb	r3, r3
 80064ec:	4313      	orrs	r3, r2
 80064ee:	b259      	sxtb	r1, r3
 80064f0:	79fa      	ldrb	r2, [r7, #7]
 80064f2:	4603      	mov	r3, r0
 80064f4:	01db      	lsls	r3, r3, #7
 80064f6:	4413      	add	r3, r2
 80064f8:	b2c9      	uxtb	r1, r1
 80064fa:	4a13      	ldr	r2, [pc, #76]	; (8006548 <ssd1306_DrawPixel+0xa4>)
 80064fc:	54d1      	strb	r1, [r2, r3]
 80064fe:	e01d      	b.n	800653c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8006500:	79fa      	ldrb	r2, [r7, #7]
 8006502:	79bb      	ldrb	r3, [r7, #6]
 8006504:	08db      	lsrs	r3, r3, #3
 8006506:	b2d8      	uxtb	r0, r3
 8006508:	4603      	mov	r3, r0
 800650a:	01db      	lsls	r3, r3, #7
 800650c:	4413      	add	r3, r2
 800650e:	4a0e      	ldr	r2, [pc, #56]	; (8006548 <ssd1306_DrawPixel+0xa4>)
 8006510:	5cd3      	ldrb	r3, [r2, r3]
 8006512:	b25a      	sxtb	r2, r3
 8006514:	79bb      	ldrb	r3, [r7, #6]
 8006516:	f003 0307 	and.w	r3, r3, #7
 800651a:	2101      	movs	r1, #1
 800651c:	fa01 f303 	lsl.w	r3, r1, r3
 8006520:	b25b      	sxtb	r3, r3
 8006522:	43db      	mvns	r3, r3
 8006524:	b25b      	sxtb	r3, r3
 8006526:	4013      	ands	r3, r2
 8006528:	b259      	sxtb	r1, r3
 800652a:	79fa      	ldrb	r2, [r7, #7]
 800652c:	4603      	mov	r3, r0
 800652e:	01db      	lsls	r3, r3, #7
 8006530:	4413      	add	r3, r2
 8006532:	b2c9      	uxtb	r1, r1
 8006534:	4a04      	ldr	r2, [pc, #16]	; (8006548 <ssd1306_DrawPixel+0xa4>)
 8006536:	54d1      	strb	r1, [r2, r3]
 8006538:	e000      	b.n	800653c <ssd1306_DrawPixel+0x98>
        return;
 800653a:	bf00      	nop
    }
}
 800653c:	370c      	adds	r7, #12
 800653e:	46bd      	mov	sp, r7
 8006540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006544:	4770      	bx	lr
 8006546:	bf00      	nop
 8006548:	2001a4bc 	.word	0x2001a4bc

0800654c <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 800654c:	b590      	push	{r4, r7, lr}
 800654e:	b089      	sub	sp, #36	; 0x24
 8006550:	af00      	add	r7, sp, #0
 8006552:	4604      	mov	r4, r0
 8006554:	1d38      	adds	r0, r7, #4
 8006556:	e880 0006 	stmia.w	r0, {r1, r2}
 800655a:	461a      	mov	r2, r3
 800655c:	4623      	mov	r3, r4
 800655e:	73fb      	strb	r3, [r7, #15]
 8006560:	4613      	mov	r3, r2
 8006562:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8006564:	7bfb      	ldrb	r3, [r7, #15]
 8006566:	2b1f      	cmp	r3, #31
 8006568:	d902      	bls.n	8006570 <ssd1306_WriteChar+0x24>
 800656a:	7bfb      	ldrb	r3, [r7, #15]
 800656c:	2b7e      	cmp	r3, #126	; 0x7e
 800656e:	d901      	bls.n	8006574 <ssd1306_WriteChar+0x28>
        return 0;
 8006570:	2300      	movs	r3, #0
 8006572:	e06d      	b.n	8006650 <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8006574:	4b38      	ldr	r3, [pc, #224]	; (8006658 <ssd1306_WriteChar+0x10c>)
 8006576:	881b      	ldrh	r3, [r3, #0]
 8006578:	461a      	mov	r2, r3
 800657a:	793b      	ldrb	r3, [r7, #4]
 800657c:	4413      	add	r3, r2
 800657e:	2b80      	cmp	r3, #128	; 0x80
 8006580:	dc06      	bgt.n	8006590 <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8006582:	4b35      	ldr	r3, [pc, #212]	; (8006658 <ssd1306_WriteChar+0x10c>)
 8006584:	885b      	ldrh	r3, [r3, #2]
 8006586:	461a      	mov	r2, r3
 8006588:	797b      	ldrb	r3, [r7, #5]
 800658a:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 800658c:	2b40      	cmp	r3, #64	; 0x40
 800658e:	dd01      	ble.n	8006594 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8006590:	2300      	movs	r3, #0
 8006592:	e05d      	b.n	8006650 <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8006594:	2300      	movs	r3, #0
 8006596:	61fb      	str	r3, [r7, #28]
 8006598:	e04c      	b.n	8006634 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 800659a:	68ba      	ldr	r2, [r7, #8]
 800659c:	7bfb      	ldrb	r3, [r7, #15]
 800659e:	3b20      	subs	r3, #32
 80065a0:	7979      	ldrb	r1, [r7, #5]
 80065a2:	fb01 f303 	mul.w	r3, r1, r3
 80065a6:	4619      	mov	r1, r3
 80065a8:	69fb      	ldr	r3, [r7, #28]
 80065aa:	440b      	add	r3, r1
 80065ac:	005b      	lsls	r3, r3, #1
 80065ae:	4413      	add	r3, r2
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 80065b4:	2300      	movs	r3, #0
 80065b6:	61bb      	str	r3, [r7, #24]
 80065b8:	e034      	b.n	8006624 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 80065ba:	697a      	ldr	r2, [r7, #20]
 80065bc:	69bb      	ldr	r3, [r7, #24]
 80065be:	fa02 f303 	lsl.w	r3, r2, r3
 80065c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d012      	beq.n	80065f0 <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 80065ca:	4b23      	ldr	r3, [pc, #140]	; (8006658 <ssd1306_WriteChar+0x10c>)
 80065cc:	881b      	ldrh	r3, [r3, #0]
 80065ce:	b2da      	uxtb	r2, r3
 80065d0:	69bb      	ldr	r3, [r7, #24]
 80065d2:	b2db      	uxtb	r3, r3
 80065d4:	4413      	add	r3, r2
 80065d6:	b2d8      	uxtb	r0, r3
 80065d8:	4b1f      	ldr	r3, [pc, #124]	; (8006658 <ssd1306_WriteChar+0x10c>)
 80065da:	885b      	ldrh	r3, [r3, #2]
 80065dc:	b2da      	uxtb	r2, r3
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	b2db      	uxtb	r3, r3
 80065e2:	4413      	add	r3, r2
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	7bba      	ldrb	r2, [r7, #14]
 80065e8:	4619      	mov	r1, r3
 80065ea:	f7ff ff5b 	bl	80064a4 <ssd1306_DrawPixel>
 80065ee:	e016      	b.n	800661e <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 80065f0:	4b19      	ldr	r3, [pc, #100]	; (8006658 <ssd1306_WriteChar+0x10c>)
 80065f2:	881b      	ldrh	r3, [r3, #0]
 80065f4:	b2da      	uxtb	r2, r3
 80065f6:	69bb      	ldr	r3, [r7, #24]
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	4413      	add	r3, r2
 80065fc:	b2d8      	uxtb	r0, r3
 80065fe:	4b16      	ldr	r3, [pc, #88]	; (8006658 <ssd1306_WriteChar+0x10c>)
 8006600:	885b      	ldrh	r3, [r3, #2]
 8006602:	b2da      	uxtb	r2, r3
 8006604:	69fb      	ldr	r3, [r7, #28]
 8006606:	b2db      	uxtb	r3, r3
 8006608:	4413      	add	r3, r2
 800660a:	b2d9      	uxtb	r1, r3
 800660c:	7bbb      	ldrb	r3, [r7, #14]
 800660e:	2b00      	cmp	r3, #0
 8006610:	bf0c      	ite	eq
 8006612:	2301      	moveq	r3, #1
 8006614:	2300      	movne	r3, #0
 8006616:	b2db      	uxtb	r3, r3
 8006618:	461a      	mov	r2, r3
 800661a:	f7ff ff43 	bl	80064a4 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 800661e:	69bb      	ldr	r3, [r7, #24]
 8006620:	3301      	adds	r3, #1
 8006622:	61bb      	str	r3, [r7, #24]
 8006624:	793b      	ldrb	r3, [r7, #4]
 8006626:	461a      	mov	r2, r3
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	4293      	cmp	r3, r2
 800662c:	d3c5      	bcc.n	80065ba <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	3301      	adds	r3, #1
 8006632:	61fb      	str	r3, [r7, #28]
 8006634:	797b      	ldrb	r3, [r7, #5]
 8006636:	461a      	mov	r2, r3
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	4293      	cmp	r3, r2
 800663c:	d3ad      	bcc.n	800659a <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 800663e:	4b06      	ldr	r3, [pc, #24]	; (8006658 <ssd1306_WriteChar+0x10c>)
 8006640:	881a      	ldrh	r2, [r3, #0]
 8006642:	793b      	ldrb	r3, [r7, #4]
 8006644:	b29b      	uxth	r3, r3
 8006646:	4413      	add	r3, r2
 8006648:	b29a      	uxth	r2, r3
 800664a:	4b03      	ldr	r3, [pc, #12]	; (8006658 <ssd1306_WriteChar+0x10c>)
 800664c:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 800664e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006650:	4618      	mov	r0, r3
 8006652:	3724      	adds	r7, #36	; 0x24
 8006654:	46bd      	mov	sp, r7
 8006656:	bd90      	pop	{r4, r7, pc}
 8006658:	2001a8bc 	.word	0x2001a8bc

0800665c <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	1d38      	adds	r0, r7, #4
 8006666:	e880 0006 	stmia.w	r0, {r1, r2}
 800666a:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 800666c:	e012      	b.n	8006694 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	7818      	ldrb	r0, [r3, #0]
 8006672:	78fb      	ldrb	r3, [r7, #3]
 8006674:	1d3a      	adds	r2, r7, #4
 8006676:	ca06      	ldmia	r2, {r1, r2}
 8006678:	f7ff ff68 	bl	800654c <ssd1306_WriteChar>
 800667c:	4603      	mov	r3, r0
 800667e:	461a      	mov	r2, r3
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	781b      	ldrb	r3, [r3, #0]
 8006684:	429a      	cmp	r2, r3
 8006686:	d002      	beq.n	800668e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	781b      	ldrb	r3, [r3, #0]
 800668c:	e008      	b.n	80066a0 <ssd1306_WriteString+0x44>
        }
        str++;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	3301      	adds	r3, #1
 8006692:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	781b      	ldrb	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d1e8      	bne.n	800666e <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	781b      	ldrb	r3, [r3, #0]
}
 80066a0:	4618      	mov	r0, r3
 80066a2:	3710      	adds	r7, #16
 80066a4:	46bd      	mov	sp, r7
 80066a6:	bd80      	pop	{r7, pc}

080066a8 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	4603      	mov	r3, r0
 80066b0:	460a      	mov	r2, r1
 80066b2:	71fb      	strb	r3, [r7, #7]
 80066b4:	4613      	mov	r3, r2
 80066b6:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 80066b8:	79fb      	ldrb	r3, [r7, #7]
 80066ba:	b29a      	uxth	r2, r3
 80066bc:	4b05      	ldr	r3, [pc, #20]	; (80066d4 <ssd1306_SetCursor+0x2c>)
 80066be:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 80066c0:	79bb      	ldrb	r3, [r7, #6]
 80066c2:	b29a      	uxth	r2, r3
 80066c4:	4b03      	ldr	r3, [pc, #12]	; (80066d4 <ssd1306_SetCursor+0x2c>)
 80066c6:	805a      	strh	r2, [r3, #2]
}
 80066c8:	bf00      	nop
 80066ca:	370c      	adds	r7, #12
 80066cc:	46bd      	mov	sp, r7
 80066ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d2:	4770      	bx	lr
 80066d4:	2001a8bc 	.word	0x2001a8bc

080066d8 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 80066d8:	b580      	push	{r7, lr}
 80066da:	b084      	sub	sp, #16
 80066dc:	af00      	add	r7, sp, #0
 80066de:	603a      	str	r2, [r7, #0]
 80066e0:	461a      	mov	r2, r3
 80066e2:	4603      	mov	r3, r0
 80066e4:	71fb      	strb	r3, [r7, #7]
 80066e6:	460b      	mov	r3, r1
 80066e8:	71bb      	strb	r3, [r7, #6]
 80066ea:	4613      	mov	r3, r2
 80066ec:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 80066ee:	797b      	ldrb	r3, [r7, #5]
 80066f0:	3307      	adds	r3, #7
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	da00      	bge.n	80066f8 <ssd1306_DrawBitmap+0x20>
 80066f6:	3307      	adds	r3, #7
 80066f8:	10db      	asrs	r3, r3, #3
 80066fa:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 80066fc:	2300      	movs	r3, #0
 80066fe:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8006700:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006704:	2b00      	cmp	r3, #0
 8006706:	db3e      	blt.n	8006786 <ssd1306_DrawBitmap+0xae>
 8006708:	79bb      	ldrb	r3, [r7, #6]
 800670a:	2b3f      	cmp	r3, #63	; 0x3f
 800670c:	d83b      	bhi.n	8006786 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 800670e:	2300      	movs	r3, #0
 8006710:	73bb      	strb	r3, [r7, #14]
 8006712:	e033      	b.n	800677c <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8006714:	2300      	movs	r3, #0
 8006716:	737b      	strb	r3, [r7, #13]
 8006718:	e026      	b.n	8006768 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 800671a:	7b7b      	ldrb	r3, [r7, #13]
 800671c:	f003 0307 	and.w	r3, r3, #7
 8006720:	2b00      	cmp	r3, #0
 8006722:	d003      	beq.n	800672c <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8006724:	7bfb      	ldrb	r3, [r7, #15]
 8006726:	005b      	lsls	r3, r3, #1
 8006728:	73fb      	strb	r3, [r7, #15]
 800672a:	e00d      	b.n	8006748 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800672c:	7bbb      	ldrb	r3, [r7, #14]
 800672e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8006732:	fb02 f303 	mul.w	r3, r2, r3
 8006736:	7b7a      	ldrb	r2, [r7, #13]
 8006738:	08d2      	lsrs	r2, r2, #3
 800673a:	b2d2      	uxtb	r2, r2
 800673c:	4413      	add	r3, r2
 800673e:	461a      	mov	r2, r3
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	4413      	add	r3, r2
 8006744:	781b      	ldrb	r3, [r3, #0]
 8006746:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8006748:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800674c:	2b00      	cmp	r3, #0
 800674e:	da08      	bge.n	8006762 <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8006750:	79fa      	ldrb	r2, [r7, #7]
 8006752:	7b7b      	ldrb	r3, [r7, #13]
 8006754:	4413      	add	r3, r2
 8006756:	b2db      	uxtb	r3, r3
 8006758:	7f3a      	ldrb	r2, [r7, #28]
 800675a:	79b9      	ldrb	r1, [r7, #6]
 800675c:	4618      	mov	r0, r3
 800675e:	f7ff fea1 	bl	80064a4 <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8006762:	7b7b      	ldrb	r3, [r7, #13]
 8006764:	3301      	adds	r3, #1
 8006766:	737b      	strb	r3, [r7, #13]
 8006768:	7b7a      	ldrb	r2, [r7, #13]
 800676a:	797b      	ldrb	r3, [r7, #5]
 800676c:	429a      	cmp	r2, r3
 800676e:	d3d4      	bcc.n	800671a <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8006770:	7bbb      	ldrb	r3, [r7, #14]
 8006772:	3301      	adds	r3, #1
 8006774:	73bb      	strb	r3, [r7, #14]
 8006776:	79bb      	ldrb	r3, [r7, #6]
 8006778:	3301      	adds	r3, #1
 800677a:	71bb      	strb	r3, [r7, #6]
 800677c:	7bba      	ldrb	r2, [r7, #14]
 800677e:	7e3b      	ldrb	r3, [r7, #24]
 8006780:	429a      	cmp	r2, r3
 8006782:	d3c7      	bcc.n	8006714 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8006784:	e000      	b.n	8006788 <ssd1306_DrawBitmap+0xb0>
        return;
 8006786:	bf00      	nop
}
 8006788:	3710      	adds	r7, #16
 800678a:	46bd      	mov	sp, r7
 800678c:	bd80      	pop	{r7, pc}

0800678e <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 800678e:	b580      	push	{r7, lr}
 8006790:	b084      	sub	sp, #16
 8006792:	af00      	add	r7, sp, #0
 8006794:	4603      	mov	r3, r0
 8006796:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8006798:	2381      	movs	r3, #129	; 0x81
 800679a:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 800679c:	7bfb      	ldrb	r3, [r7, #15]
 800679e:	4618      	mov	r0, r3
 80067a0:	f7ff fda4 	bl	80062ec <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 80067a4:	79fb      	ldrb	r3, [r7, #7]
 80067a6:	4618      	mov	r0, r3
 80067a8:	f7ff fda0 	bl	80062ec <ssd1306_WriteCommand>
}
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}

080067b4 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 80067b4:	b580      	push	{r7, lr}
 80067b6:	b084      	sub	sp, #16
 80067b8:	af00      	add	r7, sp, #0
 80067ba:	4603      	mov	r3, r0
 80067bc:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 80067be:	79fb      	ldrb	r3, [r7, #7]
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d005      	beq.n	80067d0 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 80067c4:	23af      	movs	r3, #175	; 0xaf
 80067c6:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 80067c8:	4b08      	ldr	r3, [pc, #32]	; (80067ec <ssd1306_SetDisplayOn+0x38>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	715a      	strb	r2, [r3, #5]
 80067ce:	e004      	b.n	80067da <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 80067d0:	23ae      	movs	r3, #174	; 0xae
 80067d2:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 80067d4:	4b05      	ldr	r3, [pc, #20]	; (80067ec <ssd1306_SetDisplayOn+0x38>)
 80067d6:	2200      	movs	r2, #0
 80067d8:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 80067da:	7bfb      	ldrb	r3, [r7, #15]
 80067dc:	4618      	mov	r0, r3
 80067de:	f7ff fd85 	bl	80062ec <ssd1306_WriteCommand>
}
 80067e2:	bf00      	nop
 80067e4:	3710      	adds	r7, #16
 80067e6:	46bd      	mov	sp, r7
 80067e8:	bd80      	pop	{r7, pc}
 80067ea:	bf00      	nop
 80067ec:	2001a8bc 	.word	0x2001a8bc

080067f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b082      	sub	sp, #8
 80067f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80067f6:	2300      	movs	r3, #0
 80067f8:	607b      	str	r3, [r7, #4]
 80067fa:	4b1e      	ldr	r3, [pc, #120]	; (8006874 <HAL_MspInit+0x84>)
 80067fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067fe:	4a1d      	ldr	r2, [pc, #116]	; (8006874 <HAL_MspInit+0x84>)
 8006800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006804:	6453      	str	r3, [r2, #68]	; 0x44
 8006806:	4b1b      	ldr	r3, [pc, #108]	; (8006874 <HAL_MspInit+0x84>)
 8006808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800680a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800680e:	607b      	str	r3, [r7, #4]
 8006810:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006812:	2300      	movs	r3, #0
 8006814:	603b      	str	r3, [r7, #0]
 8006816:	4b17      	ldr	r3, [pc, #92]	; (8006874 <HAL_MspInit+0x84>)
 8006818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800681a:	4a16      	ldr	r2, [pc, #88]	; (8006874 <HAL_MspInit+0x84>)
 800681c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006820:	6413      	str	r3, [r2, #64]	; 0x40
 8006822:	4b14      	ldr	r3, [pc, #80]	; (8006874 <HAL_MspInit+0x84>)
 8006824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800682a:	603b      	str	r3, [r7, #0]
 800682c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800682e:	2200      	movs	r2, #0
 8006830:	210f      	movs	r1, #15
 8006832:	f06f 0001 	mvn.w	r0, #1
 8006836:	f001 fb8b 	bl	8007f50 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 5, 0);
 800683a:	2200      	movs	r2, #0
 800683c:	2105      	movs	r1, #5
 800683e:	2001      	movs	r0, #1
 8006840:	f001 fb86 	bl	8007f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 8006844:	2001      	movs	r0, #1
 8006846:	f001 fb9f 	bl	8007f88 <HAL_NVIC_EnableIRQ>
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 800684a:	2200      	movs	r2, #0
 800684c:	2105      	movs	r1, #5
 800684e:	2004      	movs	r0, #4
 8006850:	f001 fb7e 	bl	8007f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8006854:	2004      	movs	r0, #4
 8006856:	f001 fb97 	bl	8007f88 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 5, 0);
 800685a:	2200      	movs	r2, #0
 800685c:	2105      	movs	r1, #5
 800685e:	2005      	movs	r0, #5
 8006860:	f001 fb76 	bl	8007f50 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8006864:	2005      	movs	r0, #5
 8006866:	f001 fb8f 	bl	8007f88 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800686a:	bf00      	nop
 800686c:	3708      	adds	r7, #8
 800686e:	46bd      	mov	sp, r7
 8006870:	bd80      	pop	{r7, pc}
 8006872:	bf00      	nop
 8006874:	40023800 	.word	0x40023800

08006878 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b08a      	sub	sp, #40	; 0x28
 800687c:	af00      	add	r7, sp, #0
 800687e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006880:	f107 0314 	add.w	r3, r7, #20
 8006884:	2200      	movs	r2, #0
 8006886:	601a      	str	r2, [r3, #0]
 8006888:	605a      	str	r2, [r3, #4]
 800688a:	609a      	str	r2, [r3, #8]
 800688c:	60da      	str	r2, [r3, #12]
 800688e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	4a33      	ldr	r2, [pc, #204]	; (8006964 <HAL_ADC_MspInit+0xec>)
 8006896:	4293      	cmp	r3, r2
 8006898:	d15f      	bne.n	800695a <HAL_ADC_MspInit+0xe2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800689a:	2300      	movs	r3, #0
 800689c:	613b      	str	r3, [r7, #16]
 800689e:	4b32      	ldr	r3, [pc, #200]	; (8006968 <HAL_ADC_MspInit+0xf0>)
 80068a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068a2:	4a31      	ldr	r2, [pc, #196]	; (8006968 <HAL_ADC_MspInit+0xf0>)
 80068a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068a8:	6453      	str	r3, [r2, #68]	; 0x44
 80068aa:	4b2f      	ldr	r3, [pc, #188]	; (8006968 <HAL_ADC_MspInit+0xf0>)
 80068ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80068b2:	613b      	str	r3, [r7, #16]
 80068b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80068b6:	2300      	movs	r3, #0
 80068b8:	60fb      	str	r3, [r7, #12]
 80068ba:	4b2b      	ldr	r3, [pc, #172]	; (8006968 <HAL_ADC_MspInit+0xf0>)
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	4a2a      	ldr	r2, [pc, #168]	; (8006968 <HAL_ADC_MspInit+0xf0>)
 80068c0:	f043 0304 	orr.w	r3, r3, #4
 80068c4:	6313      	str	r3, [r2, #48]	; 0x30
 80068c6:	4b28      	ldr	r3, [pc, #160]	; (8006968 <HAL_ADC_MspInit+0xf0>)
 80068c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068ca:	f003 0304 	and.w	r3, r3, #4
 80068ce:	60fb      	str	r3, [r7, #12]
 80068d0:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC2     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80068d2:	2304      	movs	r3, #4
 80068d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80068d6:	2303      	movs	r3, #3
 80068d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80068da:	2300      	movs	r3, #0
 80068dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80068de:	f107 0314 	add.w	r3, r7, #20
 80068e2:	4619      	mov	r1, r3
 80068e4:	4821      	ldr	r0, [pc, #132]	; (800696c <HAL_ADC_MspInit+0xf4>)
 80068e6:	f002 faf5 	bl	8008ed4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream4;
 80068ea:	4b21      	ldr	r3, [pc, #132]	; (8006970 <HAL_ADC_MspInit+0xf8>)
 80068ec:	4a21      	ldr	r2, [pc, #132]	; (8006974 <HAL_ADC_MspInit+0xfc>)
 80068ee:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 80068f0:	4b1f      	ldr	r3, [pc, #124]	; (8006970 <HAL_ADC_MspInit+0xf8>)
 80068f2:	2200      	movs	r2, #0
 80068f4:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80068f6:	4b1e      	ldr	r3, [pc, #120]	; (8006970 <HAL_ADC_MspInit+0xf8>)
 80068f8:	2200      	movs	r2, #0
 80068fa:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80068fc:	4b1c      	ldr	r3, [pc, #112]	; (8006970 <HAL_ADC_MspInit+0xf8>)
 80068fe:	2200      	movs	r2, #0
 8006900:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8006902:	4b1b      	ldr	r3, [pc, #108]	; (8006970 <HAL_ADC_MspInit+0xf8>)
 8006904:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006908:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800690a:	4b19      	ldr	r3, [pc, #100]	; (8006970 <HAL_ADC_MspInit+0xf8>)
 800690c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006910:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006912:	4b17      	ldr	r3, [pc, #92]	; (8006970 <HAL_ADC_MspInit+0xf8>)
 8006914:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006918:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800691a:	4b15      	ldr	r3, [pc, #84]	; (8006970 <HAL_ADC_MspInit+0xf8>)
 800691c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006920:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8006922:	4b13      	ldr	r3, [pc, #76]	; (8006970 <HAL_ADC_MspInit+0xf8>)
 8006924:	2200      	movs	r2, #0
 8006926:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006928:	4b11      	ldr	r3, [pc, #68]	; (8006970 <HAL_ADC_MspInit+0xf8>)
 800692a:	2200      	movs	r2, #0
 800692c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800692e:	4810      	ldr	r0, [pc, #64]	; (8006970 <HAL_ADC_MspInit+0xf8>)
 8006930:	f001 fd88 	bl	8008444 <HAL_DMA_Init>
 8006934:	4603      	mov	r3, r0
 8006936:	2b00      	cmp	r3, #0
 8006938:	d001      	beq.n	800693e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800693a:	f7ff f9ff 	bl	8005d3c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a0b      	ldr	r2, [pc, #44]	; (8006970 <HAL_ADC_MspInit+0xf8>)
 8006942:	639a      	str	r2, [r3, #56]	; 0x38
 8006944:	4a0a      	ldr	r2, [pc, #40]	; (8006970 <HAL_ADC_MspInit+0xf8>)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6393      	str	r3, [r2, #56]	; 0x38

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 800694a:	2200      	movs	r2, #0
 800694c:	2105      	movs	r1, #5
 800694e:	2012      	movs	r0, #18
 8006950:	f001 fafe 	bl	8007f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8006954:	2012      	movs	r0, #18
 8006956:	f001 fb17 	bl	8007f88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800695a:	bf00      	nop
 800695c:	3728      	adds	r7, #40	; 0x28
 800695e:	46bd      	mov	sp, r7
 8006960:	bd80      	pop	{r7, pc}
 8006962:	bf00      	nop
 8006964:	40012000 	.word	0x40012000
 8006968:	40023800 	.word	0x40023800
 800696c:	40020800 	.word	0x40020800
 8006970:	20000274 	.word	0x20000274
 8006974:	40026470 	.word	0x40026470

08006978 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b08a      	sub	sp, #40	; 0x28
 800697c:	af00      	add	r7, sp, #0
 800697e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006980:	f107 0314 	add.w	r3, r7, #20
 8006984:	2200      	movs	r2, #0
 8006986:	601a      	str	r2, [r3, #0]
 8006988:	605a      	str	r2, [r3, #4]
 800698a:	609a      	str	r2, [r3, #8]
 800698c:	60da      	str	r2, [r3, #12]
 800698e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	4a33      	ldr	r2, [pc, #204]	; (8006a64 <HAL_DAC_MspInit+0xec>)
 8006996:	4293      	cmp	r3, r2
 8006998:	d160      	bne.n	8006a5c <HAL_DAC_MspInit+0xe4>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 800699a:	2300      	movs	r3, #0
 800699c:	613b      	str	r3, [r7, #16]
 800699e:	4b32      	ldr	r3, [pc, #200]	; (8006a68 <HAL_DAC_MspInit+0xf0>)
 80069a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069a2:	4a31      	ldr	r2, [pc, #196]	; (8006a68 <HAL_DAC_MspInit+0xf0>)
 80069a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80069a8:	6413      	str	r3, [r2, #64]	; 0x40
 80069aa:	4b2f      	ldr	r3, [pc, #188]	; (8006a68 <HAL_DAC_MspInit+0xf0>)
 80069ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80069b2:	613b      	str	r3, [r7, #16]
 80069b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80069b6:	2300      	movs	r3, #0
 80069b8:	60fb      	str	r3, [r7, #12]
 80069ba:	4b2b      	ldr	r3, [pc, #172]	; (8006a68 <HAL_DAC_MspInit+0xf0>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	4a2a      	ldr	r2, [pc, #168]	; (8006a68 <HAL_DAC_MspInit+0xf0>)
 80069c0:	f043 0301 	orr.w	r3, r3, #1
 80069c4:	6313      	str	r3, [r2, #48]	; 0x30
 80069c6:	4b28      	ldr	r3, [pc, #160]	; (8006a68 <HAL_DAC_MspInit+0xf0>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	f003 0301 	and.w	r3, r3, #1
 80069ce:	60fb      	str	r3, [r7, #12]
 80069d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80069d2:	2310      	movs	r3, #16
 80069d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069d6:	2303      	movs	r3, #3
 80069d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069da:	2300      	movs	r3, #0
 80069dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80069de:	f107 0314 	add.w	r3, r7, #20
 80069e2:	4619      	mov	r1, r3
 80069e4:	4821      	ldr	r0, [pc, #132]	; (8006a6c <HAL_DAC_MspInit+0xf4>)
 80069e6:	f002 fa75 	bl	8008ed4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80069ea:	4b21      	ldr	r3, [pc, #132]	; (8006a70 <HAL_DAC_MspInit+0xf8>)
 80069ec:	4a21      	ldr	r2, [pc, #132]	; (8006a74 <HAL_DAC_MspInit+0xfc>)
 80069ee:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80069f0:	4b1f      	ldr	r3, [pc, #124]	; (8006a70 <HAL_DAC_MspInit+0xf8>)
 80069f2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80069f6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80069f8:	4b1d      	ldr	r3, [pc, #116]	; (8006a70 <HAL_DAC_MspInit+0xf8>)
 80069fa:	2240      	movs	r2, #64	; 0x40
 80069fc:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80069fe:	4b1c      	ldr	r3, [pc, #112]	; (8006a70 <HAL_DAC_MspInit+0xf8>)
 8006a00:	2200      	movs	r2, #0
 8006a02:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 8006a04:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <HAL_DAC_MspInit+0xf8>)
 8006a06:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a0a:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006a0c:	4b18      	ldr	r3, [pc, #96]	; (8006a70 <HAL_DAC_MspInit+0xf8>)
 8006a0e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a12:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006a14:	4b16      	ldr	r3, [pc, #88]	; (8006a70 <HAL_DAC_MspInit+0xf8>)
 8006a16:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006a1a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 8006a1c:	4b14      	ldr	r3, [pc, #80]	; (8006a70 <HAL_DAC_MspInit+0xf8>)
 8006a1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a22:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8006a24:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <HAL_DAC_MspInit+0xf8>)
 8006a26:	2200      	movs	r2, #0
 8006a28:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006a2a:	4b11      	ldr	r3, [pc, #68]	; (8006a70 <HAL_DAC_MspInit+0xf8>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8006a30:	480f      	ldr	r0, [pc, #60]	; (8006a70 <HAL_DAC_MspInit+0xf8>)
 8006a32:	f001 fd07 	bl	8008444 <HAL_DMA_Init>
 8006a36:	4603      	mov	r3, r0
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d001      	beq.n	8006a40 <HAL_DAC_MspInit+0xc8>
    {
      Error_Handler();
 8006a3c:	f7ff f97e 	bl	8005d3c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	4a0b      	ldr	r2, [pc, #44]	; (8006a70 <HAL_DAC_MspInit+0xf8>)
 8006a44:	609a      	str	r2, [r3, #8]
 8006a46:	4a0a      	ldr	r2, [pc, #40]	; (8006a70 <HAL_DAC_MspInit+0xf8>)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	6393      	str	r3, [r2, #56]	; 0x38

    /* DAC interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 15, 0);
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	210f      	movs	r1, #15
 8006a50:	2036      	movs	r0, #54	; 0x36
 8006a52:	f001 fa7d 	bl	8007f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006a56:	2036      	movs	r0, #54	; 0x36
 8006a58:	f001 fa96 	bl	8007f88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8006a5c:	bf00      	nop
 8006a5e:	3728      	adds	r7, #40	; 0x28
 8006a60:	46bd      	mov	sp, r7
 8006a62:	bd80      	pop	{r7, pc}
 8006a64:	40007400 	.word	0x40007400
 8006a68:	40023800 	.word	0x40023800
 8006a6c:	40020000 	.word	0x40020000
 8006a70:	200002e8 	.word	0x200002e8
 8006a74:	40026088 	.word	0x40026088

08006a78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b090      	sub	sp, #64	; 0x40
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a80:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006a84:	2200      	movs	r2, #0
 8006a86:	601a      	str	r2, [r3, #0]
 8006a88:	605a      	str	r2, [r3, #4]
 8006a8a:	609a      	str	r2, [r3, #8]
 8006a8c:	60da      	str	r2, [r3, #12]
 8006a8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a83      	ldr	r2, [pc, #524]	; (8006ca4 <HAL_I2C_MspInit+0x22c>)
 8006a96:	4293      	cmp	r3, r2
 8006a98:	d13c      	bne.n	8006b14 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a9a:	2300      	movs	r3, #0
 8006a9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a9e:	4b82      	ldr	r3, [pc, #520]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006aa0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aa2:	4a81      	ldr	r2, [pc, #516]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006aa4:	f043 0302 	orr.w	r3, r3, #2
 8006aa8:	6313      	str	r3, [r2, #48]	; 0x30
 8006aaa:	4b7f      	ldr	r3, [pc, #508]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006aac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006aae:	f003 0302 	and.w	r3, r3, #2
 8006ab2:	62bb      	str	r3, [r7, #40]	; 0x28
 8006ab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006ab6:	23c0      	movs	r3, #192	; 0xc0
 8006ab8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006aba:	2312      	movs	r3, #18
 8006abc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006abe:	2300      	movs	r3, #0
 8006ac0:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ac2:	2303      	movs	r3, #3
 8006ac4:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8006ac6:	2304      	movs	r3, #4
 8006ac8:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006aca:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006ace:	4619      	mov	r1, r3
 8006ad0:	4876      	ldr	r0, [pc, #472]	; (8006cac <HAL_I2C_MspInit+0x234>)
 8006ad2:	f002 f9ff 	bl	8008ed4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	627b      	str	r3, [r7, #36]	; 0x24
 8006ada:	4b73      	ldr	r3, [pc, #460]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ade:	4a72      	ldr	r2, [pc, #456]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006ae0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006ae4:	6413      	str	r3, [r2, #64]	; 0x40
 8006ae6:	4b70      	ldr	r3, [pc, #448]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006aea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006aee:	627b      	str	r3, [r7, #36]	; 0x24
 8006af0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8006af2:	2200      	movs	r2, #0
 8006af4:	2105      	movs	r1, #5
 8006af6:	201f      	movs	r0, #31
 8006af8:	f001 fa2a 	bl	8007f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8006afc:	201f      	movs	r0, #31
 8006afe:	f001 fa43 	bl	8007f88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8006b02:	2200      	movs	r2, #0
 8006b04:	2105      	movs	r1, #5
 8006b06:	2020      	movs	r0, #32
 8006b08:	f001 fa22 	bl	8007f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8006b0c:	2020      	movs	r0, #32
 8006b0e:	f001 fa3b 	bl	8007f88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8006b12:	e0c2      	b.n	8006c9a <HAL_I2C_MspInit+0x222>
  else if(hi2c->Instance==I2C2)
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	4a65      	ldr	r2, [pc, #404]	; (8006cb0 <HAL_I2C_MspInit+0x238>)
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d15c      	bne.n	8006bd8 <HAL_I2C_MspInit+0x160>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006b1e:	2300      	movs	r3, #0
 8006b20:	623b      	str	r3, [r7, #32]
 8006b22:	4b61      	ldr	r3, [pc, #388]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006b24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b26:	4a60      	ldr	r2, [pc, #384]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006b28:	f043 0302 	orr.w	r3, r3, #2
 8006b2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006b2e:	4b5e      	ldr	r3, [pc, #376]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006b30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b32:	f003 0302 	and.w	r3, r3, #2
 8006b36:	623b      	str	r3, [r7, #32]
 8006b38:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	61fb      	str	r3, [r7, #28]
 8006b3e:	4b5a      	ldr	r3, [pc, #360]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b42:	4a59      	ldr	r2, [pc, #356]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006b44:	f043 0304 	orr.w	r3, r3, #4
 8006b48:	6313      	str	r3, [r2, #48]	; 0x30
 8006b4a:	4b57      	ldr	r3, [pc, #348]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b4e:	f003 0304 	and.w	r3, r3, #4
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	69fb      	ldr	r3, [r7, #28]
    GPIO_InitStruct.Pin = I2C_EEPROM_SCL_Pin;
 8006b56:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006b5a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b5c:	2312      	movs	r3, #18
 8006b5e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b60:	2300      	movs	r3, #0
 8006b62:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b64:	2303      	movs	r3, #3
 8006b66:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006b68:	2304      	movs	r3, #4
 8006b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I2C_EEPROM_SCL_GPIO_Port, &GPIO_InitStruct);
 8006b6c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b70:	4619      	mov	r1, r3
 8006b72:	484e      	ldr	r0, [pc, #312]	; (8006cac <HAL_I2C_MspInit+0x234>)
 8006b74:	f002 f9ae 	bl	8008ed4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = I2C_EEPROM_SDA_Pin;
 8006b78:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006b7e:	2312      	movs	r3, #18
 8006b80:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b82:	2300      	movs	r3, #0
 8006b84:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b86:	2303      	movs	r3, #3
 8006b88:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006b8a:	2304      	movs	r3, #4
 8006b8c:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(I2C_EEPROM_SDA_GPIO_Port, &GPIO_InitStruct);
 8006b8e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006b92:	4619      	mov	r1, r3
 8006b94:	4847      	ldr	r0, [pc, #284]	; (8006cb4 <HAL_I2C_MspInit+0x23c>)
 8006b96:	f002 f99d 	bl	8008ed4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	61bb      	str	r3, [r7, #24]
 8006b9e:	4b42      	ldr	r3, [pc, #264]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ba2:	4a41      	ldr	r2, [pc, #260]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006ba4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8006baa:	4b3f      	ldr	r3, [pc, #252]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006bb2:	61bb      	str	r3, [r7, #24]
 8006bb4:	69bb      	ldr	r3, [r7, #24]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	2105      	movs	r1, #5
 8006bba:	2021      	movs	r0, #33	; 0x21
 8006bbc:	f001 f9c8 	bl	8007f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8006bc0:	2021      	movs	r0, #33	; 0x21
 8006bc2:	f001 f9e1 	bl	8007f88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8006bc6:	2200      	movs	r2, #0
 8006bc8:	2105      	movs	r1, #5
 8006bca:	2022      	movs	r0, #34	; 0x22
 8006bcc:	f001 f9c0 	bl	8007f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8006bd0:	2022      	movs	r0, #34	; 0x22
 8006bd2:	f001 f9d9 	bl	8007f88 <HAL_NVIC_EnableIRQ>
}
 8006bd6:	e060      	b.n	8006c9a <HAL_I2C_MspInit+0x222>
  else if(hi2c->Instance==I2C3)
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a36      	ldr	r2, [pc, #216]	; (8006cb8 <HAL_I2C_MspInit+0x240>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d15b      	bne.n	8006c9a <HAL_I2C_MspInit+0x222>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006be2:	2300      	movs	r3, #0
 8006be4:	617b      	str	r3, [r7, #20]
 8006be6:	4b30      	ldr	r3, [pc, #192]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bea:	4a2f      	ldr	r2, [pc, #188]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006bec:	f043 0304 	orr.w	r3, r3, #4
 8006bf0:	6313      	str	r3, [r2, #48]	; 0x30
 8006bf2:	4b2d      	ldr	r3, [pc, #180]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bf6:	f003 0304 	and.w	r3, r3, #4
 8006bfa:	617b      	str	r3, [r7, #20]
 8006bfc:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006bfe:	2300      	movs	r3, #0
 8006c00:	613b      	str	r3, [r7, #16]
 8006c02:	4b29      	ldr	r3, [pc, #164]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c06:	4a28      	ldr	r2, [pc, #160]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006c08:	f043 0301 	orr.w	r3, r3, #1
 8006c0c:	6313      	str	r3, [r2, #48]	; 0x30
 8006c0e:	4b26      	ldr	r3, [pc, #152]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006c10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c12:	f003 0301 	and.w	r3, r3, #1
 8006c16:	613b      	str	r3, [r7, #16]
 8006c18:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006c1a:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006c1e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c20:	2312      	movs	r3, #18
 8006c22:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c24:	2300      	movs	r3, #0
 8006c26:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c28:	2303      	movs	r3, #3
 8006c2a:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006c2c:	2304      	movs	r3, #4
 8006c2e:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006c30:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c34:	4619      	mov	r1, r3
 8006c36:	481f      	ldr	r0, [pc, #124]	; (8006cb4 <HAL_I2C_MspInit+0x23c>)
 8006c38:	f002 f94c 	bl	8008ed4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8006c3c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006c40:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006c42:	2312      	movs	r3, #18
 8006c44:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c46:	2300      	movs	r3, #0
 8006c48:	637b      	str	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	63bb      	str	r3, [r7, #56]	; 0x38
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8006c4e:	2304      	movs	r3, #4
 8006c50:	63fb      	str	r3, [r7, #60]	; 0x3c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006c52:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006c56:	4619      	mov	r1, r3
 8006c58:	4818      	ldr	r0, [pc, #96]	; (8006cbc <HAL_I2C_MspInit+0x244>)
 8006c5a:	f002 f93b 	bl	8008ed4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8006c5e:	2300      	movs	r3, #0
 8006c60:	60fb      	str	r3, [r7, #12]
 8006c62:	4b11      	ldr	r3, [pc, #68]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c66:	4a10      	ldr	r2, [pc, #64]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006c68:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006c6c:	6413      	str	r3, [r2, #64]	; 0x40
 8006c6e:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <HAL_I2C_MspInit+0x230>)
 8006c70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c72:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006c76:	60fb      	str	r3, [r7, #12]
 8006c78:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	2105      	movs	r1, #5
 8006c7e:	2048      	movs	r0, #72	; 0x48
 8006c80:	f001 f966 	bl	8007f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 8006c84:	2048      	movs	r0, #72	; 0x48
 8006c86:	f001 f97f 	bl	8007f88 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8006c8a:	2200      	movs	r2, #0
 8006c8c:	2105      	movs	r1, #5
 8006c8e:	2049      	movs	r0, #73	; 0x49
 8006c90:	f001 f95e 	bl	8007f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 8006c94:	2049      	movs	r0, #73	; 0x49
 8006c96:	f001 f977 	bl	8007f88 <HAL_NVIC_EnableIRQ>
}
 8006c9a:	bf00      	nop
 8006c9c:	3740      	adds	r7, #64	; 0x40
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
 8006ca2:	bf00      	nop
 8006ca4:	40005400 	.word	0x40005400
 8006ca8:	40023800 	.word	0x40023800
 8006cac:	40020400 	.word	0x40020400
 8006cb0:	40005800 	.word	0x40005800
 8006cb4:	40020800 	.word	0x40020800
 8006cb8:	40005c00 	.word	0x40005c00
 8006cbc:	40020000 	.word	0x40020000

08006cc0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b086      	sub	sp, #24
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006cd0:	d10e      	bne.n	8006cf0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	617b      	str	r3, [r7, #20]
 8006cd6:	4b42      	ldr	r3, [pc, #264]	; (8006de0 <HAL_TIM_Base_MspInit+0x120>)
 8006cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cda:	4a41      	ldr	r2, [pc, #260]	; (8006de0 <HAL_TIM_Base_MspInit+0x120>)
 8006cdc:	f043 0301 	orr.w	r3, r3, #1
 8006ce0:	6413      	str	r3, [r2, #64]	; 0x40
 8006ce2:	4b3f      	ldr	r3, [pc, #252]	; (8006de0 <HAL_TIM_Base_MspInit+0x120>)
 8006ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce6:	f003 0301 	and.w	r3, r3, #1
 8006cea:	617b      	str	r3, [r7, #20]
 8006cec:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8006cee:	e072      	b.n	8006dd6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM4)
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a3b      	ldr	r2, [pc, #236]	; (8006de4 <HAL_TIM_Base_MspInit+0x124>)
 8006cf6:	4293      	cmp	r3, r2
 8006cf8:	d146      	bne.n	8006d88 <HAL_TIM_Base_MspInit+0xc8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	613b      	str	r3, [r7, #16]
 8006cfe:	4b38      	ldr	r3, [pc, #224]	; (8006de0 <HAL_TIM_Base_MspInit+0x120>)
 8006d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d02:	4a37      	ldr	r2, [pc, #220]	; (8006de0 <HAL_TIM_Base_MspInit+0x120>)
 8006d04:	f043 0304 	orr.w	r3, r3, #4
 8006d08:	6413      	str	r3, [r2, #64]	; 0x40
 8006d0a:	4b35      	ldr	r3, [pc, #212]	; (8006de0 <HAL_TIM_Base_MspInit+0x120>)
 8006d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0e:	f003 0304 	and.w	r3, r3, #4
 8006d12:	613b      	str	r3, [r7, #16]
 8006d14:	693b      	ldr	r3, [r7, #16]
    hdma_tim4_up.Instance = DMA1_Stream6;
 8006d16:	4b34      	ldr	r3, [pc, #208]	; (8006de8 <HAL_TIM_Base_MspInit+0x128>)
 8006d18:	4a34      	ldr	r2, [pc, #208]	; (8006dec <HAL_TIM_Base_MspInit+0x12c>)
 8006d1a:	601a      	str	r2, [r3, #0]
    hdma_tim4_up.Init.Channel = DMA_CHANNEL_2;
 8006d1c:	4b32      	ldr	r3, [pc, #200]	; (8006de8 <HAL_TIM_Base_MspInit+0x128>)
 8006d1e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8006d22:	605a      	str	r2, [r3, #4]
    hdma_tim4_up.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d24:	4b30      	ldr	r3, [pc, #192]	; (8006de8 <HAL_TIM_Base_MspInit+0x128>)
 8006d26:	2200      	movs	r2, #0
 8006d28:	609a      	str	r2, [r3, #8]
    hdma_tim4_up.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d2a:	4b2f      	ldr	r3, [pc, #188]	; (8006de8 <HAL_TIM_Base_MspInit+0x128>)
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	60da      	str	r2, [r3, #12]
    hdma_tim4_up.Init.MemInc = DMA_MINC_ENABLE;
 8006d30:	4b2d      	ldr	r3, [pc, #180]	; (8006de8 <HAL_TIM_Base_MspInit+0x128>)
 8006d32:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006d36:	611a      	str	r2, [r3, #16]
    hdma_tim4_up.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006d38:	4b2b      	ldr	r3, [pc, #172]	; (8006de8 <HAL_TIM_Base_MspInit+0x128>)
 8006d3a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d3e:	615a      	str	r2, [r3, #20]
    hdma_tim4_up.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006d40:	4b29      	ldr	r3, [pc, #164]	; (8006de8 <HAL_TIM_Base_MspInit+0x128>)
 8006d42:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006d46:	619a      	str	r2, [r3, #24]
    hdma_tim4_up.Init.Mode = DMA_NORMAL;
 8006d48:	4b27      	ldr	r3, [pc, #156]	; (8006de8 <HAL_TIM_Base_MspInit+0x128>)
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	61da      	str	r2, [r3, #28]
    hdma_tim4_up.Init.Priority = DMA_PRIORITY_LOW;
 8006d4e:	4b26      	ldr	r3, [pc, #152]	; (8006de8 <HAL_TIM_Base_MspInit+0x128>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	621a      	str	r2, [r3, #32]
    hdma_tim4_up.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8006d54:	4b24      	ldr	r3, [pc, #144]	; (8006de8 <HAL_TIM_Base_MspInit+0x128>)
 8006d56:	2200      	movs	r2, #0
 8006d58:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_tim4_up) != HAL_OK)
 8006d5a:	4823      	ldr	r0, [pc, #140]	; (8006de8 <HAL_TIM_Base_MspInit+0x128>)
 8006d5c:	f001 fb72 	bl	8008444 <HAL_DMA_Init>
 8006d60:	4603      	mov	r3, r0
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d001      	beq.n	8006d6a <HAL_TIM_Base_MspInit+0xaa>
      Error_Handler();
 8006d66:	f7fe ffe9 	bl	8005d3c <Error_Handler>
    __HAL_LINKDMA(htim_base,hdma[TIM_DMA_ID_UPDATE],hdma_tim4_up);
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	4a1e      	ldr	r2, [pc, #120]	; (8006de8 <HAL_TIM_Base_MspInit+0x128>)
 8006d6e:	621a      	str	r2, [r3, #32]
 8006d70:	4a1d      	ldr	r2, [pc, #116]	; (8006de8 <HAL_TIM_Base_MspInit+0x128>)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8006d76:	2200      	movs	r2, #0
 8006d78:	2105      	movs	r1, #5
 8006d7a:	201e      	movs	r0, #30
 8006d7c:	f001 f8e8 	bl	8007f50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8006d80:	201e      	movs	r0, #30
 8006d82:	f001 f901 	bl	8007f88 <HAL_NVIC_EnableIRQ>
}
 8006d86:	e026      	b.n	8006dd6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM7)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	4a18      	ldr	r2, [pc, #96]	; (8006df0 <HAL_TIM_Base_MspInit+0x130>)
 8006d8e:	4293      	cmp	r3, r2
 8006d90:	d10e      	bne.n	8006db0 <HAL_TIM_Base_MspInit+0xf0>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8006d92:	2300      	movs	r3, #0
 8006d94:	60fb      	str	r3, [r7, #12]
 8006d96:	4b12      	ldr	r3, [pc, #72]	; (8006de0 <HAL_TIM_Base_MspInit+0x120>)
 8006d98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d9a:	4a11      	ldr	r2, [pc, #68]	; (8006de0 <HAL_TIM_Base_MspInit+0x120>)
 8006d9c:	f043 0320 	orr.w	r3, r3, #32
 8006da0:	6413      	str	r3, [r2, #64]	; 0x40
 8006da2:	4b0f      	ldr	r3, [pc, #60]	; (8006de0 <HAL_TIM_Base_MspInit+0x120>)
 8006da4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006da6:	f003 0320 	and.w	r3, r3, #32
 8006daa:	60fb      	str	r3, [r7, #12]
 8006dac:	68fb      	ldr	r3, [r7, #12]
}
 8006dae:	e012      	b.n	8006dd6 <HAL_TIM_Base_MspInit+0x116>
  else if(htim_base->Instance==TIM8)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	4a0f      	ldr	r2, [pc, #60]	; (8006df4 <HAL_TIM_Base_MspInit+0x134>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d10d      	bne.n	8006dd6 <HAL_TIM_Base_MspInit+0x116>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8006dba:	2300      	movs	r3, #0
 8006dbc:	60bb      	str	r3, [r7, #8]
 8006dbe:	4b08      	ldr	r3, [pc, #32]	; (8006de0 <HAL_TIM_Base_MspInit+0x120>)
 8006dc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dc2:	4a07      	ldr	r2, [pc, #28]	; (8006de0 <HAL_TIM_Base_MspInit+0x120>)
 8006dc4:	f043 0302 	orr.w	r3, r3, #2
 8006dc8:	6453      	str	r3, [r2, #68]	; 0x44
 8006dca:	4b05      	ldr	r3, [pc, #20]	; (8006de0 <HAL_TIM_Base_MspInit+0x120>)
 8006dcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006dce:	f003 0302 	and.w	r3, r3, #2
 8006dd2:	60bb      	str	r3, [r7, #8]
 8006dd4:	68bb      	ldr	r3, [r7, #8]
}
 8006dd6:	bf00      	nop
 8006dd8:	3718      	adds	r7, #24
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	bd80      	pop	{r7, pc}
 8006dde:	bf00      	nop
 8006de0:	40023800 	.word	0x40023800
 8006de4:	40000800 	.word	0x40000800
 8006de8:	20000564 	.word	0x20000564
 8006dec:	400260a0 	.word	0x400260a0
 8006df0:	40001400 	.word	0x40001400
 8006df4:	40010400 	.word	0x40010400

08006df8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8006df8:	b580      	push	{r7, lr}
 8006dfa:	b088      	sub	sp, #32
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e00:	f107 030c 	add.w	r3, r7, #12
 8006e04:	2200      	movs	r2, #0
 8006e06:	601a      	str	r2, [r3, #0]
 8006e08:	605a      	str	r2, [r3, #4]
 8006e0a:	609a      	str	r2, [r3, #8]
 8006e0c:	60da      	str	r2, [r3, #12]
 8006e0e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e18:	d11d      	bne.n	8006e56 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	60bb      	str	r3, [r7, #8]
 8006e1e:	4b10      	ldr	r3, [pc, #64]	; (8006e60 <HAL_TIM_MspPostInit+0x68>)
 8006e20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e22:	4a0f      	ldr	r2, [pc, #60]	; (8006e60 <HAL_TIM_MspPostInit+0x68>)
 8006e24:	f043 0301 	orr.w	r3, r3, #1
 8006e28:	6313      	str	r3, [r2, #48]	; 0x30
 8006e2a:	4b0d      	ldr	r3, [pc, #52]	; (8006e60 <HAL_TIM_MspPostInit+0x68>)
 8006e2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e2e:	f003 0301 	and.w	r3, r3, #1
 8006e32:	60bb      	str	r3, [r7, #8]
 8006e34:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8006e36:	2301      	movs	r3, #1
 8006e38:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006e3a:	2302      	movs	r3, #2
 8006e3c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e3e:	2300      	movs	r3, #0
 8006e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e42:	2300      	movs	r3, #0
 8006e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8006e46:	2301      	movs	r3, #1
 8006e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e4a:	f107 030c 	add.w	r3, r7, #12
 8006e4e:	4619      	mov	r1, r3
 8006e50:	4804      	ldr	r0, [pc, #16]	; (8006e64 <HAL_TIM_MspPostInit+0x6c>)
 8006e52:	f002 f83f 	bl	8008ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8006e56:	bf00      	nop
 8006e58:	3720      	adds	r7, #32
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	40023800 	.word	0x40023800
 8006e64:	40020000 	.word	0x40020000

08006e68 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006e68:	b580      	push	{r7, lr}
 8006e6a:	b08a      	sub	sp, #40	; 0x28
 8006e6c:	af00      	add	r7, sp, #0
 8006e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e70:	f107 0314 	add.w	r3, r7, #20
 8006e74:	2200      	movs	r2, #0
 8006e76:	601a      	str	r2, [r3, #0]
 8006e78:	605a      	str	r2, [r3, #4]
 8006e7a:	609a      	str	r2, [r3, #8]
 8006e7c:	60da      	str	r2, [r3, #12]
 8006e7e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	4a19      	ldr	r2, [pc, #100]	; (8006eec <HAL_UART_MspInit+0x84>)
 8006e86:	4293      	cmp	r3, r2
 8006e88:	d12b      	bne.n	8006ee2 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006e8a:	2300      	movs	r3, #0
 8006e8c:	613b      	str	r3, [r7, #16]
 8006e8e:	4b18      	ldr	r3, [pc, #96]	; (8006ef0 <HAL_UART_MspInit+0x88>)
 8006e90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e92:	4a17      	ldr	r2, [pc, #92]	; (8006ef0 <HAL_UART_MspInit+0x88>)
 8006e94:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006e98:	6413      	str	r3, [r2, #64]	; 0x40
 8006e9a:	4b15      	ldr	r3, [pc, #84]	; (8006ef0 <HAL_UART_MspInit+0x88>)
 8006e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea2:	613b      	str	r3, [r7, #16]
 8006ea4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60fb      	str	r3, [r7, #12]
 8006eaa:	4b11      	ldr	r3, [pc, #68]	; (8006ef0 <HAL_UART_MspInit+0x88>)
 8006eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eae:	4a10      	ldr	r2, [pc, #64]	; (8006ef0 <HAL_UART_MspInit+0x88>)
 8006eb0:	f043 0301 	orr.w	r3, r3, #1
 8006eb4:	6313      	str	r3, [r2, #48]	; 0x30
 8006eb6:	4b0e      	ldr	r3, [pc, #56]	; (8006ef0 <HAL_UART_MspInit+0x88>)
 8006eb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eba:	f003 0301 	and.w	r3, r3, #1
 8006ebe:	60fb      	str	r3, [r7, #12]
 8006ec0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8006ec2:	230c      	movs	r3, #12
 8006ec4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ec6:	2302      	movs	r3, #2
 8006ec8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006ece:	2303      	movs	r3, #3
 8006ed0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8006ed2:	2307      	movs	r3, #7
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ed6:	f107 0314 	add.w	r3, r7, #20
 8006eda:	4619      	mov	r1, r3
 8006edc:	4805      	ldr	r0, [pc, #20]	; (8006ef4 <HAL_UART_MspInit+0x8c>)
 8006ede:	f001 fff9 	bl	8008ed4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8006ee2:	bf00      	nop
 8006ee4:	3728      	adds	r7, #40	; 0x28
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	40004400 	.word	0x40004400
 8006ef0:	40023800 	.word	0x40023800
 8006ef4:	40020000 	.word	0x40020000

08006ef8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ef8:	b580      	push	{r7, lr}
 8006efa:	b08e      	sub	sp, #56	; 0x38
 8006efc:	af00      	add	r7, sp, #0
 8006efe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8006f00:	2300      	movs	r3, #0
 8006f02:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8006f04:	2300      	movs	r3, #0
 8006f06:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8006f08:	2300      	movs	r3, #0
 8006f0a:	60fb      	str	r3, [r7, #12]
 8006f0c:	4b33      	ldr	r3, [pc, #204]	; (8006fdc <HAL_InitTick+0xe4>)
 8006f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f10:	4a32      	ldr	r2, [pc, #200]	; (8006fdc <HAL_InitTick+0xe4>)
 8006f12:	f043 0310 	orr.w	r3, r3, #16
 8006f16:	6413      	str	r3, [r2, #64]	; 0x40
 8006f18:	4b30      	ldr	r3, [pc, #192]	; (8006fdc <HAL_InitTick+0xe4>)
 8006f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1c:	f003 0310 	and.w	r3, r3, #16
 8006f20:	60fb      	str	r3, [r7, #12]
 8006f22:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8006f24:	f107 0210 	add.w	r2, r7, #16
 8006f28:	f107 0314 	add.w	r3, r7, #20
 8006f2c:	4611      	mov	r1, r2
 8006f2e:	4618      	mov	r0, r3
 8006f30:	f005 f988 	bl	800c244 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8006f34:	6a3b      	ldr	r3, [r7, #32]
 8006f36:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8006f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d103      	bne.n	8006f46 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8006f3e:	f005 f959 	bl	800c1f4 <HAL_RCC_GetPCLK1Freq>
 8006f42:	6378      	str	r0, [r7, #52]	; 0x34
 8006f44:	e004      	b.n	8006f50 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8006f46:	f005 f955 	bl	800c1f4 <HAL_RCC_GetPCLK1Freq>
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	005b      	lsls	r3, r3, #1
 8006f4e:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8006f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f52:	4a23      	ldr	r2, [pc, #140]	; (8006fe0 <HAL_InitTick+0xe8>)
 8006f54:	fba2 2303 	umull	r2, r3, r2, r3
 8006f58:	0c9b      	lsrs	r3, r3, #18
 8006f5a:	3b01      	subs	r3, #1
 8006f5c:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8006f5e:	4b21      	ldr	r3, [pc, #132]	; (8006fe4 <HAL_InitTick+0xec>)
 8006f60:	4a21      	ldr	r2, [pc, #132]	; (8006fe8 <HAL_InitTick+0xf0>)
 8006f62:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8006f64:	4b1f      	ldr	r3, [pc, #124]	; (8006fe4 <HAL_InitTick+0xec>)
 8006f66:	f240 32e7 	movw	r2, #999	; 0x3e7
 8006f6a:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8006f6c:	4a1d      	ldr	r2, [pc, #116]	; (8006fe4 <HAL_InitTick+0xec>)
 8006f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f70:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8006f72:	4b1c      	ldr	r3, [pc, #112]	; (8006fe4 <HAL_InitTick+0xec>)
 8006f74:	2200      	movs	r2, #0
 8006f76:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006f78:	4b1a      	ldr	r3, [pc, #104]	; (8006fe4 <HAL_InitTick+0xec>)
 8006f7a:	2200      	movs	r2, #0
 8006f7c:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006f7e:	4b19      	ldr	r3, [pc, #100]	; (8006fe4 <HAL_InitTick+0xec>)
 8006f80:	2200      	movs	r2, #0
 8006f82:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8006f84:	4817      	ldr	r0, [pc, #92]	; (8006fe4 <HAL_InitTick+0xec>)
 8006f86:	f005 fe5d 	bl	800cc44 <HAL_TIM_Base_Init>
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8006f90:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	d11b      	bne.n	8006fd0 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8006f98:	4812      	ldr	r0, [pc, #72]	; (8006fe4 <HAL_InitTick+0xec>)
 8006f9a:	f005 ff0b 	bl	800cdb4 <HAL_TIM_Base_Start_IT>
 8006f9e:	4603      	mov	r3, r0
 8006fa0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8006fa4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d111      	bne.n	8006fd0 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8006fac:	2036      	movs	r0, #54	; 0x36
 8006fae:	f000 ffeb 	bl	8007f88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2b0f      	cmp	r3, #15
 8006fb6:	d808      	bhi.n	8006fca <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8006fb8:	2200      	movs	r2, #0
 8006fba:	6879      	ldr	r1, [r7, #4]
 8006fbc:	2036      	movs	r0, #54	; 0x36
 8006fbe:	f000 ffc7 	bl	8007f50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8006fc2:	4a0a      	ldr	r2, [pc, #40]	; (8006fec <HAL_InitTick+0xf4>)
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6013      	str	r3, [r2, #0]
 8006fc8:	e002      	b.n	8006fd0 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8006fca:	2301      	movs	r3, #1
 8006fcc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8006fd0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3738      	adds	r7, #56	; 0x38
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}
 8006fdc:	40023800 	.word	0x40023800
 8006fe0:	431bde83 	.word	0x431bde83
 8006fe4:	2001a8c4 	.word	0x2001a8c4
 8006fe8:	40001000 	.word	0x40001000
 8006fec:	200001a4 	.word	0x200001a4

08006ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006ff0:	b480      	push	{r7}
 8006ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8006ff4:	e7fe      	b.n	8006ff4 <NMI_Handler+0x4>

08006ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006ff6:	b480      	push	{r7}
 8006ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006ffa:	e7fe      	b.n	8006ffa <HardFault_Handler+0x4>

08006ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007000:	e7fe      	b.n	8007000 <MemManage_Handler+0x4>

08007002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007002:	b480      	push	{r7}
 8007004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007006:	e7fe      	b.n	8007006 <BusFault_Handler+0x4>

08007008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007008:	b480      	push	{r7}
 800700a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800700c:	e7fe      	b.n	800700c <UsageFault_Handler+0x4>

0800700e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800700e:	b480      	push	{r7}
 8007010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007012:	bf00      	nop
 8007014:	46bd      	mov	sp, r7
 8007016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701a:	4770      	bx	lr

0800701c <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800701c:	b580      	push	{r7, lr}
 800701e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 8007020:	f004 ff8c 	bl	800bf3c <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 8007024:	bf00      	nop
 8007026:	bd80      	pop	{r7, pc}

08007028 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8007028:	b580      	push	{r7, lr}
 800702a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 800702c:	f001 fdaa 	bl	8008b84 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8007030:	bf00      	nop
 8007032:	bd80      	pop	{r7, pc}

08007034 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8007034:	b480      	push	{r7}
 8007036:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8007038:	bf00      	nop
 800703a:	46bd      	mov	sp, r7
 800703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007040:	4770      	bx	lr

08007042 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8007042:	b580      	push	{r7, lr}
 8007044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(interruptButton3_Pin);
 8007046:	2002      	movs	r0, #2
 8007048:	f002 f924 	bl	8009294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800704c:	bf00      	nop
 800704e:	bd80      	pop	{r7, pc}

08007050 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8007050:	b580      	push	{r7, lr}
 8007052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(rotation1_1_Pin);
 8007054:	2010      	movs	r0, #16
 8007056:	f002 f91d 	bl	8009294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800705a:	bf00      	nop
 800705c:	bd80      	pop	{r7, pc}
	...

08007060 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8007064:	4802      	ldr	r0, [pc, #8]	; (8007070 <DMA1_Stream5_IRQHandler+0x10>)
 8007066:	f001 fb15 	bl	8008694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800706a:	bf00      	nop
 800706c:	bd80      	pop	{r7, pc}
 800706e:	bf00      	nop
 8007070:	200002e8 	.word	0x200002e8

08007074 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_tim4_up);
 8007078:	4802      	ldr	r0, [pc, #8]	; (8007084 <DMA1_Stream6_IRQHandler+0x10>)
 800707a:	f001 fb0b 	bl	8008694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800707e:	bf00      	nop
 8007080:	bd80      	pop	{r7, pc}
 8007082:	bf00      	nop
 8007084:	20000564 	.word	0x20000564

08007088 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 interrupts.
  */
void ADC_IRQHandler(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800708c:	4802      	ldr	r0, [pc, #8]	; (8007098 <ADC_IRQHandler+0x10>)
 800708e:	f000 f9b8 	bl	8007402 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8007092:	bf00      	nop
 8007094:	bd80      	pop	{r7, pc}
 8007096:	bf00      	nop
 8007098:	2000022c 	.word	0x2000022c

0800709c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(interruptButton_Pin);
 80070a0:	2040      	movs	r0, #64	; 0x40
 80070a2:	f002 f8f7 	bl	8009294 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(interruptButton2_Pin);
 80070a6:	2080      	movs	r0, #128	; 0x80
 80070a8:	f002 f8f4 	bl	8009294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80070ac:	bf00      	nop
 80070ae:	bd80      	pop	{r7, pc}

080070b0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 80070b0:	b580      	push	{r7, lr}
 80070b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 80070b4:	4802      	ldr	r0, [pc, #8]	; (80070c0 <TIM4_IRQHandler+0x10>)
 80070b6:	f006 f80f 	bl	800d0d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 80070ba:	bf00      	nop
 80070bc:	bd80      	pop	{r7, pc}
 80070be:	bf00      	nop
 80070c0:	2000048c 	.word	0x2000048c

080070c4 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80070c4:	b580      	push	{r7, lr}
 80070c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80070c8:	4802      	ldr	r0, [pc, #8]	; (80070d4 <I2C1_EV_IRQHandler+0x10>)
 80070ca:	f002 feaf 	bl	8009e2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80070ce:	bf00      	nop
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000348 	.word	0x20000348

080070d8 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80070d8:	b580      	push	{r7, lr}
 80070da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80070dc:	4802      	ldr	r0, [pc, #8]	; (80070e8 <I2C1_ER_IRQHandler+0x10>)
 80070de:	f002 fff8 	bl	800a0d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80070e2:	bf00      	nop
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	20000348 	.word	0x20000348

080070ec <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80070f0:	4802      	ldr	r0, [pc, #8]	; (80070fc <I2C2_EV_IRQHandler+0x10>)
 80070f2:	f002 fe9b 	bl	8009e2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80070f6:	bf00      	nop
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	2000039c 	.word	0x2000039c

08007100 <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8007104:	4802      	ldr	r0, [pc, #8]	; (8007110 <I2C2_ER_IRQHandler+0x10>)
 8007106:	f002 ffe4 	bl	800a0d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 800710a:	bf00      	nop
 800710c:	bd80      	pop	{r7, pc}
 800710e:	bf00      	nop
 8007110:	2000039c 	.word	0x2000039c

08007114 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8007114:	b580      	push	{r7, lr}
 8007116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8007118:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 800711c:	f002 f8ba 	bl	8009294 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8007120:	bf00      	nop
 8007122:	bd80      	pop	{r7, pc}

08007124 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  if (hdac.State != HAL_DAC_STATE_RESET) {
 8007128:	4b06      	ldr	r3, [pc, #24]	; (8007144 <TIM6_DAC_IRQHandler+0x20>)
 800712a:	791b      	ldrb	r3, [r3, #4]
 800712c:	b2db      	uxtb	r3, r3
 800712e:	2b00      	cmp	r3, #0
 8007130:	d002      	beq.n	8007138 <TIM6_DAC_IRQHandler+0x14>
    HAL_DAC_IRQHandler(&hdac);
 8007132:	4804      	ldr	r0, [pc, #16]	; (8007144 <TIM6_DAC_IRQHandler+0x20>)
 8007134:	f001 f81a 	bl	800816c <HAL_DAC_IRQHandler>
  }
  HAL_TIM_IRQHandler(&htim6);
 8007138:	4803      	ldr	r0, [pc, #12]	; (8007148 <TIM6_DAC_IRQHandler+0x24>)
 800713a:	f005 ffcd 	bl	800d0d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800713e:	bf00      	nop
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	200002d4 	.word	0x200002d4
 8007148:	2001a8c4 	.word	0x2001a8c4

0800714c <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8007150:	4802      	ldr	r0, [pc, #8]	; (800715c <DMA2_Stream4_IRQHandler+0x10>)
 8007152:	f001 fa9f 	bl	8008694 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8007156:	bf00      	nop
 8007158:	bd80      	pop	{r7, pc}
 800715a:	bf00      	nop
 800715c:	20000274 	.word	0x20000274

08007160 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8007160:	b580      	push	{r7, lr}
 8007162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8007164:	4802      	ldr	r0, [pc, #8]	; (8007170 <I2C3_EV_IRQHandler+0x10>)
 8007166:	f002 fe61 	bl	8009e2c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800716a:	bf00      	nop
 800716c:	bd80      	pop	{r7, pc}
 800716e:	bf00      	nop
 8007170:	200003f0 	.word	0x200003f0

08007174 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8007178:	4802      	ldr	r0, [pc, #8]	; (8007184 <I2C3_ER_IRQHandler+0x10>)
 800717a:	f002 ffaa 	bl	800a0d2 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800717e:	bf00      	nop
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	200003f0 	.word	0x200003f0

08007188 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8007188:	b480      	push	{r7}
 800718a:	af00      	add	r7, sp, #0
  return 1;
 800718c:	2301      	movs	r3, #1
}
 800718e:	4618      	mov	r0, r3
 8007190:	46bd      	mov	sp, r7
 8007192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007196:	4770      	bx	lr

08007198 <_kill>:

int _kill(int pid, int sig)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
 80071a0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80071a2:	f00e f88f 	bl	80152c4 <__errno>
 80071a6:	4603      	mov	r3, r0
 80071a8:	2216      	movs	r2, #22
 80071aa:	601a      	str	r2, [r3, #0]
  return -1;
 80071ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80071b0:	4618      	mov	r0, r3
 80071b2:	3708      	adds	r7, #8
 80071b4:	46bd      	mov	sp, r7
 80071b6:	bd80      	pop	{r7, pc}

080071b8 <_exit>:

void _exit (int status)
{
 80071b8:	b580      	push	{r7, lr}
 80071ba:	b082      	sub	sp, #8
 80071bc:	af00      	add	r7, sp, #0
 80071be:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80071c0:	f04f 31ff 	mov.w	r1, #4294967295
 80071c4:	6878      	ldr	r0, [r7, #4]
 80071c6:	f7ff ffe7 	bl	8007198 <_kill>
  while (1) {}    /* Make sure we hang here */
 80071ca:	e7fe      	b.n	80071ca <_exit+0x12>

080071cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b086      	sub	sp, #24
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80071d4:	4a14      	ldr	r2, [pc, #80]	; (8007228 <_sbrk+0x5c>)
 80071d6:	4b15      	ldr	r3, [pc, #84]	; (800722c <_sbrk+0x60>)
 80071d8:	1ad3      	subs	r3, r2, r3
 80071da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80071e0:	4b13      	ldr	r3, [pc, #76]	; (8007230 <_sbrk+0x64>)
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d102      	bne.n	80071ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80071e8:	4b11      	ldr	r3, [pc, #68]	; (8007230 <_sbrk+0x64>)
 80071ea:	4a12      	ldr	r2, [pc, #72]	; (8007234 <_sbrk+0x68>)
 80071ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80071ee:	4b10      	ldr	r3, [pc, #64]	; (8007230 <_sbrk+0x64>)
 80071f0:	681a      	ldr	r2, [r3, #0]
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4413      	add	r3, r2
 80071f6:	693a      	ldr	r2, [r7, #16]
 80071f8:	429a      	cmp	r2, r3
 80071fa:	d207      	bcs.n	800720c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80071fc:	f00e f862 	bl	80152c4 <__errno>
 8007200:	4603      	mov	r3, r0
 8007202:	220c      	movs	r2, #12
 8007204:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8007206:	f04f 33ff 	mov.w	r3, #4294967295
 800720a:	e009      	b.n	8007220 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800720c:	4b08      	ldr	r3, [pc, #32]	; (8007230 <_sbrk+0x64>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8007212:	4b07      	ldr	r3, [pc, #28]	; (8007230 <_sbrk+0x64>)
 8007214:	681a      	ldr	r2, [r3, #0]
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4413      	add	r3, r2
 800721a:	4a05      	ldr	r2, [pc, #20]	; (8007230 <_sbrk+0x64>)
 800721c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800721e:	68fb      	ldr	r3, [r7, #12]
}
 8007220:	4618      	mov	r0, r3
 8007222:	3718      	adds	r7, #24
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}
 8007228:	20020000 	.word	0x20020000
 800722c:	00000400 	.word	0x00000400
 8007230:	2001a90c 	.word	0x2001a90c
 8007234:	2001f3d0 	.word	0x2001f3d0

08007238 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007238:	b480      	push	{r7}
 800723a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800723c:	4b06      	ldr	r3, [pc, #24]	; (8007258 <SystemInit+0x20>)
 800723e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007242:	4a05      	ldr	r2, [pc, #20]	; (8007258 <SystemInit+0x20>)
 8007244:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007248:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800724c:	bf00      	nop
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	e000ed00 	.word	0xe000ed00

0800725c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800725c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007294 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8007260:	f7ff ffea 	bl	8007238 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007264:	480c      	ldr	r0, [pc, #48]	; (8007298 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8007266:	490d      	ldr	r1, [pc, #52]	; (800729c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8007268:	4a0d      	ldr	r2, [pc, #52]	; (80072a0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800726a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800726c:	e002      	b.n	8007274 <LoopCopyDataInit>

0800726e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800726e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007270:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007272:	3304      	adds	r3, #4

08007274 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007274:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8007276:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8007278:	d3f9      	bcc.n	800726e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800727a:	4a0a      	ldr	r2, [pc, #40]	; (80072a4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800727c:	4c0a      	ldr	r4, [pc, #40]	; (80072a8 <LoopFillZerobss+0x22>)
  movs r3, #0
 800727e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8007280:	e001      	b.n	8007286 <LoopFillZerobss>

08007282 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8007282:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8007284:	3204      	adds	r2, #4

08007286 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8007286:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8007288:	d3fb      	bcc.n	8007282 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800728a:	f00e f821 	bl	80152d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800728e:	f7fb fb83 	bl	8002998 <main>
  bx  lr    
 8007292:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8007294:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8007298:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800729c:	20000210 	.word	0x20000210
  ldr r2, =_sidata
 80072a0:	08017320 	.word	0x08017320
  ldr r2, =_sbss
 80072a4:	20000210 	.word	0x20000210
  ldr r4, =_ebss
 80072a8:	2001f3d0 	.word	0x2001f3d0

080072ac <CAN1_RX0_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80072ac:	e7fe      	b.n	80072ac <CAN1_RX0_IRQHandler>
	...

080072b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80072b4:	4b0e      	ldr	r3, [pc, #56]	; (80072f0 <HAL_Init+0x40>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a0d      	ldr	r2, [pc, #52]	; (80072f0 <HAL_Init+0x40>)
 80072ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80072be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80072c0:	4b0b      	ldr	r3, [pc, #44]	; (80072f0 <HAL_Init+0x40>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	4a0a      	ldr	r2, [pc, #40]	; (80072f0 <HAL_Init+0x40>)
 80072c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80072ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80072cc:	4b08      	ldr	r3, [pc, #32]	; (80072f0 <HAL_Init+0x40>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a07      	ldr	r2, [pc, #28]	; (80072f0 <HAL_Init+0x40>)
 80072d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80072d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80072d8:	2003      	movs	r0, #3
 80072da:	f000 fe2e 	bl	8007f3a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80072de:	200f      	movs	r0, #15
 80072e0:	f7ff fe0a 	bl	8006ef8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80072e4:	f7ff fa84 	bl	80067f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	bd80      	pop	{r7, pc}
 80072ee:	bf00      	nop
 80072f0:	40023c00 	.word	0x40023c00

080072f4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80072f4:	b480      	push	{r7}
 80072f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80072f8:	4b06      	ldr	r3, [pc, #24]	; (8007314 <HAL_IncTick+0x20>)
 80072fa:	781b      	ldrb	r3, [r3, #0]
 80072fc:	461a      	mov	r2, r3
 80072fe:	4b06      	ldr	r3, [pc, #24]	; (8007318 <HAL_IncTick+0x24>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	4413      	add	r3, r2
 8007304:	4a04      	ldr	r2, [pc, #16]	; (8007318 <HAL_IncTick+0x24>)
 8007306:	6013      	str	r3, [r2, #0]
}
 8007308:	bf00      	nop
 800730a:	46bd      	mov	sp, r7
 800730c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007310:	4770      	bx	lr
 8007312:	bf00      	nop
 8007314:	200001a8 	.word	0x200001a8
 8007318:	2001a910 	.word	0x2001a910

0800731c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800731c:	b480      	push	{r7}
 800731e:	af00      	add	r7, sp, #0
  return uwTick;
 8007320:	4b03      	ldr	r3, [pc, #12]	; (8007330 <HAL_GetTick+0x14>)
 8007322:	681b      	ldr	r3, [r3, #0]
}
 8007324:	4618      	mov	r0, r3
 8007326:	46bd      	mov	sp, r7
 8007328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800732c:	4770      	bx	lr
 800732e:	bf00      	nop
 8007330:	2001a910 	.word	0x2001a910

08007334 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b084      	sub	sp, #16
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800733c:	f7ff ffee 	bl	800731c <HAL_GetTick>
 8007340:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	f1b3 3fff 	cmp.w	r3, #4294967295
 800734c:	d005      	beq.n	800735a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800734e:	4b0a      	ldr	r3, [pc, #40]	; (8007378 <HAL_Delay+0x44>)
 8007350:	781b      	ldrb	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	4413      	add	r3, r2
 8007358:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800735a:	bf00      	nop
 800735c:	f7ff ffde 	bl	800731c <HAL_GetTick>
 8007360:	4602      	mov	r2, r0
 8007362:	68bb      	ldr	r3, [r7, #8]
 8007364:	1ad3      	subs	r3, r2, r3
 8007366:	68fa      	ldr	r2, [r7, #12]
 8007368:	429a      	cmp	r2, r3
 800736a:	d8f7      	bhi.n	800735c <HAL_Delay+0x28>
  {
  }
}
 800736c:	bf00      	nop
 800736e:	bf00      	nop
 8007370:	3710      	adds	r7, #16
 8007372:	46bd      	mov	sp, r7
 8007374:	bd80      	pop	{r7, pc}
 8007376:	bf00      	nop
 8007378:	200001a8 	.word	0x200001a8

0800737c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800737c:	b580      	push	{r7, lr}
 800737e:	b084      	sub	sp, #16
 8007380:	af00      	add	r7, sp, #0
 8007382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8007384:	2300      	movs	r3, #0
 8007386:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2b00      	cmp	r3, #0
 800738c:	d101      	bne.n	8007392 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800738e:	2301      	movs	r3, #1
 8007390:	e033      	b.n	80073fa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007396:	2b00      	cmp	r3, #0
 8007398:	d109      	bne.n	80073ae <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7ff fa6c 	bl	8006878 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2200      	movs	r2, #0
 80073a4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2200      	movs	r2, #0
 80073aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073b2:	f003 0310 	and.w	r3, r3, #16
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d118      	bne.n	80073ec <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073be:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80073c2:	f023 0302 	bic.w	r3, r3, #2
 80073c6:	f043 0202 	orr.w	r2, r3, #2
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80073ce:	6878      	ldr	r0, [r7, #4]
 80073d0:	f000 fb7e 	bl	8007ad0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073de:	f023 0303 	bic.w	r3, r3, #3
 80073e2:	f043 0201 	orr.w	r2, r3, #1
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	641a      	str	r2, [r3, #64]	; 0x40
 80073ea:	e001      	b.n	80073f0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80073ec:	2301      	movs	r3, #1
 80073ee:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80073f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fa:	4618      	mov	r0, r3
 80073fc:	3710      	adds	r7, #16
 80073fe:	46bd      	mov	sp, r7
 8007400:	bd80      	pop	{r7, pc}

08007402 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8007402:	b580      	push	{r7, lr}
 8007404:	b086      	sub	sp, #24
 8007406:	af00      	add	r7, sp, #0
 8007408:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]

  uint32_t tmp_sr = hadc->Instance->SR;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	685b      	ldr	r3, [r3, #4]
 8007420:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));

  tmp1 = tmp_sr & ADC_FLAG_EOC;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	f003 0302 	and.w	r3, r3, #2
 8007428:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800742a:	68bb      	ldr	r3, [r7, #8]
 800742c:	f003 0320 	and.w	r3, r3, #32
 8007430:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if (tmp1 && tmp2)
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d049      	beq.n	80074cc <HAL_ADC_IRQHandler+0xca>
 8007438:	693b      	ldr	r3, [r7, #16]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d046      	beq.n	80074cc <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007442:	f003 0310 	and.w	r3, r3, #16
 8007446:	2b00      	cmp	r3, #0
 8007448:	d105      	bne.n	8007456 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800744e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	681b      	ldr	r3, [r3, #0]
 800745a:	689b      	ldr	r3, [r3, #8]
 800745c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007460:	2b00      	cmp	r3, #0
 8007462:	d12b      	bne.n	80074bc <HAL_ADC_IRQHandler+0xba>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007468:	2b00      	cmp	r3, #0
 800746a:	d127      	bne.n	80074bc <HAL_ADC_IRQHandler+0xba>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007472:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007476:	2b00      	cmp	r3, #0
 8007478:	d006      	beq.n	8007488 <HAL_ADC_IRQHandler+0x86>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	689b      	ldr	r3, [r3, #8]
 8007480:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007484:	2b00      	cmp	r3, #0
 8007486:	d119      	bne.n	80074bc <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f022 0220 	bic.w	r2, r2, #32
 8007496:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074a8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d105      	bne.n	80074bc <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074b4:	f043 0201 	orr.w	r2, r3, #1
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80074bc:	6878      	ldr	r0, [r7, #4]
 80074be:	f7fc f9a5 	bl	800380c <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	f06f 0212 	mvn.w	r2, #18
 80074ca:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	f003 0304 	and.w	r3, r3, #4
 80074d2:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80074da:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if (tmp1 && tmp2)
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d057      	beq.n	8007592 <HAL_ADC_IRQHandler+0x190>
 80074e2:	693b      	ldr	r3, [r7, #16]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d054      	beq.n	8007592 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074ec:	f003 0310 	and.w	r3, r3, #16
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d105      	bne.n	8007500 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80074f8:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800750a:	2b00      	cmp	r3, #0
 800750c:	d139      	bne.n	8007582 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007514:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if (ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 8007518:	2b00      	cmp	r3, #0
 800751a:	d006      	beq.n	800752a <HAL_ADC_IRQHandler+0x128>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	689b      	ldr	r3, [r3, #8]
 8007522:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 8007526:	2b00      	cmp	r3, #0
 8007528:	d12b      	bne.n	8007582 <HAL_ADC_IRQHandler+0x180>
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	f403 6380 	and.w	r3, r3, #1024	; 0x400
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)) &&
 8007534:	2b00      	cmp	r3, #0
 8007536:	d124      	bne.n	8007582 <HAL_ADC_IRQHandler+0x180>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
        (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 8007542:	2b00      	cmp	r3, #0
 8007544:	d11d      	bne.n	8007582 <HAL_ADC_IRQHandler+0x180>
          (hadc->Init.ContinuousConvMode == DISABLE))))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	7e1b      	ldrb	r3, [r3, #24]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800754a:	2b00      	cmp	r3, #0
 800754c:	d119      	bne.n	8007582 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	685a      	ldr	r2, [r3, #4]
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800755c:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007562:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800756e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007572:	2b00      	cmp	r3, #0
 8007574:	d105      	bne.n	8007582 <HAL_ADC_IRQHandler+0x180>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800757a:	f043 0201 	orr.w	r2, r3, #1
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 fc22 	bl	8007dcc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	f06f 020c 	mvn.w	r2, #12
 8007590:	601a      	str	r2, [r3, #0]
  }

  tmp1 = tmp_sr & ADC_FLAG_AWD;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f003 0301 	and.w	r3, r3, #1
 8007598:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075a0:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if (tmp1 && tmp2)
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d017      	beq.n	80075d8 <HAL_ADC_IRQHandler+0x1d6>
 80075a8:	693b      	ldr	r3, [r7, #16]
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d014      	beq.n	80075d8 <HAL_ADC_IRQHandler+0x1d6>
  {
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	f003 0301 	and.w	r3, r3, #1
 80075b8:	2b01      	cmp	r3, #1
 80075ba:	d10d      	bne.n	80075d8 <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80075c0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80075c8:	6878      	ldr	r0, [r7, #4]
 80075ca:	f000 f93b 	bl	8007844 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	f06f 0201 	mvn.w	r2, #1
 80075d6:	601a      	str	r2, [r3, #0]
    }
  }

  tmp1 = tmp_sr & ADC_FLAG_OVR;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	f003 0320 	and.w	r3, r3, #32
 80075de:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 80075e0:	68bb      	ldr	r3, [r7, #8]
 80075e2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80075e6:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if (tmp1 && tmp2)
 80075e8:	697b      	ldr	r3, [r7, #20]
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d015      	beq.n	800761a <HAL_ADC_IRQHandler+0x218>
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d012      	beq.n	800761a <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */

    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80075f8:	f043 0202 	orr.w	r2, r3, #2
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	f06f 0220 	mvn.w	r2, #32
 8007608:	601a      	str	r2, [r3, #0]

    /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ErrorCallback(hadc);
#else
    HAL_ADC_ErrorCallback(hadc);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f924 	bl	8007858 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	f06f 0220 	mvn.w	r2, #32
 8007618:	601a      	str	r2, [r3, #0]
  }
}
 800761a:	bf00      	nop
 800761c:	3718      	adds	r7, #24
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
	...

08007624 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b086      	sub	sp, #24
 8007628:	af00      	add	r7, sp, #0
 800762a:	60f8      	str	r0, [r7, #12]
 800762c:	60b9      	str	r1, [r7, #8]
 800762e:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8007630:	2300      	movs	r3, #0
 8007632:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8007634:	68fb      	ldr	r3, [r7, #12]
 8007636:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800763a:	2b01      	cmp	r3, #1
 800763c:	d101      	bne.n	8007642 <HAL_ADC_Start_DMA+0x1e>
 800763e:	2302      	movs	r3, #2
 8007640:	e0e9      	b.n	8007816 <HAL_ADC_Start_DMA+0x1f2>
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2201      	movs	r2, #1
 8007646:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800764a:	68fb      	ldr	r3, [r7, #12]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	689b      	ldr	r3, [r3, #8]
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b01      	cmp	r3, #1
 8007656:	d018      	beq.n	800768a <HAL_ADC_Start_DMA+0x66>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689a      	ldr	r2, [r3, #8]
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f042 0201 	orr.w	r2, r2, #1
 8007666:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8007668:	4b6d      	ldr	r3, [pc, #436]	; (8007820 <HAL_ADC_Start_DMA+0x1fc>)
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	4a6d      	ldr	r2, [pc, #436]	; (8007824 <HAL_ADC_Start_DMA+0x200>)
 800766e:	fba2 2303 	umull	r2, r3, r2, r3
 8007672:	0c9a      	lsrs	r2, r3, #18
 8007674:	4613      	mov	r3, r2
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	4413      	add	r3, r2
 800767a:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 800767c:	e002      	b.n	8007684 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	3b01      	subs	r3, #1
 8007682:	613b      	str	r3, [r7, #16]
    while (counter != 0U)
 8007684:	693b      	ldr	r3, [r7, #16]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1f9      	bne.n	800767e <HAL_ADC_Start_DMA+0x5a>
    }
  }

  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if ((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	689b      	ldr	r3, [r3, #8]
 8007690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007694:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007698:	d107      	bne.n	80076aa <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689a      	ldr	r2, [r3, #8]
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80076a8:	609a      	str	r2, [r3, #8]
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	689b      	ldr	r3, [r3, #8]
 80076b0:	f003 0301 	and.w	r3, r3, #1
 80076b4:	2b01      	cmp	r3, #1
 80076b6:	f040 80a1 	bne.w	80077fc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076be:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80076c2:	f023 0301 	bic.w	r3, r3, #1
 80076c6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80076d8:	2b00      	cmp	r3, #0
 80076da:	d007      	beq.n	80076ec <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076e0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80076e4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80076f0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80076f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80076f8:	d106      	bne.n	8007708 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076fe:	f023 0206 	bic.w	r2, r3, #6
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	645a      	str	r2, [r3, #68]	; 0x44
 8007706:	e002      	b.n	800770e <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	2200      	movs	r2, #0
 800770c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	2200      	movs	r2, #0
 8007712:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007716:	4b44      	ldr	r3, [pc, #272]	; (8007828 <HAL_ADC_Start_DMA+0x204>)
 8007718:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800771e:	4a43      	ldr	r2, [pc, #268]	; (800782c <HAL_ADC_Start_DMA+0x208>)
 8007720:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007726:	4a42      	ldr	r2, [pc, #264]	; (8007830 <HAL_ADC_Start_DMA+0x20c>)
 8007728:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800772a:	68fb      	ldr	r3, [r7, #12]
 800772c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800772e:	4a41      	ldr	r2, [pc, #260]	; (8007834 <HAL_ADC_Start_DMA+0x210>)
 8007730:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800773a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	685a      	ldr	r2, [r3, #4]
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800774a:	605a      	str	r2, [r3, #4]

    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	689a      	ldr	r2, [r3, #8]
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800775a:	609a      	str	r2, [r3, #8]

    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	334c      	adds	r3, #76	; 0x4c
 8007766:	4619      	mov	r1, r3
 8007768:	68ba      	ldr	r2, [r7, #8]
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f000 ff18 	bl	80085a0 <HAL_DMA_Start_IT>

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8007770:	697b      	ldr	r3, [r7, #20]
 8007772:	685b      	ldr	r3, [r3, #4]
 8007774:	f003 031f 	and.w	r3, r3, #31
 8007778:	2b00      	cmp	r3, #0
 800777a:	d12a      	bne.n	80077d2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	4a2d      	ldr	r2, [pc, #180]	; (8007838 <HAL_ADC_Start_DMA+0x214>)
 8007782:	4293      	cmp	r3, r2
 8007784:	d015      	beq.n	80077b2 <HAL_ADC_Start_DMA+0x18e>
 8007786:	68fb      	ldr	r3, [r7, #12]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4a2c      	ldr	r2, [pc, #176]	; (800783c <HAL_ADC_Start_DMA+0x218>)
 800778c:	4293      	cmp	r3, r2
 800778e:	d105      	bne.n	800779c <HAL_ADC_Start_DMA+0x178>
 8007790:	4b25      	ldr	r3, [pc, #148]	; (8007828 <HAL_ADC_Start_DMA+0x204>)
 8007792:	685b      	ldr	r3, [r3, #4]
 8007794:	f003 031f 	and.w	r3, r3, #31
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <HAL_ADC_Start_DMA+0x18e>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	4a27      	ldr	r2, [pc, #156]	; (8007840 <HAL_ADC_Start_DMA+0x21c>)
 80077a2:	4293      	cmp	r3, r2
 80077a4:	d136      	bne.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
 80077a6:	4b20      	ldr	r3, [pc, #128]	; (8007828 <HAL_ADC_Start_DMA+0x204>)
 80077a8:	685b      	ldr	r3, [r3, #4]
 80077aa:	f003 0310 	and.w	r3, r3, #16
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d130      	bne.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689b      	ldr	r3, [r3, #8]
 80077b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d129      	bne.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	689a      	ldr	r2, [r3, #8]
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077ce:	609a      	str	r2, [r3, #8]
 80077d0:	e020      	b.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a18      	ldr	r2, [pc, #96]	; (8007838 <HAL_ADC_Start_DMA+0x214>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d11b      	bne.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d114      	bne.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	681b      	ldr	r3, [r3, #0]
 80077ee:	689a      	ldr	r2, [r3, #8]
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80077f8:	609a      	str	r2, [r3, #8]
 80077fa:	e00b      	b.n	8007814 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80077fc:	68fb      	ldr	r3, [r7, #12]
 80077fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007800:	f043 0210 	orr.w	r2, r3, #16
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800780c:	f043 0201 	orr.w	r2, r3, #1
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
 800781e:	bf00      	nop
 8007820:	200001a0 	.word	0x200001a0
 8007824:	431bde83 	.word	0x431bde83
 8007828:	40012300 	.word	0x40012300
 800782c:	08007cc9 	.word	0x08007cc9
 8007830:	08007d83 	.word	0x08007d83
 8007834:	08007d9f 	.word	0x08007d9f
 8007838:	40012000 	.word	0x40012000
 800783c:	40012100 	.word	0x40012100
 8007840:	40012200 	.word	0x40012200

08007844 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8007844:	b480      	push	{r7}
 8007846:	b083      	sub	sp, #12
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800784c:	bf00      	nop
 800784e:	370c      	adds	r7, #12
 8007850:	46bd      	mov	sp, r7
 8007852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007856:	4770      	bx	lr

08007858 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8007858:	b480      	push	{r7}
 800785a:	b083      	sub	sp, #12
 800785c:	af00      	add	r7, sp, #0
 800785e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8007860:	bf00      	nop
 8007862:	370c      	adds	r7, #12
 8007864:	46bd      	mov	sp, r7
 8007866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786a:	4770      	bx	lr

0800786c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	6078      	str	r0, [r7, #4]
 8007874:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007880:	2b01      	cmp	r3, #1
 8007882:	d101      	bne.n	8007888 <HAL_ADC_ConfigChannel+0x1c>
 8007884:	2302      	movs	r3, #2
 8007886:	e113      	b.n	8007ab0 <HAL_ADC_ConfigChannel+0x244>
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	2201      	movs	r2, #1
 800788c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8007890:	683b      	ldr	r3, [r7, #0]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	2b09      	cmp	r3, #9
 8007896:	d925      	bls.n	80078e4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	68d9      	ldr	r1, [r3, #12]
 800789e:	683b      	ldr	r3, [r7, #0]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	461a      	mov	r2, r3
 80078a6:	4613      	mov	r3, r2
 80078a8:	005b      	lsls	r3, r3, #1
 80078aa:	4413      	add	r3, r2
 80078ac:	3b1e      	subs	r3, #30
 80078ae:	2207      	movs	r2, #7
 80078b0:	fa02 f303 	lsl.w	r3, r2, r3
 80078b4:	43da      	mvns	r2, r3
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	400a      	ands	r2, r1
 80078bc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	68d9      	ldr	r1, [r3, #12]
 80078c4:	683b      	ldr	r3, [r7, #0]
 80078c6:	689a      	ldr	r2, [r3, #8]
 80078c8:	683b      	ldr	r3, [r7, #0]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	b29b      	uxth	r3, r3
 80078ce:	4618      	mov	r0, r3
 80078d0:	4603      	mov	r3, r0
 80078d2:	005b      	lsls	r3, r3, #1
 80078d4:	4403      	add	r3, r0
 80078d6:	3b1e      	subs	r3, #30
 80078d8:	409a      	lsls	r2, r3
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	60da      	str	r2, [r3, #12]
 80078e2:	e022      	b.n	800792a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	6919      	ldr	r1, [r3, #16]
 80078ea:	683b      	ldr	r3, [r7, #0]
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	b29b      	uxth	r3, r3
 80078f0:	461a      	mov	r2, r3
 80078f2:	4613      	mov	r3, r2
 80078f4:	005b      	lsls	r3, r3, #1
 80078f6:	4413      	add	r3, r2
 80078f8:	2207      	movs	r2, #7
 80078fa:	fa02 f303 	lsl.w	r3, r2, r3
 80078fe:	43da      	mvns	r2, r3
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	400a      	ands	r2, r1
 8007906:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	6919      	ldr	r1, [r3, #16]
 800790e:	683b      	ldr	r3, [r7, #0]
 8007910:	689a      	ldr	r2, [r3, #8]
 8007912:	683b      	ldr	r3, [r7, #0]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	b29b      	uxth	r3, r3
 8007918:	4618      	mov	r0, r3
 800791a:	4603      	mov	r3, r0
 800791c:	005b      	lsls	r3, r3, #1
 800791e:	4403      	add	r3, r0
 8007920:	409a      	lsls	r2, r3
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	430a      	orrs	r2, r1
 8007928:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	685b      	ldr	r3, [r3, #4]
 800792e:	2b06      	cmp	r3, #6
 8007930:	d824      	bhi.n	800797c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	685a      	ldr	r2, [r3, #4]
 800793c:	4613      	mov	r3, r2
 800793e:	009b      	lsls	r3, r3, #2
 8007940:	4413      	add	r3, r2
 8007942:	3b05      	subs	r3, #5
 8007944:	221f      	movs	r2, #31
 8007946:	fa02 f303 	lsl.w	r3, r2, r3
 800794a:	43da      	mvns	r2, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	400a      	ands	r2, r1
 8007952:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800795a:	683b      	ldr	r3, [r7, #0]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	b29b      	uxth	r3, r3
 8007960:	4618      	mov	r0, r3
 8007962:	683b      	ldr	r3, [r7, #0]
 8007964:	685a      	ldr	r2, [r3, #4]
 8007966:	4613      	mov	r3, r2
 8007968:	009b      	lsls	r3, r3, #2
 800796a:	4413      	add	r3, r2
 800796c:	3b05      	subs	r3, #5
 800796e:	fa00 f203 	lsl.w	r2, r0, r3
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	430a      	orrs	r2, r1
 8007978:	635a      	str	r2, [r3, #52]	; 0x34
 800797a:	e04c      	b.n	8007a16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	685b      	ldr	r3, [r3, #4]
 8007980:	2b0c      	cmp	r3, #12
 8007982:	d824      	bhi.n	80079ce <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685a      	ldr	r2, [r3, #4]
 800798e:	4613      	mov	r3, r2
 8007990:	009b      	lsls	r3, r3, #2
 8007992:	4413      	add	r3, r2
 8007994:	3b23      	subs	r3, #35	; 0x23
 8007996:	221f      	movs	r2, #31
 8007998:	fa02 f303 	lsl.w	r3, r2, r3
 800799c:	43da      	mvns	r2, r3
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	400a      	ands	r2, r1
 80079a4:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80079ac:	683b      	ldr	r3, [r7, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	b29b      	uxth	r3, r3
 80079b2:	4618      	mov	r0, r3
 80079b4:	683b      	ldr	r3, [r7, #0]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	4613      	mov	r3, r2
 80079ba:	009b      	lsls	r3, r3, #2
 80079bc:	4413      	add	r3, r2
 80079be:	3b23      	subs	r3, #35	; 0x23
 80079c0:	fa00 f203 	lsl.w	r2, r0, r3
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	430a      	orrs	r2, r1
 80079ca:	631a      	str	r2, [r3, #48]	; 0x30
 80079cc:	e023      	b.n	8007a16 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079d4:	683b      	ldr	r3, [r7, #0]
 80079d6:	685a      	ldr	r2, [r3, #4]
 80079d8:	4613      	mov	r3, r2
 80079da:	009b      	lsls	r3, r3, #2
 80079dc:	4413      	add	r3, r2
 80079de:	3b41      	subs	r3, #65	; 0x41
 80079e0:	221f      	movs	r2, #31
 80079e2:	fa02 f303 	lsl.w	r3, r2, r3
 80079e6:	43da      	mvns	r2, r3
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	400a      	ands	r2, r1
 80079ee:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80079f6:	683b      	ldr	r3, [r7, #0]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	b29b      	uxth	r3, r3
 80079fc:	4618      	mov	r0, r3
 80079fe:	683b      	ldr	r3, [r7, #0]
 8007a00:	685a      	ldr	r2, [r3, #4]
 8007a02:	4613      	mov	r3, r2
 8007a04:	009b      	lsls	r3, r3, #2
 8007a06:	4413      	add	r3, r2
 8007a08:	3b41      	subs	r3, #65	; 0x41
 8007a0a:	fa00 f203 	lsl.w	r2, r0, r3
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	430a      	orrs	r2, r1
 8007a14:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007a16:	4b29      	ldr	r3, [pc, #164]	; (8007abc <HAL_ADC_ConfigChannel+0x250>)
 8007a18:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	4a28      	ldr	r2, [pc, #160]	; (8007ac0 <HAL_ADC_ConfigChannel+0x254>)
 8007a20:	4293      	cmp	r3, r2
 8007a22:	d10f      	bne.n	8007a44 <HAL_ADC_ConfigChannel+0x1d8>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	2b12      	cmp	r3, #18
 8007a2a:	d10b      	bne.n	8007a44 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8007a40:	68fb      	ldr	r3, [r7, #12]
 8007a42:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a1d      	ldr	r2, [pc, #116]	; (8007ac0 <HAL_ADC_ConfigChannel+0x254>)
 8007a4a:	4293      	cmp	r3, r2
 8007a4c:	d12b      	bne.n	8007aa6 <HAL_ADC_ConfigChannel+0x23a>
 8007a4e:	683b      	ldr	r3, [r7, #0]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	4a1c      	ldr	r2, [pc, #112]	; (8007ac4 <HAL_ADC_ConfigChannel+0x258>)
 8007a54:	4293      	cmp	r3, r2
 8007a56:	d003      	beq.n	8007a60 <HAL_ADC_ConfigChannel+0x1f4>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	2b11      	cmp	r3, #17
 8007a5e:	d122      	bne.n	8007aa6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	685b      	ldr	r3, [r3, #4]
 8007a64:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	685b      	ldr	r3, [r3, #4]
 8007a70:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a11      	ldr	r2, [pc, #68]	; (8007ac4 <HAL_ADC_ConfigChannel+0x258>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d111      	bne.n	8007aa6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8007a82:	4b11      	ldr	r3, [pc, #68]	; (8007ac8 <HAL_ADC_ConfigChannel+0x25c>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	4a11      	ldr	r2, [pc, #68]	; (8007acc <HAL_ADC_ConfigChannel+0x260>)
 8007a88:	fba2 2303 	umull	r2, r3, r2, r3
 8007a8c:	0c9a      	lsrs	r2, r3, #18
 8007a8e:	4613      	mov	r3, r2
 8007a90:	009b      	lsls	r3, r3, #2
 8007a92:	4413      	add	r3, r2
 8007a94:	005b      	lsls	r3, r3, #1
 8007a96:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8007a98:	e002      	b.n	8007aa0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8007a9a:	68bb      	ldr	r3, [r7, #8]
 8007a9c:	3b01      	subs	r3, #1
 8007a9e:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1f9      	bne.n	8007a9a <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	2200      	movs	r2, #0
 8007aaa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8007aae:	2300      	movs	r3, #0
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	3714      	adds	r7, #20
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aba:	4770      	bx	lr
 8007abc:	40012300 	.word	0x40012300
 8007ac0:	40012000 	.word	0x40012000
 8007ac4:	10000012 	.word	0x10000012
 8007ac8:	200001a0 	.word	0x200001a0
 8007acc:	431bde83 	.word	0x431bde83

08007ad0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8007ad0:	b480      	push	{r7}
 8007ad2:	b085      	sub	sp, #20
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8007ad8:	4b79      	ldr	r3, [pc, #484]	; (8007cc0 <ADC_Init+0x1f0>)
 8007ada:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	685a      	ldr	r2, [r3, #4]
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	685b      	ldr	r3, [r3, #4]
 8007af0:	431a      	orrs	r2, r3
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	685a      	ldr	r2, [r3, #4]
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007b04:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	6859      	ldr	r1, [r3, #4]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	691b      	ldr	r3, [r3, #16]
 8007b10:	021a      	lsls	r2, r3, #8
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	430a      	orrs	r2, r1
 8007b18:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	685a      	ldr	r2, [r3, #4]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8007b28:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	6859      	ldr	r1, [r3, #4]
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	689a      	ldr	r2, [r3, #8]
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	430a      	orrs	r2, r1
 8007b3a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	689a      	ldr	r2, [r3, #8]
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007b4a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	6899      	ldr	r1, [r3, #8]
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	68da      	ldr	r2, [r3, #12]
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	681b      	ldr	r3, [r3, #0]
 8007b5a:	430a      	orrs	r2, r1
 8007b5c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b62:	4a58      	ldr	r2, [pc, #352]	; (8007cc4 <ADC_Init+0x1f4>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d022      	beq.n	8007bae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	689a      	ldr	r2, [r3, #8]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007b76:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	6899      	ldr	r1, [r3, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	430a      	orrs	r2, r1
 8007b88:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	689a      	ldr	r2, [r3, #8]
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007b98:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	6899      	ldr	r1, [r3, #8]
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	430a      	orrs	r2, r1
 8007baa:	609a      	str	r2, [r3, #8]
 8007bac:	e00f      	b.n	8007bce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	689a      	ldr	r2, [r3, #8]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007bbc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	689a      	ldr	r2, [r3, #8]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8007bcc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	689a      	ldr	r2, [r3, #8]
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f022 0202 	bic.w	r2, r2, #2
 8007bdc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	6899      	ldr	r1, [r3, #8]
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	7e1b      	ldrb	r3, [r3, #24]
 8007be8:	005a      	lsls	r2, r3, #1
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	430a      	orrs	r2, r1
 8007bf0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007bf8:	2b00      	cmp	r3, #0
 8007bfa:	d01b      	beq.n	8007c34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	685a      	ldr	r2, [r3, #4]
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007c0a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	685a      	ldr	r2, [r3, #4]
 8007c12:	687b      	ldr	r3, [r7, #4]
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8007c1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	6859      	ldr	r1, [r3, #4]
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007c26:	3b01      	subs	r3, #1
 8007c28:	035a      	lsls	r2, r3, #13
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	430a      	orrs	r2, r1
 8007c30:	605a      	str	r2, [r3, #4]
 8007c32:	e007      	b.n	8007c44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	685a      	ldr	r2, [r3, #4]
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8007c42:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8007c52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	3b01      	subs	r3, #1
 8007c60:	051a      	lsls	r2, r3, #20
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	430a      	orrs	r2, r1
 8007c68:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	689a      	ldr	r2, [r3, #8]
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8007c78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	6899      	ldr	r1, [r3, #8]
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007c86:	025a      	lsls	r2, r3, #9
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	430a      	orrs	r2, r1
 8007c8e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	689a      	ldr	r2, [r3, #8]
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007c9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	6899      	ldr	r1, [r3, #8]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	695b      	ldr	r3, [r3, #20]
 8007caa:	029a      	lsls	r2, r3, #10
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	430a      	orrs	r2, r1
 8007cb2:	609a      	str	r2, [r3, #8]
}
 8007cb4:	bf00      	nop
 8007cb6:	3714      	adds	r7, #20
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cbe:	4770      	bx	lr
 8007cc0:	40012300 	.word	0x40012300
 8007cc4:	0f000001 	.word	0x0f000001

08007cc8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b084      	sub	sp, #16
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cd4:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cda:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d13c      	bne.n	8007d5c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	689b      	ldr	r3, [r3, #8]
 8007cf4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d12b      	bne.n	8007d54 <ADC_DMAConvCplt+0x8c>
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007cfc:	68fb      	ldr	r3, [r7, #12]
 8007cfe:	7e1b      	ldrb	r3, [r3, #24]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d127      	bne.n	8007d54 <ADC_DMAConvCplt+0x8c>
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d0a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
        (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d006      	beq.n	8007d20 <ADC_DMAConvCplt+0x58>
         HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8007d12:	68fb      	ldr	r3, [r7, #12]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d119      	bne.n	8007d54 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	685a      	ldr	r2, [r3, #4]
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	f022 0220 	bic.w	r2, r2, #32
 8007d2e:	605a      	str	r2, [r3, #4]

      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8007d30:	68fb      	ldr	r3, [r7, #12]
 8007d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d34:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	d105      	bne.n	8007d54 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4c:	f043 0201 	orr.w	r2, r3, #1
 8007d50:	68fb      	ldr	r3, [r7, #12]
 8007d52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8007d54:	68f8      	ldr	r0, [r7, #12]
 8007d56:	f7fb fd59 	bl	800380c <HAL_ADC_ConvCpltCallback>
    {
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8007d5a:	e00e      	b.n	8007d7a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8007d5c:	68fb      	ldr	r3, [r7, #12]
 8007d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d60:	f003 0310 	and.w	r3, r3, #16
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d003      	beq.n	8007d70 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8007d68:	68f8      	ldr	r0, [r7, #12]
 8007d6a:	f7ff fd75 	bl	8007858 <HAL_ADC_ErrorCallback>
}
 8007d6e:	e004      	b.n	8007d7a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8007d70:	68fb      	ldr	r3, [r7, #12]
 8007d72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	4798      	blx	r3
}
 8007d7a:	bf00      	nop
 8007d7c:	3710      	adds	r7, #16
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	bd80      	pop	{r7, pc}

08007d82 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8007d82:	b580      	push	{r7, lr}
 8007d84:	b084      	sub	sp, #16
 8007d86:	af00      	add	r7, sp, #0
 8007d88:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d8e:	60fb      	str	r3, [r7, #12]
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8007d90:	68f8      	ldr	r0, [r7, #12]
 8007d92:	f7fb fc7d 	bl	8003690 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007d96:	bf00      	nop
 8007d98:	3710      	adds	r7, #16
 8007d9a:	46bd      	mov	sp, r7
 8007d9c:	bd80      	pop	{r7, pc}

08007d9e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8007d9e:	b580      	push	{r7, lr}
 8007da0:	b084      	sub	sp, #16
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007daa:	60fb      	str	r3, [r7, #12]
  hadc->State = HAL_ADC_STATE_ERROR_DMA;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2240      	movs	r2, #64	; 0x40
 8007db0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db6:	f043 0204 	orr.w	r2, r3, #4
 8007dba:	68fb      	ldr	r3, [r7, #12]
 8007dbc:	645a      	str	r2, [r3, #68]	; 0x44
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8007dbe:	68f8      	ldr	r0, [r7, #12]
 8007dc0:	f7ff fd4a 	bl	8007858 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8007dc4:	bf00      	nop
 8007dc6:	3710      	adds	r7, #16
 8007dc8:	46bd      	mov	sp, r7
 8007dca:	bd80      	pop	{r7, pc}

08007dcc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 8007dd4:	bf00      	nop
 8007dd6:	370c      	adds	r7, #12
 8007dd8:	46bd      	mov	sp, r7
 8007dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dde:	4770      	bx	lr

08007de0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007de0:	b480      	push	{r7}
 8007de2:	b085      	sub	sp, #20
 8007de4:	af00      	add	r7, sp, #0
 8007de6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f003 0307 	and.w	r3, r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007df0:	4b0c      	ldr	r3, [pc, #48]	; (8007e24 <__NVIC_SetPriorityGrouping+0x44>)
 8007df2:	68db      	ldr	r3, [r3, #12]
 8007df4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007df6:	68ba      	ldr	r2, [r7, #8]
 8007df8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007dfc:	4013      	ands	r3, r2
 8007dfe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007e04:	68bb      	ldr	r3, [r7, #8]
 8007e06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007e08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007e0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007e10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007e12:	4a04      	ldr	r2, [pc, #16]	; (8007e24 <__NVIC_SetPriorityGrouping+0x44>)
 8007e14:	68bb      	ldr	r3, [r7, #8]
 8007e16:	60d3      	str	r3, [r2, #12]
}
 8007e18:	bf00      	nop
 8007e1a:	3714      	adds	r7, #20
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e22:	4770      	bx	lr
 8007e24:	e000ed00 	.word	0xe000ed00

08007e28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e28:	b480      	push	{r7}
 8007e2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e2c:	4b04      	ldr	r3, [pc, #16]	; (8007e40 <__NVIC_GetPriorityGrouping+0x18>)
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	0a1b      	lsrs	r3, r3, #8
 8007e32:	f003 0307 	and.w	r3, r3, #7
}
 8007e36:	4618      	mov	r0, r3
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3e:	4770      	bx	lr
 8007e40:	e000ed00 	.word	0xe000ed00

08007e44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	4603      	mov	r3, r0
 8007e4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e52:	2b00      	cmp	r3, #0
 8007e54:	db0b      	blt.n	8007e6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e56:	79fb      	ldrb	r3, [r7, #7]
 8007e58:	f003 021f 	and.w	r2, r3, #31
 8007e5c:	4907      	ldr	r1, [pc, #28]	; (8007e7c <__NVIC_EnableIRQ+0x38>)
 8007e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e62:	095b      	lsrs	r3, r3, #5
 8007e64:	2001      	movs	r0, #1
 8007e66:	fa00 f202 	lsl.w	r2, r0, r2
 8007e6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	e000e100 	.word	0xe000e100

08007e80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	4603      	mov	r3, r0
 8007e88:	6039      	str	r1, [r7, #0]
 8007e8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	db0a      	blt.n	8007eaa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e94:	683b      	ldr	r3, [r7, #0]
 8007e96:	b2da      	uxtb	r2, r3
 8007e98:	490c      	ldr	r1, [pc, #48]	; (8007ecc <__NVIC_SetPriority+0x4c>)
 8007e9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e9e:	0112      	lsls	r2, r2, #4
 8007ea0:	b2d2      	uxtb	r2, r2
 8007ea2:	440b      	add	r3, r1
 8007ea4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007ea8:	e00a      	b.n	8007ec0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007eaa:	683b      	ldr	r3, [r7, #0]
 8007eac:	b2da      	uxtb	r2, r3
 8007eae:	4908      	ldr	r1, [pc, #32]	; (8007ed0 <__NVIC_SetPriority+0x50>)
 8007eb0:	79fb      	ldrb	r3, [r7, #7]
 8007eb2:	f003 030f 	and.w	r3, r3, #15
 8007eb6:	3b04      	subs	r3, #4
 8007eb8:	0112      	lsls	r2, r2, #4
 8007eba:	b2d2      	uxtb	r2, r2
 8007ebc:	440b      	add	r3, r1
 8007ebe:	761a      	strb	r2, [r3, #24]
}
 8007ec0:	bf00      	nop
 8007ec2:	370c      	adds	r7, #12
 8007ec4:	46bd      	mov	sp, r7
 8007ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eca:	4770      	bx	lr
 8007ecc:	e000e100 	.word	0xe000e100
 8007ed0:	e000ed00 	.word	0xe000ed00

08007ed4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ed4:	b480      	push	{r7}
 8007ed6:	b089      	sub	sp, #36	; 0x24
 8007ed8:	af00      	add	r7, sp, #0
 8007eda:	60f8      	str	r0, [r7, #12]
 8007edc:	60b9      	str	r1, [r7, #8]
 8007ede:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f003 0307 	and.w	r3, r3, #7
 8007ee6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ee8:	69fb      	ldr	r3, [r7, #28]
 8007eea:	f1c3 0307 	rsb	r3, r3, #7
 8007eee:	2b04      	cmp	r3, #4
 8007ef0:	bf28      	it	cs
 8007ef2:	2304      	movcs	r3, #4
 8007ef4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	3304      	adds	r3, #4
 8007efa:	2b06      	cmp	r3, #6
 8007efc:	d902      	bls.n	8007f04 <NVIC_EncodePriority+0x30>
 8007efe:	69fb      	ldr	r3, [r7, #28]
 8007f00:	3b03      	subs	r3, #3
 8007f02:	e000      	b.n	8007f06 <NVIC_EncodePriority+0x32>
 8007f04:	2300      	movs	r3, #0
 8007f06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f08:	f04f 32ff 	mov.w	r2, #4294967295
 8007f0c:	69bb      	ldr	r3, [r7, #24]
 8007f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007f12:	43da      	mvns	r2, r3
 8007f14:	68bb      	ldr	r3, [r7, #8]
 8007f16:	401a      	ands	r2, r3
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f1c:	f04f 31ff 	mov.w	r1, #4294967295
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	fa01 f303 	lsl.w	r3, r1, r3
 8007f26:	43d9      	mvns	r1, r3
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f2c:	4313      	orrs	r3, r2
         );
}
 8007f2e:	4618      	mov	r0, r3
 8007f30:	3724      	adds	r7, #36	; 0x24
 8007f32:	46bd      	mov	sp, r7
 8007f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f38:	4770      	bx	lr

08007f3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f3a:	b580      	push	{r7, lr}
 8007f3c:	b082      	sub	sp, #8
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f42:	6878      	ldr	r0, [r7, #4]
 8007f44:	f7ff ff4c 	bl	8007de0 <__NVIC_SetPriorityGrouping>
}
 8007f48:	bf00      	nop
 8007f4a:	3708      	adds	r7, #8
 8007f4c:	46bd      	mov	sp, r7
 8007f4e:	bd80      	pop	{r7, pc}

08007f50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007f50:	b580      	push	{r7, lr}
 8007f52:	b086      	sub	sp, #24
 8007f54:	af00      	add	r7, sp, #0
 8007f56:	4603      	mov	r3, r0
 8007f58:	60b9      	str	r1, [r7, #8]
 8007f5a:	607a      	str	r2, [r7, #4]
 8007f5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007f5e:	2300      	movs	r3, #0
 8007f60:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007f62:	f7ff ff61 	bl	8007e28 <__NVIC_GetPriorityGrouping>
 8007f66:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	68b9      	ldr	r1, [r7, #8]
 8007f6c:	6978      	ldr	r0, [r7, #20]
 8007f6e:	f7ff ffb1 	bl	8007ed4 <NVIC_EncodePriority>
 8007f72:	4602      	mov	r2, r0
 8007f74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f78:	4611      	mov	r1, r2
 8007f7a:	4618      	mov	r0, r3
 8007f7c:	f7ff ff80 	bl	8007e80 <__NVIC_SetPriority>
}
 8007f80:	bf00      	nop
 8007f82:	3718      	adds	r7, #24
 8007f84:	46bd      	mov	sp, r7
 8007f86:	bd80      	pop	{r7, pc}

08007f88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b082      	sub	sp, #8
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	4603      	mov	r3, r0
 8007f90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f96:	4618      	mov	r0, r3
 8007f98:	f7ff ff54 	bl	8007e44 <__NVIC_EnableIRQ>
}
 8007f9c:	bf00      	nop
 8007f9e:	3708      	adds	r7, #8
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b082      	sub	sp, #8
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d101      	bne.n	8007fb6 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8007fb2:	2301      	movs	r3, #1
 8007fb4:	e014      	b.n	8007fe0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	791b      	ldrb	r3, [r3, #4]
 8007fba:	b2db      	uxtb	r3, r3
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	d105      	bne.n	8007fcc <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2200      	movs	r2, #0
 8007fc4:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007fc6:	6878      	ldr	r0, [r7, #4]
 8007fc8:	f7fe fcd6 	bl	8006978 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2202      	movs	r2, #2
 8007fd0:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2201      	movs	r2, #1
 8007fdc:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007fde:	2300      	movs	r3, #0
}
 8007fe0:	4618      	mov	r0, r3
 8007fe2:	3708      	adds	r7, #8
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	bd80      	pop	{r7, pc}

08007fe8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, const uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007fe8:	b580      	push	{r7, lr}
 8007fea:	b086      	sub	sp, #24
 8007fec:	af00      	add	r7, sp, #0
 8007fee:	60f8      	str	r0, [r7, #12]
 8007ff0:	60b9      	str	r1, [r7, #8]
 8007ff2:	607a      	str	r2, [r7, #4]
 8007ff4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007ff6:	2301      	movs	r3, #1
 8007ff8:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg;

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d101      	bne.n	8008004 <HAL_DAC_Start_DMA+0x1c>
  {
    return HAL_ERROR;
 8008000:	2301      	movs	r3, #1
 8008002:	e0a2      	b.n	800814a <HAL_DAC_Start_DMA+0x162>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008004:	68fb      	ldr	r3, [r7, #12]
 8008006:	795b      	ldrb	r3, [r3, #5]
 8008008:	2b01      	cmp	r3, #1
 800800a:	d101      	bne.n	8008010 <HAL_DAC_Start_DMA+0x28>
 800800c:	2302      	movs	r3, #2
 800800e:	e09c      	b.n	800814a <HAL_DAC_Start_DMA+0x162>
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	2201      	movs	r2, #1
 8008014:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	2202      	movs	r2, #2
 800801a:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800801c:	68bb      	ldr	r3, [r7, #8]
 800801e:	2b00      	cmp	r3, #0
 8008020:	d129      	bne.n	8008076 <HAL_DAC_Start_DMA+0x8e>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008022:	68fb      	ldr	r3, [r7, #12]
 8008024:	689b      	ldr	r3, [r3, #8]
 8008026:	4a4b      	ldr	r2, [pc, #300]	; (8008154 <HAL_DAC_Start_DMA+0x16c>)
 8008028:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	689b      	ldr	r3, [r3, #8]
 800802e:	4a4a      	ldr	r2, [pc, #296]	; (8008158 <HAL_DAC_Start_DMA+0x170>)
 8008030:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	689b      	ldr	r3, [r3, #8]
 8008036:	4a49      	ldr	r2, [pc, #292]	; (800815c <HAL_DAC_Start_DMA+0x174>)
 8008038:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	681a      	ldr	r2, [r3, #0]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008048:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d003      	beq.n	8008058 <HAL_DAC_Start_DMA+0x70>
 8008050:	6a3b      	ldr	r3, [r7, #32]
 8008052:	2b04      	cmp	r3, #4
 8008054:	d005      	beq.n	8008062 <HAL_DAC_Start_DMA+0x7a>
 8008056:	e009      	b.n	800806c <HAL_DAC_Start_DMA+0x84>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008058:	68fb      	ldr	r3, [r7, #12]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	3308      	adds	r3, #8
 800805e:	613b      	str	r3, [r7, #16]
        break;
 8008060:	e033      	b.n	80080ca <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	330c      	adds	r3, #12
 8008068:	613b      	str	r3, [r7, #16]
        break;
 800806a:	e02e      	b.n	80080ca <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	3310      	adds	r3, #16
 8008072:	613b      	str	r3, [r7, #16]
        break;
 8008074:	e029      	b.n	80080ca <HAL_DAC_Start_DMA+0xe2>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	68db      	ldr	r3, [r3, #12]
 800807a:	4a39      	ldr	r2, [pc, #228]	; (8008160 <HAL_DAC_Start_DMA+0x178>)
 800807c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	68db      	ldr	r3, [r3, #12]
 8008082:	4a38      	ldr	r2, [pc, #224]	; (8008164 <HAL_DAC_Start_DMA+0x17c>)
 8008084:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008086:	68fb      	ldr	r3, [r7, #12]
 8008088:	68db      	ldr	r3, [r3, #12]
 800808a:	4a37      	ldr	r2, [pc, #220]	; (8008168 <HAL_DAC_Start_DMA+0x180>)
 800808c:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	681a      	ldr	r2, [r3, #0]
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800809c:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800809e:	6a3b      	ldr	r3, [r7, #32]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d003      	beq.n	80080ac <HAL_DAC_Start_DMA+0xc4>
 80080a4:	6a3b      	ldr	r3, [r7, #32]
 80080a6:	2b04      	cmp	r3, #4
 80080a8:	d005      	beq.n	80080b6 <HAL_DAC_Start_DMA+0xce>
 80080aa:	e009      	b.n	80080c0 <HAL_DAC_Start_DMA+0xd8>
    {
      case DAC_ALIGN_12B_R:
        /* Get DHR12R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3314      	adds	r3, #20
 80080b2:	613b      	str	r3, [r7, #16]
        break;
 80080b4:	e009      	b.n	80080ca <HAL_DAC_Start_DMA+0xe2>
      case DAC_ALIGN_12B_L:
        /* Get DHR12L2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	3318      	adds	r3, #24
 80080bc:	613b      	str	r3, [r7, #16]
        break;
 80080be:	e004      	b.n	80080ca <HAL_DAC_Start_DMA+0xe2>
      default: /* case DAC_ALIGN_8B_R */
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	331c      	adds	r3, #28
 80080c6:	613b      	str	r3, [r7, #16]
        break;
 80080c8:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
  if (Channel == DAC_CHANNEL_1)
 80080ca:	68bb      	ldr	r3, [r7, #8]
 80080cc:	2b00      	cmp	r3, #0
 80080ce:	d111      	bne.n	80080f4 <HAL_DAC_Start_DMA+0x10c>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	681a      	ldr	r2, [r3, #0]
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080de:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	6898      	ldr	r0, [r3, #8]
 80080e4:	6879      	ldr	r1, [r7, #4]
 80080e6:	683b      	ldr	r3, [r7, #0]
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	f000 fa59 	bl	80085a0 <HAL_DMA_Start_IT>
 80080ee:	4603      	mov	r3, r0
 80080f0:	75fb      	strb	r3, [r7, #23]
 80080f2:	e010      	b.n	8008116 <HAL_DAC_Start_DMA+0x12e>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8008102:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	68d8      	ldr	r0, [r3, #12]
 8008108:	6879      	ldr	r1, [r7, #4]
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	693a      	ldr	r2, [r7, #16]
 800810e:	f000 fa47 	bl	80085a0 <HAL_DMA_Start_IT>
 8008112:	4603      	mov	r3, r0
 8008114:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	2200      	movs	r2, #0
 800811a:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800811c:	7dfb      	ldrb	r3, [r7, #23]
 800811e:	2b00      	cmp	r3, #0
 8008120:	d10c      	bne.n	800813c <HAL_DAC_Start_DMA+0x154>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	681b      	ldr	r3, [r3, #0]
 8008126:	6819      	ldr	r1, [r3, #0]
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	f003 0310 	and.w	r3, r3, #16
 800812e:	2201      	movs	r2, #1
 8008130:	409a      	lsls	r2, r3
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	430a      	orrs	r2, r1
 8008138:	601a      	str	r2, [r3, #0]
 800813a:	e005      	b.n	8008148 <HAL_DAC_Start_DMA+0x160>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	691b      	ldr	r3, [r3, #16]
 8008140:	f043 0204 	orr.w	r2, r3, #4
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8008148:	7dfb      	ldrb	r3, [r7, #23]
}
 800814a:	4618      	mov	r0, r3
 800814c:	3718      	adds	r7, #24
 800814e:	46bd      	mov	sp, r7
 8008150:	bd80      	pop	{r7, pc}
 8008152:	bf00      	nop
 8008154:	0800831b 	.word	0x0800831b
 8008158:	0800833d 	.word	0x0800833d
 800815c:	08008359 	.word	0x08008359
 8008160:	080083d7 	.word	0x080083d7
 8008164:	080083f9 	.word	0x080083f9
 8008168:	08008415 	.word	0x08008415

0800816c <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 800816c:	b580      	push	{r7, lr}
 800816e:	b084      	sub	sp, #16
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hdac->Instance->CR;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = hdac->Instance->SR;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008182:	60bb      	str	r3, [r7, #8]

  if ((itsource & DAC_IT_DMAUDR1) == DAC_IT_DMAUDR1)
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800818a:	2b00      	cmp	r3, #0
 800818c:	d01d      	beq.n	80081ca <HAL_DAC_IRQHandler+0x5e>
  {
    /* Check underrun flag of DAC channel 1 */
    if ((itflag & DAC_FLAG_DMAUDR1) == DAC_FLAG_DMAUDR1)
 800818e:	68bb      	ldr	r3, [r7, #8]
 8008190:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008194:	2b00      	cmp	r3, #0
 8008196:	d018      	beq.n	80081ca <HAL_DAC_IRQHandler+0x5e>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	2204      	movs	r2, #4
 800819c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	691b      	ldr	r3, [r3, #16]
 80081a2:	f043 0201 	orr.w	r2, r3, #1
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80081b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN1);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	681b      	ldr	r3, [r3, #0]
 80081b8:	681a      	ldr	r2, [r3, #0]
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081c2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80081c4:	6878      	ldr	r0, [r7, #4]
 80081c6:	f000 f845 	bl	8008254 <HAL_DAC_DMAUnderrunCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }

#if defined(DAC_CHANNEL2_SUPPORT)
  if ((itsource & DAC_IT_DMAUDR2) == DAC_IT_DMAUDR2)
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081d0:	2b00      	cmp	r3, #0
 80081d2:	d01d      	beq.n	8008210 <HAL_DAC_IRQHandler+0xa4>
  {
    /* Check underrun flag of DAC channel 2 */
    if ((itflag & DAC_FLAG_DMAUDR2) == DAC_FLAG_DMAUDR2)
 80081d4:	68bb      	ldr	r3, [r7, #8]
 80081d6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d018      	beq.n	8008210 <HAL_DAC_IRQHandler+0xa4>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2204      	movs	r2, #4
 80081e2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	691b      	ldr	r3, [r3, #16]
 80081e8:	f043 0202 	orr.w	r2, r3, #2
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80081f8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      __HAL_DAC_DISABLE_IT(hdac, DAC_CR_DMAEN2);
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	681b      	ldr	r3, [r3, #0]
 80081fe:	681a      	ldr	r2, [r3, #0]
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8008208:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800820a:	6878      	ldr	r0, [r7, #4]
 800820c:	f000 f8d9 	bl	80083c2 <HAL_DACEx_DMAUnderrunCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */
}
 8008210:	bf00      	nop
 8008212:	3710      	adds	r7, #16
 8008214:	46bd      	mov	sp, r7
 8008216:	bd80      	pop	{r7, pc}

08008218 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008218:	b480      	push	{r7}
 800821a:	b083      	sub	sp, #12
 800821c:	af00      	add	r7, sp, #0
 800821e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8008220:	bf00      	nop
 8008222:	370c      	adds	r7, #12
 8008224:	46bd      	mov	sp, r7
 8008226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822a:	4770      	bx	lr

0800822c <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800822c:	b480      	push	{r7}
 800822e:	b083      	sub	sp, #12
 8008230:	af00      	add	r7, sp, #0
 8008232:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8008234:	bf00      	nop
 8008236:	370c      	adds	r7, #12
 8008238:	46bd      	mov	sp, r7
 800823a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800823e:	4770      	bx	lr

08008240 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8008248:	bf00      	nop
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr

08008254 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008254:	b480      	push	{r7}
 8008256:	b083      	sub	sp, #12
 8008258:	af00      	add	r7, sp, #0
 800825a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 800825c:	bf00      	nop
 800825e:	370c      	adds	r7, #12
 8008260:	46bd      	mov	sp, r7
 8008262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008266:	4770      	bx	lr

08008268 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008268:	b480      	push	{r7}
 800826a:	b089      	sub	sp, #36	; 0x24
 800826c:	af00      	add	r7, sp, #0
 800826e:	60f8      	str	r0, [r7, #12]
 8008270:	60b9      	str	r1, [r7, #8]
 8008272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008274:	2300      	movs	r3, #0
 8008276:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8008278:	68fb      	ldr	r3, [r7, #12]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d002      	beq.n	8008284 <HAL_DAC_ConfigChannel+0x1c>
 800827e:	68bb      	ldr	r3, [r7, #8]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d101      	bne.n	8008288 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8008284:	2301      	movs	r3, #1
 8008286:	e042      	b.n	800830e <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	795b      	ldrb	r3, [r3, #5]
 800828c:	2b01      	cmp	r3, #1
 800828e:	d101      	bne.n	8008294 <HAL_DAC_ConfigChannel+0x2c>
 8008290:	2302      	movs	r3, #2
 8008292:	e03c      	b.n	800830e <HAL_DAC_ConfigChannel+0xa6>
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	2201      	movs	r2, #1
 8008298:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	2202      	movs	r2, #2
 800829e:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	f003 0310 	and.w	r3, r3, #16
 80082ae:	f640 72fe 	movw	r2, #4094	; 0xffe
 80082b2:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 80082b6:	43db      	mvns	r3, r3
 80082b8:	69ba      	ldr	r2, [r7, #24]
 80082ba:	4013      	ands	r3, r2
 80082bc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80082be:	68bb      	ldr	r3, [r7, #8]
 80082c0:	681a      	ldr	r2, [r3, #0]
 80082c2:	68bb      	ldr	r3, [r7, #8]
 80082c4:	685b      	ldr	r3, [r3, #4]
 80082c6:	4313      	orrs	r3, r2
 80082c8:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	f003 0310 	and.w	r3, r3, #16
 80082d0:	697a      	ldr	r2, [r7, #20]
 80082d2:	fa02 f303 	lsl.w	r3, r2, r3
 80082d6:	69ba      	ldr	r2, [r7, #24]
 80082d8:	4313      	orrs	r3, r2
 80082da:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	6819      	ldr	r1, [r3, #0]
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f003 0310 	and.w	r3, r3, #16
 80082f0:	22c0      	movs	r2, #192	; 0xc0
 80082f2:	fa02 f303 	lsl.w	r3, r2, r3
 80082f6:	43da      	mvns	r2, r3
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	400a      	ands	r2, r1
 80082fe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008300:	68fb      	ldr	r3, [r7, #12]
 8008302:	2201      	movs	r2, #1
 8008304:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 800830c:	7ffb      	ldrb	r3, [r7, #31]
}
 800830e:	4618      	mov	r0, r3
 8008310:	3724      	adds	r7, #36	; 0x24
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr

0800831a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800831a:	b580      	push	{r7, lr}
 800831c:	b084      	sub	sp, #16
 800831e:	af00      	add	r7, sp, #0
 8008320:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008326:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008328:	68f8      	ldr	r0, [r7, #12]
 800832a:	f7ff ff75 	bl	8008218 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800832e:	68fb      	ldr	r3, [r7, #12]
 8008330:	2201      	movs	r2, #1
 8008332:	711a      	strb	r2, [r3, #4]
}
 8008334:	bf00      	nop
 8008336:	3710      	adds	r7, #16
 8008338:	46bd      	mov	sp, r7
 800833a:	bd80      	pop	{r7, pc}

0800833c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800833c:	b580      	push	{r7, lr}
 800833e:	b084      	sub	sp, #16
 8008340:	af00      	add	r7, sp, #0
 8008342:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008348:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800834a:	68f8      	ldr	r0, [r7, #12]
 800834c:	f7ff ff6e 	bl	800822c <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8008350:	bf00      	nop
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bd80      	pop	{r7, pc}

08008358 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8008358:	b580      	push	{r7, lr}
 800835a:	b084      	sub	sp, #16
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008364:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	691b      	ldr	r3, [r3, #16]
 800836a:	f043 0204 	orr.w	r2, r3, #4
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8008372:	68f8      	ldr	r0, [r7, #12]
 8008374:	f7ff ff64 	bl	8008240 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	2201      	movs	r2, #1
 800837c:	711a      	strb	r2, [r3, #4]
}
 800837e:	bf00      	nop
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008386:	b480      	push	{r7}
 8008388:	b083      	sub	sp, #12
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 800838e:	bf00      	nop
 8008390:	370c      	adds	r7, #12
 8008392:	46bd      	mov	sp, r7
 8008394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008398:	4770      	bx	lr

0800839a <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800839a:	b480      	push	{r7}
 800839c:	b083      	sub	sp, #12
 800839e:	af00      	add	r7, sp, #0
 80083a0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80083a2:	bf00      	nop
 80083a4:	370c      	adds	r7, #12
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr

080083ae <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80083ae:	b480      	push	{r7}
 80083b0:	b083      	sub	sp, #12
 80083b2:	af00      	add	r7, sp, #0
 80083b4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 80083b6:	bf00      	nop
 80083b8:	370c      	adds	r7, #12
 80083ba:	46bd      	mov	sp, r7
 80083bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c0:	4770      	bx	lr

080083c2 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80083c2:	b480      	push	{r7}
 80083c4:	b083      	sub	sp, #12
 80083c6:	af00      	add	r7, sp, #0
 80083c8:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 80083ca:	bf00      	nop
 80083cc:	370c      	adds	r7, #12
 80083ce:	46bd      	mov	sp, r7
 80083d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d4:	4770      	bx	lr

080083d6 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80083d6:	b580      	push	{r7, lr}
 80083d8:	b084      	sub	sp, #16
 80083da:	af00      	add	r7, sp, #0
 80083dc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e2:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 80083e4:	68f8      	ldr	r0, [r7, #12]
 80083e6:	f7ff ffce 	bl	8008386 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2201      	movs	r2, #1
 80083ee:	711a      	strb	r2, [r3, #4]
}
 80083f0:	bf00      	nop
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}

080083f8 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 80083f8:	b580      	push	{r7, lr}
 80083fa:	b084      	sub	sp, #16
 80083fc:	af00      	add	r7, sp, #0
 80083fe:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008404:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008406:	68f8      	ldr	r0, [r7, #12]
 8008408:	f7ff ffc7 	bl	800839a <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800840c:	bf00      	nop
 800840e:	3710      	adds	r7, #16
 8008410:	46bd      	mov	sp, r7
 8008412:	bd80      	pop	{r7, pc}

08008414 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008414:	b580      	push	{r7, lr}
 8008416:	b084      	sub	sp, #16
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008420:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008422:	68fb      	ldr	r3, [r7, #12]
 8008424:	691b      	ldr	r3, [r3, #16]
 8008426:	f043 0204 	orr.w	r2, r3, #4
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800842e:	68f8      	ldr	r0, [r7, #12]
 8008430:	f7ff ffbd 	bl	80083ae <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008434:	68fb      	ldr	r3, [r7, #12]
 8008436:	2201      	movs	r2, #1
 8008438:	711a      	strb	r2, [r3, #4]
}
 800843a:	bf00      	nop
 800843c:	3710      	adds	r7, #16
 800843e:	46bd      	mov	sp, r7
 8008440:	bd80      	pop	{r7, pc}
	...

08008444 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b086      	sub	sp, #24
 8008448:	af00      	add	r7, sp, #0
 800844a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800844c:	2300      	movs	r3, #0
 800844e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8008450:	f7fe ff64 	bl	800731c <HAL_GetTick>
 8008454:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2b00      	cmp	r3, #0
 800845a:	d101      	bne.n	8008460 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	e099      	b.n	8008594 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	2202      	movs	r2, #2
 8008464:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2200      	movs	r2, #0
 800846c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f022 0201 	bic.w	r2, r2, #1
 800847e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8008480:	e00f      	b.n	80084a2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008482:	f7fe ff4b 	bl	800731c <HAL_GetTick>
 8008486:	4602      	mov	r2, r0
 8008488:	693b      	ldr	r3, [r7, #16]
 800848a:	1ad3      	subs	r3, r2, r3
 800848c:	2b05      	cmp	r3, #5
 800848e:	d908      	bls.n	80084a2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	2220      	movs	r2, #32
 8008494:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	2203      	movs	r2, #3
 800849a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800849e:	2303      	movs	r3, #3
 80084a0:	e078      	b.n	8008594 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	681b      	ldr	r3, [r3, #0]
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d1e8      	bne.n	8008482 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80084b8:	697a      	ldr	r2, [r7, #20]
 80084ba:	4b38      	ldr	r3, [pc, #224]	; (800859c <HAL_DMA_Init+0x158>)
 80084bc:	4013      	ands	r3, r2
 80084be:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	685a      	ldr	r2, [r3, #4]
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	691b      	ldr	r3, [r3, #16]
 80084d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084da:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	699b      	ldr	r3, [r3, #24]
 80084e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084e6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6a1b      	ldr	r3, [r3, #32]
 80084ec:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80084ee:	697a      	ldr	r2, [r7, #20]
 80084f0:	4313      	orrs	r3, r2
 80084f2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084f8:	2b04      	cmp	r3, #4
 80084fa:	d107      	bne.n	800850c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008504:	4313      	orrs	r3, r2
 8008506:	697a      	ldr	r2, [r7, #20]
 8008508:	4313      	orrs	r3, r2
 800850a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	697a      	ldr	r2, [r7, #20]
 8008512:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800851c:	697b      	ldr	r3, [r7, #20]
 800851e:	f023 0307 	bic.w	r3, r3, #7
 8008522:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008528:	697a      	ldr	r2, [r7, #20]
 800852a:	4313      	orrs	r3, r2
 800852c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008532:	2b04      	cmp	r3, #4
 8008534:	d117      	bne.n	8008566 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800853a:	697a      	ldr	r2, [r7, #20]
 800853c:	4313      	orrs	r3, r2
 800853e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008544:	2b00      	cmp	r3, #0
 8008546:	d00e      	beq.n	8008566 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8008548:	6878      	ldr	r0, [r7, #4]
 800854a:	f000 fa9f 	bl	8008a8c <DMA_CheckFifoParam>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d008      	beq.n	8008566 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2240      	movs	r2, #64	; 0x40
 8008558:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	2201      	movs	r2, #1
 800855e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8008562:	2301      	movs	r3, #1
 8008564:	e016      	b.n	8008594 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	697a      	ldr	r2, [r7, #20]
 800856c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800856e:	6878      	ldr	r0, [r7, #4]
 8008570:	f000 fa56 	bl	8008a20 <DMA_CalcBaseAndBitshift>
 8008574:	4603      	mov	r3, r0
 8008576:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800857c:	223f      	movs	r2, #63	; 0x3f
 800857e:	409a      	lsls	r2, r3
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2200      	movs	r2, #0
 8008588:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800858a:	687b      	ldr	r3, [r7, #4]
 800858c:	2201      	movs	r2, #1
 800858e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8008592:	2300      	movs	r3, #0
}
 8008594:	4618      	mov	r0, r3
 8008596:	3718      	adds	r7, #24
 8008598:	46bd      	mov	sp, r7
 800859a:	bd80      	pop	{r7, pc}
 800859c:	f010803f 	.word	0xf010803f

080085a0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80085a0:	b580      	push	{r7, lr}
 80085a2:	b086      	sub	sp, #24
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	60f8      	str	r0, [r7, #12]
 80085a8:	60b9      	str	r1, [r7, #8]
 80085aa:	607a      	str	r2, [r7, #4]
 80085ac:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085ae:	2300      	movs	r3, #0
 80085b0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80085b2:	68fb      	ldr	r3, [r7, #12]
 80085b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80085b6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80085b8:	68fb      	ldr	r3, [r7, #12]
 80085ba:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80085be:	2b01      	cmp	r3, #1
 80085c0:	d101      	bne.n	80085c6 <HAL_DMA_Start_IT+0x26>
 80085c2:	2302      	movs	r3, #2
 80085c4:	e040      	b.n	8008648 <HAL_DMA_Start_IT+0xa8>
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	2201      	movs	r2, #1
 80085ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80085d4:	b2db      	uxtb	r3, r3
 80085d6:	2b01      	cmp	r3, #1
 80085d8:	d12f      	bne.n	800863a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2202      	movs	r2, #2
 80085de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	2200      	movs	r2, #0
 80085e6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80085e8:	683b      	ldr	r3, [r7, #0]
 80085ea:	687a      	ldr	r2, [r7, #4]
 80085ec:	68b9      	ldr	r1, [r7, #8]
 80085ee:	68f8      	ldr	r0, [r7, #12]
 80085f0:	f000 f9e8 	bl	80089c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80085f8:	223f      	movs	r2, #63	; 0x3f
 80085fa:	409a      	lsls	r2, r3
 80085fc:	693b      	ldr	r3, [r7, #16]
 80085fe:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8008600:	68fb      	ldr	r3, [r7, #12]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	681a      	ldr	r2, [r3, #0]
 8008606:	68fb      	ldr	r3, [r7, #12]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f042 0216 	orr.w	r2, r2, #22
 800860e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	2b00      	cmp	r3, #0
 8008616:	d007      	beq.n	8008628 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8008618:	68fb      	ldr	r3, [r7, #12]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	68fb      	ldr	r3, [r7, #12]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f042 0208 	orr.w	r2, r2, #8
 8008626:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f042 0201 	orr.w	r2, r2, #1
 8008636:	601a      	str	r2, [r3, #0]
 8008638:	e005      	b.n	8008646 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800863a:	68fb      	ldr	r3, [r7, #12]
 800863c:	2200      	movs	r2, #0
 800863e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8008642:	2302      	movs	r3, #2
 8008644:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8008646:	7dfb      	ldrb	r3, [r7, #23]
}
 8008648:	4618      	mov	r0, r3
 800864a:	3718      	adds	r7, #24
 800864c:	46bd      	mov	sp, r7
 800864e:	bd80      	pop	{r7, pc}

08008650 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8008650:	b480      	push	{r7}
 8008652:	b083      	sub	sp, #12
 8008654:	af00      	add	r7, sp, #0
 8008656:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800865e:	b2db      	uxtb	r3, r3
 8008660:	2b02      	cmp	r3, #2
 8008662:	d004      	beq.n	800866e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2280      	movs	r2, #128	; 0x80
 8008668:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800866a:	2301      	movs	r3, #1
 800866c:	e00c      	b.n	8008688 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2205      	movs	r2, #5
 8008672:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	681a      	ldr	r2, [r3, #0]
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	f022 0201 	bic.w	r2, r2, #1
 8008684:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8008686:	2300      	movs	r3, #0
}
 8008688:	4618      	mov	r0, r3
 800868a:	370c      	adds	r7, #12
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr

08008694 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8008694:	b580      	push	{r7, lr}
 8008696:	b086      	sub	sp, #24
 8008698:	af00      	add	r7, sp, #0
 800869a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800869c:	2300      	movs	r3, #0
 800869e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80086a0:	4b8e      	ldr	r3, [pc, #568]	; (80088dc <HAL_DMA_IRQHandler+0x248>)
 80086a2:	681b      	ldr	r3, [r3, #0]
 80086a4:	4a8e      	ldr	r2, [pc, #568]	; (80088e0 <HAL_DMA_IRQHandler+0x24c>)
 80086a6:	fba2 2303 	umull	r2, r3, r2, r3
 80086aa:	0a9b      	lsrs	r3, r3, #10
 80086ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086be:	2208      	movs	r2, #8
 80086c0:	409a      	lsls	r2, r3
 80086c2:	68fb      	ldr	r3, [r7, #12]
 80086c4:	4013      	ands	r3, r2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d01a      	beq.n	8008700 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	f003 0304 	and.w	r3, r3, #4
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d013      	beq.n	8008700 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	681a      	ldr	r2, [r3, #0]
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	f022 0204 	bic.w	r2, r2, #4
 80086e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80086ec:	2208      	movs	r2, #8
 80086ee:	409a      	lsls	r2, r3
 80086f0:	693b      	ldr	r3, [r7, #16]
 80086f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80086f8:	f043 0201 	orr.w	r2, r3, #1
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008704:	2201      	movs	r2, #1
 8008706:	409a      	lsls	r2, r3
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	4013      	ands	r3, r2
 800870c:	2b00      	cmp	r3, #0
 800870e:	d012      	beq.n	8008736 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	695b      	ldr	r3, [r3, #20]
 8008716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800871a:	2b00      	cmp	r3, #0
 800871c:	d00b      	beq.n	8008736 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008722:	2201      	movs	r2, #1
 8008724:	409a      	lsls	r2, r3
 8008726:	693b      	ldr	r3, [r7, #16]
 8008728:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800872e:	f043 0202 	orr.w	r2, r3, #2
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800873a:	2204      	movs	r2, #4
 800873c:	409a      	lsls	r2, r3
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	4013      	ands	r3, r2
 8008742:	2b00      	cmp	r3, #0
 8008744:	d012      	beq.n	800876c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f003 0302 	and.w	r3, r3, #2
 8008750:	2b00      	cmp	r3, #0
 8008752:	d00b      	beq.n	800876c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008758:	2204      	movs	r2, #4
 800875a:	409a      	lsls	r2, r3
 800875c:	693b      	ldr	r3, [r7, #16]
 800875e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008764:	f043 0204 	orr.w	r2, r3, #4
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008770:	2210      	movs	r2, #16
 8008772:	409a      	lsls	r2, r3
 8008774:	68fb      	ldr	r3, [r7, #12]
 8008776:	4013      	ands	r3, r2
 8008778:	2b00      	cmp	r3, #0
 800877a:	d043      	beq.n	8008804 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f003 0308 	and.w	r3, r3, #8
 8008786:	2b00      	cmp	r3, #0
 8008788:	d03c      	beq.n	8008804 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800878e:	2210      	movs	r2, #16
 8008790:	409a      	lsls	r2, r3
 8008792:	693b      	ldr	r3, [r7, #16]
 8008794:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	d018      	beq.n	80087d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d108      	bne.n	80087c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d024      	beq.n	8008804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087be:	6878      	ldr	r0, [r7, #4]
 80087c0:	4798      	blx	r3
 80087c2:	e01f      	b.n	8008804 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d01b      	beq.n	8008804 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80087d0:	6878      	ldr	r0, [r7, #4]
 80087d2:	4798      	blx	r3
 80087d4:	e016      	b.n	8008804 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	d107      	bne.n	80087f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	681a      	ldr	r2, [r3, #0]
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	f022 0208 	bic.w	r2, r2, #8
 80087f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d003      	beq.n	8008804 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80087fc:	687b      	ldr	r3, [r7, #4]
 80087fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008800:	6878      	ldr	r0, [r7, #4]
 8008802:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008808:	2220      	movs	r2, #32
 800880a:	409a      	lsls	r2, r3
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	4013      	ands	r3, r2
 8008810:	2b00      	cmp	r3, #0
 8008812:	f000 808f 	beq.w	8008934 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f003 0310 	and.w	r3, r3, #16
 8008820:	2b00      	cmp	r3, #0
 8008822:	f000 8087 	beq.w	8008934 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800882a:	2220      	movs	r2, #32
 800882c:	409a      	lsls	r2, r3
 800882e:	693b      	ldr	r3, [r7, #16]
 8008830:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8008838:	b2db      	uxtb	r3, r3
 800883a:	2b05      	cmp	r3, #5
 800883c:	d136      	bne.n	80088ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	681b      	ldr	r3, [r3, #0]
 8008842:	681a      	ldr	r2, [r3, #0]
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	681b      	ldr	r3, [r3, #0]
 8008848:	f022 0216 	bic.w	r2, r2, #22
 800884c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	681b      	ldr	r3, [r3, #0]
 8008852:	695a      	ldr	r2, [r3, #20]
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800885c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008862:	2b00      	cmp	r3, #0
 8008864:	d103      	bne.n	800886e <HAL_DMA_IRQHandler+0x1da>
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800886a:	2b00      	cmp	r3, #0
 800886c:	d007      	beq.n	800887e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	681b      	ldr	r3, [r3, #0]
 8008872:	681a      	ldr	r2, [r3, #0]
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f022 0208 	bic.w	r2, r2, #8
 800887c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8008882:	223f      	movs	r2, #63	; 0x3f
 8008884:	409a      	lsls	r2, r3
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	2201      	movs	r2, #1
 800888e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	2200      	movs	r2, #0
 8008896:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d07e      	beq.n	80089a0 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80088a6:	6878      	ldr	r0, [r7, #4]
 80088a8:	4798      	blx	r3
        }
        return;
 80088aa:	e079      	b.n	80089a0 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80088b6:	2b00      	cmp	r3, #0
 80088b8:	d01d      	beq.n	80088f6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d10d      	bne.n	80088e4 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80088c8:	687b      	ldr	r3, [r7, #4]
 80088ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d031      	beq.n	8008934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d4:	6878      	ldr	r0, [r7, #4]
 80088d6:	4798      	blx	r3
 80088d8:	e02c      	b.n	8008934 <HAL_DMA_IRQHandler+0x2a0>
 80088da:	bf00      	nop
 80088dc:	200001a0 	.word	0x200001a0
 80088e0:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088e8:	2b00      	cmp	r3, #0
 80088ea:	d023      	beq.n	8008934 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f0:	6878      	ldr	r0, [r7, #4]
 80088f2:	4798      	blx	r3
 80088f4:	e01e      	b.n	8008934 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008900:	2b00      	cmp	r3, #0
 8008902:	d10f      	bne.n	8008924 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	681a      	ldr	r2, [r3, #0]
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	681b      	ldr	r3, [r3, #0]
 800890e:	f022 0210 	bic.w	r2, r2, #16
 8008912:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2201      	movs	r2, #1
 8008918:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	2200      	movs	r2, #0
 8008920:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8008924:	687b      	ldr	r3, [r7, #4]
 8008926:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008928:	2b00      	cmp	r3, #0
 800892a:	d003      	beq.n	8008934 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008930:	6878      	ldr	r0, [r7, #4]
 8008932:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008938:	2b00      	cmp	r3, #0
 800893a:	d032      	beq.n	80089a2 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008940:	f003 0301 	and.w	r3, r3, #1
 8008944:	2b00      	cmp	r3, #0
 8008946:	d022      	beq.n	800898e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2205      	movs	r2, #5
 800894c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	681a      	ldr	r2, [r3, #0]
 8008956:	687b      	ldr	r3, [r7, #4]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0201 	bic.w	r2, r2, #1
 800895e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	3301      	adds	r3, #1
 8008964:	60bb      	str	r3, [r7, #8]
 8008966:	697a      	ldr	r2, [r7, #20]
 8008968:	429a      	cmp	r2, r3
 800896a:	d307      	bcc.n	800897c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 0301 	and.w	r3, r3, #1
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1f2      	bne.n	8008960 <HAL_DMA_IRQHandler+0x2cc>
 800897a:	e000      	b.n	800897e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800897c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	2201      	movs	r2, #1
 8008982:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2200      	movs	r2, #0
 800898a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008992:	2b00      	cmp	r3, #0
 8008994:	d005      	beq.n	80089a2 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800899a:	6878      	ldr	r0, [r7, #4]
 800899c:	4798      	blx	r3
 800899e:	e000      	b.n	80089a2 <HAL_DMA_IRQHandler+0x30e>
        return;
 80089a0:	bf00      	nop
    }
  }
}
 80089a2:	3718      	adds	r7, #24
 80089a4:	46bd      	mov	sp, r7
 80089a6:	bd80      	pop	{r7, pc}

080089a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80089a8:	b480      	push	{r7}
 80089aa:	b083      	sub	sp, #12
 80089ac:	af00      	add	r7, sp, #0
 80089ae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80089b6:	b2db      	uxtb	r3, r3
}
 80089b8:	4618      	mov	r0, r3
 80089ba:	370c      	adds	r7, #12
 80089bc:	46bd      	mov	sp, r7
 80089be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c2:	4770      	bx	lr

080089c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80089c4:	b480      	push	{r7}
 80089c6:	b085      	sub	sp, #20
 80089c8:	af00      	add	r7, sp, #0
 80089ca:	60f8      	str	r0, [r7, #12]
 80089cc:	60b9      	str	r1, [r7, #8]
 80089ce:	607a      	str	r2, [r7, #4]
 80089d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	681a      	ldr	r2, [r3, #0]
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80089e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	683a      	ldr	r2, [r7, #0]
 80089e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	689b      	ldr	r3, [r3, #8]
 80089ee:	2b40      	cmp	r3, #64	; 0x40
 80089f0:	d108      	bne.n	8008a04 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	687a      	ldr	r2, [r7, #4]
 80089f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68ba      	ldr	r2, [r7, #8]
 8008a00:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8008a02:	e007      	b.n	8008a14 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	681b      	ldr	r3, [r3, #0]
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	687a      	ldr	r2, [r7, #4]
 8008a12:	60da      	str	r2, [r3, #12]
}
 8008a14:	bf00      	nop
 8008a16:	3714      	adds	r7, #20
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a1e:	4770      	bx	lr

08008a20 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008a20:	b480      	push	{r7}
 8008a22:	b085      	sub	sp, #20
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8008a28:	687b      	ldr	r3, [r7, #4]
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	b2db      	uxtb	r3, r3
 8008a2e:	3b10      	subs	r3, #16
 8008a30:	4a14      	ldr	r2, [pc, #80]	; (8008a84 <DMA_CalcBaseAndBitshift+0x64>)
 8008a32:	fba2 2303 	umull	r2, r3, r2, r3
 8008a36:	091b      	lsrs	r3, r3, #4
 8008a38:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8008a3a:	4a13      	ldr	r2, [pc, #76]	; (8008a88 <DMA_CalcBaseAndBitshift+0x68>)
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	4413      	add	r3, r2
 8008a40:	781b      	ldrb	r3, [r3, #0]
 8008a42:	461a      	mov	r2, r3
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	2b03      	cmp	r3, #3
 8008a4c:	d909      	bls.n	8008a62 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	681b      	ldr	r3, [r3, #0]
 8008a52:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008a56:	f023 0303 	bic.w	r3, r3, #3
 8008a5a:	1d1a      	adds	r2, r3, #4
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	659a      	str	r2, [r3, #88]	; 0x58
 8008a60:	e007      	b.n	8008a72 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8008a6a:	f023 0303 	bic.w	r3, r3, #3
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8008a76:	4618      	mov	r0, r3
 8008a78:	3714      	adds	r7, #20
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a80:	4770      	bx	lr
 8008a82:	bf00      	nop
 8008a84:	aaaaaaab 	.word	0xaaaaaaab
 8008a88:	08016c24 	.word	0x08016c24

08008a8c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b085      	sub	sp, #20
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a94:	2300      	movs	r3, #0
 8008a96:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a9c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	699b      	ldr	r3, [r3, #24]
 8008aa2:	2b00      	cmp	r3, #0
 8008aa4:	d11f      	bne.n	8008ae6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8008aa6:	68bb      	ldr	r3, [r7, #8]
 8008aa8:	2b03      	cmp	r3, #3
 8008aaa:	d856      	bhi.n	8008b5a <DMA_CheckFifoParam+0xce>
 8008aac:	a201      	add	r2, pc, #4	; (adr r2, 8008ab4 <DMA_CheckFifoParam+0x28>)
 8008aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008ab2:	bf00      	nop
 8008ab4:	08008ac5 	.word	0x08008ac5
 8008ab8:	08008ad7 	.word	0x08008ad7
 8008abc:	08008ac5 	.word	0x08008ac5
 8008ac0:	08008b5b 	.word	0x08008b5b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ac8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d046      	beq.n	8008b5e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8008ad0:	2301      	movs	r3, #1
 8008ad2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ad4:	e043      	b.n	8008b5e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ada:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008ade:	d140      	bne.n	8008b62 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8008ae0:	2301      	movs	r3, #1
 8008ae2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008ae4:	e03d      	b.n	8008b62 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	699b      	ldr	r3, [r3, #24]
 8008aea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008aee:	d121      	bne.n	8008b34 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8008af0:	68bb      	ldr	r3, [r7, #8]
 8008af2:	2b03      	cmp	r3, #3
 8008af4:	d837      	bhi.n	8008b66 <DMA_CheckFifoParam+0xda>
 8008af6:	a201      	add	r2, pc, #4	; (adr r2, 8008afc <DMA_CheckFifoParam+0x70>)
 8008af8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008afc:	08008b0d 	.word	0x08008b0d
 8008b00:	08008b13 	.word	0x08008b13
 8008b04:	08008b0d 	.word	0x08008b0d
 8008b08:	08008b25 	.word	0x08008b25
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008b0c:	2301      	movs	r3, #1
 8008b0e:	73fb      	strb	r3, [r7, #15]
      break;
 8008b10:	e030      	b.n	8008b74 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b16:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b1a:	2b00      	cmp	r3, #0
 8008b1c:	d025      	beq.n	8008b6a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8008b1e:	2301      	movs	r3, #1
 8008b20:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008b22:	e022      	b.n	8008b6a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b28:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008b2c:	d11f      	bne.n	8008b6e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8008b2e:	2301      	movs	r3, #1
 8008b30:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008b32:	e01c      	b.n	8008b6e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	2b02      	cmp	r3, #2
 8008b38:	d903      	bls.n	8008b42 <DMA_CheckFifoParam+0xb6>
 8008b3a:	68bb      	ldr	r3, [r7, #8]
 8008b3c:	2b03      	cmp	r3, #3
 8008b3e:	d003      	beq.n	8008b48 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008b40:	e018      	b.n	8008b74 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8008b42:	2301      	movs	r3, #1
 8008b44:	73fb      	strb	r3, [r7, #15]
      break;
 8008b46:	e015      	b.n	8008b74 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008b4c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d00e      	beq.n	8008b72 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8008b54:	2301      	movs	r3, #1
 8008b56:	73fb      	strb	r3, [r7, #15]
      break;
 8008b58:	e00b      	b.n	8008b72 <DMA_CheckFifoParam+0xe6>
      break;
 8008b5a:	bf00      	nop
 8008b5c:	e00a      	b.n	8008b74 <DMA_CheckFifoParam+0xe8>
      break;
 8008b5e:	bf00      	nop
 8008b60:	e008      	b.n	8008b74 <DMA_CheckFifoParam+0xe8>
      break;
 8008b62:	bf00      	nop
 8008b64:	e006      	b.n	8008b74 <DMA_CheckFifoParam+0xe8>
      break;
 8008b66:	bf00      	nop
 8008b68:	e004      	b.n	8008b74 <DMA_CheckFifoParam+0xe8>
      break;
 8008b6a:	bf00      	nop
 8008b6c:	e002      	b.n	8008b74 <DMA_CheckFifoParam+0xe8>
      break;   
 8008b6e:	bf00      	nop
 8008b70:	e000      	b.n	8008b74 <DMA_CheckFifoParam+0xe8>
      break;
 8008b72:	bf00      	nop
    }
  } 
  
  return status; 
 8008b74:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b76:	4618      	mov	r0, r3
 8008b78:	3714      	adds	r7, #20
 8008b7a:	46bd      	mov	sp, r7
 8008b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop

08008b84 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8008b84:	b580      	push	{r7, lr}
 8008b86:	b082      	sub	sp, #8
 8008b88:	af00      	add	r7, sp, #0
  uint32_t addresstmp = 0U;
 8008b8a:	2300      	movs	r3, #0
 8008b8c:	607b      	str	r3, [r7, #4]
  
  /* Check FLASH operation error flags */
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8008b8e:	4b4b      	ldr	r3, [pc, #300]	; (8008cbc <HAL_FLASH_IRQHandler+0x138>)
 8008b90:	68db      	ldr	r3, [r3, #12]
 8008b92:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d020      	beq.n	8008bdc <HAL_FLASH_IRQHandler+0x58>
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
    FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8008b9a:	4b49      	ldr	r3, [pc, #292]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008b9c:	781b      	ldrb	r3, [r3, #0]
 8008b9e:	b2db      	uxtb	r3, r3
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d107      	bne.n	8008bb4 <HAL_FLASH_IRQHandler+0x30>
    {
      /*return the faulty sector*/
      addresstmp = pFlash.Sector;
 8008ba4:	4b46      	ldr	r3, [pc, #280]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008ba6:	68db      	ldr	r3, [r3, #12]
 8008ba8:	607b      	str	r3, [r7, #4]
      pFlash.Sector = 0xFFFFFFFFU;
 8008baa:	4b45      	ldr	r3, [pc, #276]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008bac:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb0:	60da      	str	r2, [r3, #12]
 8008bb2:	e00b      	b.n	8008bcc <HAL_FLASH_IRQHandler+0x48>
    }
    else if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE)
 8008bb4:	4b42      	ldr	r3, [pc, #264]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008bb6:	781b      	ldrb	r3, [r3, #0]
 8008bb8:	b2db      	uxtb	r3, r3
 8008bba:	2b02      	cmp	r3, #2
 8008bbc:	d103      	bne.n	8008bc6 <HAL_FLASH_IRQHandler+0x42>
    {
      /*return the faulty bank*/
      addresstmp = pFlash.Bank;
 8008bbe:	4b40      	ldr	r3, [pc, #256]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008bc0:	691b      	ldr	r3, [r3, #16]
 8008bc2:	607b      	str	r3, [r7, #4]
 8008bc4:	e002      	b.n	8008bcc <HAL_FLASH_IRQHandler+0x48>
    }
    else
    {
      /*return the faulty address*/
      addresstmp = pFlash.Address;
 8008bc6:	4b3e      	ldr	r3, [pc, #248]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008bc8:	695b      	ldr	r3, [r3, #20]
 8008bca:	607b      	str	r3, [r7, #4]
    }
    
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8008bcc:	f000 f88e 	bl	8008cec <FLASH_SetErrorCode>
    
    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(addresstmp);
 8008bd0:	6878      	ldr	r0, [r7, #4]
 8008bd2:	f000 f881 	bl	8008cd8 <HAL_FLASH_OperationErrorCallback>
    
    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8008bd6:	4b3a      	ldr	r3, [pc, #232]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008bd8:	2200      	movs	r2, #0
 8008bda:	701a      	strb	r2, [r3, #0]
  }
  
  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8008bdc:	4b37      	ldr	r3, [pc, #220]	; (8008cbc <HAL_FLASH_IRQHandler+0x138>)
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	f003 0301 	and.w	r3, r3, #1
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d04a      	beq.n	8008c7e <HAL_FLASH_IRQHandler+0xfa>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8008be8:	4b34      	ldr	r3, [pc, #208]	; (8008cbc <HAL_FLASH_IRQHandler+0x138>)
 8008bea:	2201      	movs	r2, #1
 8008bec:	60da      	str	r2, [r3, #12]
    
    if(pFlash.ProcedureOnGoing == FLASH_PROC_SECTERASE)
 8008bee:	4b34      	ldr	r3, [pc, #208]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008bf0:	781b      	ldrb	r3, [r3, #0]
 8008bf2:	b2db      	uxtb	r3, r3
 8008bf4:	2b01      	cmp	r3, #1
 8008bf6:	d12d      	bne.n	8008c54 <HAL_FLASH_IRQHandler+0xd0>
    {
      /*Nb of sector to erased can be decreased*/
      pFlash.NbSectorsToErase--;
 8008bf8:	4b31      	ldr	r3, [pc, #196]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008bfa:	685b      	ldr	r3, [r3, #4]
 8008bfc:	3b01      	subs	r3, #1
 8008bfe:	4a30      	ldr	r2, [pc, #192]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c00:	6053      	str	r3, [r2, #4]
      
      /* Check if there are still sectors to erase*/
      if(pFlash.NbSectorsToErase != 0U)
 8008c02:	4b2f      	ldr	r3, [pc, #188]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c04:	685b      	ldr	r3, [r3, #4]
 8008c06:	2b00      	cmp	r3, #0
 8008c08:	d015      	beq.n	8008c36 <HAL_FLASH_IRQHandler+0xb2>
      {
        addresstmp = pFlash.Sector;
 8008c0a:	4b2d      	ldr	r3, [pc, #180]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c0c:	68db      	ldr	r3, [r3, #12]
 8008c0e:	607b      	str	r3, [r7, #4]
        /*Indicate user which sector has been erased*/
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8008c10:	6878      	ldr	r0, [r7, #4]
 8008c12:	f000 f857 	bl	8008cc4 <HAL_FLASH_EndOfOperationCallback>
        
        /*Increment sector number*/
        pFlash.Sector++;
 8008c16:	4b2a      	ldr	r3, [pc, #168]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c18:	68db      	ldr	r3, [r3, #12]
 8008c1a:	3301      	adds	r3, #1
 8008c1c:	4a28      	ldr	r2, [pc, #160]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c1e:	60d3      	str	r3, [r2, #12]
        addresstmp = pFlash.Sector;
 8008c20:	4b27      	ldr	r3, [pc, #156]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c22:	68db      	ldr	r3, [r3, #12]
 8008c24:	607b      	str	r3, [r7, #4]
        FLASH_Erase_Sector(addresstmp, pFlash.VoltageForErase);
 8008c26:	4b26      	ldr	r3, [pc, #152]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c28:	7a1b      	ldrb	r3, [r3, #8]
 8008c2a:	b2db      	uxtb	r3, r3
 8008c2c:	4619      	mov	r1, r3
 8008c2e:	6878      	ldr	r0, [r7, #4]
 8008c30:	f000 f8c2 	bl	8008db8 <FLASH_Erase_Sector>
 8008c34:	e023      	b.n	8008c7e <HAL_FLASH_IRQHandler+0xfa>
      }
      else
      {
        /*No more sectors to Erase, user callback can be called.*/
        /*Reset Sector and stop Erase sectors procedure*/
        pFlash.Sector = addresstmp = 0xFFFFFFFFU;
 8008c36:	f04f 33ff 	mov.w	r3, #4294967295
 8008c3a:	607b      	str	r3, [r7, #4]
 8008c3c:	4a20      	ldr	r2, [pc, #128]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60d3      	str	r3, [r2, #12]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8008c42:	4b1f      	ldr	r3, [pc, #124]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c44:	2200      	movs	r2, #0
 8008c46:	701a      	strb	r2, [r3, #0]
        
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8008c48:	f000 f8fe 	bl	8008e48 <FLASH_FlushCaches>
                
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(addresstmp);
 8008c4c:	6878      	ldr	r0, [r7, #4]
 8008c4e:	f000 f839 	bl	8008cc4 <HAL_FLASH_EndOfOperationCallback>
 8008c52:	e014      	b.n	8008c7e <HAL_FLASH_IRQHandler+0xfa>
      }
    }
    else 
    {
      if(pFlash.ProcedureOnGoing == FLASH_PROC_MASSERASE) 
 8008c54:	4b1a      	ldr	r3, [pc, #104]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c56:	781b      	ldrb	r3, [r3, #0]
 8008c58:	b2db      	uxtb	r3, r3
 8008c5a:	2b02      	cmp	r3, #2
 8008c5c:	d107      	bne.n	8008c6e <HAL_FLASH_IRQHandler+0xea>
      {
        /* MassErase ended. Return the selected bank */
        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8008c5e:	f000 f8f3 	bl	8008e48 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 8008c62:	4b17      	ldr	r3, [pc, #92]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	4618      	mov	r0, r3
 8008c68:	f000 f82c 	bl	8008cc4 <HAL_FLASH_EndOfOperationCallback>
 8008c6c:	e004      	b.n	8008c78 <HAL_FLASH_IRQHandler+0xf4>
      }
      else
      {
        /*Program ended. Return the selected address*/
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8008c6e:	4b14      	ldr	r3, [pc, #80]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c70:	695b      	ldr	r3, [r3, #20]
 8008c72:	4618      	mov	r0, r3
 8008c74:	f000 f826 	bl	8008cc4 <HAL_FLASH_EndOfOperationCallback>
      }
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8008c78:	4b11      	ldr	r3, [pc, #68]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c7a:	2200      	movs	r2, #0
 8008c7c:	701a      	strb	r2, [r3, #0]
    }
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8008c7e:	4b10      	ldr	r3, [pc, #64]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008c80:	781b      	ldrb	r3, [r3, #0]
 8008c82:	b2db      	uxtb	r3, r3
 8008c84:	2b00      	cmp	r3, #0
 8008c86:	d114      	bne.n	8008cb2 <HAL_FLASH_IRQHandler+0x12e>
  {
    /* Operation is completed, disable the PG, SER, SNB and MER Bits */
    CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_SER | FLASH_CR_SNB | FLASH_MER_BIT));
 8008c88:	4b0c      	ldr	r3, [pc, #48]	; (8008cbc <HAL_FLASH_IRQHandler+0x138>)
 8008c8a:	691b      	ldr	r3, [r3, #16]
 8008c8c:	4a0b      	ldr	r2, [pc, #44]	; (8008cbc <HAL_FLASH_IRQHandler+0x138>)
 8008c8e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8008c92:	6113      	str	r3, [r2, #16]

    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8008c94:	4b09      	ldr	r3, [pc, #36]	; (8008cbc <HAL_FLASH_IRQHandler+0x138>)
 8008c96:	691b      	ldr	r3, [r3, #16]
 8008c98:	4a08      	ldr	r2, [pc, #32]	; (8008cbc <HAL_FLASH_IRQHandler+0x138>)
 8008c9a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c9e:	6113      	str	r3, [r2, #16]
    
    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8008ca0:	4b06      	ldr	r3, [pc, #24]	; (8008cbc <HAL_FLASH_IRQHandler+0x138>)
 8008ca2:	691b      	ldr	r3, [r3, #16]
 8008ca4:	4a05      	ldr	r2, [pc, #20]	; (8008cbc <HAL_FLASH_IRQHandler+0x138>)
 8008ca6:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008caa:	6113      	str	r3, [r2, #16]
    
    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8008cac:	4b04      	ldr	r3, [pc, #16]	; (8008cc0 <HAL_FLASH_IRQHandler+0x13c>)
 8008cae:	2200      	movs	r2, #0
 8008cb0:	761a      	strb	r2, [r3, #24]
  }
}
 8008cb2:	bf00      	nop
 8008cb4:	3708      	adds	r7, #8
 8008cb6:	46bd      	mov	sp, r7
 8008cb8:	bd80      	pop	{r7, pc}
 8008cba:	bf00      	nop
 8008cbc:	40023c00 	.word	0x40023c00
 8008cc0:	2001a914 	.word	0x2001a914

08008cc4 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFFU, it means that all the selected sectors have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b083      	sub	sp, #12
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */ 
}
 8008ccc:	bf00      	nop
 8008cce:	370c      	adds	r7, #12
 8008cd0:	46bd      	mov	sp, r7
 8008cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd6:	4770      	bx	lr

08008cd8 <HAL_FLASH_OperationErrorCallback>:
  *                 Sectors Erase: Sector number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8008cd8:	b480      	push	{r7}
 8008cda:	b083      	sub	sp, #12
 8008cdc:	af00      	add	r7, sp, #0
 8008cde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8008ce0:	bf00      	nop
 8008ce2:	370c      	adds	r7, #12
 8008ce4:	46bd      	mov	sp, r7
 8008ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cea:	4770      	bx	lr

08008cec <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8008cec:	b480      	push	{r7}
 8008cee:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8008cf0:	4b2f      	ldr	r3, [pc, #188]	; (8008db0 <FLASH_SetErrorCode+0xc4>)
 8008cf2:	68db      	ldr	r3, [r3, #12]
 8008cf4:	f003 0310 	and.w	r3, r3, #16
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d008      	beq.n	8008d0e <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008cfc:	4b2d      	ldr	r3, [pc, #180]	; (8008db4 <FLASH_SetErrorCode+0xc8>)
 8008cfe:	69db      	ldr	r3, [r3, #28]
 8008d00:	f043 0310 	orr.w	r3, r3, #16
 8008d04:	4a2b      	ldr	r2, [pc, #172]	; (8008db4 <FLASH_SetErrorCode+0xc8>)
 8008d06:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8008d08:	4b29      	ldr	r3, [pc, #164]	; (8008db0 <FLASH_SetErrorCode+0xc4>)
 8008d0a:	2210      	movs	r2, #16
 8008d0c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8008d0e:	4b28      	ldr	r3, [pc, #160]	; (8008db0 <FLASH_SetErrorCode+0xc4>)
 8008d10:	68db      	ldr	r3, [r3, #12]
 8008d12:	f003 0320 	and.w	r3, r3, #32
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	d008      	beq.n	8008d2c <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8008d1a:	4b26      	ldr	r3, [pc, #152]	; (8008db4 <FLASH_SetErrorCode+0xc8>)
 8008d1c:	69db      	ldr	r3, [r3, #28]
 8008d1e:	f043 0308 	orr.w	r3, r3, #8
 8008d22:	4a24      	ldr	r2, [pc, #144]	; (8008db4 <FLASH_SetErrorCode+0xc8>)
 8008d24:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8008d26:	4b22      	ldr	r3, [pc, #136]	; (8008db0 <FLASH_SetErrorCode+0xc4>)
 8008d28:	2220      	movs	r2, #32
 8008d2a:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8008d2c:	4b20      	ldr	r3, [pc, #128]	; (8008db0 <FLASH_SetErrorCode+0xc4>)
 8008d2e:	68db      	ldr	r3, [r3, #12]
 8008d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d008      	beq.n	8008d4a <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8008d38:	4b1e      	ldr	r3, [pc, #120]	; (8008db4 <FLASH_SetErrorCode+0xc8>)
 8008d3a:	69db      	ldr	r3, [r3, #28]
 8008d3c:	f043 0304 	orr.w	r3, r3, #4
 8008d40:	4a1c      	ldr	r2, [pc, #112]	; (8008db4 <FLASH_SetErrorCode+0xc8>)
 8008d42:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008d44:	4b1a      	ldr	r3, [pc, #104]	; (8008db0 <FLASH_SetErrorCode+0xc4>)
 8008d46:	2240      	movs	r2, #64	; 0x40
 8008d48:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8008d4a:	4b19      	ldr	r3, [pc, #100]	; (8008db0 <FLASH_SetErrorCode+0xc4>)
 8008d4c:	68db      	ldr	r3, [r3, #12]
 8008d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d008      	beq.n	8008d68 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8008d56:	4b17      	ldr	r3, [pc, #92]	; (8008db4 <FLASH_SetErrorCode+0xc8>)
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	f043 0302 	orr.w	r3, r3, #2
 8008d5e:	4a15      	ldr	r2, [pc, #84]	; (8008db4 <FLASH_SetErrorCode+0xc8>)
 8008d60:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8008d62:	4b13      	ldr	r3, [pc, #76]	; (8008db0 <FLASH_SetErrorCode+0xc4>)
 8008d64:	2280      	movs	r2, #128	; 0x80
 8008d66:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 8008d68:	4b11      	ldr	r3, [pc, #68]	; (8008db0 <FLASH_SetErrorCode+0xc4>)
 8008d6a:	68db      	ldr	r3, [r3, #12]
 8008d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d009      	beq.n	8008d88 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8008d74:	4b0f      	ldr	r3, [pc, #60]	; (8008db4 <FLASH_SetErrorCode+0xc8>)
 8008d76:	69db      	ldr	r3, [r3, #28]
 8008d78:	f043 0301 	orr.w	r3, r3, #1
 8008d7c:	4a0d      	ldr	r2, [pc, #52]	; (8008db4 <FLASH_SetErrorCode+0xc8>)
 8008d7e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 8008d80:	4b0b      	ldr	r3, [pc, #44]	; (8008db0 <FLASH_SetErrorCode+0xc4>)
 8008d82:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008d86:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8008d88:	4b09      	ldr	r3, [pc, #36]	; (8008db0 <FLASH_SetErrorCode+0xc4>)
 8008d8a:	68db      	ldr	r3, [r3, #12]
 8008d8c:	f003 0302 	and.w	r3, r3, #2
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d008      	beq.n	8008da6 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8008d94:	4b07      	ldr	r3, [pc, #28]	; (8008db4 <FLASH_SetErrorCode+0xc8>)
 8008d96:	69db      	ldr	r3, [r3, #28]
 8008d98:	f043 0320 	orr.w	r3, r3, #32
 8008d9c:	4a05      	ldr	r2, [pc, #20]	; (8008db4 <FLASH_SetErrorCode+0xc8>)
 8008d9e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8008da0:	4b03      	ldr	r3, [pc, #12]	; (8008db0 <FLASH_SetErrorCode+0xc4>)
 8008da2:	2202      	movs	r2, #2
 8008da4:	60da      	str	r2, [r3, #12]
  }
}
 8008da6:	bf00      	nop
 8008da8:	46bd      	mov	sp, r7
 8008daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dae:	4770      	bx	lr
 8008db0:	40023c00 	.word	0x40023c00
 8008db4:	2001a914 	.word	0x2001a914

08008db8 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8008db8:	b480      	push	{r7}
 8008dba:	b085      	sub	sp, #20
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	6078      	str	r0, [r7, #4]
 8008dc0:	460b      	mov	r3, r1
 8008dc2:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8008dc4:	2300      	movs	r3, #0
 8008dc6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8008dc8:	78fb      	ldrb	r3, [r7, #3]
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	d102      	bne.n	8008dd4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8008dce:	2300      	movs	r3, #0
 8008dd0:	60fb      	str	r3, [r7, #12]
 8008dd2:	e010      	b.n	8008df6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008dd4:	78fb      	ldrb	r3, [r7, #3]
 8008dd6:	2b01      	cmp	r3, #1
 8008dd8:	d103      	bne.n	8008de2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8008dda:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008dde:	60fb      	str	r3, [r7, #12]
 8008de0:	e009      	b.n	8008df6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8008de2:	78fb      	ldrb	r3, [r7, #3]
 8008de4:	2b02      	cmp	r3, #2
 8008de6:	d103      	bne.n	8008df0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008de8:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008dec:	60fb      	str	r3, [r7, #12]
 8008dee:	e002      	b.n	8008df6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008df0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008df4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008df6:	4b13      	ldr	r3, [pc, #76]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008df8:	691b      	ldr	r3, [r3, #16]
 8008dfa:	4a12      	ldr	r2, [pc, #72]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008dfc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008e00:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8008e02:	4b10      	ldr	r3, [pc, #64]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e04:	691a      	ldr	r2, [r3, #16]
 8008e06:	490f      	ldr	r1, [pc, #60]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e08:	68fb      	ldr	r3, [r7, #12]
 8008e0a:	4313      	orrs	r3, r2
 8008e0c:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8008e0e:	4b0d      	ldr	r3, [pc, #52]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e10:	691b      	ldr	r3, [r3, #16]
 8008e12:	4a0c      	ldr	r2, [pc, #48]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e14:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8008e18:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8008e1a:	4b0a      	ldr	r3, [pc, #40]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e1c:	691a      	ldr	r2, [r3, #16]
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	00db      	lsls	r3, r3, #3
 8008e22:	4313      	orrs	r3, r2
 8008e24:	4a07      	ldr	r2, [pc, #28]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e26:	f043 0302 	orr.w	r3, r3, #2
 8008e2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008e2c:	4b05      	ldr	r3, [pc, #20]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e2e:	691b      	ldr	r3, [r3, #16]
 8008e30:	4a04      	ldr	r2, [pc, #16]	; (8008e44 <FLASH_Erase_Sector+0x8c>)
 8008e32:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008e36:	6113      	str	r3, [r2, #16]
}
 8008e38:	bf00      	nop
 8008e3a:	3714      	adds	r7, #20
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e42:	4770      	bx	lr
 8008e44:	40023c00 	.word	0x40023c00

08008e48 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8008e4c:	4b20      	ldr	r3, [pc, #128]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d017      	beq.n	8008e88 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8008e58:	4b1d      	ldr	r3, [pc, #116]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e5a:	681b      	ldr	r3, [r3, #0]
 8008e5c:	4a1c      	ldr	r2, [pc, #112]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e5e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008e62:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008e64:	4b1a      	ldr	r3, [pc, #104]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a19      	ldr	r2, [pc, #100]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e6a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8008e6e:	6013      	str	r3, [r2, #0]
 8008e70:	4b17      	ldr	r3, [pc, #92]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	4a16      	ldr	r2, [pc, #88]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e76:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008e7a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008e7c:	4b14      	ldr	r3, [pc, #80]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	4a13      	ldr	r2, [pc, #76]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e82:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008e86:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008e88:	4b11      	ldr	r3, [pc, #68]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d017      	beq.n	8008ec4 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008e94:	4b0e      	ldr	r3, [pc, #56]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e96:	681b      	ldr	r3, [r3, #0]
 8008e98:	4a0d      	ldr	r2, [pc, #52]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008e9a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008e9e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008ea0:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	4a0a      	ldr	r2, [pc, #40]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008ea6:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008eaa:	6013      	str	r3, [r2, #0]
 8008eac:	4b08      	ldr	r3, [pc, #32]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a07      	ldr	r2, [pc, #28]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008eb2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008eb6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008eb8:	4b05      	ldr	r3, [pc, #20]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	4a04      	ldr	r2, [pc, #16]	; (8008ed0 <FLASH_FlushCaches+0x88>)
 8008ebe:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008ec2:	6013      	str	r3, [r2, #0]
  }
}
 8008ec4:	bf00      	nop
 8008ec6:	46bd      	mov	sp, r7
 8008ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ecc:	4770      	bx	lr
 8008ece:	bf00      	nop
 8008ed0:	40023c00 	.word	0x40023c00

08008ed4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b089      	sub	sp, #36	; 0x24
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
 8008edc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008ede:	2300      	movs	r3, #0
 8008ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008ee2:	2300      	movs	r3, #0
 8008ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008eea:	2300      	movs	r3, #0
 8008eec:	61fb      	str	r3, [r7, #28]
 8008eee:	e165      	b.n	80091bc <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008ef0:	2201      	movs	r2, #1
 8008ef2:	69fb      	ldr	r3, [r7, #28]
 8008ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8008ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008efa:	683b      	ldr	r3, [r7, #0]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	697a      	ldr	r2, [r7, #20]
 8008f00:	4013      	ands	r3, r2
 8008f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008f04:	693a      	ldr	r2, [r7, #16]
 8008f06:	697b      	ldr	r3, [r7, #20]
 8008f08:	429a      	cmp	r2, r3
 8008f0a:	f040 8154 	bne.w	80091b6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008f0e:	683b      	ldr	r3, [r7, #0]
 8008f10:	685b      	ldr	r3, [r3, #4]
 8008f12:	f003 0303 	and.w	r3, r3, #3
 8008f16:	2b01      	cmp	r3, #1
 8008f18:	d005      	beq.n	8008f26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008f1a:	683b      	ldr	r3, [r7, #0]
 8008f1c:	685b      	ldr	r3, [r3, #4]
 8008f1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008f22:	2b02      	cmp	r3, #2
 8008f24:	d130      	bne.n	8008f88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008f26:	687b      	ldr	r3, [r7, #4]
 8008f28:	689b      	ldr	r3, [r3, #8]
 8008f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8008f2c:	69fb      	ldr	r3, [r7, #28]
 8008f2e:	005b      	lsls	r3, r3, #1
 8008f30:	2203      	movs	r2, #3
 8008f32:	fa02 f303 	lsl.w	r3, r2, r3
 8008f36:	43db      	mvns	r3, r3
 8008f38:	69ba      	ldr	r2, [r7, #24]
 8008f3a:	4013      	ands	r3, r2
 8008f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008f3e:	683b      	ldr	r3, [r7, #0]
 8008f40:	68da      	ldr	r2, [r3, #12]
 8008f42:	69fb      	ldr	r3, [r7, #28]
 8008f44:	005b      	lsls	r3, r3, #1
 8008f46:	fa02 f303 	lsl.w	r3, r2, r3
 8008f4a:	69ba      	ldr	r2, [r7, #24]
 8008f4c:	4313      	orrs	r3, r2
 8008f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	69ba      	ldr	r2, [r7, #24]
 8008f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	685b      	ldr	r3, [r3, #4]
 8008f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8008f5c:	2201      	movs	r2, #1
 8008f5e:	69fb      	ldr	r3, [r7, #28]
 8008f60:	fa02 f303 	lsl.w	r3, r2, r3
 8008f64:	43db      	mvns	r3, r3
 8008f66:	69ba      	ldr	r2, [r7, #24]
 8008f68:	4013      	ands	r3, r2
 8008f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008f6c:	683b      	ldr	r3, [r7, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	091b      	lsrs	r3, r3, #4
 8008f72:	f003 0201 	and.w	r2, r3, #1
 8008f76:	69fb      	ldr	r3, [r7, #28]
 8008f78:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7c:	69ba      	ldr	r2, [r7, #24]
 8008f7e:	4313      	orrs	r3, r2
 8008f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	69ba      	ldr	r2, [r7, #24]
 8008f86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008f88:	683b      	ldr	r3, [r7, #0]
 8008f8a:	685b      	ldr	r3, [r3, #4]
 8008f8c:	f003 0303 	and.w	r3, r3, #3
 8008f90:	2b03      	cmp	r3, #3
 8008f92:	d017      	beq.n	8008fc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	68db      	ldr	r3, [r3, #12]
 8008f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008f9a:	69fb      	ldr	r3, [r7, #28]
 8008f9c:	005b      	lsls	r3, r3, #1
 8008f9e:	2203      	movs	r2, #3
 8008fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8008fa4:	43db      	mvns	r3, r3
 8008fa6:	69ba      	ldr	r2, [r7, #24]
 8008fa8:	4013      	ands	r3, r2
 8008faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008fac:	683b      	ldr	r3, [r7, #0]
 8008fae:	689a      	ldr	r2, [r3, #8]
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	005b      	lsls	r3, r3, #1
 8008fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8008fb8:	69ba      	ldr	r2, [r7, #24]
 8008fba:	4313      	orrs	r3, r2
 8008fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	69ba      	ldr	r2, [r7, #24]
 8008fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008fc4:	683b      	ldr	r3, [r7, #0]
 8008fc6:	685b      	ldr	r3, [r3, #4]
 8008fc8:	f003 0303 	and.w	r3, r3, #3
 8008fcc:	2b02      	cmp	r3, #2
 8008fce:	d123      	bne.n	8009018 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008fd0:	69fb      	ldr	r3, [r7, #28]
 8008fd2:	08da      	lsrs	r2, r3, #3
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	3208      	adds	r2, #8
 8008fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008fde:	69fb      	ldr	r3, [r7, #28]
 8008fe0:	f003 0307 	and.w	r3, r3, #7
 8008fe4:	009b      	lsls	r3, r3, #2
 8008fe6:	220f      	movs	r2, #15
 8008fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8008fec:	43db      	mvns	r3, r3
 8008fee:	69ba      	ldr	r2, [r7, #24]
 8008ff0:	4013      	ands	r3, r2
 8008ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008ff4:	683b      	ldr	r3, [r7, #0]
 8008ff6:	691a      	ldr	r2, [r3, #16]
 8008ff8:	69fb      	ldr	r3, [r7, #28]
 8008ffa:	f003 0307 	and.w	r3, r3, #7
 8008ffe:	009b      	lsls	r3, r3, #2
 8009000:	fa02 f303 	lsl.w	r3, r2, r3
 8009004:	69ba      	ldr	r2, [r7, #24]
 8009006:	4313      	orrs	r3, r2
 8009008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800900a:	69fb      	ldr	r3, [r7, #28]
 800900c:	08da      	lsrs	r2, r3, #3
 800900e:	687b      	ldr	r3, [r7, #4]
 8009010:	3208      	adds	r2, #8
 8009012:	69b9      	ldr	r1, [r7, #24]
 8009014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800901e:	69fb      	ldr	r3, [r7, #28]
 8009020:	005b      	lsls	r3, r3, #1
 8009022:	2203      	movs	r2, #3
 8009024:	fa02 f303 	lsl.w	r3, r2, r3
 8009028:	43db      	mvns	r3, r3
 800902a:	69ba      	ldr	r2, [r7, #24]
 800902c:	4013      	ands	r3, r2
 800902e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8009030:	683b      	ldr	r3, [r7, #0]
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f003 0203 	and.w	r2, r3, #3
 8009038:	69fb      	ldr	r3, [r7, #28]
 800903a:	005b      	lsls	r3, r3, #1
 800903c:	fa02 f303 	lsl.w	r3, r2, r3
 8009040:	69ba      	ldr	r2, [r7, #24]
 8009042:	4313      	orrs	r3, r2
 8009044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	69ba      	ldr	r2, [r7, #24]
 800904a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8009054:	2b00      	cmp	r3, #0
 8009056:	f000 80ae 	beq.w	80091b6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800905a:	2300      	movs	r3, #0
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	4b5d      	ldr	r3, [pc, #372]	; (80091d4 <HAL_GPIO_Init+0x300>)
 8009060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009062:	4a5c      	ldr	r2, [pc, #368]	; (80091d4 <HAL_GPIO_Init+0x300>)
 8009064:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8009068:	6453      	str	r3, [r2, #68]	; 0x44
 800906a:	4b5a      	ldr	r3, [pc, #360]	; (80091d4 <HAL_GPIO_Init+0x300>)
 800906c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800906e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009072:	60fb      	str	r3, [r7, #12]
 8009074:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8009076:	4a58      	ldr	r2, [pc, #352]	; (80091d8 <HAL_GPIO_Init+0x304>)
 8009078:	69fb      	ldr	r3, [r7, #28]
 800907a:	089b      	lsrs	r3, r3, #2
 800907c:	3302      	adds	r3, #2
 800907e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009082:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8009084:	69fb      	ldr	r3, [r7, #28]
 8009086:	f003 0303 	and.w	r3, r3, #3
 800908a:	009b      	lsls	r3, r3, #2
 800908c:	220f      	movs	r2, #15
 800908e:	fa02 f303 	lsl.w	r3, r2, r3
 8009092:	43db      	mvns	r3, r3
 8009094:	69ba      	ldr	r2, [r7, #24]
 8009096:	4013      	ands	r3, r2
 8009098:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	4a4f      	ldr	r2, [pc, #316]	; (80091dc <HAL_GPIO_Init+0x308>)
 800909e:	4293      	cmp	r3, r2
 80090a0:	d025      	beq.n	80090ee <HAL_GPIO_Init+0x21a>
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	4a4e      	ldr	r2, [pc, #312]	; (80091e0 <HAL_GPIO_Init+0x30c>)
 80090a6:	4293      	cmp	r3, r2
 80090a8:	d01f      	beq.n	80090ea <HAL_GPIO_Init+0x216>
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	4a4d      	ldr	r2, [pc, #308]	; (80091e4 <HAL_GPIO_Init+0x310>)
 80090ae:	4293      	cmp	r3, r2
 80090b0:	d019      	beq.n	80090e6 <HAL_GPIO_Init+0x212>
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	4a4c      	ldr	r2, [pc, #304]	; (80091e8 <HAL_GPIO_Init+0x314>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d013      	beq.n	80090e2 <HAL_GPIO_Init+0x20e>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	4a4b      	ldr	r2, [pc, #300]	; (80091ec <HAL_GPIO_Init+0x318>)
 80090be:	4293      	cmp	r3, r2
 80090c0:	d00d      	beq.n	80090de <HAL_GPIO_Init+0x20a>
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	4a4a      	ldr	r2, [pc, #296]	; (80091f0 <HAL_GPIO_Init+0x31c>)
 80090c6:	4293      	cmp	r3, r2
 80090c8:	d007      	beq.n	80090da <HAL_GPIO_Init+0x206>
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	4a49      	ldr	r2, [pc, #292]	; (80091f4 <HAL_GPIO_Init+0x320>)
 80090ce:	4293      	cmp	r3, r2
 80090d0:	d101      	bne.n	80090d6 <HAL_GPIO_Init+0x202>
 80090d2:	2306      	movs	r3, #6
 80090d4:	e00c      	b.n	80090f0 <HAL_GPIO_Init+0x21c>
 80090d6:	2307      	movs	r3, #7
 80090d8:	e00a      	b.n	80090f0 <HAL_GPIO_Init+0x21c>
 80090da:	2305      	movs	r3, #5
 80090dc:	e008      	b.n	80090f0 <HAL_GPIO_Init+0x21c>
 80090de:	2304      	movs	r3, #4
 80090e0:	e006      	b.n	80090f0 <HAL_GPIO_Init+0x21c>
 80090e2:	2303      	movs	r3, #3
 80090e4:	e004      	b.n	80090f0 <HAL_GPIO_Init+0x21c>
 80090e6:	2302      	movs	r3, #2
 80090e8:	e002      	b.n	80090f0 <HAL_GPIO_Init+0x21c>
 80090ea:	2301      	movs	r3, #1
 80090ec:	e000      	b.n	80090f0 <HAL_GPIO_Init+0x21c>
 80090ee:	2300      	movs	r3, #0
 80090f0:	69fa      	ldr	r2, [r7, #28]
 80090f2:	f002 0203 	and.w	r2, r2, #3
 80090f6:	0092      	lsls	r2, r2, #2
 80090f8:	4093      	lsls	r3, r2
 80090fa:	69ba      	ldr	r2, [r7, #24]
 80090fc:	4313      	orrs	r3, r2
 80090fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8009100:	4935      	ldr	r1, [pc, #212]	; (80091d8 <HAL_GPIO_Init+0x304>)
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	089b      	lsrs	r3, r3, #2
 8009106:	3302      	adds	r3, #2
 8009108:	69ba      	ldr	r2, [r7, #24]
 800910a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800910e:	4b3a      	ldr	r3, [pc, #232]	; (80091f8 <HAL_GPIO_Init+0x324>)
 8009110:	689b      	ldr	r3, [r3, #8]
 8009112:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009114:	693b      	ldr	r3, [r7, #16]
 8009116:	43db      	mvns	r3, r3
 8009118:	69ba      	ldr	r2, [r7, #24]
 800911a:	4013      	ands	r3, r2
 800911c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009126:	2b00      	cmp	r3, #0
 8009128:	d003      	beq.n	8009132 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800912a:	69ba      	ldr	r2, [r7, #24]
 800912c:	693b      	ldr	r3, [r7, #16]
 800912e:	4313      	orrs	r3, r2
 8009130:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8009132:	4a31      	ldr	r2, [pc, #196]	; (80091f8 <HAL_GPIO_Init+0x324>)
 8009134:	69bb      	ldr	r3, [r7, #24]
 8009136:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8009138:	4b2f      	ldr	r3, [pc, #188]	; (80091f8 <HAL_GPIO_Init+0x324>)
 800913a:	68db      	ldr	r3, [r3, #12]
 800913c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800913e:	693b      	ldr	r3, [r7, #16]
 8009140:	43db      	mvns	r3, r3
 8009142:	69ba      	ldr	r2, [r7, #24]
 8009144:	4013      	ands	r3, r2
 8009146:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	685b      	ldr	r3, [r3, #4]
 800914c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009150:	2b00      	cmp	r3, #0
 8009152:	d003      	beq.n	800915c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8009154:	69ba      	ldr	r2, [r7, #24]
 8009156:	693b      	ldr	r3, [r7, #16]
 8009158:	4313      	orrs	r3, r2
 800915a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800915c:	4a26      	ldr	r2, [pc, #152]	; (80091f8 <HAL_GPIO_Init+0x324>)
 800915e:	69bb      	ldr	r3, [r7, #24]
 8009160:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8009162:	4b25      	ldr	r3, [pc, #148]	; (80091f8 <HAL_GPIO_Init+0x324>)
 8009164:	685b      	ldr	r3, [r3, #4]
 8009166:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009168:	693b      	ldr	r3, [r7, #16]
 800916a:	43db      	mvns	r3, r3
 800916c:	69ba      	ldr	r2, [r7, #24]
 800916e:	4013      	ands	r3, r2
 8009170:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8009172:	683b      	ldr	r3, [r7, #0]
 8009174:	685b      	ldr	r3, [r3, #4]
 8009176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800917a:	2b00      	cmp	r3, #0
 800917c:	d003      	beq.n	8009186 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800917e:	69ba      	ldr	r2, [r7, #24]
 8009180:	693b      	ldr	r3, [r7, #16]
 8009182:	4313      	orrs	r3, r2
 8009184:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8009186:	4a1c      	ldr	r2, [pc, #112]	; (80091f8 <HAL_GPIO_Init+0x324>)
 8009188:	69bb      	ldr	r3, [r7, #24]
 800918a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800918c:	4b1a      	ldr	r3, [pc, #104]	; (80091f8 <HAL_GPIO_Init+0x324>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8009192:	693b      	ldr	r3, [r7, #16]
 8009194:	43db      	mvns	r3, r3
 8009196:	69ba      	ldr	r2, [r7, #24]
 8009198:	4013      	ands	r3, r2
 800919a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800919c:	683b      	ldr	r3, [r7, #0]
 800919e:	685b      	ldr	r3, [r3, #4]
 80091a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80091a4:	2b00      	cmp	r3, #0
 80091a6:	d003      	beq.n	80091b0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80091a8:	69ba      	ldr	r2, [r7, #24]
 80091aa:	693b      	ldr	r3, [r7, #16]
 80091ac:	4313      	orrs	r3, r2
 80091ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80091b0:	4a11      	ldr	r2, [pc, #68]	; (80091f8 <HAL_GPIO_Init+0x324>)
 80091b2:	69bb      	ldr	r3, [r7, #24]
 80091b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80091b6:	69fb      	ldr	r3, [r7, #28]
 80091b8:	3301      	adds	r3, #1
 80091ba:	61fb      	str	r3, [r7, #28]
 80091bc:	69fb      	ldr	r3, [r7, #28]
 80091be:	2b0f      	cmp	r3, #15
 80091c0:	f67f ae96 	bls.w	8008ef0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80091c4:	bf00      	nop
 80091c6:	bf00      	nop
 80091c8:	3724      	adds	r7, #36	; 0x24
 80091ca:	46bd      	mov	sp, r7
 80091cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d0:	4770      	bx	lr
 80091d2:	bf00      	nop
 80091d4:	40023800 	.word	0x40023800
 80091d8:	40013800 	.word	0x40013800
 80091dc:	40020000 	.word	0x40020000
 80091e0:	40020400 	.word	0x40020400
 80091e4:	40020800 	.word	0x40020800
 80091e8:	40020c00 	.word	0x40020c00
 80091ec:	40021000 	.word	0x40021000
 80091f0:	40021400 	.word	0x40021400
 80091f4:	40021800 	.word	0x40021800
 80091f8:	40013c00 	.word	0x40013c00

080091fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80091fc:	b480      	push	{r7}
 80091fe:	b085      	sub	sp, #20
 8009200:	af00      	add	r7, sp, #0
 8009202:	6078      	str	r0, [r7, #4]
 8009204:	460b      	mov	r3, r1
 8009206:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	691a      	ldr	r2, [r3, #16]
 800920c:	887b      	ldrh	r3, [r7, #2]
 800920e:	4013      	ands	r3, r2
 8009210:	2b00      	cmp	r3, #0
 8009212:	d002      	beq.n	800921a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8009214:	2301      	movs	r3, #1
 8009216:	73fb      	strb	r3, [r7, #15]
 8009218:	e001      	b.n	800921e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800921a:	2300      	movs	r3, #0
 800921c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800921e:	7bfb      	ldrb	r3, [r7, #15]
}
 8009220:	4618      	mov	r0, r3
 8009222:	3714      	adds	r7, #20
 8009224:	46bd      	mov	sp, r7
 8009226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800922a:	4770      	bx	lr

0800922c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800922c:	b480      	push	{r7}
 800922e:	b083      	sub	sp, #12
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
 8009234:	460b      	mov	r3, r1
 8009236:	807b      	strh	r3, [r7, #2]
 8009238:	4613      	mov	r3, r2
 800923a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800923c:	787b      	ldrb	r3, [r7, #1]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d003      	beq.n	800924a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8009242:	887a      	ldrh	r2, [r7, #2]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8009248:	e003      	b.n	8009252 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800924a:	887b      	ldrh	r3, [r7, #2]
 800924c:	041a      	lsls	r2, r3, #16
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	619a      	str	r2, [r3, #24]
}
 8009252:	bf00      	nop
 8009254:	370c      	adds	r7, #12
 8009256:	46bd      	mov	sp, r7
 8009258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800925c:	4770      	bx	lr

0800925e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800925e:	b480      	push	{r7}
 8009260:	b085      	sub	sp, #20
 8009262:	af00      	add	r7, sp, #0
 8009264:	6078      	str	r0, [r7, #4]
 8009266:	460b      	mov	r3, r1
 8009268:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	695b      	ldr	r3, [r3, #20]
 800926e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8009270:	887a      	ldrh	r2, [r7, #2]
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	4013      	ands	r3, r2
 8009276:	041a      	lsls	r2, r3, #16
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	43d9      	mvns	r1, r3
 800927c:	887b      	ldrh	r3, [r7, #2]
 800927e:	400b      	ands	r3, r1
 8009280:	431a      	orrs	r2, r3
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	619a      	str	r2, [r3, #24]
}
 8009286:	bf00      	nop
 8009288:	3714      	adds	r7, #20
 800928a:	46bd      	mov	sp, r7
 800928c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009290:	4770      	bx	lr
	...

08009294 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8009294:	b580      	push	{r7, lr}
 8009296:	b082      	sub	sp, #8
 8009298:	af00      	add	r7, sp, #0
 800929a:	4603      	mov	r3, r0
 800929c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800929e:	4b08      	ldr	r3, [pc, #32]	; (80092c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80092a0:	695a      	ldr	r2, [r3, #20]
 80092a2:	88fb      	ldrh	r3, [r7, #6]
 80092a4:	4013      	ands	r3, r2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d006      	beq.n	80092b8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80092aa:	4a05      	ldr	r2, [pc, #20]	; (80092c0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80092ac:	88fb      	ldrh	r3, [r7, #6]
 80092ae:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80092b0:	88fb      	ldrh	r3, [r7, #6]
 80092b2:	4618      	mov	r0, r3
 80092b4:	f7f9 fb00 	bl	80028b8 <HAL_GPIO_EXTI_Callback>
  }
}
 80092b8:	bf00      	nop
 80092ba:	3708      	adds	r7, #8
 80092bc:	46bd      	mov	sp, r7
 80092be:	bd80      	pop	{r7, pc}
 80092c0:	40013c00 	.word	0x40013c00

080092c4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80092c4:	b580      	push	{r7, lr}
 80092c6:	b084      	sub	sp, #16
 80092c8:	af00      	add	r7, sp, #0
 80092ca:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b00      	cmp	r3, #0
 80092d0:	d101      	bne.n	80092d6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	e12b      	b.n	800952e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80092dc:	b2db      	uxtb	r3, r3
 80092de:	2b00      	cmp	r3, #0
 80092e0:	d106      	bne.n	80092f0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7fd fbc4 	bl	8006a78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80092f0:	687b      	ldr	r3, [r7, #4]
 80092f2:	2224      	movs	r2, #36	; 0x24
 80092f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681a      	ldr	r2, [r3, #0]
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	f022 0201 	bic.w	r2, r2, #1
 8009306:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681a      	ldr	r2, [r3, #0]
 800930e:	687b      	ldr	r3, [r7, #4]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009316:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	681a      	ldr	r2, [r3, #0]
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8009326:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8009328:	f002 ff64 	bl	800c1f4 <HAL_RCC_GetPCLK1Freq>
 800932c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	685b      	ldr	r3, [r3, #4]
 8009332:	4a81      	ldr	r2, [pc, #516]	; (8009538 <HAL_I2C_Init+0x274>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d807      	bhi.n	8009348 <HAL_I2C_Init+0x84>
 8009338:	68fb      	ldr	r3, [r7, #12]
 800933a:	4a80      	ldr	r2, [pc, #512]	; (800953c <HAL_I2C_Init+0x278>)
 800933c:	4293      	cmp	r3, r2
 800933e:	bf94      	ite	ls
 8009340:	2301      	movls	r3, #1
 8009342:	2300      	movhi	r3, #0
 8009344:	b2db      	uxtb	r3, r3
 8009346:	e006      	b.n	8009356 <HAL_I2C_Init+0x92>
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	4a7d      	ldr	r2, [pc, #500]	; (8009540 <HAL_I2C_Init+0x27c>)
 800934c:	4293      	cmp	r3, r2
 800934e:	bf94      	ite	ls
 8009350:	2301      	movls	r3, #1
 8009352:	2300      	movhi	r3, #0
 8009354:	b2db      	uxtb	r3, r3
 8009356:	2b00      	cmp	r3, #0
 8009358:	d001      	beq.n	800935e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800935a:	2301      	movs	r3, #1
 800935c:	e0e7      	b.n	800952e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	4a78      	ldr	r2, [pc, #480]	; (8009544 <HAL_I2C_Init+0x280>)
 8009362:	fba2 2303 	umull	r2, r3, r2, r3
 8009366:	0c9b      	lsrs	r3, r3, #18
 8009368:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	685b      	ldr	r3, [r3, #4]
 8009370:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	68ba      	ldr	r2, [r7, #8]
 800937a:	430a      	orrs	r2, r1
 800937c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	6a1b      	ldr	r3, [r3, #32]
 8009384:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	685b      	ldr	r3, [r3, #4]
 800938c:	4a6a      	ldr	r2, [pc, #424]	; (8009538 <HAL_I2C_Init+0x274>)
 800938e:	4293      	cmp	r3, r2
 8009390:	d802      	bhi.n	8009398 <HAL_I2C_Init+0xd4>
 8009392:	68bb      	ldr	r3, [r7, #8]
 8009394:	3301      	adds	r3, #1
 8009396:	e009      	b.n	80093ac <HAL_I2C_Init+0xe8>
 8009398:	68bb      	ldr	r3, [r7, #8]
 800939a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800939e:	fb02 f303 	mul.w	r3, r2, r3
 80093a2:	4a69      	ldr	r2, [pc, #420]	; (8009548 <HAL_I2C_Init+0x284>)
 80093a4:	fba2 2303 	umull	r2, r3, r2, r3
 80093a8:	099b      	lsrs	r3, r3, #6
 80093aa:	3301      	adds	r3, #1
 80093ac:	687a      	ldr	r2, [r7, #4]
 80093ae:	6812      	ldr	r2, [r2, #0]
 80093b0:	430b      	orrs	r3, r1
 80093b2:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	69db      	ldr	r3, [r3, #28]
 80093ba:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80093be:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80093c2:	687b      	ldr	r3, [r7, #4]
 80093c4:	685b      	ldr	r3, [r3, #4]
 80093c6:	495c      	ldr	r1, [pc, #368]	; (8009538 <HAL_I2C_Init+0x274>)
 80093c8:	428b      	cmp	r3, r1
 80093ca:	d819      	bhi.n	8009400 <HAL_I2C_Init+0x13c>
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	1e59      	subs	r1, r3, #1
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	685b      	ldr	r3, [r3, #4]
 80093d4:	005b      	lsls	r3, r3, #1
 80093d6:	fbb1 f3f3 	udiv	r3, r1, r3
 80093da:	1c59      	adds	r1, r3, #1
 80093dc:	f640 73fc 	movw	r3, #4092	; 0xffc
 80093e0:	400b      	ands	r3, r1
 80093e2:	2b00      	cmp	r3, #0
 80093e4:	d00a      	beq.n	80093fc <HAL_I2C_Init+0x138>
 80093e6:	68fb      	ldr	r3, [r7, #12]
 80093e8:	1e59      	subs	r1, r3, #1
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	005b      	lsls	r3, r3, #1
 80093f0:	fbb1 f3f3 	udiv	r3, r1, r3
 80093f4:	3301      	adds	r3, #1
 80093f6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80093fa:	e051      	b.n	80094a0 <HAL_I2C_Init+0x1dc>
 80093fc:	2304      	movs	r3, #4
 80093fe:	e04f      	b.n	80094a0 <HAL_I2C_Init+0x1dc>
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	689b      	ldr	r3, [r3, #8]
 8009404:	2b00      	cmp	r3, #0
 8009406:	d111      	bne.n	800942c <HAL_I2C_Init+0x168>
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	1e58      	subs	r0, r3, #1
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	6859      	ldr	r1, [r3, #4]
 8009410:	460b      	mov	r3, r1
 8009412:	005b      	lsls	r3, r3, #1
 8009414:	440b      	add	r3, r1
 8009416:	fbb0 f3f3 	udiv	r3, r0, r3
 800941a:	3301      	adds	r3, #1
 800941c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009420:	2b00      	cmp	r3, #0
 8009422:	bf0c      	ite	eq
 8009424:	2301      	moveq	r3, #1
 8009426:	2300      	movne	r3, #0
 8009428:	b2db      	uxtb	r3, r3
 800942a:	e012      	b.n	8009452 <HAL_I2C_Init+0x18e>
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	1e58      	subs	r0, r3, #1
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	6859      	ldr	r1, [r3, #4]
 8009434:	460b      	mov	r3, r1
 8009436:	009b      	lsls	r3, r3, #2
 8009438:	440b      	add	r3, r1
 800943a:	0099      	lsls	r1, r3, #2
 800943c:	440b      	add	r3, r1
 800943e:	fbb0 f3f3 	udiv	r3, r0, r3
 8009442:	3301      	adds	r3, #1
 8009444:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009448:	2b00      	cmp	r3, #0
 800944a:	bf0c      	ite	eq
 800944c:	2301      	moveq	r3, #1
 800944e:	2300      	movne	r3, #0
 8009450:	b2db      	uxtb	r3, r3
 8009452:	2b00      	cmp	r3, #0
 8009454:	d001      	beq.n	800945a <HAL_I2C_Init+0x196>
 8009456:	2301      	movs	r3, #1
 8009458:	e022      	b.n	80094a0 <HAL_I2C_Init+0x1dc>
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	689b      	ldr	r3, [r3, #8]
 800945e:	2b00      	cmp	r3, #0
 8009460:	d10e      	bne.n	8009480 <HAL_I2C_Init+0x1bc>
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	1e58      	subs	r0, r3, #1
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	6859      	ldr	r1, [r3, #4]
 800946a:	460b      	mov	r3, r1
 800946c:	005b      	lsls	r3, r3, #1
 800946e:	440b      	add	r3, r1
 8009470:	fbb0 f3f3 	udiv	r3, r0, r3
 8009474:	3301      	adds	r3, #1
 8009476:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800947a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800947e:	e00f      	b.n	80094a0 <HAL_I2C_Init+0x1dc>
 8009480:	68fb      	ldr	r3, [r7, #12]
 8009482:	1e58      	subs	r0, r3, #1
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6859      	ldr	r1, [r3, #4]
 8009488:	460b      	mov	r3, r1
 800948a:	009b      	lsls	r3, r3, #2
 800948c:	440b      	add	r3, r1
 800948e:	0099      	lsls	r1, r3, #2
 8009490:	440b      	add	r3, r1
 8009492:	fbb0 f3f3 	udiv	r3, r0, r3
 8009496:	3301      	adds	r3, #1
 8009498:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800949c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80094a0:	6879      	ldr	r1, [r7, #4]
 80094a2:	6809      	ldr	r1, [r1, #0]
 80094a4:	4313      	orrs	r3, r2
 80094a6:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	69da      	ldr	r2, [r3, #28]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	6a1b      	ldr	r3, [r3, #32]
 80094ba:	431a      	orrs	r2, r3
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	430a      	orrs	r2, r1
 80094c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	689b      	ldr	r3, [r3, #8]
 80094ca:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80094ce:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80094d2:	687a      	ldr	r2, [r7, #4]
 80094d4:	6911      	ldr	r1, [r2, #16]
 80094d6:	687a      	ldr	r2, [r7, #4]
 80094d8:	68d2      	ldr	r2, [r2, #12]
 80094da:	4311      	orrs	r1, r2
 80094dc:	687a      	ldr	r2, [r7, #4]
 80094de:	6812      	ldr	r2, [r2, #0]
 80094e0:	430b      	orrs	r3, r1
 80094e2:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	681b      	ldr	r3, [r3, #0]
 80094e8:	68db      	ldr	r3, [r3, #12]
 80094ea:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80094ee:	687b      	ldr	r3, [r7, #4]
 80094f0:	695a      	ldr	r2, [r3, #20]
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	699b      	ldr	r3, [r3, #24]
 80094f6:	431a      	orrs	r2, r3
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	430a      	orrs	r2, r1
 80094fe:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0201 	orr.w	r2, r2, #1
 800950e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	2220      	movs	r2, #32
 800951a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2200      	movs	r2, #0
 8009522:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	2200      	movs	r2, #0
 8009528:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800952c:	2300      	movs	r3, #0
}
 800952e:	4618      	mov	r0, r3
 8009530:	3710      	adds	r7, #16
 8009532:	46bd      	mov	sp, r7
 8009534:	bd80      	pop	{r7, pc}
 8009536:	bf00      	nop
 8009538:	000186a0 	.word	0x000186a0
 800953c:	001e847f 	.word	0x001e847f
 8009540:	003d08ff 	.word	0x003d08ff
 8009544:	431bde83 	.word	0x431bde83
 8009548:	10624dd3 	.word	0x10624dd3

0800954c <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 800954c:	b480      	push	{r7}
 800954e:	b083      	sub	sp, #12
 8009550:	af00      	add	r7, sp, #0
 8009552:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	695b      	ldr	r3, [r3, #20]
 800955a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800955e:	2b80      	cmp	r3, #128	; 0x80
 8009560:	d103      	bne.n	800956a <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	2200      	movs	r2, #0
 8009568:	611a      	str	r2, [r3, #16]
  }
}
 800956a:	bf00      	nop
 800956c:	370c      	adds	r7, #12
 800956e:	46bd      	mov	sp, r7
 8009570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009574:	4770      	bx	lr
	...

08009578 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009578:	b580      	push	{r7, lr}
 800957a:	b088      	sub	sp, #32
 800957c:	af02      	add	r7, sp, #8
 800957e:	60f8      	str	r0, [r7, #12]
 8009580:	4608      	mov	r0, r1
 8009582:	4611      	mov	r1, r2
 8009584:	461a      	mov	r2, r3
 8009586:	4603      	mov	r3, r0
 8009588:	817b      	strh	r3, [r7, #10]
 800958a:	460b      	mov	r3, r1
 800958c:	813b      	strh	r3, [r7, #8]
 800958e:	4613      	mov	r3, r2
 8009590:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009592:	f7fd fec3 	bl	800731c <HAL_GetTick>
 8009596:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800959e:	b2db      	uxtb	r3, r3
 80095a0:	2b20      	cmp	r3, #32
 80095a2:	f040 80d9 	bne.w	8009758 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80095a6:	697b      	ldr	r3, [r7, #20]
 80095a8:	9300      	str	r3, [sp, #0]
 80095aa:	2319      	movs	r3, #25
 80095ac:	2201      	movs	r2, #1
 80095ae:	496d      	ldr	r1, [pc, #436]	; (8009764 <HAL_I2C_Mem_Write+0x1ec>)
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f002 fa3f 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 80095b6:	4603      	mov	r3, r0
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d001      	beq.n	80095c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80095bc:	2302      	movs	r3, #2
 80095be:	e0cc      	b.n	800975a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80095c6:	2b01      	cmp	r3, #1
 80095c8:	d101      	bne.n	80095ce <HAL_I2C_Mem_Write+0x56>
 80095ca:	2302      	movs	r3, #2
 80095cc:	e0c5      	b.n	800975a <HAL_I2C_Mem_Write+0x1e2>
 80095ce:	68fb      	ldr	r3, [r7, #12]
 80095d0:	2201      	movs	r2, #1
 80095d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	681b      	ldr	r3, [r3, #0]
 80095dc:	f003 0301 	and.w	r3, r3, #1
 80095e0:	2b01      	cmp	r3, #1
 80095e2:	d007      	beq.n	80095f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	681a      	ldr	r2, [r3, #0]
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	f042 0201 	orr.w	r2, r2, #1
 80095f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	681a      	ldr	r2, [r3, #0]
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009602:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	2221      	movs	r2, #33	; 0x21
 8009608:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	2240      	movs	r2, #64	; 0x40
 8009610:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009614:	68fb      	ldr	r3, [r7, #12]
 8009616:	2200      	movs	r2, #0
 8009618:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800961a:	68fb      	ldr	r3, [r7, #12]
 800961c:	6a3a      	ldr	r2, [r7, #32]
 800961e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8009624:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800962a:	b29a      	uxth	r2, r3
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	4a4d      	ldr	r2, [pc, #308]	; (8009768 <HAL_I2C_Mem_Write+0x1f0>)
 8009634:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8009636:	88f8      	ldrh	r0, [r7, #6]
 8009638:	893a      	ldrh	r2, [r7, #8]
 800963a:	8979      	ldrh	r1, [r7, #10]
 800963c:	697b      	ldr	r3, [r7, #20]
 800963e:	9301      	str	r3, [sp, #4]
 8009640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009642:	9300      	str	r3, [sp, #0]
 8009644:	4603      	mov	r3, r0
 8009646:	68f8      	ldr	r0, [r7, #12]
 8009648:	f001 ffce 	bl	800b5e8 <I2C_RequestMemoryWrite>
 800964c:	4603      	mov	r3, r0
 800964e:	2b00      	cmp	r3, #0
 8009650:	d052      	beq.n	80096f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8009652:	2301      	movs	r3, #1
 8009654:	e081      	b.n	800975a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009656:	697a      	ldr	r2, [r7, #20]
 8009658:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800965a:	68f8      	ldr	r0, [r7, #12]
 800965c:	f002 fb04 	bl	800bc68 <I2C_WaitOnTXEFlagUntilTimeout>
 8009660:	4603      	mov	r3, r0
 8009662:	2b00      	cmp	r3, #0
 8009664:	d00d      	beq.n	8009682 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800966a:	2b04      	cmp	r3, #4
 800966c:	d107      	bne.n	800967e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800966e:	68fb      	ldr	r3, [r7, #12]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	68fb      	ldr	r3, [r7, #12]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800967c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800967e:	2301      	movs	r3, #1
 8009680:	e06b      	b.n	800975a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009686:	781a      	ldrb	r2, [r3, #0]
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009692:	1c5a      	adds	r2, r3, #1
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800969c:	3b01      	subs	r3, #1
 800969e:	b29a      	uxth	r2, r3
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096a8:	b29b      	uxth	r3, r3
 80096aa:	3b01      	subs	r3, #1
 80096ac:	b29a      	uxth	r2, r3
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	695b      	ldr	r3, [r3, #20]
 80096b8:	f003 0304 	and.w	r3, r3, #4
 80096bc:	2b04      	cmp	r3, #4
 80096be:	d11b      	bne.n	80096f8 <HAL_I2C_Mem_Write+0x180>
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d017      	beq.n	80096f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096cc:	781a      	ldrb	r2, [r3, #0]
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096d8:	1c5a      	adds	r2, r3, #1
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096e2:	3b01      	subs	r3, #1
 80096e4:	b29a      	uxth	r2, r3
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80096ea:	68fb      	ldr	r3, [r7, #12]
 80096ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80096ee:	b29b      	uxth	r3, r3
 80096f0:	3b01      	subs	r3, #1
 80096f2:	b29a      	uxth	r2, r3
 80096f4:	68fb      	ldr	r3, [r7, #12]
 80096f6:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80096f8:	68fb      	ldr	r3, [r7, #12]
 80096fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1aa      	bne.n	8009656 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009700:	697a      	ldr	r2, [r7, #20]
 8009702:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009704:	68f8      	ldr	r0, [r7, #12]
 8009706:	f002 faf7 	bl	800bcf8 <I2C_WaitOnBTFFlagUntilTimeout>
 800970a:	4603      	mov	r3, r0
 800970c:	2b00      	cmp	r3, #0
 800970e:	d00d      	beq.n	800972c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8009710:	68fb      	ldr	r3, [r7, #12]
 8009712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009714:	2b04      	cmp	r3, #4
 8009716:	d107      	bne.n	8009728 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	681a      	ldr	r2, [r3, #0]
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009726:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8009728:	2301      	movs	r3, #1
 800972a:	e016      	b.n	800975a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800972c:	68fb      	ldr	r3, [r7, #12]
 800972e:	681b      	ldr	r3, [r3, #0]
 8009730:	681a      	ldr	r2, [r3, #0]
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800973a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800973c:	68fb      	ldr	r3, [r7, #12]
 800973e:	2220      	movs	r2, #32
 8009740:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009744:	68fb      	ldr	r3, [r7, #12]
 8009746:	2200      	movs	r2, #0
 8009748:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800974c:	68fb      	ldr	r3, [r7, #12]
 800974e:	2200      	movs	r2, #0
 8009750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009754:	2300      	movs	r3, #0
 8009756:	e000      	b.n	800975a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8009758:	2302      	movs	r3, #2
  }
}
 800975a:	4618      	mov	r0, r3
 800975c:	3718      	adds	r7, #24
 800975e:	46bd      	mov	sp, r7
 8009760:	bd80      	pop	{r7, pc}
 8009762:	bf00      	nop
 8009764:	00100002 	.word	0x00100002
 8009768:	ffff0000 	.word	0xffff0000

0800976c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800976c:	b580      	push	{r7, lr}
 800976e:	b08c      	sub	sp, #48	; 0x30
 8009770:	af02      	add	r7, sp, #8
 8009772:	60f8      	str	r0, [r7, #12]
 8009774:	4608      	mov	r0, r1
 8009776:	4611      	mov	r1, r2
 8009778:	461a      	mov	r2, r3
 800977a:	4603      	mov	r3, r0
 800977c:	817b      	strh	r3, [r7, #10]
 800977e:	460b      	mov	r3, r1
 8009780:	813b      	strh	r3, [r7, #8]
 8009782:	4613      	mov	r3, r2
 8009784:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8009786:	f7fd fdc9 	bl	800731c <HAL_GetTick>
 800978a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009792:	b2db      	uxtb	r3, r3
 8009794:	2b20      	cmp	r3, #32
 8009796:	f040 8214 	bne.w	8009bc2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800979a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800979c:	9300      	str	r3, [sp, #0]
 800979e:	2319      	movs	r3, #25
 80097a0:	2201      	movs	r2, #1
 80097a2:	497b      	ldr	r1, [pc, #492]	; (8009990 <HAL_I2C_Mem_Read+0x224>)
 80097a4:	68f8      	ldr	r0, [r7, #12]
 80097a6:	f002 f945 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 80097aa:	4603      	mov	r3, r0
 80097ac:	2b00      	cmp	r3, #0
 80097ae:	d001      	beq.n	80097b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80097b0:	2302      	movs	r3, #2
 80097b2:	e207      	b.n	8009bc4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80097ba:	2b01      	cmp	r3, #1
 80097bc:	d101      	bne.n	80097c2 <HAL_I2C_Mem_Read+0x56>
 80097be:	2302      	movs	r3, #2
 80097c0:	e200      	b.n	8009bc4 <HAL_I2C_Mem_Read+0x458>
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	2201      	movs	r2, #1
 80097c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	681b      	ldr	r3, [r3, #0]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	f003 0301 	and.w	r3, r3, #1
 80097d4:	2b01      	cmp	r3, #1
 80097d6:	d007      	beq.n	80097e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f042 0201 	orr.w	r2, r2, #1
 80097e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80097f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80097f8:	68fb      	ldr	r3, [r7, #12]
 80097fa:	2222      	movs	r2, #34	; 0x22
 80097fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009800:	68fb      	ldr	r3, [r7, #12]
 8009802:	2240      	movs	r2, #64	; 0x40
 8009804:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	2200      	movs	r2, #0
 800980c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800980e:	68fb      	ldr	r3, [r7, #12]
 8009810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009812:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8009818:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800981a:	68fb      	ldr	r3, [r7, #12]
 800981c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800981e:	b29a      	uxth	r2, r3
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009824:	68fb      	ldr	r3, [r7, #12]
 8009826:	4a5b      	ldr	r2, [pc, #364]	; (8009994 <HAL_I2C_Mem_Read+0x228>)
 8009828:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800982a:	88f8      	ldrh	r0, [r7, #6]
 800982c:	893a      	ldrh	r2, [r7, #8]
 800982e:	8979      	ldrh	r1, [r7, #10]
 8009830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009832:	9301      	str	r3, [sp, #4]
 8009834:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009836:	9300      	str	r3, [sp, #0]
 8009838:	4603      	mov	r3, r0
 800983a:	68f8      	ldr	r0, [r7, #12]
 800983c:	f001 ff6a 	bl	800b714 <I2C_RequestMemoryRead>
 8009840:	4603      	mov	r3, r0
 8009842:	2b00      	cmp	r3, #0
 8009844:	d001      	beq.n	800984a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8009846:	2301      	movs	r3, #1
 8009848:	e1bc      	b.n	8009bc4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800984a:	68fb      	ldr	r3, [r7, #12]
 800984c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800984e:	2b00      	cmp	r3, #0
 8009850:	d113      	bne.n	800987a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009852:	2300      	movs	r3, #0
 8009854:	623b      	str	r3, [r7, #32]
 8009856:	68fb      	ldr	r3, [r7, #12]
 8009858:	681b      	ldr	r3, [r3, #0]
 800985a:	695b      	ldr	r3, [r3, #20]
 800985c:	623b      	str	r3, [r7, #32]
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	699b      	ldr	r3, [r3, #24]
 8009864:	623b      	str	r3, [r7, #32]
 8009866:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681a      	ldr	r2, [r3, #0]
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009876:	601a      	str	r2, [r3, #0]
 8009878:	e190      	b.n	8009b9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800987a:	68fb      	ldr	r3, [r7, #12]
 800987c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800987e:	2b01      	cmp	r3, #1
 8009880:	d11b      	bne.n	80098ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009890:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009892:	2300      	movs	r3, #0
 8009894:	61fb      	str	r3, [r7, #28]
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	695b      	ldr	r3, [r3, #20]
 800989c:	61fb      	str	r3, [r7, #28]
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	699b      	ldr	r3, [r3, #24]
 80098a4:	61fb      	str	r3, [r7, #28]
 80098a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	681b      	ldr	r3, [r3, #0]
 80098ac:	681a      	ldr	r2, [r3, #0]
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	681b      	ldr	r3, [r3, #0]
 80098b2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80098b6:	601a      	str	r2, [r3, #0]
 80098b8:	e170      	b.n	8009b9c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80098be:	2b02      	cmp	r3, #2
 80098c0:	d11b      	bne.n	80098fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80098d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	681a      	ldr	r2, [r3, #0]
 80098d8:	68fb      	ldr	r3, [r7, #12]
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80098e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098e2:	2300      	movs	r3, #0
 80098e4:	61bb      	str	r3, [r7, #24]
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	695b      	ldr	r3, [r3, #20]
 80098ec:	61bb      	str	r3, [r7, #24]
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	699b      	ldr	r3, [r3, #24]
 80098f4:	61bb      	str	r3, [r7, #24]
 80098f6:	69bb      	ldr	r3, [r7, #24]
 80098f8:	e150      	b.n	8009b9c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80098fa:	2300      	movs	r3, #0
 80098fc:	617b      	str	r3, [r7, #20]
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	681b      	ldr	r3, [r3, #0]
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	617b      	str	r3, [r7, #20]
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	699b      	ldr	r3, [r3, #24]
 800990c:	617b      	str	r3, [r7, #20]
 800990e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8009910:	e144      	b.n	8009b9c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8009912:	68fb      	ldr	r3, [r7, #12]
 8009914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009916:	2b03      	cmp	r3, #3
 8009918:	f200 80f1 	bhi.w	8009afe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009920:	2b01      	cmp	r3, #1
 8009922:	d123      	bne.n	800996c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009926:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009928:	68f8      	ldr	r0, [r7, #12]
 800992a:	f002 fa5f 	bl	800bdec <I2C_WaitOnRXNEFlagUntilTimeout>
 800992e:	4603      	mov	r3, r0
 8009930:	2b00      	cmp	r3, #0
 8009932:	d001      	beq.n	8009938 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8009934:	2301      	movs	r3, #1
 8009936:	e145      	b.n	8009bc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	691a      	ldr	r2, [r3, #16]
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009942:	b2d2      	uxtb	r2, r2
 8009944:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800994a:	1c5a      	adds	r2, r3, #1
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009950:	68fb      	ldr	r3, [r7, #12]
 8009952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009954:	3b01      	subs	r3, #1
 8009956:	b29a      	uxth	r2, r3
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800995c:	68fb      	ldr	r3, [r7, #12]
 800995e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009960:	b29b      	uxth	r3, r3
 8009962:	3b01      	subs	r3, #1
 8009964:	b29a      	uxth	r2, r3
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	855a      	strh	r2, [r3, #42]	; 0x2a
 800996a:	e117      	b.n	8009b9c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009970:	2b02      	cmp	r3, #2
 8009972:	d14e      	bne.n	8009a12 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009976:	9300      	str	r3, [sp, #0]
 8009978:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800997a:	2200      	movs	r2, #0
 800997c:	4906      	ldr	r1, [pc, #24]	; (8009998 <HAL_I2C_Mem_Read+0x22c>)
 800997e:	68f8      	ldr	r0, [r7, #12]
 8009980:	f002 f858 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 8009984:	4603      	mov	r3, r0
 8009986:	2b00      	cmp	r3, #0
 8009988:	d008      	beq.n	800999c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	e11a      	b.n	8009bc4 <HAL_I2C_Mem_Read+0x458>
 800998e:	bf00      	nop
 8009990:	00100002 	.word	0x00100002
 8009994:	ffff0000 	.word	0xffff0000
 8009998:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	681b      	ldr	r3, [r3, #0]
 80099a0:	681a      	ldr	r2, [r3, #0]
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80099aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099ac:	68fb      	ldr	r3, [r7, #12]
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	691a      	ldr	r2, [r3, #16]
 80099b2:	68fb      	ldr	r3, [r7, #12]
 80099b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099b6:	b2d2      	uxtb	r2, r2
 80099b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099be:	1c5a      	adds	r2, r3, #1
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099c8:	3b01      	subs	r3, #1
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	3b01      	subs	r3, #1
 80099d8:	b29a      	uxth	r2, r3
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	681b      	ldr	r3, [r3, #0]
 80099e2:	691a      	ldr	r2, [r3, #16]
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099e8:	b2d2      	uxtb	r2, r2
 80099ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f0:	1c5a      	adds	r2, r3, #1
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80099f6:	68fb      	ldr	r3, [r7, #12]
 80099f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80099fa:	3b01      	subs	r3, #1
 80099fc:	b29a      	uxth	r2, r3
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009a10:	e0c4      	b.n	8009b9c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a14:	9300      	str	r3, [sp, #0]
 8009a16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a18:	2200      	movs	r2, #0
 8009a1a:	496c      	ldr	r1, [pc, #432]	; (8009bcc <HAL_I2C_Mem_Read+0x460>)
 8009a1c:	68f8      	ldr	r0, [r7, #12]
 8009a1e:	f002 f809 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 8009a22:	4603      	mov	r3, r0
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d001      	beq.n	8009a2c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8009a28:	2301      	movs	r3, #1
 8009a2a:	e0cb      	b.n	8009bc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009a2c:	68fb      	ldr	r3, [r7, #12]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009a3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	691a      	ldr	r2, [r3, #16]
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a46:	b2d2      	uxtb	r2, r2
 8009a48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a4e:	1c5a      	adds	r2, r3, #1
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009a54:	68fb      	ldr	r3, [r7, #12]
 8009a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009a58:	3b01      	subs	r3, #1
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	68fb      	ldr	r3, [r7, #12]
 8009a5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009a60:	68fb      	ldr	r3, [r7, #12]
 8009a62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009a64:	b29b      	uxth	r3, r3
 8009a66:	3b01      	subs	r3, #1
 8009a68:	b29a      	uxth	r2, r3
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8009a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009a70:	9300      	str	r3, [sp, #0]
 8009a72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a74:	2200      	movs	r2, #0
 8009a76:	4955      	ldr	r1, [pc, #340]	; (8009bcc <HAL_I2C_Mem_Read+0x460>)
 8009a78:	68f8      	ldr	r0, [r7, #12]
 8009a7a:	f001 ffdb 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 8009a7e:	4603      	mov	r3, r0
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d001      	beq.n	8009a88 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8009a84:	2301      	movs	r3, #1
 8009a86:	e09d      	b.n	8009bc4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	681a      	ldr	r2, [r3, #0]
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009a96:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009a98:	68fb      	ldr	r3, [r7, #12]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	691a      	ldr	r2, [r3, #16]
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aa2:	b2d2      	uxtb	r2, r2
 8009aa4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009aa6:	68fb      	ldr	r3, [r7, #12]
 8009aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aaa:	1c5a      	adds	r2, r3, #1
 8009aac:	68fb      	ldr	r3, [r7, #12]
 8009aae:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	b29a      	uxth	r2, r3
 8009ab8:	68fb      	ldr	r3, [r7, #12]
 8009aba:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009abc:	68fb      	ldr	r3, [r7, #12]
 8009abe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009ac0:	b29b      	uxth	r3, r3
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	b29a      	uxth	r2, r3
 8009ac6:	68fb      	ldr	r3, [r7, #12]
 8009ac8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	691a      	ldr	r2, [r3, #16]
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ad4:	b2d2      	uxtb	r2, r2
 8009ad6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009ad8:	68fb      	ldr	r3, [r7, #12]
 8009ada:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009adc:	1c5a      	adds	r2, r3, #1
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ae6:	3b01      	subs	r3, #1
 8009ae8:	b29a      	uxth	r2, r3
 8009aea:	68fb      	ldr	r3, [r7, #12]
 8009aec:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009aee:	68fb      	ldr	r3, [r7, #12]
 8009af0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009af2:	b29b      	uxth	r3, r3
 8009af4:	3b01      	subs	r3, #1
 8009af6:	b29a      	uxth	r2, r3
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	855a      	strh	r2, [r3, #42]	; 0x2a
 8009afc:	e04e      	b.n	8009b9c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009afe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009b00:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009b02:	68f8      	ldr	r0, [r7, #12]
 8009b04:	f002 f972 	bl	800bdec <I2C_WaitOnRXNEFlagUntilTimeout>
 8009b08:	4603      	mov	r3, r0
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d001      	beq.n	8009b12 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8009b0e:	2301      	movs	r3, #1
 8009b10:	e058      	b.n	8009bc4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b12:	68fb      	ldr	r3, [r7, #12]
 8009b14:	681b      	ldr	r3, [r3, #0]
 8009b16:	691a      	ldr	r2, [r3, #16]
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b1c:	b2d2      	uxtb	r2, r2
 8009b1e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b24:	1c5a      	adds	r2, r3, #1
 8009b26:	68fb      	ldr	r3, [r7, #12]
 8009b28:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	b29a      	uxth	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b3a:	b29b      	uxth	r3, r3
 8009b3c:	3b01      	subs	r3, #1
 8009b3e:	b29a      	uxth	r2, r3
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8009b44:	68fb      	ldr	r3, [r7, #12]
 8009b46:	681b      	ldr	r3, [r3, #0]
 8009b48:	695b      	ldr	r3, [r3, #20]
 8009b4a:	f003 0304 	and.w	r3, r3, #4
 8009b4e:	2b04      	cmp	r3, #4
 8009b50:	d124      	bne.n	8009b9c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b56:	2b03      	cmp	r3, #3
 8009b58:	d107      	bne.n	8009b6a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	681a      	ldr	r2, [r3, #0]
 8009b60:	68fb      	ldr	r3, [r7, #12]
 8009b62:	681b      	ldr	r3, [r3, #0]
 8009b64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009b68:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	691a      	ldr	r2, [r3, #16]
 8009b70:	68fb      	ldr	r3, [r7, #12]
 8009b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b74:	b2d2      	uxtb	r2, r2
 8009b76:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8009b78:	68fb      	ldr	r3, [r7, #12]
 8009b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b7c:	1c5a      	adds	r2, r3, #1
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8009b82:	68fb      	ldr	r3, [r7, #12]
 8009b84:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009b86:	3b01      	subs	r3, #1
 8009b88:	b29a      	uxth	r2, r3
 8009b8a:	68fb      	ldr	r3, [r7, #12]
 8009b8c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8009b8e:	68fb      	ldr	r3, [r7, #12]
 8009b90:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8009b92:	b29b      	uxth	r3, r3
 8009b94:	3b01      	subs	r3, #1
 8009b96:	b29a      	uxth	r2, r3
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8009ba0:	2b00      	cmp	r3, #0
 8009ba2:	f47f aeb6 	bne.w	8009912 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8009ba6:	68fb      	ldr	r3, [r7, #12]
 8009ba8:	2220      	movs	r2, #32
 8009baa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	2200      	movs	r2, #0
 8009bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	e000      	b.n	8009bc4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8009bc2:	2302      	movs	r3, #2
  }
}
 8009bc4:	4618      	mov	r0, r3
 8009bc6:	3728      	adds	r7, #40	; 0x28
 8009bc8:	46bd      	mov	sp, r7
 8009bca:	bd80      	pop	{r7, pc}
 8009bcc:	00010004 	.word	0x00010004

08009bd0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8009bd0:	b580      	push	{r7, lr}
 8009bd2:	b08a      	sub	sp, #40	; 0x28
 8009bd4:	af02      	add	r7, sp, #8
 8009bd6:	60f8      	str	r0, [r7, #12]
 8009bd8:	607a      	str	r2, [r7, #4]
 8009bda:	603b      	str	r3, [r7, #0]
 8009bdc:	460b      	mov	r3, r1
 8009bde:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8009be0:	f7fd fb9c 	bl	800731c <HAL_GetTick>
 8009be4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8009be6:	2300      	movs	r3, #0
 8009be8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009bea:	68fb      	ldr	r3, [r7, #12]
 8009bec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009bf0:	b2db      	uxtb	r3, r3
 8009bf2:	2b20      	cmp	r3, #32
 8009bf4:	f040 8111 	bne.w	8009e1a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009bf8:	69fb      	ldr	r3, [r7, #28]
 8009bfa:	9300      	str	r3, [sp, #0]
 8009bfc:	2319      	movs	r3, #25
 8009bfe:	2201      	movs	r2, #1
 8009c00:	4988      	ldr	r1, [pc, #544]	; (8009e24 <HAL_I2C_IsDeviceReady+0x254>)
 8009c02:	68f8      	ldr	r0, [r7, #12]
 8009c04:	f001 ff16 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 8009c08:	4603      	mov	r3, r0
 8009c0a:	2b00      	cmp	r3, #0
 8009c0c:	d001      	beq.n	8009c12 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8009c0e:	2302      	movs	r3, #2
 8009c10:	e104      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c18:	2b01      	cmp	r3, #1
 8009c1a:	d101      	bne.n	8009c20 <HAL_I2C_IsDeviceReady+0x50>
 8009c1c:	2302      	movs	r3, #2
 8009c1e:	e0fd      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	2201      	movs	r2, #1
 8009c24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	f003 0301 	and.w	r3, r3, #1
 8009c32:	2b01      	cmp	r3, #1
 8009c34:	d007      	beq.n	8009c46 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8009c36:	68fb      	ldr	r3, [r7, #12]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	681a      	ldr	r2, [r3, #0]
 8009c3c:	68fb      	ldr	r3, [r7, #12]
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	f042 0201 	orr.w	r2, r2, #1
 8009c44:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8009c46:	68fb      	ldr	r3, [r7, #12]
 8009c48:	681b      	ldr	r3, [r3, #0]
 8009c4a:	681a      	ldr	r2, [r3, #0]
 8009c4c:	68fb      	ldr	r3, [r7, #12]
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009c54:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	2224      	movs	r2, #36	; 0x24
 8009c5a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8009c5e:	68fb      	ldr	r3, [r7, #12]
 8009c60:	2200      	movs	r2, #0
 8009c62:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	4a70      	ldr	r2, [pc, #448]	; (8009e28 <HAL_I2C_IsDeviceReady+0x258>)
 8009c68:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	681b      	ldr	r3, [r3, #0]
 8009c6e:	681a      	ldr	r2, [r3, #0]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009c78:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8009c7a:	69fb      	ldr	r3, [r7, #28]
 8009c7c:	9300      	str	r3, [sp, #0]
 8009c7e:	683b      	ldr	r3, [r7, #0]
 8009c80:	2200      	movs	r2, #0
 8009c82:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8009c86:	68f8      	ldr	r0, [r7, #12]
 8009c88:	f001 fed4 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 8009c8c:	4603      	mov	r3, r0
 8009c8e:	2b00      	cmp	r3, #0
 8009c90:	d00d      	beq.n	8009cae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009c9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009ca0:	d103      	bne.n	8009caa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8009ca8:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8009caa:	2303      	movs	r3, #3
 8009cac:	e0b6      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8009cae:	897b      	ldrh	r3, [r7, #10]
 8009cb0:	b2db      	uxtb	r3, r3
 8009cb2:	461a      	mov	r2, r3
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8009cbc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8009cbe:	f7fd fb2d 	bl	800731c <HAL_GetTick>
 8009cc2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	695b      	ldr	r3, [r3, #20]
 8009cca:	f003 0302 	and.w	r3, r3, #2
 8009cce:	2b02      	cmp	r3, #2
 8009cd0:	bf0c      	ite	eq
 8009cd2:	2301      	moveq	r3, #1
 8009cd4:	2300      	movne	r3, #0
 8009cd6:	b2db      	uxtb	r3, r3
 8009cd8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	695b      	ldr	r3, [r3, #20]
 8009ce0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009ce4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ce8:	bf0c      	ite	eq
 8009cea:	2301      	moveq	r3, #1
 8009cec:	2300      	movne	r3, #0
 8009cee:	b2db      	uxtb	r3, r3
 8009cf0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009cf2:	e025      	b.n	8009d40 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8009cf4:	f7fd fb12 	bl	800731c <HAL_GetTick>
 8009cf8:	4602      	mov	r2, r0
 8009cfa:	69fb      	ldr	r3, [r7, #28]
 8009cfc:	1ad3      	subs	r3, r2, r3
 8009cfe:	683a      	ldr	r2, [r7, #0]
 8009d00:	429a      	cmp	r2, r3
 8009d02:	d302      	bcc.n	8009d0a <HAL_I2C_IsDeviceReady+0x13a>
 8009d04:	683b      	ldr	r3, [r7, #0]
 8009d06:	2b00      	cmp	r3, #0
 8009d08:	d103      	bne.n	8009d12 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	22a0      	movs	r2, #160	; 0xa0
 8009d0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	695b      	ldr	r3, [r3, #20]
 8009d18:	f003 0302 	and.w	r3, r3, #2
 8009d1c:	2b02      	cmp	r3, #2
 8009d1e:	bf0c      	ite	eq
 8009d20:	2301      	moveq	r3, #1
 8009d22:	2300      	movne	r3, #0
 8009d24:	b2db      	uxtb	r3, r3
 8009d26:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	695b      	ldr	r3, [r3, #20]
 8009d2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009d32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d36:	bf0c      	ite	eq
 8009d38:	2301      	moveq	r3, #1
 8009d3a:	2300      	movne	r3, #0
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8009d40:	68fb      	ldr	r3, [r7, #12]
 8009d42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009d46:	b2db      	uxtb	r3, r3
 8009d48:	2ba0      	cmp	r3, #160	; 0xa0
 8009d4a:	d005      	beq.n	8009d58 <HAL_I2C_IsDeviceReady+0x188>
 8009d4c:	7dfb      	ldrb	r3, [r7, #23]
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d102      	bne.n	8009d58 <HAL_I2C_IsDeviceReady+0x188>
 8009d52:	7dbb      	ldrb	r3, [r7, #22]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d0cd      	beq.n	8009cf4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	2220      	movs	r2, #32
 8009d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8009d60:	68fb      	ldr	r3, [r7, #12]
 8009d62:	681b      	ldr	r3, [r3, #0]
 8009d64:	695b      	ldr	r3, [r3, #20]
 8009d66:	f003 0302 	and.w	r3, r3, #2
 8009d6a:	2b02      	cmp	r3, #2
 8009d6c:	d129      	bne.n	8009dc2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	681b      	ldr	r3, [r3, #0]
 8009d72:	681a      	ldr	r2, [r3, #0]
 8009d74:	68fb      	ldr	r3, [r7, #12]
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009d7c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8009d7e:	2300      	movs	r3, #0
 8009d80:	613b      	str	r3, [r7, #16]
 8009d82:	68fb      	ldr	r3, [r7, #12]
 8009d84:	681b      	ldr	r3, [r3, #0]
 8009d86:	695b      	ldr	r3, [r3, #20]
 8009d88:	613b      	str	r3, [r7, #16]
 8009d8a:	68fb      	ldr	r3, [r7, #12]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	699b      	ldr	r3, [r3, #24]
 8009d90:	613b      	str	r3, [r7, #16]
 8009d92:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009d94:	69fb      	ldr	r3, [r7, #28]
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	2319      	movs	r3, #25
 8009d9a:	2201      	movs	r2, #1
 8009d9c:	4921      	ldr	r1, [pc, #132]	; (8009e24 <HAL_I2C_IsDeviceReady+0x254>)
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f001 fe48 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d001      	beq.n	8009dae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8009daa:	2301      	movs	r3, #1
 8009dac:	e036      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8009dae:	68fb      	ldr	r3, [r7, #12]
 8009db0:	2220      	movs	r2, #32
 8009db2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009db6:	68fb      	ldr	r3, [r7, #12]
 8009db8:	2200      	movs	r2, #0
 8009dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	e02c      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	681a      	ldr	r2, [r3, #0]
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	681b      	ldr	r3, [r3, #0]
 8009dcc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8009dd0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8009dda:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8009ddc:	69fb      	ldr	r3, [r7, #28]
 8009dde:	9300      	str	r3, [sp, #0]
 8009de0:	2319      	movs	r3, #25
 8009de2:	2201      	movs	r2, #1
 8009de4:	490f      	ldr	r1, [pc, #60]	; (8009e24 <HAL_I2C_IsDeviceReady+0x254>)
 8009de6:	68f8      	ldr	r0, [r7, #12]
 8009de8:	f001 fe24 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 8009dec:	4603      	mov	r3, r0
 8009dee:	2b00      	cmp	r3, #0
 8009df0:	d001      	beq.n	8009df6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8009df2:	2301      	movs	r3, #1
 8009df4:	e012      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8009df6:	69bb      	ldr	r3, [r7, #24]
 8009df8:	3301      	adds	r3, #1
 8009dfa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8009dfc:	69ba      	ldr	r2, [r7, #24]
 8009dfe:	687b      	ldr	r3, [r7, #4]
 8009e00:	429a      	cmp	r2, r3
 8009e02:	f4ff af32 	bcc.w	8009c6a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	2220      	movs	r2, #32
 8009e0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2200      	movs	r2, #0
 8009e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8009e16:	2301      	movs	r3, #1
 8009e18:	e000      	b.n	8009e1c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8009e1a:	2302      	movs	r3, #2
  }
}
 8009e1c:	4618      	mov	r0, r3
 8009e1e:	3720      	adds	r7, #32
 8009e20:	46bd      	mov	sp, r7
 8009e22:	bd80      	pop	{r7, pc}
 8009e24:	00100002 	.word	0x00100002
 8009e28:	ffff0000 	.word	0xffff0000

08009e2c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b088      	sub	sp, #32
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8009e34:	2300      	movs	r3, #0
 8009e36:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	685b      	ldr	r3, [r3, #4]
 8009e3e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e44:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8009e46:	687b      	ldr	r3, [r7, #4]
 8009e48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009e4c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e54:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8009e56:	7bfb      	ldrb	r3, [r7, #15]
 8009e58:	2b10      	cmp	r3, #16
 8009e5a:	d003      	beq.n	8009e64 <HAL_I2C_EV_IRQHandler+0x38>
 8009e5c:	7bfb      	ldrb	r3, [r7, #15]
 8009e5e:	2b40      	cmp	r3, #64	; 0x40
 8009e60:	f040 80b1 	bne.w	8009fc6 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	699b      	ldr	r3, [r3, #24]
 8009e6a:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	695b      	ldr	r3, [r3, #20]
 8009e72:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8009e74:	69fb      	ldr	r3, [r7, #28]
 8009e76:	f003 0301 	and.w	r3, r3, #1
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d10d      	bne.n	8009e9a <HAL_I2C_EV_IRQHandler+0x6e>
 8009e7e:	693b      	ldr	r3, [r7, #16]
 8009e80:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8009e84:	d003      	beq.n	8009e8e <HAL_I2C_EV_IRQHandler+0x62>
 8009e86:	693b      	ldr	r3, [r7, #16]
 8009e88:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8009e8c:	d101      	bne.n	8009e92 <HAL_I2C_EV_IRQHandler+0x66>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	e000      	b.n	8009e94 <HAL_I2C_EV_IRQHandler+0x68>
 8009e92:	2300      	movs	r3, #0
 8009e94:	2b01      	cmp	r3, #1
 8009e96:	f000 8114 	beq.w	800a0c2 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009e9a:	69fb      	ldr	r3, [r7, #28]
 8009e9c:	f003 0301 	and.w	r3, r3, #1
 8009ea0:	2b00      	cmp	r3, #0
 8009ea2:	d00b      	beq.n	8009ebc <HAL_I2C_EV_IRQHandler+0x90>
 8009ea4:	697b      	ldr	r3, [r7, #20]
 8009ea6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009eaa:	2b00      	cmp	r3, #0
 8009eac:	d006      	beq.n	8009ebc <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8009eae:	6878      	ldr	r0, [r7, #4]
 8009eb0:	f002 f828 	bl	800bf04 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8009eb4:	6878      	ldr	r0, [r7, #4]
 8009eb6:	f000 fd7a 	bl	800a9ae <I2C_Master_SB>
 8009eba:	e083      	b.n	8009fc4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009ebc:	69fb      	ldr	r3, [r7, #28]
 8009ebe:	f003 0308 	and.w	r3, r3, #8
 8009ec2:	2b00      	cmp	r3, #0
 8009ec4:	d008      	beq.n	8009ed8 <HAL_I2C_EV_IRQHandler+0xac>
 8009ec6:	697b      	ldr	r3, [r7, #20]
 8009ec8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d003      	beq.n	8009ed8 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fdf2 	bl	800aaba <I2C_Master_ADD10>
 8009ed6:	e075      	b.n	8009fc4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009ed8:	69fb      	ldr	r3, [r7, #28]
 8009eda:	f003 0302 	and.w	r3, r3, #2
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d008      	beq.n	8009ef4 <HAL_I2C_EV_IRQHandler+0xc8>
 8009ee2:	697b      	ldr	r3, [r7, #20]
 8009ee4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d003      	beq.n	8009ef4 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8009eec:	6878      	ldr	r0, [r7, #4]
 8009eee:	f000 fe0e 	bl	800ab0e <I2C_Master_ADDR>
 8009ef2:	e067      	b.n	8009fc4 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	f003 0304 	and.w	r3, r3, #4
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d036      	beq.n	8009f6c <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	685b      	ldr	r3, [r3, #4]
 8009f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f0c:	f000 80db 	beq.w	800a0c6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009f10:	69fb      	ldr	r3, [r7, #28]
 8009f12:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d00d      	beq.n	8009f36 <HAL_I2C_EV_IRQHandler+0x10a>
 8009f1a:	697b      	ldr	r3, [r7, #20]
 8009f1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f20:	2b00      	cmp	r3, #0
 8009f22:	d008      	beq.n	8009f36 <HAL_I2C_EV_IRQHandler+0x10a>
 8009f24:	69fb      	ldr	r3, [r7, #28]
 8009f26:	f003 0304 	and.w	r3, r3, #4
 8009f2a:	2b00      	cmp	r3, #0
 8009f2c:	d103      	bne.n	8009f36 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8009f2e:	6878      	ldr	r0, [r7, #4]
 8009f30:	f000 f9d6 	bl	800a2e0 <I2C_MasterTransmit_TXE>
 8009f34:	e046      	b.n	8009fc4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009f36:	69fb      	ldr	r3, [r7, #28]
 8009f38:	f003 0304 	and.w	r3, r3, #4
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	f000 80c2 	beq.w	800a0c6 <HAL_I2C_EV_IRQHandler+0x29a>
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009f48:	2b00      	cmp	r3, #0
 8009f4a:	f000 80bc 	beq.w	800a0c6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8009f4e:	7bbb      	ldrb	r3, [r7, #14]
 8009f50:	2b21      	cmp	r3, #33	; 0x21
 8009f52:	d103      	bne.n	8009f5c <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8009f54:	6878      	ldr	r0, [r7, #4]
 8009f56:	f000 fa5f 	bl	800a418 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009f5a:	e0b4      	b.n	800a0c6 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8009f5c:	7bfb      	ldrb	r3, [r7, #15]
 8009f5e:	2b40      	cmp	r3, #64	; 0x40
 8009f60:	f040 80b1 	bne.w	800a0c6 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 facd 	bl	800a504 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009f6a:	e0ac      	b.n	800a0c6 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	685b      	ldr	r3, [r3, #4]
 8009f72:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009f76:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009f7a:	f000 80a4 	beq.w	800a0c6 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8009f7e:	69fb      	ldr	r3, [r7, #28]
 8009f80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d00d      	beq.n	8009fa4 <HAL_I2C_EV_IRQHandler+0x178>
 8009f88:	697b      	ldr	r3, [r7, #20]
 8009f8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d008      	beq.n	8009fa4 <HAL_I2C_EV_IRQHandler+0x178>
 8009f92:	69fb      	ldr	r3, [r7, #28]
 8009f94:	f003 0304 	and.w	r3, r3, #4
 8009f98:	2b00      	cmp	r3, #0
 8009f9a:	d103      	bne.n	8009fa4 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8009f9c:	6878      	ldr	r0, [r7, #4]
 8009f9e:	f000 fb49 	bl	800a634 <I2C_MasterReceive_RXNE>
 8009fa2:	e00f      	b.n	8009fc4 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009fa4:	69fb      	ldr	r3, [r7, #28]
 8009fa6:	f003 0304 	and.w	r3, r3, #4
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	f000 808b 	beq.w	800a0c6 <HAL_I2C_EV_IRQHandler+0x29a>
 8009fb0:	697b      	ldr	r3, [r7, #20]
 8009fb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fb6:	2b00      	cmp	r3, #0
 8009fb8:	f000 8085 	beq.w	800a0c6 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8009fbc:	6878      	ldr	r0, [r7, #4]
 8009fbe:	f000 fc01 	bl	800a7c4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009fc2:	e080      	b.n	800a0c6 <HAL_I2C_EV_IRQHandler+0x29a>
 8009fc4:	e07f      	b.n	800a0c6 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d004      	beq.n	8009fd8 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009fce:	687b      	ldr	r3, [r7, #4]
 8009fd0:	681b      	ldr	r3, [r3, #0]
 8009fd2:	695b      	ldr	r3, [r3, #20]
 8009fd4:	61fb      	str	r3, [r7, #28]
 8009fd6:	e007      	b.n	8009fe8 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8009fd8:	687b      	ldr	r3, [r7, #4]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	699b      	ldr	r3, [r3, #24]
 8009fde:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	695b      	ldr	r3, [r3, #20]
 8009fe6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8009fe8:	69fb      	ldr	r3, [r7, #28]
 8009fea:	f003 0302 	and.w	r3, r3, #2
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	d011      	beq.n	800a016 <HAL_I2C_EV_IRQHandler+0x1ea>
 8009ff2:	697b      	ldr	r3, [r7, #20]
 8009ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d00c      	beq.n	800a016 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a000:	2b00      	cmp	r3, #0
 800a002:	d003      	beq.n	800a00c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800a004:	687b      	ldr	r3, [r7, #4]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	699b      	ldr	r3, [r3, #24]
 800a00a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800a00c:	69b9      	ldr	r1, [r7, #24]
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 ffcc 	bl	800afac <I2C_Slave_ADDR>
 800a014:	e05a      	b.n	800a0cc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	f003 0310 	and.w	r3, r3, #16
 800a01c:	2b00      	cmp	r3, #0
 800a01e:	d008      	beq.n	800a032 <HAL_I2C_EV_IRQHandler+0x206>
 800a020:	697b      	ldr	r3, [r7, #20]
 800a022:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a026:	2b00      	cmp	r3, #0
 800a028:	d003      	beq.n	800a032 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 800a02a:	6878      	ldr	r0, [r7, #4]
 800a02c:	f001 f806 	bl	800b03c <I2C_Slave_STOPF>
 800a030:	e04c      	b.n	800a0cc <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800a032:	7bbb      	ldrb	r3, [r7, #14]
 800a034:	2b21      	cmp	r3, #33	; 0x21
 800a036:	d002      	beq.n	800a03e <HAL_I2C_EV_IRQHandler+0x212>
 800a038:	7bbb      	ldrb	r3, [r7, #14]
 800a03a:	2b29      	cmp	r3, #41	; 0x29
 800a03c:	d120      	bne.n	800a080 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a03e:	69fb      	ldr	r3, [r7, #28]
 800a040:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a044:	2b00      	cmp	r3, #0
 800a046:	d00d      	beq.n	800a064 <HAL_I2C_EV_IRQHandler+0x238>
 800a048:	697b      	ldr	r3, [r7, #20]
 800a04a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a04e:	2b00      	cmp	r3, #0
 800a050:	d008      	beq.n	800a064 <HAL_I2C_EV_IRQHandler+0x238>
 800a052:	69fb      	ldr	r3, [r7, #28]
 800a054:	f003 0304 	and.w	r3, r3, #4
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d103      	bne.n	800a064 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800a05c:	6878      	ldr	r0, [r7, #4]
 800a05e:	f000 fee7 	bl	800ae30 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a062:	e032      	b.n	800a0ca <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a064:	69fb      	ldr	r3, [r7, #28]
 800a066:	f003 0304 	and.w	r3, r3, #4
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d02d      	beq.n	800a0ca <HAL_I2C_EV_IRQHandler+0x29e>
 800a06e:	697b      	ldr	r3, [r7, #20]
 800a070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a074:	2b00      	cmp	r3, #0
 800a076:	d028      	beq.n	800a0ca <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800a078:	6878      	ldr	r0, [r7, #4]
 800a07a:	f000 ff16 	bl	800aeaa <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a07e:	e024      	b.n	800a0ca <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a080:	69fb      	ldr	r3, [r7, #28]
 800a082:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a086:	2b00      	cmp	r3, #0
 800a088:	d00d      	beq.n	800a0a6 <HAL_I2C_EV_IRQHandler+0x27a>
 800a08a:	697b      	ldr	r3, [r7, #20]
 800a08c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a090:	2b00      	cmp	r3, #0
 800a092:	d008      	beq.n	800a0a6 <HAL_I2C_EV_IRQHandler+0x27a>
 800a094:	69fb      	ldr	r3, [r7, #28]
 800a096:	f003 0304 	and.w	r3, r3, #4
 800a09a:	2b00      	cmp	r3, #0
 800a09c:	d103      	bne.n	800a0a6 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800a09e:	6878      	ldr	r0, [r7, #4]
 800a0a0:	f000 ff24 	bl	800aeec <I2C_SlaveReceive_RXNE>
 800a0a4:	e012      	b.n	800a0cc <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a0a6:	69fb      	ldr	r3, [r7, #28]
 800a0a8:	f003 0304 	and.w	r3, r3, #4
 800a0ac:	2b00      	cmp	r3, #0
 800a0ae:	d00d      	beq.n	800a0cc <HAL_I2C_EV_IRQHandler+0x2a0>
 800a0b0:	697b      	ldr	r3, [r7, #20]
 800a0b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d008      	beq.n	800a0cc <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800a0ba:	6878      	ldr	r0, [r7, #4]
 800a0bc:	f000 ff54 	bl	800af68 <I2C_SlaveReceive_BTF>
 800a0c0:	e004      	b.n	800a0cc <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 800a0c2:	bf00      	nop
 800a0c4:	e002      	b.n	800a0cc <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800a0c6:	bf00      	nop
 800a0c8:	e000      	b.n	800a0cc <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800a0ca:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800a0cc:	3720      	adds	r7, #32
 800a0ce:	46bd      	mov	sp, r7
 800a0d0:	bd80      	pop	{r7, pc}

0800a0d2 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800a0d2:	b580      	push	{r7, lr}
 800a0d4:	b08a      	sub	sp, #40	; 0x28
 800a0d6:	af00      	add	r7, sp, #0
 800a0d8:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800a0da:	687b      	ldr	r3, [r7, #4]
 800a0dc:	681b      	ldr	r3, [r3, #0]
 800a0de:	695b      	ldr	r3, [r3, #20]
 800a0e0:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800a0e2:	687b      	ldr	r3, [r7, #4]
 800a0e4:	681b      	ldr	r3, [r3, #0]
 800a0e6:	685b      	ldr	r3, [r3, #4]
 800a0e8:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800a0ea:	2300      	movs	r3, #0
 800a0ec:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a0f4:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a0f6:	6a3b      	ldr	r3, [r7, #32]
 800a0f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a0fc:	2b00      	cmp	r3, #0
 800a0fe:	d00d      	beq.n	800a11c <HAL_I2C_ER_IRQHandler+0x4a>
 800a100:	69fb      	ldr	r3, [r7, #28]
 800a102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a106:	2b00      	cmp	r3, #0
 800a108:	d008      	beq.n	800a11c <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800a10a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a10c:	f043 0301 	orr.w	r3, r3, #1
 800a110:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800a11a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a11c:	6a3b      	ldr	r3, [r7, #32]
 800a11e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00d      	beq.n	800a142 <HAL_I2C_ER_IRQHandler+0x70>
 800a126:	69fb      	ldr	r3, [r7, #28]
 800a128:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a12c:	2b00      	cmp	r3, #0
 800a12e:	d008      	beq.n	800a142 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 800a130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a132:	f043 0302 	orr.w	r3, r3, #2
 800a136:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800a138:	687b      	ldr	r3, [r7, #4]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 800a140:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a142:	6a3b      	ldr	r3, [r7, #32]
 800a144:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a148:	2b00      	cmp	r3, #0
 800a14a:	d03e      	beq.n	800a1ca <HAL_I2C_ER_IRQHandler+0xf8>
 800a14c:	69fb      	ldr	r3, [r7, #28]
 800a14e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a152:	2b00      	cmp	r3, #0
 800a154:	d039      	beq.n	800a1ca <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 800a156:	7efb      	ldrb	r3, [r7, #27]
 800a158:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800a15a:	687b      	ldr	r3, [r7, #4]
 800a15c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a15e:	b29b      	uxth	r3, r3
 800a160:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a168:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800a16a:	687b      	ldr	r3, [r7, #4]
 800a16c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a16e:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 800a170:	7ebb      	ldrb	r3, [r7, #26]
 800a172:	2b20      	cmp	r3, #32
 800a174:	d112      	bne.n	800a19c <HAL_I2C_ER_IRQHandler+0xca>
 800a176:	697b      	ldr	r3, [r7, #20]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10f      	bne.n	800a19c <HAL_I2C_ER_IRQHandler+0xca>
 800a17c:	7cfb      	ldrb	r3, [r7, #19]
 800a17e:	2b21      	cmp	r3, #33	; 0x21
 800a180:	d008      	beq.n	800a194 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 800a182:	7cfb      	ldrb	r3, [r7, #19]
 800a184:	2b29      	cmp	r3, #41	; 0x29
 800a186:	d005      	beq.n	800a194 <HAL_I2C_ER_IRQHandler+0xc2>
 800a188:	7cfb      	ldrb	r3, [r7, #19]
 800a18a:	2b28      	cmp	r3, #40	; 0x28
 800a18c:	d106      	bne.n	800a19c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 800a18e:	68fb      	ldr	r3, [r7, #12]
 800a190:	2b21      	cmp	r3, #33	; 0x21
 800a192:	d103      	bne.n	800a19c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 800a194:	6878      	ldr	r0, [r7, #4]
 800a196:	f001 f881 	bl	800b29c <I2C_Slave_AF>
 800a19a:	e016      	b.n	800a1ca <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800a19c:	687b      	ldr	r3, [r7, #4]
 800a19e:	681b      	ldr	r3, [r3, #0]
 800a1a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800a1a4:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800a1a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1a8:	f043 0304 	orr.w	r3, r3, #4
 800a1ac:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800a1ae:	7efb      	ldrb	r3, [r7, #27]
 800a1b0:	2b10      	cmp	r3, #16
 800a1b2:	d002      	beq.n	800a1ba <HAL_I2C_ER_IRQHandler+0xe8>
 800a1b4:	7efb      	ldrb	r3, [r7, #27]
 800a1b6:	2b40      	cmp	r3, #64	; 0x40
 800a1b8:	d107      	bne.n	800a1ca <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a1ba:	687b      	ldr	r3, [r7, #4]
 800a1bc:	681b      	ldr	r3, [r3, #0]
 800a1be:	681a      	ldr	r2, [r3, #0]
 800a1c0:	687b      	ldr	r3, [r7, #4]
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1c8:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d00d      	beq.n	800a1f0 <HAL_I2C_ER_IRQHandler+0x11e>
 800a1d4:	69fb      	ldr	r3, [r7, #28]
 800a1d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a1da:	2b00      	cmp	r3, #0
 800a1dc:	d008      	beq.n	800a1f0 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800a1de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1e0:	f043 0308 	orr.w	r3, r3, #8
 800a1e4:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800a1e6:	687b      	ldr	r3, [r7, #4]
 800a1e8:	681b      	ldr	r3, [r3, #0]
 800a1ea:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800a1ee:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800a1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d008      	beq.n	800a208 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 800a1f6:	687b      	ldr	r3, [r7, #4]
 800a1f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a1fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fc:	431a      	orrs	r2, r3
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800a202:	6878      	ldr	r0, [r7, #4]
 800a204:	f001 f8be 	bl	800b384 <I2C_ITError>
  }
}
 800a208:	bf00      	nop
 800a20a:	3728      	adds	r7, #40	; 0x28
 800a20c:	46bd      	mov	sp, r7
 800a20e:	bd80      	pop	{r7, pc}

0800a210 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a210:	b480      	push	{r7}
 800a212:	b083      	sub	sp, #12
 800a214:	af00      	add	r7, sp, #0
 800a216:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800a218:	bf00      	nop
 800a21a:	370c      	adds	r7, #12
 800a21c:	46bd      	mov	sp, r7
 800a21e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a222:	4770      	bx	lr

0800a224 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a224:	b480      	push	{r7}
 800a226:	b083      	sub	sp, #12
 800a228:	af00      	add	r7, sp, #0
 800a22a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800a22c:	bf00      	nop
 800a22e:	370c      	adds	r7, #12
 800a230:	46bd      	mov	sp, r7
 800a232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a236:	4770      	bx	lr

0800a238 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a238:	b480      	push	{r7}
 800a23a:	b083      	sub	sp, #12
 800a23c:	af00      	add	r7, sp, #0
 800a23e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800a240:	bf00      	nop
 800a242:	370c      	adds	r7, #12
 800a244:	46bd      	mov	sp, r7
 800a246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a24a:	4770      	bx	lr

0800a24c <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a24c:	b480      	push	{r7}
 800a24e:	b083      	sub	sp, #12
 800a250:	af00      	add	r7, sp, #0
 800a252:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800a254:	bf00      	nop
 800a256:	370c      	adds	r7, #12
 800a258:	46bd      	mov	sp, r7
 800a25a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25e:	4770      	bx	lr

0800a260 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800a260:	b480      	push	{r7}
 800a262:	b083      	sub	sp, #12
 800a264:	af00      	add	r7, sp, #0
 800a266:	6078      	str	r0, [r7, #4]
 800a268:	460b      	mov	r3, r1
 800a26a:	70fb      	strb	r3, [r7, #3]
 800a26c:	4613      	mov	r3, r2
 800a26e:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800a270:	bf00      	nop
 800a272:	370c      	adds	r7, #12
 800a274:	46bd      	mov	sp, r7
 800a276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a27a:	4770      	bx	lr

0800a27c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a27c:	b480      	push	{r7}
 800a27e:	b083      	sub	sp, #12
 800a280:	af00      	add	r7, sp, #0
 800a282:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 800a284:	bf00      	nop
 800a286:	370c      	adds	r7, #12
 800a288:	46bd      	mov	sp, r7
 800a28a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a28e:	4770      	bx	lr

0800a290 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a290:	b480      	push	{r7}
 800a292:	b083      	sub	sp, #12
 800a294:	af00      	add	r7, sp, #0
 800a296:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800a298:	bf00      	nop
 800a29a:	370c      	adds	r7, #12
 800a29c:	46bd      	mov	sp, r7
 800a29e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2a2:	4770      	bx	lr

0800a2a4 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800a2e0:	b580      	push	{r7, lr}
 800a2e2:	b084      	sub	sp, #16
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a2e8:	687b      	ldr	r3, [r7, #4]
 800a2ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a2ee:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800a2f0:	687b      	ldr	r3, [r7, #4]
 800a2f2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a2f6:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800a2f8:	687b      	ldr	r3, [r7, #4]
 800a2fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a2fc:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a2fe:	687b      	ldr	r3, [r7, #4]
 800a300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800a302:	2b00      	cmp	r3, #0
 800a304:	d150      	bne.n	800a3a8 <I2C_MasterTransmit_TXE+0xc8>
 800a306:	7bfb      	ldrb	r3, [r7, #15]
 800a308:	2b21      	cmp	r3, #33	; 0x21
 800a30a:	d14d      	bne.n	800a3a8 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a30c:	68bb      	ldr	r3, [r7, #8]
 800a30e:	2b08      	cmp	r3, #8
 800a310:	d01d      	beq.n	800a34e <I2C_MasterTransmit_TXE+0x6e>
 800a312:	68bb      	ldr	r3, [r7, #8]
 800a314:	2b20      	cmp	r3, #32
 800a316:	d01a      	beq.n	800a34e <I2C_MasterTransmit_TXE+0x6e>
 800a318:	68bb      	ldr	r3, [r7, #8]
 800a31a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a31e:	d016      	beq.n	800a34e <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	681b      	ldr	r3, [r3, #0]
 800a324:	685a      	ldr	r2, [r3, #4]
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a32e:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	2211      	movs	r2, #17
 800a334:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a336:	687b      	ldr	r3, [r7, #4]
 800a338:	2200      	movs	r2, #0
 800a33a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800a33e:	687b      	ldr	r3, [r7, #4]
 800a340:	2220      	movs	r2, #32
 800a342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800a346:	6878      	ldr	r0, [r7, #4]
 800a348:	f7ff ff62 	bl	800a210 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a34c:	e060      	b.n	800a410 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	685a      	ldr	r2, [r3, #4]
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a35c:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	681a      	ldr	r2, [r3, #0]
 800a364:	687b      	ldr	r3, [r7, #4]
 800a366:	681b      	ldr	r3, [r3, #0]
 800a368:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a36c:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800a36e:	687b      	ldr	r3, [r7, #4]
 800a370:	2200      	movs	r2, #0
 800a372:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a374:	687b      	ldr	r3, [r7, #4]
 800a376:	2220      	movs	r2, #32
 800a378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a37c:	687b      	ldr	r3, [r7, #4]
 800a37e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a382:	b2db      	uxtb	r3, r3
 800a384:	2b40      	cmp	r3, #64	; 0x40
 800a386:	d107      	bne.n	800a398 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2200      	movs	r2, #0
 800a38c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800a390:	6878      	ldr	r0, [r7, #4]
 800a392:	f7ff ff7d 	bl	800a290 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a396:	e03b      	b.n	800a410 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	2200      	movs	r2, #0
 800a39c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a3a0:	6878      	ldr	r0, [r7, #4]
 800a3a2:	f7ff ff35 	bl	800a210 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a3a6:	e033      	b.n	800a410 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 800a3a8:	7bfb      	ldrb	r3, [r7, #15]
 800a3aa:	2b21      	cmp	r3, #33	; 0x21
 800a3ac:	d005      	beq.n	800a3ba <I2C_MasterTransmit_TXE+0xda>
 800a3ae:	7bbb      	ldrb	r3, [r7, #14]
 800a3b0:	2b40      	cmp	r3, #64	; 0x40
 800a3b2:	d12d      	bne.n	800a410 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800a3b4:	7bfb      	ldrb	r3, [r7, #15]
 800a3b6:	2b22      	cmp	r3, #34	; 0x22
 800a3b8:	d12a      	bne.n	800a410 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 800a3ba:	687b      	ldr	r3, [r7, #4]
 800a3bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a3be:	b29b      	uxth	r3, r3
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d108      	bne.n	800a3d6 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	685a      	ldr	r2, [r3, #4]
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a3d2:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800a3d4:	e01c      	b.n	800a410 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a3dc:	b2db      	uxtb	r3, r3
 800a3de:	2b40      	cmp	r3, #64	; 0x40
 800a3e0:	d103      	bne.n	800a3ea <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800a3e2:	6878      	ldr	r0, [r7, #4]
 800a3e4:	f000 f88e 	bl	800a504 <I2C_MemoryTransmit_TXE_BTF>
}
 800a3e8:	e012      	b.n	800a410 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3ee:	781a      	ldrb	r2, [r3, #0]
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3fa:	1c5a      	adds	r2, r3, #1
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a404:	b29b      	uxth	r3, r3
 800a406:	3b01      	subs	r3, #1
 800a408:	b29a      	uxth	r2, r3
 800a40a:	687b      	ldr	r3, [r7, #4]
 800a40c:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a40e:	e7ff      	b.n	800a410 <I2C_MasterTransmit_TXE+0x130>
 800a410:	bf00      	nop
 800a412:	3710      	adds	r7, #16
 800a414:	46bd      	mov	sp, r7
 800a416:	bd80      	pop	{r7, pc}

0800a418 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800a418:	b580      	push	{r7, lr}
 800a41a:	b084      	sub	sp, #16
 800a41c:	af00      	add	r7, sp, #0
 800a41e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a424:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	2b21      	cmp	r3, #33	; 0x21
 800a430:	d164      	bne.n	800a4fc <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a436:	b29b      	uxth	r3, r3
 800a438:	2b00      	cmp	r3, #0
 800a43a:	d012      	beq.n	800a462 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a440:	781a      	ldrb	r2, [r3, #0]
 800a442:	687b      	ldr	r3, [r7, #4]
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a44c:	1c5a      	adds	r2, r3, #1
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a452:	687b      	ldr	r3, [r7, #4]
 800a454:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a456:	b29b      	uxth	r3, r3
 800a458:	3b01      	subs	r3, #1
 800a45a:	b29a      	uxth	r2, r3
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800a460:	e04c      	b.n	800a4fc <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800a462:	68fb      	ldr	r3, [r7, #12]
 800a464:	2b08      	cmp	r3, #8
 800a466:	d01d      	beq.n	800a4a4 <I2C_MasterTransmit_BTF+0x8c>
 800a468:	68fb      	ldr	r3, [r7, #12]
 800a46a:	2b20      	cmp	r3, #32
 800a46c:	d01a      	beq.n	800a4a4 <I2C_MasterTransmit_BTF+0x8c>
 800a46e:	68fb      	ldr	r3, [r7, #12]
 800a470:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800a474:	d016      	beq.n	800a4a4 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	685a      	ldr	r2, [r3, #4]
 800a47c:	687b      	ldr	r3, [r7, #4]
 800a47e:	681b      	ldr	r3, [r3, #0]
 800a480:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a484:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	2211      	movs	r2, #17
 800a48a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a48c:	687b      	ldr	r3, [r7, #4]
 800a48e:	2200      	movs	r2, #0
 800a490:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	2220      	movs	r2, #32
 800a498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800a49c:	6878      	ldr	r0, [r7, #4]
 800a49e:	f7ff feb7 	bl	800a210 <HAL_I2C_MasterTxCpltCallback>
}
 800a4a2:	e02b      	b.n	800a4fc <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a4a4:	687b      	ldr	r3, [r7, #4]
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	685a      	ldr	r2, [r3, #4]
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a4b2:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a4c2:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	2220      	movs	r2, #32
 800a4ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a4d2:	687b      	ldr	r3, [r7, #4]
 800a4d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a4d8:	b2db      	uxtb	r3, r3
 800a4da:	2b40      	cmp	r3, #64	; 0x40
 800a4dc:	d107      	bne.n	800a4ee <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4de:	687b      	ldr	r3, [r7, #4]
 800a4e0:	2200      	movs	r2, #0
 800a4e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 800a4e6:	6878      	ldr	r0, [r7, #4]
 800a4e8:	f7ff fed2 	bl	800a290 <HAL_I2C_MemTxCpltCallback>
}
 800a4ec:	e006      	b.n	800a4fc <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 800a4f6:	6878      	ldr	r0, [r7, #4]
 800a4f8:	f7ff fe8a 	bl	800a210 <HAL_I2C_MasterTxCpltCallback>
}
 800a4fc:	bf00      	nop
 800a4fe:	3710      	adds	r7, #16
 800a500:	46bd      	mov	sp, r7
 800a502:	bd80      	pop	{r7, pc}

0800a504 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 800a504:	b580      	push	{r7, lr}
 800a506:	b084      	sub	sp, #16
 800a508:	af00      	add	r7, sp, #0
 800a50a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a512:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a518:	2b00      	cmp	r3, #0
 800a51a:	d11d      	bne.n	800a558 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a520:	2b01      	cmp	r3, #1
 800a522:	d10b      	bne.n	800a53c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a528:	b2da      	uxtb	r2, r3
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	681b      	ldr	r3, [r3, #0]
 800a52e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a534:	1c9a      	adds	r2, r3, #2
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 800a53a:	e077      	b.n	800a62c <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a540:	b29b      	uxth	r3, r3
 800a542:	121b      	asrs	r3, r3, #8
 800a544:	b2da      	uxtb	r2, r3
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a550:	1c5a      	adds	r2, r3, #1
 800a552:	687b      	ldr	r3, [r7, #4]
 800a554:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a556:	e069      	b.n	800a62c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a55c:	2b01      	cmp	r3, #1
 800a55e:	d10b      	bne.n	800a578 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a564:	b2da      	uxtb	r2, r3
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681b      	ldr	r3, [r3, #0]
 800a56a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a570:	1c5a      	adds	r2, r3, #1
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a576:	e059      	b.n	800a62c <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a57c:	2b02      	cmp	r3, #2
 800a57e:	d152      	bne.n	800a626 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800a580:	7bfb      	ldrb	r3, [r7, #15]
 800a582:	2b22      	cmp	r3, #34	; 0x22
 800a584:	d10d      	bne.n	800a5a2 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	681b      	ldr	r3, [r3, #0]
 800a58a:	681a      	ldr	r2, [r3, #0]
 800a58c:	687b      	ldr	r3, [r7, #4]
 800a58e:	681b      	ldr	r3, [r3, #0]
 800a590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a594:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a59a:	1c5a      	adds	r2, r3, #1
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	651a      	str	r2, [r3, #80]	; 0x50
}
 800a5a0:	e044      	b.n	800a62c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5a6:	b29b      	uxth	r3, r3
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d015      	beq.n	800a5d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
 800a5ae:	2b21      	cmp	r3, #33	; 0x21
 800a5b0:	d112      	bne.n	800a5d8 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5b6:	781a      	ldrb	r2, [r3, #0]
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5c2:	1c5a      	adds	r2, r3, #1
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5cc:	b29b      	uxth	r3, r3
 800a5ce:	3b01      	subs	r3, #1
 800a5d0:	b29a      	uxth	r2, r3
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a5d6:	e029      	b.n	800a62c <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a5dc:	b29b      	uxth	r3, r3
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d124      	bne.n	800a62c <I2C_MemoryTransmit_TXE_BTF+0x128>
 800a5e2:	7bfb      	ldrb	r3, [r7, #15]
 800a5e4:	2b21      	cmp	r3, #33	; 0x21
 800a5e6:	d121      	bne.n	800a62c <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	681b      	ldr	r3, [r3, #0]
 800a5ec:	685a      	ldr	r2, [r3, #4]
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a5f6:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	681a      	ldr	r2, [r3, #0]
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	681b      	ldr	r3, [r3, #0]
 800a602:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a606:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800a608:	687b      	ldr	r3, [r7, #4]
 800a60a:	2200      	movs	r2, #0
 800a60c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	2220      	movs	r2, #32
 800a612:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	2200      	movs	r2, #0
 800a61a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 800a61e:	6878      	ldr	r0, [r7, #4]
 800a620:	f7ff fe36 	bl	800a290 <HAL_I2C_MemTxCpltCallback>
}
 800a624:	e002      	b.n	800a62c <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 800a626:	6878      	ldr	r0, [r7, #4]
 800a628:	f7fe ff90 	bl	800954c <I2C_Flush_DR>
}
 800a62c:	bf00      	nop
 800a62e:	3710      	adds	r7, #16
 800a630:	46bd      	mov	sp, r7
 800a632:	bd80      	pop	{r7, pc}

0800a634 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800a634:	b580      	push	{r7, lr}
 800a636:	b084      	sub	sp, #16
 800a638:	af00      	add	r7, sp, #0
 800a63a:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a642:	b2db      	uxtb	r3, r3
 800a644:	2b22      	cmp	r3, #34	; 0x22
 800a646:	f040 80b9 	bne.w	800a7bc <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a64e:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 800a650:	687b      	ldr	r3, [r7, #4]
 800a652:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a654:	b29b      	uxth	r3, r3
 800a656:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 800a658:	68bb      	ldr	r3, [r7, #8]
 800a65a:	2b03      	cmp	r3, #3
 800a65c:	d921      	bls.n	800a6a2 <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	681b      	ldr	r3, [r3, #0]
 800a662:	691a      	ldr	r2, [r3, #16]
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a668:	b2d2      	uxtb	r2, r2
 800a66a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a670:	1c5a      	adds	r2, r3, #1
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	3b01      	subs	r3, #1
 800a67e:	b29a      	uxth	r2, r3
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a688:	b29b      	uxth	r3, r3
 800a68a:	2b03      	cmp	r3, #3
 800a68c:	f040 8096 	bne.w	800a7bc <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a69e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800a6a0:	e08c      	b.n	800a7bc <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800a6a2:	687b      	ldr	r3, [r7, #4]
 800a6a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d07f      	beq.n	800a7aa <I2C_MasterReceive_RXNE+0x176>
 800a6aa:	68bb      	ldr	r3, [r7, #8]
 800a6ac:	2b01      	cmp	r3, #1
 800a6ae:	d002      	beq.n	800a6b6 <I2C_MasterReceive_RXNE+0x82>
 800a6b0:	68bb      	ldr	r3, [r7, #8]
 800a6b2:	2b00      	cmp	r3, #0
 800a6b4:	d179      	bne.n	800a7aa <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a6b6:	6878      	ldr	r0, [r7, #4]
 800a6b8:	f001 fb66 	bl	800bd88 <I2C_WaitOnSTOPRequestThroughIT>
 800a6bc:	4603      	mov	r3, r0
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d14c      	bne.n	800a75c <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	681a      	ldr	r2, [r3, #0]
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	681b      	ldr	r3, [r3, #0]
 800a6cc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a6d0:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	685a      	ldr	r2, [r3, #4]
 800a6d8:	687b      	ldr	r3, [r7, #4]
 800a6da:	681b      	ldr	r3, [r3, #0]
 800a6dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a6e0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	691a      	ldr	r2, [r3, #16]
 800a6e8:	687b      	ldr	r3, [r7, #4]
 800a6ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6ec:	b2d2      	uxtb	r2, r2
 800a6ee:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a6f0:	687b      	ldr	r3, [r7, #4]
 800a6f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a6f4:	1c5a      	adds	r2, r3, #1
 800a6f6:	687b      	ldr	r3, [r7, #4]
 800a6f8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	3b01      	subs	r3, #1
 800a702:	b29a      	uxth	r2, r3
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	2220      	movs	r2, #32
 800a70c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a710:	687b      	ldr	r3, [r7, #4]
 800a712:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a716:	b2db      	uxtb	r3, r3
 800a718:	2b40      	cmp	r3, #64	; 0x40
 800a71a:	d10a      	bne.n	800a732 <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	2200      	movs	r2, #0
 800a720:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800a724:	687b      	ldr	r3, [r7, #4]
 800a726:	2200      	movs	r2, #0
 800a728:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800a72a:	6878      	ldr	r0, [r7, #4]
 800a72c:	f7ff fdba 	bl	800a2a4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a730:	e044      	b.n	800a7bc <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	2200      	movs	r2, #0
 800a736:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	2b08      	cmp	r3, #8
 800a73e:	d002      	beq.n	800a746 <I2C_MasterReceive_RXNE+0x112>
 800a740:	68fb      	ldr	r3, [r7, #12]
 800a742:	2b20      	cmp	r3, #32
 800a744:	d103      	bne.n	800a74e <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	2200      	movs	r2, #0
 800a74a:	631a      	str	r2, [r3, #48]	; 0x30
 800a74c:	e002      	b.n	800a754 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	2212      	movs	r2, #18
 800a752:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 800a754:	6878      	ldr	r0, [r7, #4]
 800a756:	f7ff fd65 	bl	800a224 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a75a:	e02f      	b.n	800a7bc <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	685a      	ldr	r2, [r3, #4]
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800a76a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	691a      	ldr	r2, [r3, #16]
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a776:	b2d2      	uxtb	r2, r2
 800a778:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800a77a:	687b      	ldr	r3, [r7, #4]
 800a77c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a77e:	1c5a      	adds	r2, r3, #1
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800a784:	687b      	ldr	r3, [r7, #4]
 800a786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a788:	b29b      	uxth	r3, r3
 800a78a:	3b01      	subs	r3, #1
 800a78c:	b29a      	uxth	r2, r3
 800a78e:	687b      	ldr	r3, [r7, #4]
 800a790:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800a792:	687b      	ldr	r3, [r7, #4]
 800a794:	2220      	movs	r2, #32
 800a796:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800a79a:	687b      	ldr	r3, [r7, #4]
 800a79c:	2200      	movs	r2, #0
 800a79e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800a7a2:	6878      	ldr	r0, [r7, #4]
 800a7a4:	f7ff fd88 	bl	800a2b8 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 800a7a8:	e008      	b.n	800a7bc <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	681b      	ldr	r3, [r3, #0]
 800a7ae:	685a      	ldr	r2, [r3, #4]
 800a7b0:	687b      	ldr	r3, [r7, #4]
 800a7b2:	681b      	ldr	r3, [r3, #0]
 800a7b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7b8:	605a      	str	r2, [r3, #4]
}
 800a7ba:	e7ff      	b.n	800a7bc <I2C_MasterReceive_RXNE+0x188>
 800a7bc:	bf00      	nop
 800a7be:	3710      	adds	r7, #16
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd80      	pop	{r7, pc}

0800a7c4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a7d0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800a7d2:	687b      	ldr	r3, [r7, #4]
 800a7d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a7d6:	b29b      	uxth	r3, r3
 800a7d8:	2b04      	cmp	r3, #4
 800a7da:	d11b      	bne.n	800a814 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a7dc:	687b      	ldr	r3, [r7, #4]
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	685a      	ldr	r2, [r3, #4]
 800a7e2:	687b      	ldr	r3, [r7, #4]
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a7ea:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	691a      	ldr	r2, [r3, #16]
 800a7f2:	687b      	ldr	r3, [r7, #4]
 800a7f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7f6:	b2d2      	uxtb	r2, r2
 800a7f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7fe:	1c5a      	adds	r2, r3, #1
 800a800:	687b      	ldr	r3, [r7, #4]
 800a802:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a808:	b29b      	uxth	r3, r3
 800a80a:	3b01      	subs	r3, #1
 800a80c:	b29a      	uxth	r2, r3
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800a812:	e0c8      	b.n	800a9a6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a818:	b29b      	uxth	r3, r3
 800a81a:	2b03      	cmp	r3, #3
 800a81c:	d129      	bne.n	800a872 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800a81e:	687b      	ldr	r3, [r7, #4]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	685a      	ldr	r2, [r3, #4]
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	681b      	ldr	r3, [r3, #0]
 800a828:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a82c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800a82e:	68fb      	ldr	r3, [r7, #12]
 800a830:	2b04      	cmp	r3, #4
 800a832:	d00a      	beq.n	800a84a <I2C_MasterReceive_BTF+0x86>
 800a834:	68fb      	ldr	r3, [r7, #12]
 800a836:	2b02      	cmp	r3, #2
 800a838:	d007      	beq.n	800a84a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	681b      	ldr	r3, [r3, #0]
 800a83e:	681a      	ldr	r2, [r3, #0]
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a848:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	691a      	ldr	r2, [r3, #16]
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a854:	b2d2      	uxtb	r2, r2
 800a856:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a858:	687b      	ldr	r3, [r7, #4]
 800a85a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a85c:	1c5a      	adds	r2, r3, #1
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a866:	b29b      	uxth	r3, r3
 800a868:	3b01      	subs	r3, #1
 800a86a:	b29a      	uxth	r2, r3
 800a86c:	687b      	ldr	r3, [r7, #4]
 800a86e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a870:	e099      	b.n	800a9a6 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a876:	b29b      	uxth	r3, r3
 800a878:	2b02      	cmp	r3, #2
 800a87a:	f040 8081 	bne.w	800a980 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800a87e:	68fb      	ldr	r3, [r7, #12]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d002      	beq.n	800a88a <I2C_MasterReceive_BTF+0xc6>
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	2b10      	cmp	r3, #16
 800a888:	d108      	bne.n	800a89c <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	681a      	ldr	r2, [r3, #0]
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a898:	601a      	str	r2, [r3, #0]
 800a89a:	e019      	b.n	800a8d0 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800a89c:	68fb      	ldr	r3, [r7, #12]
 800a89e:	2b04      	cmp	r3, #4
 800a8a0:	d002      	beq.n	800a8a8 <I2C_MasterReceive_BTF+0xe4>
 800a8a2:	68fb      	ldr	r3, [r7, #12]
 800a8a4:	2b02      	cmp	r3, #2
 800a8a6:	d108      	bne.n	800a8ba <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800a8a8:	687b      	ldr	r3, [r7, #4]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	681a      	ldr	r2, [r3, #0]
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	681b      	ldr	r3, [r3, #0]
 800a8b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800a8b6:	601a      	str	r2, [r3, #0]
 800a8b8:	e00a      	b.n	800a8d0 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 800a8ba:	68fb      	ldr	r3, [r7, #12]
 800a8bc:	2b10      	cmp	r3, #16
 800a8be:	d007      	beq.n	800a8d0 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	681a      	ldr	r2, [r3, #0]
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a8ce:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8d0:	687b      	ldr	r3, [r7, #4]
 800a8d2:	681b      	ldr	r3, [r3, #0]
 800a8d4:	691a      	ldr	r2, [r3, #16]
 800a8d6:	687b      	ldr	r3, [r7, #4]
 800a8d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8da:	b2d2      	uxtb	r2, r2
 800a8dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a8de:	687b      	ldr	r3, [r7, #4]
 800a8e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a8e2:	1c5a      	adds	r2, r3, #1
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a8ec:	b29b      	uxth	r3, r3
 800a8ee:	3b01      	subs	r3, #1
 800a8f0:	b29a      	uxth	r2, r3
 800a8f2:	687b      	ldr	r3, [r7, #4]
 800a8f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a8f6:	687b      	ldr	r3, [r7, #4]
 800a8f8:	681b      	ldr	r3, [r3, #0]
 800a8fa:	691a      	ldr	r2, [r3, #16]
 800a8fc:	687b      	ldr	r3, [r7, #4]
 800a8fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a900:	b2d2      	uxtb	r2, r2
 800a902:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a904:	687b      	ldr	r3, [r7, #4]
 800a906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a908:	1c5a      	adds	r2, r3, #1
 800a90a:	687b      	ldr	r3, [r7, #4]
 800a90c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a912:	b29b      	uxth	r3, r3
 800a914:	3b01      	subs	r3, #1
 800a916:	b29a      	uxth	r2, r3
 800a918:	687b      	ldr	r3, [r7, #4]
 800a91a:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	681b      	ldr	r3, [r3, #0]
 800a920:	685a      	ldr	r2, [r3, #4]
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	681b      	ldr	r3, [r3, #0]
 800a926:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 800a92a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800a92c:	687b      	ldr	r3, [r7, #4]
 800a92e:	2220      	movs	r2, #32
 800a930:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a934:	687b      	ldr	r3, [r7, #4]
 800a936:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a93a:	b2db      	uxtb	r3, r3
 800a93c:	2b40      	cmp	r3, #64	; 0x40
 800a93e:	d10a      	bne.n	800a956 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a940:	687b      	ldr	r3, [r7, #4]
 800a942:	2200      	movs	r2, #0
 800a944:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 800a948:	687b      	ldr	r3, [r7, #4]
 800a94a:	2200      	movs	r2, #0
 800a94c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 800a94e:	6878      	ldr	r0, [r7, #4]
 800a950:	f7ff fca8 	bl	800a2a4 <HAL_I2C_MemRxCpltCallback>
}
 800a954:	e027      	b.n	800a9a6 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800a956:	687b      	ldr	r3, [r7, #4]
 800a958:	2200      	movs	r2, #0
 800a95a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	2b08      	cmp	r3, #8
 800a962:	d002      	beq.n	800a96a <I2C_MasterReceive_BTF+0x1a6>
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2b20      	cmp	r3, #32
 800a968:	d103      	bne.n	800a972 <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 800a96a:	687b      	ldr	r3, [r7, #4]
 800a96c:	2200      	movs	r2, #0
 800a96e:	631a      	str	r2, [r3, #48]	; 0x30
 800a970:	e002      	b.n	800a978 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800a972:	687b      	ldr	r3, [r7, #4]
 800a974:	2212      	movs	r2, #18
 800a976:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800a978:	6878      	ldr	r0, [r7, #4]
 800a97a:	f7ff fc53 	bl	800a224 <HAL_I2C_MasterRxCpltCallback>
}
 800a97e:	e012      	b.n	800a9a6 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	691a      	ldr	r2, [r3, #16]
 800a986:	687b      	ldr	r3, [r7, #4]
 800a988:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a98a:	b2d2      	uxtb	r2, r2
 800a98c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800a98e:	687b      	ldr	r3, [r7, #4]
 800a990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a992:	1c5a      	adds	r2, r3, #1
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800a99c:	b29b      	uxth	r3, r3
 800a99e:	3b01      	subs	r3, #1
 800a9a0:	b29a      	uxth	r2, r3
 800a9a2:	687b      	ldr	r3, [r7, #4]
 800a9a4:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800a9a6:	bf00      	nop
 800a9a8:	3710      	adds	r7, #16
 800a9aa:	46bd      	mov	sp, r7
 800a9ac:	bd80      	pop	{r7, pc}

0800a9ae <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800a9ae:	b480      	push	{r7}
 800a9b0:	b083      	sub	sp, #12
 800a9b2:	af00      	add	r7, sp, #0
 800a9b4:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800a9b6:	687b      	ldr	r3, [r7, #4]
 800a9b8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a9bc:	b2db      	uxtb	r3, r3
 800a9be:	2b40      	cmp	r3, #64	; 0x40
 800a9c0:	d117      	bne.n	800a9f2 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800a9c2:	687b      	ldr	r3, [r7, #4]
 800a9c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a9c6:	2b00      	cmp	r3, #0
 800a9c8:	d109      	bne.n	800a9de <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9ce:	b2db      	uxtb	r3, r3
 800a9d0:	461a      	mov	r2, r3
 800a9d2:	687b      	ldr	r3, [r7, #4]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800a9da:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 800a9dc:	e067      	b.n	800aaae <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800a9de:	687b      	ldr	r3, [r7, #4]
 800a9e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a9e2:	b2db      	uxtb	r3, r3
 800a9e4:	f043 0301 	orr.w	r3, r3, #1
 800a9e8:	b2da      	uxtb	r2, r3
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	611a      	str	r2, [r3, #16]
}
 800a9f0:	e05d      	b.n	800aaae <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	691b      	ldr	r3, [r3, #16]
 800a9f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a9fa:	d133      	bne.n	800aa64 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa02:	b2db      	uxtb	r3, r3
 800aa04:	2b21      	cmp	r3, #33	; 0x21
 800aa06:	d109      	bne.n	800aa1c <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa0c:	b2db      	uxtb	r3, r3
 800aa0e:	461a      	mov	r2, r3
 800aa10:	687b      	ldr	r3, [r7, #4]
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800aa18:	611a      	str	r2, [r3, #16]
 800aa1a:	e008      	b.n	800aa2e <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa20:	b2db      	uxtb	r3, r3
 800aa22:	f043 0301 	orr.w	r3, r3, #1
 800aa26:	b2da      	uxtb	r2, r3
 800aa28:	687b      	ldr	r3, [r7, #4]
 800aa2a:	681b      	ldr	r3, [r3, #0]
 800aa2c:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800aa2e:	687b      	ldr	r3, [r7, #4]
 800aa30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d004      	beq.n	800aa40 <I2C_Master_SB+0x92>
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aa3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d108      	bne.n	800aa52 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa44:	2b00      	cmp	r3, #0
 800aa46:	d032      	beq.n	800aaae <I2C_Master_SB+0x100>
 800aa48:	687b      	ldr	r3, [r7, #4]
 800aa4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d02d      	beq.n	800aaae <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	685a      	ldr	r2, [r3, #4]
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800aa60:	605a      	str	r2, [r3, #4]
}
 800aa62:	e024      	b.n	800aaae <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d10e      	bne.n	800aa8a <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 800aa6c:	687b      	ldr	r3, [r7, #4]
 800aa6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa70:	b29b      	uxth	r3, r3
 800aa72:	11db      	asrs	r3, r3, #7
 800aa74:	b2db      	uxtb	r3, r3
 800aa76:	f003 0306 	and.w	r3, r3, #6
 800aa7a:	b2db      	uxtb	r3, r3
 800aa7c:	f063 030f 	orn	r3, r3, #15
 800aa80:	b2da      	uxtb	r2, r3
 800aa82:	687b      	ldr	r3, [r7, #4]
 800aa84:	681b      	ldr	r3, [r3, #0]
 800aa86:	611a      	str	r2, [r3, #16]
}
 800aa88:	e011      	b.n	800aaae <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800aa8a:	687b      	ldr	r3, [r7, #4]
 800aa8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa8e:	2b01      	cmp	r3, #1
 800aa90:	d10d      	bne.n	800aaae <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aa96:	b29b      	uxth	r3, r3
 800aa98:	11db      	asrs	r3, r3, #7
 800aa9a:	b2db      	uxtb	r3, r3
 800aa9c:	f003 0306 	and.w	r3, r3, #6
 800aaa0:	b2db      	uxtb	r3, r3
 800aaa2:	f063 030e 	orn	r3, r3, #14
 800aaa6:	b2da      	uxtb	r2, r3
 800aaa8:	687b      	ldr	r3, [r7, #4]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	611a      	str	r2, [r3, #16]
}
 800aaae:	bf00      	nop
 800aab0:	370c      	adds	r7, #12
 800aab2:	46bd      	mov	sp, r7
 800aab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aab8:	4770      	bx	lr

0800aaba <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800aaba:	b480      	push	{r7}
 800aabc:	b083      	sub	sp, #12
 800aabe:	af00      	add	r7, sp, #0
 800aac0:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800aac2:	687b      	ldr	r3, [r7, #4]
 800aac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800aac6:	b2da      	uxtb	r2, r3
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d004      	beq.n	800aae0 <I2C_Master_ADD10+0x26>
 800aad6:	687b      	ldr	r3, [r7, #4]
 800aad8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d108      	bne.n	800aaf2 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d00c      	beq.n	800ab02 <I2C_Master_ADD10+0x48>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d007      	beq.n	800ab02 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	685a      	ldr	r2, [r3, #4]
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ab00:	605a      	str	r2, [r3, #4]
  }
}
 800ab02:	bf00      	nop
 800ab04:	370c      	adds	r7, #12
 800ab06:	46bd      	mov	sp, r7
 800ab08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab0c:	4770      	bx	lr

0800ab0e <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 800ab0e:	b480      	push	{r7}
 800ab10:	b091      	sub	sp, #68	; 0x44
 800ab12:	af00      	add	r7, sp, #0
 800ab14:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800ab1c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800ab20:	687b      	ldr	r3, [r7, #4]
 800ab22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab24:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800ab26:	687b      	ldr	r3, [r7, #4]
 800ab28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ab2a:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ab32:	b2db      	uxtb	r3, r3
 800ab34:	2b22      	cmp	r3, #34	; 0x22
 800ab36:	f040 8169 	bne.w	800ae0c <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab3e:	2b00      	cmp	r3, #0
 800ab40:	d10f      	bne.n	800ab62 <I2C_Master_ADDR+0x54>
 800ab42:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800ab46:	2b40      	cmp	r3, #64	; 0x40
 800ab48:	d10b      	bne.n	800ab62 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	633b      	str	r3, [r7, #48]	; 0x30
 800ab4e:	687b      	ldr	r3, [r7, #4]
 800ab50:	681b      	ldr	r3, [r3, #0]
 800ab52:	695b      	ldr	r3, [r3, #20]
 800ab54:	633b      	str	r3, [r7, #48]	; 0x30
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	699b      	ldr	r3, [r3, #24]
 800ab5c:	633b      	str	r3, [r7, #48]	; 0x30
 800ab5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab60:	e160      	b.n	800ae24 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d11d      	bne.n	800aba6 <I2C_Master_ADDR+0x98>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	691b      	ldr	r3, [r3, #16]
 800ab6e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800ab72:	d118      	bne.n	800aba6 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ab74:	2300      	movs	r3, #0
 800ab76:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	695b      	ldr	r3, [r3, #20]
 800ab7e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	699b      	ldr	r3, [r3, #24]
 800ab86:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ab88:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	681a      	ldr	r2, [r3, #0]
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800ab98:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab9e:	1c5a      	adds	r2, r3, #1
 800aba0:	687b      	ldr	r3, [r7, #4]
 800aba2:	651a      	str	r2, [r3, #80]	; 0x50
 800aba4:	e13e      	b.n	800ae24 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800aba6:	687b      	ldr	r3, [r7, #4]
 800aba8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abaa:	b29b      	uxth	r3, r3
 800abac:	2b00      	cmp	r3, #0
 800abae:	d113      	bne.n	800abd8 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800abb0:	2300      	movs	r3, #0
 800abb2:	62bb      	str	r3, [r7, #40]	; 0x28
 800abb4:	687b      	ldr	r3, [r7, #4]
 800abb6:	681b      	ldr	r3, [r3, #0]
 800abb8:	695b      	ldr	r3, [r3, #20]
 800abba:	62bb      	str	r3, [r7, #40]	; 0x28
 800abbc:	687b      	ldr	r3, [r7, #4]
 800abbe:	681b      	ldr	r3, [r3, #0]
 800abc0:	699b      	ldr	r3, [r3, #24]
 800abc2:	62bb      	str	r3, [r7, #40]	; 0x28
 800abc4:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	681a      	ldr	r2, [r3, #0]
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800abd4:	601a      	str	r2, [r3, #0]
 800abd6:	e115      	b.n	800ae04 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800abdc:	b29b      	uxth	r3, r3
 800abde:	2b01      	cmp	r3, #1
 800abe0:	f040 808a 	bne.w	800acf8 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800abe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800abe6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800abea:	d137      	bne.n	800ac5c <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800abec:	687b      	ldr	r3, [r7, #4]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	681a      	ldr	r2, [r3, #0]
 800abf2:	687b      	ldr	r3, [r7, #4]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800abfa:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	685b      	ldr	r3, [r3, #4]
 800ac02:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac06:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ac0a:	d113      	bne.n	800ac34 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	681a      	ldr	r2, [r3, #0]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac1a:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac1c:	2300      	movs	r3, #0
 800ac1e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac20:	687b      	ldr	r3, [r7, #4]
 800ac22:	681b      	ldr	r3, [r3, #0]
 800ac24:	695b      	ldr	r3, [r3, #20]
 800ac26:	627b      	str	r3, [r7, #36]	; 0x24
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	699b      	ldr	r3, [r3, #24]
 800ac2e:	627b      	str	r3, [r7, #36]	; 0x24
 800ac30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac32:	e0e7      	b.n	800ae04 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ac34:	2300      	movs	r3, #0
 800ac36:	623b      	str	r3, [r7, #32]
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	695b      	ldr	r3, [r3, #20]
 800ac3e:	623b      	str	r3, [r7, #32]
 800ac40:	687b      	ldr	r3, [r7, #4]
 800ac42:	681b      	ldr	r3, [r3, #0]
 800ac44:	699b      	ldr	r3, [r3, #24]
 800ac46:	623b      	str	r3, [r7, #32]
 800ac48:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ac4a:	687b      	ldr	r3, [r7, #4]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	681a      	ldr	r2, [r3, #0]
 800ac50:	687b      	ldr	r3, [r7, #4]
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800ac58:	601a      	str	r2, [r3, #0]
 800ac5a:	e0d3      	b.n	800ae04 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 800ac5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac5e:	2b08      	cmp	r3, #8
 800ac60:	d02e      	beq.n	800acc0 <I2C_Master_ADDR+0x1b2>
 800ac62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac64:	2b20      	cmp	r3, #32
 800ac66:	d02b      	beq.n	800acc0 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800ac68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ac6a:	2b12      	cmp	r3, #18
 800ac6c:	d102      	bne.n	800ac74 <I2C_Master_ADDR+0x166>
 800ac6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac70:	2b01      	cmp	r3, #1
 800ac72:	d125      	bne.n	800acc0 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800ac74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac76:	2b04      	cmp	r3, #4
 800ac78:	d00e      	beq.n	800ac98 <I2C_Master_ADDR+0x18a>
 800ac7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac7c:	2b02      	cmp	r3, #2
 800ac7e:	d00b      	beq.n	800ac98 <I2C_Master_ADDR+0x18a>
 800ac80:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac82:	2b10      	cmp	r3, #16
 800ac84:	d008      	beq.n	800ac98 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681a      	ldr	r2, [r3, #0]
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ac94:	601a      	str	r2, [r3, #0]
 800ac96:	e007      	b.n	800aca8 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	681a      	ldr	r2, [r3, #0]
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800aca6:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800aca8:	2300      	movs	r3, #0
 800acaa:	61fb      	str	r3, [r7, #28]
 800acac:	687b      	ldr	r3, [r7, #4]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	695b      	ldr	r3, [r3, #20]
 800acb2:	61fb      	str	r3, [r7, #28]
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	681b      	ldr	r3, [r3, #0]
 800acb8:	699b      	ldr	r3, [r3, #24]
 800acba:	61fb      	str	r3, [r7, #28]
 800acbc:	69fb      	ldr	r3, [r7, #28]
 800acbe:	e0a1      	b.n	800ae04 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800acc0:	687b      	ldr	r3, [r7, #4]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	681a      	ldr	r2, [r3, #0]
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	681b      	ldr	r3, [r3, #0]
 800acca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800acce:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800acd0:	2300      	movs	r3, #0
 800acd2:	61bb      	str	r3, [r7, #24]
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	695b      	ldr	r3, [r3, #20]
 800acda:	61bb      	str	r3, [r7, #24]
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	681b      	ldr	r3, [r3, #0]
 800ace0:	699b      	ldr	r3, [r3, #24]
 800ace2:	61bb      	str	r3, [r7, #24]
 800ace4:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	681a      	ldr	r2, [r3, #0]
 800acec:	687b      	ldr	r3, [r7, #4]
 800acee:	681b      	ldr	r3, [r3, #0]
 800acf0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800acf4:	601a      	str	r2, [r3, #0]
 800acf6:	e085      	b.n	800ae04 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800acfc:	b29b      	uxth	r3, r3
 800acfe:	2b02      	cmp	r3, #2
 800ad00:	d14d      	bne.n	800ad9e <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800ad02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad04:	2b04      	cmp	r3, #4
 800ad06:	d016      	beq.n	800ad36 <I2C_Master_ADDR+0x228>
 800ad08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad0a:	2b02      	cmp	r3, #2
 800ad0c:	d013      	beq.n	800ad36 <I2C_Master_ADDR+0x228>
 800ad0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad10:	2b10      	cmp	r3, #16
 800ad12:	d010      	beq.n	800ad36 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	681a      	ldr	r2, [r3, #0]
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ad22:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800ad24:	687b      	ldr	r3, [r7, #4]
 800ad26:	681b      	ldr	r3, [r3, #0]
 800ad28:	681a      	ldr	r2, [r3, #0]
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800ad32:	601a      	str	r2, [r3, #0]
 800ad34:	e007      	b.n	800ad46 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad36:	687b      	ldr	r3, [r7, #4]
 800ad38:	681b      	ldr	r3, [r3, #0]
 800ad3a:	681a      	ldr	r2, [r3, #0]
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	681b      	ldr	r3, [r3, #0]
 800ad40:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800ad44:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800ad46:	687b      	ldr	r3, [r7, #4]
 800ad48:	681b      	ldr	r3, [r3, #0]
 800ad4a:	685b      	ldr	r3, [r3, #4]
 800ad4c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ad50:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ad54:	d117      	bne.n	800ad86 <I2C_Master_ADDR+0x278>
 800ad56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800ad5c:	d00b      	beq.n	800ad76 <I2C_Master_ADDR+0x268>
 800ad5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad60:	2b01      	cmp	r3, #1
 800ad62:	d008      	beq.n	800ad76 <I2C_Master_ADDR+0x268>
 800ad64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad66:	2b08      	cmp	r3, #8
 800ad68:	d005      	beq.n	800ad76 <I2C_Master_ADDR+0x268>
 800ad6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad6c:	2b10      	cmp	r3, #16
 800ad6e:	d002      	beq.n	800ad76 <I2C_Master_ADDR+0x268>
 800ad70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ad72:	2b20      	cmp	r3, #32
 800ad74:	d107      	bne.n	800ad86 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	685a      	ldr	r2, [r3, #4]
 800ad7c:	687b      	ldr	r3, [r7, #4]
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ad84:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ad86:	2300      	movs	r3, #0
 800ad88:	617b      	str	r3, [r7, #20]
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	681b      	ldr	r3, [r3, #0]
 800ad8e:	695b      	ldr	r3, [r3, #20]
 800ad90:	617b      	str	r3, [r7, #20]
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	681b      	ldr	r3, [r3, #0]
 800ad96:	699b      	ldr	r3, [r3, #24]
 800ad98:	617b      	str	r3, [r7, #20]
 800ad9a:	697b      	ldr	r3, [r7, #20]
 800ad9c:	e032      	b.n	800ae04 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800ad9e:	687b      	ldr	r3, [r7, #4]
 800ada0:	681b      	ldr	r3, [r3, #0]
 800ada2:	681a      	ldr	r2, [r3, #0]
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	681b      	ldr	r3, [r3, #0]
 800ada8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800adac:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685b      	ldr	r3, [r3, #4]
 800adb4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800adb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800adbc:	d117      	bne.n	800adee <I2C_Master_ADDR+0x2e0>
 800adbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800adc4:	d00b      	beq.n	800adde <I2C_Master_ADDR+0x2d0>
 800adc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adc8:	2b01      	cmp	r3, #1
 800adca:	d008      	beq.n	800adde <I2C_Master_ADDR+0x2d0>
 800adcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adce:	2b08      	cmp	r3, #8
 800add0:	d005      	beq.n	800adde <I2C_Master_ADDR+0x2d0>
 800add2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800add4:	2b10      	cmp	r3, #16
 800add6:	d002      	beq.n	800adde <I2C_Master_ADDR+0x2d0>
 800add8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800adda:	2b20      	cmp	r3, #32
 800addc:	d107      	bne.n	800adee <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	681b      	ldr	r3, [r3, #0]
 800ade2:	685a      	ldr	r2, [r3, #4]
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800adec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800adee:	2300      	movs	r3, #0
 800adf0:	613b      	str	r3, [r7, #16]
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	681b      	ldr	r3, [r3, #0]
 800adf6:	695b      	ldr	r3, [r3, #20]
 800adf8:	613b      	str	r3, [r7, #16]
 800adfa:	687b      	ldr	r3, [r7, #4]
 800adfc:	681b      	ldr	r3, [r3, #0]
 800adfe:	699b      	ldr	r3, [r3, #24]
 800ae00:	613b      	str	r3, [r7, #16]
 800ae02:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	2200      	movs	r2, #0
 800ae08:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 800ae0a:	e00b      	b.n	800ae24 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800ae0c:	2300      	movs	r3, #0
 800ae0e:	60fb      	str	r3, [r7, #12]
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	681b      	ldr	r3, [r3, #0]
 800ae14:	695b      	ldr	r3, [r3, #20]
 800ae16:	60fb      	str	r3, [r7, #12]
 800ae18:	687b      	ldr	r3, [r7, #4]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	699b      	ldr	r3, [r3, #24]
 800ae1e:	60fb      	str	r3, [r7, #12]
 800ae20:	68fb      	ldr	r3, [r7, #12]
}
 800ae22:	e7ff      	b.n	800ae24 <I2C_Master_ADDR+0x316>
 800ae24:	bf00      	nop
 800ae26:	3744      	adds	r7, #68	; 0x44
 800ae28:	46bd      	mov	sp, r7
 800ae2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae2e:	4770      	bx	lr

0800ae30 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b084      	sub	sp, #16
 800ae34:	af00      	add	r7, sp, #0
 800ae36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ae3e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800ae40:	687b      	ldr	r3, [r7, #4]
 800ae42:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae44:	b29b      	uxth	r3, r3
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d02b      	beq.n	800aea2 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae4e:	781a      	ldrb	r2, [r3, #0]
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	681b      	ldr	r3, [r3, #0]
 800ae54:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800ae60:	687b      	ldr	r3, [r7, #4]
 800ae62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae64:	b29b      	uxth	r3, r3
 800ae66:	3b01      	subs	r3, #1
 800ae68:	b29a      	uxth	r2, r3
 800ae6a:	687b      	ldr	r3, [r7, #4]
 800ae6c:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800ae72:	b29b      	uxth	r3, r3
 800ae74:	2b00      	cmp	r3, #0
 800ae76:	d114      	bne.n	800aea2 <I2C_SlaveTransmit_TXE+0x72>
 800ae78:	7bfb      	ldrb	r3, [r7, #15]
 800ae7a:	2b29      	cmp	r3, #41	; 0x29
 800ae7c:	d111      	bne.n	800aea2 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	681b      	ldr	r3, [r3, #0]
 800ae82:	685a      	ldr	r2, [r3, #4]
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800ae8c:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800ae8e:	687b      	ldr	r3, [r7, #4]
 800ae90:	2221      	movs	r2, #33	; 0x21
 800ae92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	2228      	movs	r2, #40	; 0x28
 800ae98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 800ae9c:	6878      	ldr	r0, [r7, #4]
 800ae9e:	f7ff f9cb 	bl	800a238 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800aea2:	bf00      	nop
 800aea4:	3710      	adds	r7, #16
 800aea6:	46bd      	mov	sp, r7
 800aea8:	bd80      	pop	{r7, pc}

0800aeaa <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800aeaa:	b480      	push	{r7}
 800aeac:	b083      	sub	sp, #12
 800aeae:	af00      	add	r7, sp, #0
 800aeb0:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aeb6:	b29b      	uxth	r3, r3
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d011      	beq.n	800aee0 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aec0:	781a      	ldrb	r2, [r3, #0]
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aecc:	1c5a      	adds	r2, r3, #1
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800aed2:	687b      	ldr	r3, [r7, #4]
 800aed4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800aed6:	b29b      	uxth	r3, r3
 800aed8:	3b01      	subs	r3, #1
 800aeda:	b29a      	uxth	r2, r3
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800aeec:	b580      	push	{r7, lr}
 800aeee:	b084      	sub	sp, #16
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800aef4:	687b      	ldr	r3, [r7, #4]
 800aef6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aefa:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800aefc:	687b      	ldr	r3, [r7, #4]
 800aefe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af00:	b29b      	uxth	r3, r3
 800af02:	2b00      	cmp	r3, #0
 800af04:	d02c      	beq.n	800af60 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	681b      	ldr	r3, [r3, #0]
 800af0a:	691a      	ldr	r2, [r3, #16]
 800af0c:	687b      	ldr	r3, [r7, #4]
 800af0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af10:	b2d2      	uxtb	r2, r2
 800af12:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af18:	1c5a      	adds	r2, r3, #1
 800af1a:	687b      	ldr	r3, [r7, #4]
 800af1c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af22:	b29b      	uxth	r3, r3
 800af24:	3b01      	subs	r3, #1
 800af26:	b29a      	uxth	r2, r3
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af30:	b29b      	uxth	r3, r3
 800af32:	2b00      	cmp	r3, #0
 800af34:	d114      	bne.n	800af60 <I2C_SlaveReceive_RXNE+0x74>
 800af36:	7bfb      	ldrb	r3, [r7, #15]
 800af38:	2b2a      	cmp	r3, #42	; 0x2a
 800af3a:	d111      	bne.n	800af60 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	685a      	ldr	r2, [r3, #4]
 800af42:	687b      	ldr	r3, [r7, #4]
 800af44:	681b      	ldr	r3, [r3, #0]
 800af46:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800af4a:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	2222      	movs	r2, #34	; 0x22
 800af50:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800af52:	687b      	ldr	r3, [r7, #4]
 800af54:	2228      	movs	r2, #40	; 0x28
 800af56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800af5a:	6878      	ldr	r0, [r7, #4]
 800af5c:	f7ff f976 	bl	800a24c <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800af60:	bf00      	nop
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800af70:	687b      	ldr	r3, [r7, #4]
 800af72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af74:	b29b      	uxth	r3, r3
 800af76:	2b00      	cmp	r3, #0
 800af78:	d012      	beq.n	800afa0 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800af7a:	687b      	ldr	r3, [r7, #4]
 800af7c:	681b      	ldr	r3, [r3, #0]
 800af7e:	691a      	ldr	r2, [r3, #16]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af84:	b2d2      	uxtb	r2, r2
 800af86:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800af88:	687b      	ldr	r3, [r7, #4]
 800af8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af8c:	1c5a      	adds	r2, r3, #1
 800af8e:	687b      	ldr	r3, [r7, #4]
 800af90:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800af96:	b29b      	uxth	r3, r3
 800af98:	3b01      	subs	r3, #1
 800af9a:	b29a      	uxth	r2, r3
 800af9c:	687b      	ldr	r3, [r7, #4]
 800af9e:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800afa0:	bf00      	nop
 800afa2:	370c      	adds	r7, #12
 800afa4:	46bd      	mov	sp, r7
 800afa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afaa:	4770      	bx	lr

0800afac <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 800afac:	b580      	push	{r7, lr}
 800afae:	b084      	sub	sp, #16
 800afb0:	af00      	add	r7, sp, #0
 800afb2:	6078      	str	r0, [r7, #4]
 800afb4:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800afb6:	2300      	movs	r3, #0
 800afb8:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800afc0:	b2db      	uxtb	r3, r3
 800afc2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800afc6:	2b28      	cmp	r3, #40	; 0x28
 800afc8:	d125      	bne.n	800b016 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	681b      	ldr	r3, [r3, #0]
 800afce:	685a      	ldr	r2, [r3, #4]
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	681b      	ldr	r3, [r3, #0]
 800afd4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800afd8:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 800afda:	683b      	ldr	r3, [r7, #0]
 800afdc:	f003 0304 	and.w	r3, r3, #4
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d101      	bne.n	800afe8 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800afe4:	2301      	movs	r3, #1
 800afe6:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d103      	bne.n	800affa <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	68db      	ldr	r3, [r3, #12]
 800aff6:	81bb      	strh	r3, [r7, #12]
 800aff8:	e002      	b.n	800b000 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 800affa:	687b      	ldr	r3, [r7, #4]
 800affc:	699b      	ldr	r3, [r3, #24]
 800affe:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b000:	687b      	ldr	r3, [r7, #4]
 800b002:	2200      	movs	r2, #0
 800b004:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 800b008:	89ba      	ldrh	r2, [r7, #12]
 800b00a:	7bfb      	ldrb	r3, [r7, #15]
 800b00c:	4619      	mov	r1, r3
 800b00e:	6878      	ldr	r0, [r7, #4]
 800b010:	f7ff f926 	bl	800a260 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800b014:	e00e      	b.n	800b034 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b016:	2300      	movs	r3, #0
 800b018:	60bb      	str	r3, [r7, #8]
 800b01a:	687b      	ldr	r3, [r7, #4]
 800b01c:	681b      	ldr	r3, [r3, #0]
 800b01e:	695b      	ldr	r3, [r3, #20]
 800b020:	60bb      	str	r3, [r7, #8]
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	681b      	ldr	r3, [r3, #0]
 800b026:	699b      	ldr	r3, [r3, #24]
 800b028:	60bb      	str	r3, [r7, #8]
 800b02a:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	2200      	movs	r2, #0
 800b030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800b034:	bf00      	nop
 800b036:	3710      	adds	r7, #16
 800b038:	46bd      	mov	sp, r7
 800b03a:	bd80      	pop	{r7, pc}

0800b03c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b084      	sub	sp, #16
 800b040:	af00      	add	r7, sp, #0
 800b042:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b04a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	685a      	ldr	r2, [r3, #4]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b05a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800b05c:	2300      	movs	r3, #0
 800b05e:	60bb      	str	r3, [r7, #8]
 800b060:	687b      	ldr	r3, [r7, #4]
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	695b      	ldr	r3, [r3, #20]
 800b066:	60bb      	str	r3, [r7, #8]
 800b068:	687b      	ldr	r3, [r7, #4]
 800b06a:	681b      	ldr	r3, [r3, #0]
 800b06c:	681a      	ldr	r2, [r3, #0]
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	f042 0201 	orr.w	r2, r2, #1
 800b076:	601a      	str	r2, [r3, #0]
 800b078:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	681b      	ldr	r3, [r3, #0]
 800b07e:	681a      	ldr	r2, [r3, #0]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	681b      	ldr	r3, [r3, #0]
 800b084:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b088:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b08a:	687b      	ldr	r3, [r7, #4]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	685b      	ldr	r3, [r3, #4]
 800b090:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b098:	d172      	bne.n	800b180 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800b09a:	7bfb      	ldrb	r3, [r7, #15]
 800b09c:	2b22      	cmp	r3, #34	; 0x22
 800b09e:	d002      	beq.n	800b0a6 <I2C_Slave_STOPF+0x6a>
 800b0a0:	7bfb      	ldrb	r3, [r7, #15]
 800b0a2:	2b2a      	cmp	r3, #42	; 0x2a
 800b0a4:	d135      	bne.n	800b112 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800b0a6:	687b      	ldr	r3, [r7, #4]
 800b0a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	685b      	ldr	r3, [r3, #4]
 800b0ae:	b29a      	uxth	r2, r3
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b0b8:	b29b      	uxth	r3, r3
 800b0ba:	2b00      	cmp	r3, #0
 800b0bc:	d005      	beq.n	800b0ca <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b0c2:	f043 0204 	orr.w	r2, r3, #4
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b0ca:	687b      	ldr	r3, [r7, #4]
 800b0cc:	681b      	ldr	r3, [r3, #0]
 800b0ce:	685a      	ldr	r2, [r3, #4]
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b0d8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0de:	4618      	mov	r0, r3
 800b0e0:	f7fd fc62 	bl	80089a8 <HAL_DMA_GetState>
 800b0e4:	4603      	mov	r3, r0
 800b0e6:	2b01      	cmp	r3, #1
 800b0e8:	d049      	beq.n	800b17e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b0ea:	687b      	ldr	r3, [r7, #4]
 800b0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0ee:	4a69      	ldr	r2, [pc, #420]	; (800b294 <I2C_Slave_STOPF+0x258>)
 800b0f0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0f6:	4618      	mov	r0, r3
 800b0f8:	f7fd faaa 	bl	8008650 <HAL_DMA_Abort_IT>
 800b0fc:	4603      	mov	r3, r0
 800b0fe:	2b00      	cmp	r3, #0
 800b100:	d03d      	beq.n	800b17e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b106:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b108:	687a      	ldr	r2, [r7, #4]
 800b10a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b10c:	4610      	mov	r0, r2
 800b10e:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b110:	e035      	b.n	800b17e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800b112:	687b      	ldr	r3, [r7, #4]
 800b114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b116:	681b      	ldr	r3, [r3, #0]
 800b118:	685b      	ldr	r3, [r3, #4]
 800b11a:	b29a      	uxth	r2, r3
 800b11c:	687b      	ldr	r3, [r7, #4]
 800b11e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b124:	b29b      	uxth	r3, r3
 800b126:	2b00      	cmp	r3, #0
 800b128:	d005      	beq.n	800b136 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b12e:	f043 0204 	orr.w	r2, r3, #4
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800b136:	687b      	ldr	r3, [r7, #4]
 800b138:	681b      	ldr	r3, [r3, #0]
 800b13a:	685a      	ldr	r2, [r3, #4]
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b144:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800b146:	687b      	ldr	r3, [r7, #4]
 800b148:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fd fc2c 	bl	80089a8 <HAL_DMA_GetState>
 800b150:	4603      	mov	r3, r0
 800b152:	2b01      	cmp	r3, #1
 800b154:	d014      	beq.n	800b180 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b156:	687b      	ldr	r3, [r7, #4]
 800b158:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b15a:	4a4e      	ldr	r2, [pc, #312]	; (800b294 <I2C_Slave_STOPF+0x258>)
 800b15c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b162:	4618      	mov	r0, r3
 800b164:	f7fd fa74 	bl	8008650 <HAL_DMA_Abort_IT>
 800b168:	4603      	mov	r3, r0
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d008      	beq.n	800b180 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b16e:	687b      	ldr	r3, [r7, #4]
 800b170:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b174:	687a      	ldr	r2, [r7, #4]
 800b176:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b178:	4610      	mov	r0, r2
 800b17a:	4798      	blx	r3
 800b17c:	e000      	b.n	800b180 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800b17e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b184:	b29b      	uxth	r3, r3
 800b186:	2b00      	cmp	r3, #0
 800b188:	d03e      	beq.n	800b208 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	695b      	ldr	r3, [r3, #20]
 800b190:	f003 0304 	and.w	r3, r3, #4
 800b194:	2b04      	cmp	r3, #4
 800b196:	d112      	bne.n	800b1be <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b198:	687b      	ldr	r3, [r7, #4]
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	691a      	ldr	r2, [r3, #16]
 800b19e:	687b      	ldr	r3, [r7, #4]
 800b1a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1a2:	b2d2      	uxtb	r2, r2
 800b1a4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1aa:	1c5a      	adds	r2, r3, #1
 800b1ac:	687b      	ldr	r3, [r7, #4]
 800b1ae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1b4:	b29b      	uxth	r3, r3
 800b1b6:	3b01      	subs	r3, #1
 800b1b8:	b29a      	uxth	r2, r3
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b1be:	687b      	ldr	r3, [r7, #4]
 800b1c0:	681b      	ldr	r3, [r3, #0]
 800b1c2:	695b      	ldr	r3, [r3, #20]
 800b1c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b1c8:	2b40      	cmp	r3, #64	; 0x40
 800b1ca:	d112      	bne.n	800b1f2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b1cc:	687b      	ldr	r3, [r7, #4]
 800b1ce:	681b      	ldr	r3, [r3, #0]
 800b1d0:	691a      	ldr	r2, [r3, #16]
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1d6:	b2d2      	uxtb	r2, r2
 800b1d8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b1da:	687b      	ldr	r3, [r7, #4]
 800b1dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b1de:	1c5a      	adds	r2, r3, #1
 800b1e0:	687b      	ldr	r3, [r7, #4]
 800b1e2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800b1e4:	687b      	ldr	r3, [r7, #4]
 800b1e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1e8:	b29b      	uxth	r3, r3
 800b1ea:	3b01      	subs	r3, #1
 800b1ec:	b29a      	uxth	r2, r3
 800b1ee:	687b      	ldr	r3, [r7, #4]
 800b1f0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 800b1f2:	687b      	ldr	r3, [r7, #4]
 800b1f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800b1f6:	b29b      	uxth	r3, r3
 800b1f8:	2b00      	cmp	r3, #0
 800b1fa:	d005      	beq.n	800b208 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b200:	f043 0204 	orr.w	r2, r3, #4
 800b204:	687b      	ldr	r3, [r7, #4]
 800b206:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800b208:	687b      	ldr	r3, [r7, #4]
 800b20a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d003      	beq.n	800b218 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 800b210:	6878      	ldr	r0, [r7, #4]
 800b212:	f000 f8b7 	bl	800b384 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800b216:	e039      	b.n	800b28c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800b218:	7bfb      	ldrb	r3, [r7, #15]
 800b21a:	2b2a      	cmp	r3, #42	; 0x2a
 800b21c:	d109      	bne.n	800b232 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800b21e:	687b      	ldr	r3, [r7, #4]
 800b220:	2200      	movs	r2, #0
 800b222:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800b224:	687b      	ldr	r3, [r7, #4]
 800b226:	2228      	movs	r2, #40	; 0x28
 800b228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b22c:	6878      	ldr	r0, [r7, #4]
 800b22e:	f7ff f80d 	bl	800a24c <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800b232:	687b      	ldr	r3, [r7, #4]
 800b234:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b238:	b2db      	uxtb	r3, r3
 800b23a:	2b28      	cmp	r3, #40	; 0x28
 800b23c:	d111      	bne.n	800b262 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	4a15      	ldr	r2, [pc, #84]	; (800b298 <I2C_Slave_STOPF+0x25c>)
 800b242:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 800b244:	687b      	ldr	r3, [r7, #4]
 800b246:	2200      	movs	r2, #0
 800b248:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800b24a:	687b      	ldr	r3, [r7, #4]
 800b24c:	2220      	movs	r2, #32
 800b24e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	2200      	movs	r2, #0
 800b256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800b25a:	6878      	ldr	r0, [r7, #4]
 800b25c:	f7ff f80e 	bl	800a27c <HAL_I2C_ListenCpltCallback>
}
 800b260:	e014      	b.n	800b28c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b262:	687b      	ldr	r3, [r7, #4]
 800b264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b266:	2b22      	cmp	r3, #34	; 0x22
 800b268:	d002      	beq.n	800b270 <I2C_Slave_STOPF+0x234>
 800b26a:	7bfb      	ldrb	r3, [r7, #15]
 800b26c:	2b22      	cmp	r3, #34	; 0x22
 800b26e:	d10d      	bne.n	800b28c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800b270:	687b      	ldr	r3, [r7, #4]
 800b272:	2200      	movs	r2, #0
 800b274:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800b276:	687b      	ldr	r3, [r7, #4]
 800b278:	2220      	movs	r2, #32
 800b27a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b27e:	687b      	ldr	r3, [r7, #4]
 800b280:	2200      	movs	r2, #0
 800b282:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800b286:	6878      	ldr	r0, [r7, #4]
 800b288:	f7fe ffe0 	bl	800a24c <HAL_I2C_SlaveRxCpltCallback>
}
 800b28c:	bf00      	nop
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	0800b8e5 	.word	0x0800b8e5
 800b298:	ffff0000 	.word	0xffff0000

0800b29c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800b29c:	b580      	push	{r7, lr}
 800b29e:	b084      	sub	sp, #16
 800b2a0:	af00      	add	r7, sp, #0
 800b2a2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b2a4:	687b      	ldr	r3, [r7, #4]
 800b2a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b2aa:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2b0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 800b2b2:	68bb      	ldr	r3, [r7, #8]
 800b2b4:	2b08      	cmp	r3, #8
 800b2b6:	d002      	beq.n	800b2be <I2C_Slave_AF+0x22>
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	2b20      	cmp	r3, #32
 800b2bc:	d129      	bne.n	800b312 <I2C_Slave_AF+0x76>
 800b2be:	7bfb      	ldrb	r3, [r7, #15]
 800b2c0:	2b28      	cmp	r3, #40	; 0x28
 800b2c2:	d126      	bne.n	800b312 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800b2c4:	687b      	ldr	r3, [r7, #4]
 800b2c6:	4a2e      	ldr	r2, [pc, #184]	; (800b380 <I2C_Slave_AF+0xe4>)
 800b2c8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b2ca:	687b      	ldr	r3, [r7, #4]
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	685a      	ldr	r2, [r3, #4]
 800b2d0:	687b      	ldr	r3, [r7, #4]
 800b2d2:	681b      	ldr	r3, [r3, #0]
 800b2d4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b2d8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b2da:	687b      	ldr	r3, [r7, #4]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b2e2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b2e4:	687b      	ldr	r3, [r7, #4]
 800b2e6:	681b      	ldr	r3, [r3, #0]
 800b2e8:	681a      	ldr	r2, [r3, #0]
 800b2ea:	687b      	ldr	r3, [r7, #4]
 800b2ec:	681b      	ldr	r3, [r3, #0]
 800b2ee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b2f2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 800b2f4:	687b      	ldr	r3, [r7, #4]
 800b2f6:	2200      	movs	r2, #0
 800b2f8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b2fa:	687b      	ldr	r3, [r7, #4]
 800b2fc:	2220      	movs	r2, #32
 800b2fe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b302:	687b      	ldr	r3, [r7, #4]
 800b304:	2200      	movs	r2, #0
 800b306:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b30a:	6878      	ldr	r0, [r7, #4]
 800b30c:	f7fe ffb6 	bl	800a27c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 800b310:	e031      	b.n	800b376 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 800b312:	7bfb      	ldrb	r3, [r7, #15]
 800b314:	2b21      	cmp	r3, #33	; 0x21
 800b316:	d129      	bne.n	800b36c <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4a19      	ldr	r2, [pc, #100]	; (800b380 <I2C_Slave_AF+0xe4>)
 800b31c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	2221      	movs	r2, #33	; 0x21
 800b322:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	2220      	movs	r2, #32
 800b328:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	2200      	movs	r2, #0
 800b330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	681b      	ldr	r3, [r3, #0]
 800b338:	685a      	ldr	r2, [r3, #4]
 800b33a:	687b      	ldr	r3, [r7, #4]
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b342:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	681b      	ldr	r3, [r3, #0]
 800b348:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b34c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	681b      	ldr	r3, [r3, #0]
 800b352:	681a      	ldr	r2, [r3, #0]
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b35c:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f7fe f8f4 	bl	800954c <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800b364:	6878      	ldr	r0, [r7, #4]
 800b366:	f7fe ff67 	bl	800a238 <HAL_I2C_SlaveTxCpltCallback>
}
 800b36a:	e004      	b.n	800b376 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b36c:	687b      	ldr	r3, [r7, #4]
 800b36e:	681b      	ldr	r3, [r3, #0]
 800b370:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800b374:	615a      	str	r2, [r3, #20]
}
 800b376:	bf00      	nop
 800b378:	3710      	adds	r7, #16
 800b37a:	46bd      	mov	sp, r7
 800b37c:	bd80      	pop	{r7, pc}
 800b37e:	bf00      	nop
 800b380:	ffff0000 	.word	0xffff0000

0800b384 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b084      	sub	sp, #16
 800b388:	af00      	add	r7, sp, #0
 800b38a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b392:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800b39a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800b39c:	7bbb      	ldrb	r3, [r7, #14]
 800b39e:	2b10      	cmp	r3, #16
 800b3a0:	d002      	beq.n	800b3a8 <I2C_ITError+0x24>
 800b3a2:	7bbb      	ldrb	r3, [r7, #14]
 800b3a4:	2b40      	cmp	r3, #64	; 0x40
 800b3a6:	d10a      	bne.n	800b3be <I2C_ITError+0x3a>
 800b3a8:	7bfb      	ldrb	r3, [r7, #15]
 800b3aa:	2b22      	cmp	r3, #34	; 0x22
 800b3ac:	d107      	bne.n	800b3be <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	681a      	ldr	r2, [r3, #0]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	681b      	ldr	r3, [r3, #0]
 800b3b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b3bc:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b3be:	7bfb      	ldrb	r3, [r7, #15]
 800b3c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b3c4:	2b28      	cmp	r3, #40	; 0x28
 800b3c6:	d107      	bne.n	800b3d8 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	2228      	movs	r2, #40	; 0x28
 800b3d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800b3d6:	e015      	b.n	800b404 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	681b      	ldr	r3, [r3, #0]
 800b3dc:	685b      	ldr	r3, [r3, #4]
 800b3de:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b3e2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3e6:	d00a      	beq.n	800b3fe <I2C_ITError+0x7a>
 800b3e8:	7bfb      	ldrb	r3, [r7, #15]
 800b3ea:	2b60      	cmp	r3, #96	; 0x60
 800b3ec:	d007      	beq.n	800b3fe <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2220      	movs	r2, #32
 800b3f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800b3f6:	687b      	ldr	r3, [r7, #4]
 800b3f8:	2200      	movs	r2, #0
 800b3fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	2200      	movs	r2, #0
 800b402:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	681b      	ldr	r3, [r3, #0]
 800b408:	685b      	ldr	r3, [r3, #4]
 800b40a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800b40e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b412:	d162      	bne.n	800b4da <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	681b      	ldr	r3, [r3, #0]
 800b418:	685a      	ldr	r2, [r3, #4]
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	681b      	ldr	r3, [r3, #0]
 800b41e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800b422:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800b424:	687b      	ldr	r3, [r7, #4]
 800b426:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b428:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800b42c:	b2db      	uxtb	r3, r3
 800b42e:	2b01      	cmp	r3, #1
 800b430:	d020      	beq.n	800b474 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b436:	4a6a      	ldr	r2, [pc, #424]	; (800b5e0 <I2C_ITError+0x25c>)
 800b438:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b43e:	4618      	mov	r0, r3
 800b440:	f7fd f906 	bl	8008650 <HAL_DMA_Abort_IT>
 800b444:	4603      	mov	r3, r0
 800b446:	2b00      	cmp	r3, #0
 800b448:	f000 8089 	beq.w	800b55e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	681b      	ldr	r3, [r3, #0]
 800b450:	681a      	ldr	r2, [r3, #0]
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	f022 0201 	bic.w	r2, r2, #1
 800b45a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b45c:	687b      	ldr	r3, [r7, #4]
 800b45e:	2220      	movs	r2, #32
 800b460:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b468:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b46a:	687a      	ldr	r2, [r7, #4]
 800b46c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b46e:	4610      	mov	r0, r2
 800b470:	4798      	blx	r3
 800b472:	e074      	b.n	800b55e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b478:	4a59      	ldr	r2, [pc, #356]	; (800b5e0 <I2C_ITError+0x25c>)
 800b47a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b480:	4618      	mov	r0, r3
 800b482:	f7fd f8e5 	bl	8008650 <HAL_DMA_Abort_IT>
 800b486:	4603      	mov	r3, r0
 800b488:	2b00      	cmp	r3, #0
 800b48a:	d068      	beq.n	800b55e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	695b      	ldr	r3, [r3, #20]
 800b492:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b496:	2b40      	cmp	r3, #64	; 0x40
 800b498:	d10b      	bne.n	800b4b2 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	681b      	ldr	r3, [r3, #0]
 800b49e:	691a      	ldr	r2, [r3, #16]
 800b4a0:	687b      	ldr	r3, [r7, #4]
 800b4a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4a4:	b2d2      	uxtb	r2, r2
 800b4a6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800b4a8:	687b      	ldr	r3, [r7, #4]
 800b4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b4ac:	1c5a      	adds	r2, r3, #1
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800b4b2:	687b      	ldr	r3, [r7, #4]
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	681a      	ldr	r2, [r3, #0]
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	f022 0201 	bic.w	r2, r2, #1
 800b4c0:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	2220      	movs	r2, #32
 800b4c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800b4ca:	687b      	ldr	r3, [r7, #4]
 800b4cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b4d0:	687a      	ldr	r2, [r7, #4]
 800b4d2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800b4d4:	4610      	mov	r0, r2
 800b4d6:	4798      	blx	r3
 800b4d8:	e041      	b.n	800b55e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b4e0:	b2db      	uxtb	r3, r3
 800b4e2:	2b60      	cmp	r3, #96	; 0x60
 800b4e4:	d125      	bne.n	800b532 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800b4e6:	687b      	ldr	r3, [r7, #4]
 800b4e8:	2220      	movs	r2, #32
 800b4ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b4ee:	687b      	ldr	r3, [r7, #4]
 800b4f0:	2200      	movs	r2, #0
 800b4f2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b4f4:	687b      	ldr	r3, [r7, #4]
 800b4f6:	681b      	ldr	r3, [r3, #0]
 800b4f8:	695b      	ldr	r3, [r3, #20]
 800b4fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4fe:	2b40      	cmp	r3, #64	; 0x40
 800b500:	d10b      	bne.n	800b51a <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	691a      	ldr	r2, [r3, #16]
 800b508:	687b      	ldr	r3, [r7, #4]
 800b50a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b50c:	b2d2      	uxtb	r2, r2
 800b50e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b514:	1c5a      	adds	r2, r3, #1
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 800b51a:	687b      	ldr	r3, [r7, #4]
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	681a      	ldr	r2, [r3, #0]
 800b520:	687b      	ldr	r3, [r7, #4]
 800b522:	681b      	ldr	r3, [r3, #0]
 800b524:	f022 0201 	bic.w	r2, r2, #1
 800b528:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b52a:	6878      	ldr	r0, [r7, #4]
 800b52c:	f7fe fece 	bl	800a2cc <HAL_I2C_AbortCpltCallback>
 800b530:	e015      	b.n	800b55e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	695b      	ldr	r3, [r3, #20]
 800b538:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b53c:	2b40      	cmp	r3, #64	; 0x40
 800b53e:	d10b      	bne.n	800b558 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800b540:	687b      	ldr	r3, [r7, #4]
 800b542:	681b      	ldr	r3, [r3, #0]
 800b544:	691a      	ldr	r2, [r3, #16]
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b54a:	b2d2      	uxtb	r2, r2
 800b54c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b552:	1c5a      	adds	r2, r3, #1
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 800b558:	6878      	ldr	r0, [r7, #4]
 800b55a:	f7fe fead 	bl	800a2b8 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b562:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b564:	68bb      	ldr	r3, [r7, #8]
 800b566:	f003 0301 	and.w	r3, r3, #1
 800b56a:	2b00      	cmp	r3, #0
 800b56c:	d10e      	bne.n	800b58c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b56e:	68bb      	ldr	r3, [r7, #8]
 800b570:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800b574:	2b00      	cmp	r3, #0
 800b576:	d109      	bne.n	800b58c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b578:	68bb      	ldr	r3, [r7, #8]
 800b57a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d104      	bne.n	800b58c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800b582:	68bb      	ldr	r3, [r7, #8]
 800b584:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d007      	beq.n	800b59c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	685a      	ldr	r2, [r3, #4]
 800b592:	687b      	ldr	r3, [r7, #4]
 800b594:	681b      	ldr	r3, [r3, #0]
 800b596:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800b59a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b5a2:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800b5a4:	687b      	ldr	r3, [r7, #4]
 800b5a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b5a8:	f003 0304 	and.w	r3, r3, #4
 800b5ac:	2b04      	cmp	r3, #4
 800b5ae:	d113      	bne.n	800b5d8 <I2C_ITError+0x254>
 800b5b0:	7bfb      	ldrb	r3, [r7, #15]
 800b5b2:	2b28      	cmp	r3, #40	; 0x28
 800b5b4:	d110      	bne.n	800b5d8 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800b5b6:	687b      	ldr	r3, [r7, #4]
 800b5b8:	4a0a      	ldr	r2, [pc, #40]	; (800b5e4 <I2C_ITError+0x260>)
 800b5ba:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	2200      	movs	r2, #0
 800b5c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800b5c2:	687b      	ldr	r3, [r7, #4]
 800b5c4:	2220      	movs	r2, #32
 800b5c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	2200      	movs	r2, #0
 800b5ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800b5d2:	6878      	ldr	r0, [r7, #4]
 800b5d4:	f7fe fe52 	bl	800a27c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b5d8:	bf00      	nop
 800b5da:	3710      	adds	r7, #16
 800b5dc:	46bd      	mov	sp, r7
 800b5de:	bd80      	pop	{r7, pc}
 800b5e0:	0800b8e5 	.word	0x0800b8e5
 800b5e4:	ffff0000 	.word	0xffff0000

0800b5e8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b5e8:	b580      	push	{r7, lr}
 800b5ea:	b088      	sub	sp, #32
 800b5ec:	af02      	add	r7, sp, #8
 800b5ee:	60f8      	str	r0, [r7, #12]
 800b5f0:	4608      	mov	r0, r1
 800b5f2:	4611      	mov	r1, r2
 800b5f4:	461a      	mov	r2, r3
 800b5f6:	4603      	mov	r3, r0
 800b5f8:	817b      	strh	r3, [r7, #10]
 800b5fa:	460b      	mov	r3, r1
 800b5fc:	813b      	strh	r3, [r7, #8]
 800b5fe:	4613      	mov	r3, r2
 800b600:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b602:	68fb      	ldr	r3, [r7, #12]
 800b604:	681b      	ldr	r3, [r3, #0]
 800b606:	681a      	ldr	r2, [r3, #0]
 800b608:	68fb      	ldr	r3, [r7, #12]
 800b60a:	681b      	ldr	r3, [r3, #0]
 800b60c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b610:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b612:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b614:	9300      	str	r3, [sp, #0]
 800b616:	6a3b      	ldr	r3, [r7, #32]
 800b618:	2200      	movs	r2, #0
 800b61a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b61e:	68f8      	ldr	r0, [r7, #12]
 800b620:	f000 fa08 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 800b624:	4603      	mov	r3, r0
 800b626:	2b00      	cmp	r3, #0
 800b628:	d00d      	beq.n	800b646 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	681b      	ldr	r3, [r3, #0]
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b634:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b638:	d103      	bne.n	800b642 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b63a:	68fb      	ldr	r3, [r7, #12]
 800b63c:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b640:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b642:	2303      	movs	r3, #3
 800b644:	e05f      	b.n	800b706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b646:	897b      	ldrh	r3, [r7, #10]
 800b648:	b2db      	uxtb	r3, r3
 800b64a:	461a      	mov	r2, r3
 800b64c:	68fb      	ldr	r3, [r7, #12]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b654:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b656:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b658:	6a3a      	ldr	r2, [r7, #32]
 800b65a:	492d      	ldr	r1, [pc, #180]	; (800b710 <I2C_RequestMemoryWrite+0x128>)
 800b65c:	68f8      	ldr	r0, [r7, #12]
 800b65e:	f000 fa63 	bl	800bb28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b662:	4603      	mov	r3, r0
 800b664:	2b00      	cmp	r3, #0
 800b666:	d001      	beq.n	800b66c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800b668:	2301      	movs	r3, #1
 800b66a:	e04c      	b.n	800b706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b66c:	2300      	movs	r3, #0
 800b66e:	617b      	str	r3, [r7, #20]
 800b670:	68fb      	ldr	r3, [r7, #12]
 800b672:	681b      	ldr	r3, [r3, #0]
 800b674:	695b      	ldr	r3, [r3, #20]
 800b676:	617b      	str	r3, [r7, #20]
 800b678:	68fb      	ldr	r3, [r7, #12]
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	699b      	ldr	r3, [r3, #24]
 800b67e:	617b      	str	r3, [r7, #20]
 800b680:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b682:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b684:	6a39      	ldr	r1, [r7, #32]
 800b686:	68f8      	ldr	r0, [r7, #12]
 800b688:	f000 faee 	bl	800bc68 <I2C_WaitOnTXEFlagUntilTimeout>
 800b68c:	4603      	mov	r3, r0
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00d      	beq.n	800b6ae <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b696:	2b04      	cmp	r3, #4
 800b698:	d107      	bne.n	800b6aa <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b69a:	68fb      	ldr	r3, [r7, #12]
 800b69c:	681b      	ldr	r3, [r3, #0]
 800b69e:	681a      	ldr	r2, [r3, #0]
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	681b      	ldr	r3, [r3, #0]
 800b6a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6a8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b6aa:	2301      	movs	r3, #1
 800b6ac:	e02b      	b.n	800b706 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b6ae:	88fb      	ldrh	r3, [r7, #6]
 800b6b0:	2b01      	cmp	r3, #1
 800b6b2:	d105      	bne.n	800b6c0 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b6b4:	893b      	ldrh	r3, [r7, #8]
 800b6b6:	b2da      	uxtb	r2, r3
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	611a      	str	r2, [r3, #16]
 800b6be:	e021      	b.n	800b704 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b6c0:	893b      	ldrh	r3, [r7, #8]
 800b6c2:	0a1b      	lsrs	r3, r3, #8
 800b6c4:	b29b      	uxth	r3, r3
 800b6c6:	b2da      	uxtb	r2, r3
 800b6c8:	68fb      	ldr	r3, [r7, #12]
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b6d0:	6a39      	ldr	r1, [r7, #32]
 800b6d2:	68f8      	ldr	r0, [r7, #12]
 800b6d4:	f000 fac8 	bl	800bc68 <I2C_WaitOnTXEFlagUntilTimeout>
 800b6d8:	4603      	mov	r3, r0
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d00d      	beq.n	800b6fa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b6de:	68fb      	ldr	r3, [r7, #12]
 800b6e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b6e2:	2b04      	cmp	r3, #4
 800b6e4:	d107      	bne.n	800b6f6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b6e6:	68fb      	ldr	r3, [r7, #12]
 800b6e8:	681b      	ldr	r3, [r3, #0]
 800b6ea:	681a      	ldr	r2, [r3, #0]
 800b6ec:	68fb      	ldr	r3, [r7, #12]
 800b6ee:	681b      	ldr	r3, [r3, #0]
 800b6f0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b6f4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b6f6:	2301      	movs	r3, #1
 800b6f8:	e005      	b.n	800b706 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b6fa:	893b      	ldrh	r3, [r7, #8]
 800b6fc:	b2da      	uxtb	r2, r3
 800b6fe:	68fb      	ldr	r3, [r7, #12]
 800b700:	681b      	ldr	r3, [r3, #0]
 800b702:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3718      	adds	r7, #24
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	00010002 	.word	0x00010002

0800b714 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b088      	sub	sp, #32
 800b718:	af02      	add	r7, sp, #8
 800b71a:	60f8      	str	r0, [r7, #12]
 800b71c:	4608      	mov	r0, r1
 800b71e:	4611      	mov	r1, r2
 800b720:	461a      	mov	r2, r3
 800b722:	4603      	mov	r3, r0
 800b724:	817b      	strh	r3, [r7, #10]
 800b726:	460b      	mov	r3, r1
 800b728:	813b      	strh	r3, [r7, #8]
 800b72a:	4613      	mov	r3, r2
 800b72c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	681a      	ldr	r2, [r3, #0]
 800b734:	68fb      	ldr	r3, [r7, #12]
 800b736:	681b      	ldr	r3, [r3, #0]
 800b738:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b73c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b73e:	68fb      	ldr	r3, [r7, #12]
 800b740:	681b      	ldr	r3, [r3, #0]
 800b742:	681a      	ldr	r2, [r3, #0]
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b74c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b74e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b750:	9300      	str	r3, [sp, #0]
 800b752:	6a3b      	ldr	r3, [r7, #32]
 800b754:	2200      	movs	r2, #0
 800b756:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b75a:	68f8      	ldr	r0, [r7, #12]
 800b75c:	f000 f96a 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 800b760:	4603      	mov	r3, r0
 800b762:	2b00      	cmp	r3, #0
 800b764:	d00d      	beq.n	800b782 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b766:	68fb      	ldr	r3, [r7, #12]
 800b768:	681b      	ldr	r3, [r3, #0]
 800b76a:	681b      	ldr	r3, [r3, #0]
 800b76c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b770:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b774:	d103      	bne.n	800b77e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b776:	68fb      	ldr	r3, [r7, #12]
 800b778:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b77c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b77e:	2303      	movs	r3, #3
 800b780:	e0aa      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800b782:	897b      	ldrh	r3, [r7, #10]
 800b784:	b2db      	uxtb	r3, r3
 800b786:	461a      	mov	r2, r3
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800b790:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b792:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b794:	6a3a      	ldr	r2, [r7, #32]
 800b796:	4952      	ldr	r1, [pc, #328]	; (800b8e0 <I2C_RequestMemoryRead+0x1cc>)
 800b798:	68f8      	ldr	r0, [r7, #12]
 800b79a:	f000 f9c5 	bl	800bb28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b79e:	4603      	mov	r3, r0
 800b7a0:	2b00      	cmp	r3, #0
 800b7a2:	d001      	beq.n	800b7a8 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800b7a4:	2301      	movs	r3, #1
 800b7a6:	e097      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800b7a8:	2300      	movs	r3, #0
 800b7aa:	617b      	str	r3, [r7, #20]
 800b7ac:	68fb      	ldr	r3, [r7, #12]
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	695b      	ldr	r3, [r3, #20]
 800b7b2:	617b      	str	r3, [r7, #20]
 800b7b4:	68fb      	ldr	r3, [r7, #12]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	699b      	ldr	r3, [r3, #24]
 800b7ba:	617b      	str	r3, [r7, #20]
 800b7bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7c0:	6a39      	ldr	r1, [r7, #32]
 800b7c2:	68f8      	ldr	r0, [r7, #12]
 800b7c4:	f000 fa50 	bl	800bc68 <I2C_WaitOnTXEFlagUntilTimeout>
 800b7c8:	4603      	mov	r3, r0
 800b7ca:	2b00      	cmp	r3, #0
 800b7cc:	d00d      	beq.n	800b7ea <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b7ce:	68fb      	ldr	r3, [r7, #12]
 800b7d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	d107      	bne.n	800b7e6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b7d6:	68fb      	ldr	r3, [r7, #12]
 800b7d8:	681b      	ldr	r3, [r3, #0]
 800b7da:	681a      	ldr	r2, [r3, #0]
 800b7dc:	68fb      	ldr	r3, [r7, #12]
 800b7de:	681b      	ldr	r3, [r3, #0]
 800b7e0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b7e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	e076      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b7ea:	88fb      	ldrh	r3, [r7, #6]
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d105      	bne.n	800b7fc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b7f0:	893b      	ldrh	r3, [r7, #8]
 800b7f2:	b2da      	uxtb	r2, r3
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	681b      	ldr	r3, [r3, #0]
 800b7f8:	611a      	str	r2, [r3, #16]
 800b7fa:	e021      	b.n	800b840 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800b7fc:	893b      	ldrh	r3, [r7, #8]
 800b7fe:	0a1b      	lsrs	r3, r3, #8
 800b800:	b29b      	uxth	r3, r3
 800b802:	b2da      	uxtb	r2, r3
 800b804:	68fb      	ldr	r3, [r7, #12]
 800b806:	681b      	ldr	r3, [r3, #0]
 800b808:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b80a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b80c:	6a39      	ldr	r1, [r7, #32]
 800b80e:	68f8      	ldr	r0, [r7, #12]
 800b810:	f000 fa2a 	bl	800bc68 <I2C_WaitOnTXEFlagUntilTimeout>
 800b814:	4603      	mov	r3, r0
 800b816:	2b00      	cmp	r3, #0
 800b818:	d00d      	beq.n	800b836 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b81e:	2b04      	cmp	r3, #4
 800b820:	d107      	bne.n	800b832 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b822:	68fb      	ldr	r3, [r7, #12]
 800b824:	681b      	ldr	r3, [r3, #0]
 800b826:	681a      	ldr	r2, [r3, #0]
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	681b      	ldr	r3, [r3, #0]
 800b82c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b830:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800b832:	2301      	movs	r3, #1
 800b834:	e050      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800b836:	893b      	ldrh	r3, [r7, #8]
 800b838:	b2da      	uxtb	r2, r3
 800b83a:	68fb      	ldr	r3, [r7, #12]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b840:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b842:	6a39      	ldr	r1, [r7, #32]
 800b844:	68f8      	ldr	r0, [r7, #12]
 800b846:	f000 fa0f 	bl	800bc68 <I2C_WaitOnTXEFlagUntilTimeout>
 800b84a:	4603      	mov	r3, r0
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d00d      	beq.n	800b86c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b854:	2b04      	cmp	r3, #4
 800b856:	d107      	bne.n	800b868 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800b858:	68fb      	ldr	r3, [r7, #12]
 800b85a:	681b      	ldr	r3, [r3, #0]
 800b85c:	681a      	ldr	r2, [r3, #0]
 800b85e:	68fb      	ldr	r3, [r7, #12]
 800b860:	681b      	ldr	r3, [r3, #0]
 800b862:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800b866:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800b868:	2301      	movs	r3, #1
 800b86a:	e035      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800b86c:	68fb      	ldr	r3, [r7, #12]
 800b86e:	681b      	ldr	r3, [r3, #0]
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	681b      	ldr	r3, [r3, #0]
 800b876:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800b87a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800b87c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87e:	9300      	str	r3, [sp, #0]
 800b880:	6a3b      	ldr	r3, [r7, #32]
 800b882:	2200      	movs	r2, #0
 800b884:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800b888:	68f8      	ldr	r0, [r7, #12]
 800b88a:	f000 f8d3 	bl	800ba34 <I2C_WaitOnFlagUntilTimeout>
 800b88e:	4603      	mov	r3, r0
 800b890:	2b00      	cmp	r3, #0
 800b892:	d00d      	beq.n	800b8b0 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	681b      	ldr	r3, [r3, #0]
 800b898:	681b      	ldr	r3, [r3, #0]
 800b89a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b89e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b8a2:	d103      	bne.n	800b8ac <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b8aa:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800b8ac:	2303      	movs	r3, #3
 800b8ae:	e013      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800b8b0:	897b      	ldrh	r3, [r7, #10]
 800b8b2:	b2db      	uxtb	r3, r3
 800b8b4:	f043 0301 	orr.w	r3, r3, #1
 800b8b8:	b2da      	uxtb	r2, r3
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	681b      	ldr	r3, [r3, #0]
 800b8be:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800b8c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8c2:	6a3a      	ldr	r2, [r7, #32]
 800b8c4:	4906      	ldr	r1, [pc, #24]	; (800b8e0 <I2C_RequestMemoryRead+0x1cc>)
 800b8c6:	68f8      	ldr	r0, [r7, #12]
 800b8c8:	f000 f92e 	bl	800bb28 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800b8cc:	4603      	mov	r3, r0
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d001      	beq.n	800b8d6 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800b8d2:	2301      	movs	r3, #1
 800b8d4:	e000      	b.n	800b8d8 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800b8d6:	2300      	movs	r3, #0
}
 800b8d8:	4618      	mov	r0, r3
 800b8da:	3718      	adds	r7, #24
 800b8dc:	46bd      	mov	sp, r7
 800b8de:	bd80      	pop	{r7, pc}
 800b8e0:	00010002 	.word	0x00010002

0800b8e4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800b8e4:	b580      	push	{r7, lr}
 800b8e6:	b086      	sub	sp, #24
 800b8e8:	af00      	add	r7, sp, #0
 800b8ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800b8ec:	2300      	movs	r3, #0
 800b8ee:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800b8f0:	687b      	ldr	r3, [r7, #4]
 800b8f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8f4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800b8f6:	697b      	ldr	r3, [r7, #20]
 800b8f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b8fc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800b8fe:	4b4b      	ldr	r3, [pc, #300]	; (800ba2c <I2C_DMAAbort+0x148>)
 800b900:	681b      	ldr	r3, [r3, #0]
 800b902:	08db      	lsrs	r3, r3, #3
 800b904:	4a4a      	ldr	r2, [pc, #296]	; (800ba30 <I2C_DMAAbort+0x14c>)
 800b906:	fba2 2303 	umull	r2, r3, r2, r3
 800b90a:	0a1a      	lsrs	r2, r3, #8
 800b90c:	4613      	mov	r3, r2
 800b90e:	009b      	lsls	r3, r3, #2
 800b910:	4413      	add	r3, r2
 800b912:	00da      	lsls	r2, r3, #3
 800b914:	1ad3      	subs	r3, r2, r3
 800b916:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	2b00      	cmp	r3, #0
 800b91c:	d106      	bne.n	800b92c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b91e:	697b      	ldr	r3, [r7, #20]
 800b920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b922:	f043 0220 	orr.w	r2, r3, #32
 800b926:	697b      	ldr	r3, [r7, #20]
 800b928:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800b92a:	e00a      	b.n	800b942 <I2C_DMAAbort+0x5e>
    }
    count--;
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	3b01      	subs	r3, #1
 800b930:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800b932:	697b      	ldr	r3, [r7, #20]
 800b934:	681b      	ldr	r3, [r3, #0]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800b93c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b940:	d0ea      	beq.n	800b918 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800b942:	697b      	ldr	r3, [r7, #20]
 800b944:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b946:	2b00      	cmp	r3, #0
 800b948:	d003      	beq.n	800b952 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800b94a:	697b      	ldr	r3, [r7, #20]
 800b94c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b94e:	2200      	movs	r2, #0
 800b950:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800b952:	697b      	ldr	r3, [r7, #20]
 800b954:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b956:	2b00      	cmp	r3, #0
 800b958:	d003      	beq.n	800b962 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b95e:	2200      	movs	r2, #0
 800b960:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b962:	697b      	ldr	r3, [r7, #20]
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	681a      	ldr	r2, [r3, #0]
 800b968:	697b      	ldr	r3, [r7, #20]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800b970:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800b972:	697b      	ldr	r3, [r7, #20]
 800b974:	2200      	movs	r2, #0
 800b976:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d003      	beq.n	800b988 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800b980:	697b      	ldr	r3, [r7, #20]
 800b982:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b984:	2200      	movs	r2, #0
 800b986:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 800b988:	697b      	ldr	r3, [r7, #20]
 800b98a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d003      	beq.n	800b998 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800b990:	697b      	ldr	r3, [r7, #20]
 800b992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b994:	2200      	movs	r2, #0
 800b996:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800b998:	697b      	ldr	r3, [r7, #20]
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	681a      	ldr	r2, [r3, #0]
 800b99e:	697b      	ldr	r3, [r7, #20]
 800b9a0:	681b      	ldr	r3, [r3, #0]
 800b9a2:	f022 0201 	bic.w	r2, r2, #1
 800b9a6:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800b9a8:	697b      	ldr	r3, [r7, #20]
 800b9aa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b9ae:	b2db      	uxtb	r3, r3
 800b9b0:	2b60      	cmp	r3, #96	; 0x60
 800b9b2:	d10e      	bne.n	800b9d2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800b9b4:	697b      	ldr	r3, [r7, #20]
 800b9b6:	2220      	movs	r2, #32
 800b9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800b9bc:	697b      	ldr	r3, [r7, #20]
 800b9be:	2200      	movs	r2, #0
 800b9c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 800b9c4:	697b      	ldr	r3, [r7, #20]
 800b9c6:	2200      	movs	r2, #0
 800b9c8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800b9ca:	6978      	ldr	r0, [r7, #20]
 800b9cc:	f7fe fc7e 	bl	800a2cc <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800b9d0:	e027      	b.n	800ba22 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800b9d2:	7cfb      	ldrb	r3, [r7, #19]
 800b9d4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800b9d8:	2b28      	cmp	r3, #40	; 0x28
 800b9da:	d117      	bne.n	800ba0c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800b9dc:	697b      	ldr	r3, [r7, #20]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	681a      	ldr	r2, [r3, #0]
 800b9e2:	697b      	ldr	r3, [r7, #20]
 800b9e4:	681b      	ldr	r3, [r3, #0]
 800b9e6:	f042 0201 	orr.w	r2, r2, #1
 800b9ea:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800b9ec:	697b      	ldr	r3, [r7, #20]
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	697b      	ldr	r3, [r7, #20]
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800b9fa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800b9fc:	697b      	ldr	r3, [r7, #20]
 800b9fe:	2200      	movs	r2, #0
 800ba00:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800ba02:	697b      	ldr	r3, [r7, #20]
 800ba04:	2228      	movs	r2, #40	; 0x28
 800ba06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800ba0a:	e007      	b.n	800ba1c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 800ba0c:	697b      	ldr	r3, [r7, #20]
 800ba0e:	2220      	movs	r2, #32
 800ba10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba14:	697b      	ldr	r3, [r7, #20]
 800ba16:	2200      	movs	r2, #0
 800ba18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800ba1c:	6978      	ldr	r0, [r7, #20]
 800ba1e:	f7fe fc4b 	bl	800a2b8 <HAL_I2C_ErrorCallback>
}
 800ba22:	bf00      	nop
 800ba24:	3718      	adds	r7, #24
 800ba26:	46bd      	mov	sp, r7
 800ba28:	bd80      	pop	{r7, pc}
 800ba2a:	bf00      	nop
 800ba2c:	200001a0 	.word	0x200001a0
 800ba30:	14f8b589 	.word	0x14f8b589

0800ba34 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800ba34:	b580      	push	{r7, lr}
 800ba36:	b084      	sub	sp, #16
 800ba38:	af00      	add	r7, sp, #0
 800ba3a:	60f8      	str	r0, [r7, #12]
 800ba3c:	60b9      	str	r1, [r7, #8]
 800ba3e:	603b      	str	r3, [r7, #0]
 800ba40:	4613      	mov	r3, r2
 800ba42:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800ba44:	e048      	b.n	800bad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba46:	683b      	ldr	r3, [r7, #0]
 800ba48:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba4c:	d044      	beq.n	800bad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba4e:	f7fb fc65 	bl	800731c <HAL_GetTick>
 800ba52:	4602      	mov	r2, r0
 800ba54:	69bb      	ldr	r3, [r7, #24]
 800ba56:	1ad3      	subs	r3, r2, r3
 800ba58:	683a      	ldr	r2, [r7, #0]
 800ba5a:	429a      	cmp	r2, r3
 800ba5c:	d302      	bcc.n	800ba64 <I2C_WaitOnFlagUntilTimeout+0x30>
 800ba5e:	683b      	ldr	r3, [r7, #0]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	d139      	bne.n	800bad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800ba64:	68bb      	ldr	r3, [r7, #8]
 800ba66:	0c1b      	lsrs	r3, r3, #16
 800ba68:	b2db      	uxtb	r3, r3
 800ba6a:	2b01      	cmp	r3, #1
 800ba6c:	d10d      	bne.n	800ba8a <I2C_WaitOnFlagUntilTimeout+0x56>
 800ba6e:	68fb      	ldr	r3, [r7, #12]
 800ba70:	681b      	ldr	r3, [r3, #0]
 800ba72:	695b      	ldr	r3, [r3, #20]
 800ba74:	43da      	mvns	r2, r3
 800ba76:	68bb      	ldr	r3, [r7, #8]
 800ba78:	4013      	ands	r3, r2
 800ba7a:	b29b      	uxth	r3, r3
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	bf0c      	ite	eq
 800ba80:	2301      	moveq	r3, #1
 800ba82:	2300      	movne	r3, #0
 800ba84:	b2db      	uxtb	r3, r3
 800ba86:	461a      	mov	r2, r3
 800ba88:	e00c      	b.n	800baa4 <I2C_WaitOnFlagUntilTimeout+0x70>
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	681b      	ldr	r3, [r3, #0]
 800ba8e:	699b      	ldr	r3, [r3, #24]
 800ba90:	43da      	mvns	r2, r3
 800ba92:	68bb      	ldr	r3, [r7, #8]
 800ba94:	4013      	ands	r3, r2
 800ba96:	b29b      	uxth	r3, r3
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	bf0c      	ite	eq
 800ba9c:	2301      	moveq	r3, #1
 800ba9e:	2300      	movne	r3, #0
 800baa0:	b2db      	uxtb	r3, r3
 800baa2:	461a      	mov	r2, r3
 800baa4:	79fb      	ldrb	r3, [r7, #7]
 800baa6:	429a      	cmp	r2, r3
 800baa8:	d116      	bne.n	800bad8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800baaa:	68fb      	ldr	r3, [r7, #12]
 800baac:	2200      	movs	r2, #0
 800baae:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800bab0:	68fb      	ldr	r3, [r7, #12]
 800bab2:	2220      	movs	r2, #32
 800bab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800bab8:	68fb      	ldr	r3, [r7, #12]
 800baba:	2200      	movs	r2, #0
 800babc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800bac0:	68fb      	ldr	r3, [r7, #12]
 800bac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac4:	f043 0220 	orr.w	r2, r3, #32
 800bac8:	68fb      	ldr	r3, [r7, #12]
 800baca:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bacc:	68fb      	ldr	r3, [r7, #12]
 800bace:	2200      	movs	r2, #0
 800bad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bad4:	2301      	movs	r3, #1
 800bad6:	e023      	b.n	800bb20 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800bad8:	68bb      	ldr	r3, [r7, #8]
 800bada:	0c1b      	lsrs	r3, r3, #16
 800badc:	b2db      	uxtb	r3, r3
 800bade:	2b01      	cmp	r3, #1
 800bae0:	d10d      	bne.n	800bafe <I2C_WaitOnFlagUntilTimeout+0xca>
 800bae2:	68fb      	ldr	r3, [r7, #12]
 800bae4:	681b      	ldr	r3, [r3, #0]
 800bae6:	695b      	ldr	r3, [r3, #20]
 800bae8:	43da      	mvns	r2, r3
 800baea:	68bb      	ldr	r3, [r7, #8]
 800baec:	4013      	ands	r3, r2
 800baee:	b29b      	uxth	r3, r3
 800baf0:	2b00      	cmp	r3, #0
 800baf2:	bf0c      	ite	eq
 800baf4:	2301      	moveq	r3, #1
 800baf6:	2300      	movne	r3, #0
 800baf8:	b2db      	uxtb	r3, r3
 800bafa:	461a      	mov	r2, r3
 800bafc:	e00c      	b.n	800bb18 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	681b      	ldr	r3, [r3, #0]
 800bb02:	699b      	ldr	r3, [r3, #24]
 800bb04:	43da      	mvns	r2, r3
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	4013      	ands	r3, r2
 800bb0a:	b29b      	uxth	r3, r3
 800bb0c:	2b00      	cmp	r3, #0
 800bb0e:	bf0c      	ite	eq
 800bb10:	2301      	moveq	r3, #1
 800bb12:	2300      	movne	r3, #0
 800bb14:	b2db      	uxtb	r3, r3
 800bb16:	461a      	mov	r2, r3
 800bb18:	79fb      	ldrb	r3, [r7, #7]
 800bb1a:	429a      	cmp	r2, r3
 800bb1c:	d093      	beq.n	800ba46 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb1e:	2300      	movs	r3, #0
}
 800bb20:	4618      	mov	r0, r3
 800bb22:	3710      	adds	r7, #16
 800bb24:	46bd      	mov	sp, r7
 800bb26:	bd80      	pop	{r7, pc}

0800bb28 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800bb28:	b580      	push	{r7, lr}
 800bb2a:	b084      	sub	sp, #16
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
 800bb34:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bb36:	e071      	b.n	800bc1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800bb38:	68fb      	ldr	r3, [r7, #12]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	695b      	ldr	r3, [r3, #20]
 800bb3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800bb42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bb46:	d123      	bne.n	800bb90 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	681b      	ldr	r3, [r3, #0]
 800bb4c:	681a      	ldr	r2, [r3, #0]
 800bb4e:	68fb      	ldr	r3, [r7, #12]
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800bb56:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bb58:	68fb      	ldr	r3, [r7, #12]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bb60:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2200      	movs	r2, #0
 800bb66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bb78:	68fb      	ldr	r3, [r7, #12]
 800bb7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bb7c:	f043 0204 	orr.w	r2, r3, #4
 800bb80:	68fb      	ldr	r3, [r7, #12]
 800bb82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800bb84:	68fb      	ldr	r3, [r7, #12]
 800bb86:	2200      	movs	r2, #0
 800bb88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800bb8c:	2301      	movs	r3, #1
 800bb8e:	e067      	b.n	800bc60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bb96:	d041      	beq.n	800bc1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bb98:	f7fb fbc0 	bl	800731c <HAL_GetTick>
 800bb9c:	4602      	mov	r2, r0
 800bb9e:	683b      	ldr	r3, [r7, #0]
 800bba0:	1ad3      	subs	r3, r2, r3
 800bba2:	687a      	ldr	r2, [r7, #4]
 800bba4:	429a      	cmp	r2, r3
 800bba6:	d302      	bcc.n	800bbae <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800bba8:	687b      	ldr	r3, [r7, #4]
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d136      	bne.n	800bc1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800bbae:	68bb      	ldr	r3, [r7, #8]
 800bbb0:	0c1b      	lsrs	r3, r3, #16
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	2b01      	cmp	r3, #1
 800bbb6:	d10c      	bne.n	800bbd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	695b      	ldr	r3, [r3, #20]
 800bbbe:	43da      	mvns	r2, r3
 800bbc0:	68bb      	ldr	r3, [r7, #8]
 800bbc2:	4013      	ands	r3, r2
 800bbc4:	b29b      	uxth	r3, r3
 800bbc6:	2b00      	cmp	r3, #0
 800bbc8:	bf14      	ite	ne
 800bbca:	2301      	movne	r3, #1
 800bbcc:	2300      	moveq	r3, #0
 800bbce:	b2db      	uxtb	r3, r3
 800bbd0:	e00b      	b.n	800bbea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	699b      	ldr	r3, [r3, #24]
 800bbd8:	43da      	mvns	r2, r3
 800bbda:	68bb      	ldr	r3, [r7, #8]
 800bbdc:	4013      	ands	r3, r2
 800bbde:	b29b      	uxth	r3, r3
 800bbe0:	2b00      	cmp	r3, #0
 800bbe2:	bf14      	ite	ne
 800bbe4:	2301      	movne	r3, #1
 800bbe6:	2300      	moveq	r3, #0
 800bbe8:	b2db      	uxtb	r3, r3
 800bbea:	2b00      	cmp	r3, #0
 800bbec:	d016      	beq.n	800bc1c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bbee:	68fb      	ldr	r3, [r7, #12]
 800bbf0:	2200      	movs	r2, #0
 800bbf2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bbf4:	68fb      	ldr	r3, [r7, #12]
 800bbf6:	2220      	movs	r2, #32
 800bbf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	2200      	movs	r2, #0
 800bc00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bc08:	f043 0220 	orr.w	r2, r3, #32
 800bc0c:	68fb      	ldr	r3, [r7, #12]
 800bc0e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bc10:	68fb      	ldr	r3, [r7, #12]
 800bc12:	2200      	movs	r2, #0
 800bc14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bc18:	2301      	movs	r3, #1
 800bc1a:	e021      	b.n	800bc60 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800bc1c:	68bb      	ldr	r3, [r7, #8]
 800bc1e:	0c1b      	lsrs	r3, r3, #16
 800bc20:	b2db      	uxtb	r3, r3
 800bc22:	2b01      	cmp	r3, #1
 800bc24:	d10c      	bne.n	800bc40 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	695b      	ldr	r3, [r3, #20]
 800bc2c:	43da      	mvns	r2, r3
 800bc2e:	68bb      	ldr	r3, [r7, #8]
 800bc30:	4013      	ands	r3, r2
 800bc32:	b29b      	uxth	r3, r3
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	bf14      	ite	ne
 800bc38:	2301      	movne	r3, #1
 800bc3a:	2300      	moveq	r3, #0
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	e00b      	b.n	800bc58 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	699b      	ldr	r3, [r3, #24]
 800bc46:	43da      	mvns	r2, r3
 800bc48:	68bb      	ldr	r3, [r7, #8]
 800bc4a:	4013      	ands	r3, r2
 800bc4c:	b29b      	uxth	r3, r3
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	bf14      	ite	ne
 800bc52:	2301      	movne	r3, #1
 800bc54:	2300      	moveq	r3, #0
 800bc56:	b2db      	uxtb	r3, r3
 800bc58:	2b00      	cmp	r3, #0
 800bc5a:	f47f af6d 	bne.w	800bb38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800bc5e:	2300      	movs	r3, #0
}
 800bc60:	4618      	mov	r0, r3
 800bc62:	3710      	adds	r7, #16
 800bc64:	46bd      	mov	sp, r7
 800bc66:	bd80      	pop	{r7, pc}

0800bc68 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bc68:	b580      	push	{r7, lr}
 800bc6a:	b084      	sub	sp, #16
 800bc6c:	af00      	add	r7, sp, #0
 800bc6e:	60f8      	str	r0, [r7, #12]
 800bc70:	60b9      	str	r1, [r7, #8]
 800bc72:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bc74:	e034      	b.n	800bce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bc76:	68f8      	ldr	r0, [r7, #12]
 800bc78:	f000 f915 	bl	800bea6 <I2C_IsAcknowledgeFailed>
 800bc7c:	4603      	mov	r3, r0
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d001      	beq.n	800bc86 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bc82:	2301      	movs	r3, #1
 800bc84:	e034      	b.n	800bcf0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bc86:	68bb      	ldr	r3, [r7, #8]
 800bc88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bc8c:	d028      	beq.n	800bce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bc8e:	f7fb fb45 	bl	800731c <HAL_GetTick>
 800bc92:	4602      	mov	r2, r0
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	1ad3      	subs	r3, r2, r3
 800bc98:	68ba      	ldr	r2, [r7, #8]
 800bc9a:	429a      	cmp	r2, r3
 800bc9c:	d302      	bcc.n	800bca4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800bc9e:	68bb      	ldr	r3, [r7, #8]
 800bca0:	2b00      	cmp	r3, #0
 800bca2:	d11d      	bne.n	800bce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 800bca4:	68fb      	ldr	r3, [r7, #12]
 800bca6:	681b      	ldr	r3, [r3, #0]
 800bca8:	695b      	ldr	r3, [r3, #20]
 800bcaa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcae:	2b80      	cmp	r3, #128	; 0x80
 800bcb0:	d016      	beq.n	800bce0 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bcb2:	68fb      	ldr	r3, [r7, #12]
 800bcb4:	2200      	movs	r2, #0
 800bcb6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bcb8:	68fb      	ldr	r3, [r7, #12]
 800bcba:	2220      	movs	r2, #32
 800bcbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bcc0:	68fb      	ldr	r3, [r7, #12]
 800bcc2:	2200      	movs	r2, #0
 800bcc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bcc8:	68fb      	ldr	r3, [r7, #12]
 800bcca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bccc:	f043 0220 	orr.w	r2, r3, #32
 800bcd0:	68fb      	ldr	r3, [r7, #12]
 800bcd2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bcd4:	68fb      	ldr	r3, [r7, #12]
 800bcd6:	2200      	movs	r2, #0
 800bcd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bcdc:	2301      	movs	r3, #1
 800bcde:	e007      	b.n	800bcf0 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	695b      	ldr	r3, [r3, #20]
 800bce6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bcea:	2b80      	cmp	r3, #128	; 0x80
 800bcec:	d1c3      	bne.n	800bc76 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bcee:	2300      	movs	r3, #0
}
 800bcf0:	4618      	mov	r0, r3
 800bcf2:	3710      	adds	r7, #16
 800bcf4:	46bd      	mov	sp, r7
 800bcf6:	bd80      	pop	{r7, pc}

0800bcf8 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bcf8:	b580      	push	{r7, lr}
 800bcfa:	b084      	sub	sp, #16
 800bcfc:	af00      	add	r7, sp, #0
 800bcfe:	60f8      	str	r0, [r7, #12]
 800bd00:	60b9      	str	r1, [r7, #8]
 800bd02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bd04:	e034      	b.n	800bd70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800bd06:	68f8      	ldr	r0, [r7, #12]
 800bd08:	f000 f8cd 	bl	800bea6 <I2C_IsAcknowledgeFailed>
 800bd0c:	4603      	mov	r3, r0
 800bd0e:	2b00      	cmp	r3, #0
 800bd10:	d001      	beq.n	800bd16 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800bd12:	2301      	movs	r3, #1
 800bd14:	e034      	b.n	800bd80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800bd16:	68bb      	ldr	r3, [r7, #8]
 800bd18:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bd1c:	d028      	beq.n	800bd70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bd1e:	f7fb fafd 	bl	800731c <HAL_GetTick>
 800bd22:	4602      	mov	r2, r0
 800bd24:	687b      	ldr	r3, [r7, #4]
 800bd26:	1ad3      	subs	r3, r2, r3
 800bd28:	68ba      	ldr	r2, [r7, #8]
 800bd2a:	429a      	cmp	r2, r3
 800bd2c:	d302      	bcc.n	800bd34 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800bd2e:	68bb      	ldr	r3, [r7, #8]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d11d      	bne.n	800bd70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	f003 0304 	and.w	r3, r3, #4
 800bd3e:	2b04      	cmp	r3, #4
 800bd40:	d016      	beq.n	800bd70 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	2200      	movs	r2, #0
 800bd46:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800bd48:	68fb      	ldr	r3, [r7, #12]
 800bd4a:	2220      	movs	r2, #32
 800bd4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bd50:	68fb      	ldr	r3, [r7, #12]
 800bd52:	2200      	movs	r2, #0
 800bd54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bd58:	68fb      	ldr	r3, [r7, #12]
 800bd5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd5c:	f043 0220 	orr.w	r2, r3, #32
 800bd60:	68fb      	ldr	r3, [r7, #12]
 800bd62:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800bd64:	68fb      	ldr	r3, [r7, #12]
 800bd66:	2200      	movs	r2, #0
 800bd68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800bd6c:	2301      	movs	r3, #1
 800bd6e:	e007      	b.n	800bd80 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800bd70:	68fb      	ldr	r3, [r7, #12]
 800bd72:	681b      	ldr	r3, [r3, #0]
 800bd74:	695b      	ldr	r3, [r3, #20]
 800bd76:	f003 0304 	and.w	r3, r3, #4
 800bd7a:	2b04      	cmp	r3, #4
 800bd7c:	d1c3      	bne.n	800bd06 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800bd7e:	2300      	movs	r3, #0
}
 800bd80:	4618      	mov	r0, r3
 800bd82:	3710      	adds	r7, #16
 800bd84:	46bd      	mov	sp, r7
 800bd86:	bd80      	pop	{r7, pc}

0800bd88 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800bd88:	b480      	push	{r7}
 800bd8a:	b085      	sub	sp, #20
 800bd8c:	af00      	add	r7, sp, #0
 800bd8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800bd90:	2300      	movs	r3, #0
 800bd92:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800bd94:	4b13      	ldr	r3, [pc, #76]	; (800bde4 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	08db      	lsrs	r3, r3, #3
 800bd9a:	4a13      	ldr	r2, [pc, #76]	; (800bde8 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800bd9c:	fba2 2303 	umull	r2, r3, r2, r3
 800bda0:	0a1a      	lsrs	r2, r3, #8
 800bda2:	4613      	mov	r3, r2
 800bda4:	009b      	lsls	r3, r3, #2
 800bda6:	4413      	add	r3, r2
 800bda8:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800bdaa:	68fb      	ldr	r3, [r7, #12]
 800bdac:	3b01      	subs	r3, #1
 800bdae:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800bdb0:	68fb      	ldr	r3, [r7, #12]
 800bdb2:	2b00      	cmp	r3, #0
 800bdb4:	d107      	bne.n	800bdc6 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800bdb6:	687b      	ldr	r3, [r7, #4]
 800bdb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bdba:	f043 0220 	orr.w	r2, r3, #32
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800bdc2:	2301      	movs	r3, #1
 800bdc4:	e008      	b.n	800bdd8 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	681b      	ldr	r3, [r3, #0]
 800bdcc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800bdd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bdd4:	d0e9      	beq.n	800bdaa <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800bdd6:	2300      	movs	r3, #0
}
 800bdd8:	4618      	mov	r0, r3
 800bdda:	3714      	adds	r7, #20
 800bddc:	46bd      	mov	sp, r7
 800bdde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bde2:	4770      	bx	lr
 800bde4:	200001a0 	.word	0x200001a0
 800bde8:	14f8b589 	.word	0x14f8b589

0800bdec <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800bdec:	b580      	push	{r7, lr}
 800bdee:	b084      	sub	sp, #16
 800bdf0:	af00      	add	r7, sp, #0
 800bdf2:	60f8      	str	r0, [r7, #12]
 800bdf4:	60b9      	str	r1, [r7, #8]
 800bdf6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800bdf8:	e049      	b.n	800be8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800bdfa:	68fb      	ldr	r3, [r7, #12]
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	695b      	ldr	r3, [r3, #20]
 800be00:	f003 0310 	and.w	r3, r3, #16
 800be04:	2b10      	cmp	r3, #16
 800be06:	d119      	bne.n	800be3c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	681b      	ldr	r3, [r3, #0]
 800be0c:	f06f 0210 	mvn.w	r2, #16
 800be10:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800be12:	68fb      	ldr	r3, [r7, #12]
 800be14:	2200      	movs	r2, #0
 800be16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800be18:	68fb      	ldr	r3, [r7, #12]
 800be1a:	2220      	movs	r2, #32
 800be1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be20:	68fb      	ldr	r3, [r7, #12]
 800be22:	2200      	movs	r2, #0
 800be24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800be28:	68fb      	ldr	r3, [r7, #12]
 800be2a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800be30:	68fb      	ldr	r3, [r7, #12]
 800be32:	2200      	movs	r2, #0
 800be34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800be38:	2301      	movs	r3, #1
 800be3a:	e030      	b.n	800be9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800be3c:	f7fb fa6e 	bl	800731c <HAL_GetTick>
 800be40:	4602      	mov	r2, r0
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	1ad3      	subs	r3, r2, r3
 800be46:	68ba      	ldr	r2, [r7, #8]
 800be48:	429a      	cmp	r2, r3
 800be4a:	d302      	bcc.n	800be52 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800be4c:	68bb      	ldr	r3, [r7, #8]
 800be4e:	2b00      	cmp	r3, #0
 800be50:	d11d      	bne.n	800be8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	681b      	ldr	r3, [r3, #0]
 800be56:	695b      	ldr	r3, [r3, #20]
 800be58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be5c:	2b40      	cmp	r3, #64	; 0x40
 800be5e:	d016      	beq.n	800be8e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800be60:	68fb      	ldr	r3, [r7, #12]
 800be62:	2200      	movs	r2, #0
 800be64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800be66:	68fb      	ldr	r3, [r7, #12]
 800be68:	2220      	movs	r2, #32
 800be6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	2200      	movs	r2, #0
 800be72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800be76:	68fb      	ldr	r3, [r7, #12]
 800be78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800be7a:	f043 0220 	orr.w	r2, r3, #32
 800be7e:	68fb      	ldr	r3, [r7, #12]
 800be80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800be82:	68fb      	ldr	r3, [r7, #12]
 800be84:	2200      	movs	r2, #0
 800be86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800be8a:	2301      	movs	r3, #1
 800be8c:	e007      	b.n	800be9e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800be8e:	68fb      	ldr	r3, [r7, #12]
 800be90:	681b      	ldr	r3, [r3, #0]
 800be92:	695b      	ldr	r3, [r3, #20]
 800be94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be98:	2b40      	cmp	r3, #64	; 0x40
 800be9a:	d1ae      	bne.n	800bdfa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800be9c:	2300      	movs	r3, #0
}
 800be9e:	4618      	mov	r0, r3
 800bea0:	3710      	adds	r7, #16
 800bea2:	46bd      	mov	sp, r7
 800bea4:	bd80      	pop	{r7, pc}

0800bea6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800bea6:	b480      	push	{r7}
 800bea8:	b083      	sub	sp, #12
 800beaa:	af00      	add	r7, sp, #0
 800beac:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800beae:	687b      	ldr	r3, [r7, #4]
 800beb0:	681b      	ldr	r3, [r3, #0]
 800beb2:	695b      	ldr	r3, [r3, #20]
 800beb4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800beb8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800bebc:	d11b      	bne.n	800bef6 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800bebe:	687b      	ldr	r3, [r7, #4]
 800bec0:	681b      	ldr	r3, [r3, #0]
 800bec2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800bec6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800bec8:	687b      	ldr	r3, [r7, #4]
 800beca:	2200      	movs	r2, #0
 800becc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	2220      	movs	r2, #32
 800bed2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	2200      	movs	r2, #0
 800beda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bee2:	f043 0204 	orr.w	r2, r3, #4
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	2200      	movs	r2, #0
 800beee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800bef2:	2301      	movs	r3, #1
 800bef4:	e000      	b.n	800bef8 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800bef6:	2300      	movs	r3, #0
}
 800bef8:	4618      	mov	r0, r3
 800befa:	370c      	adds	r7, #12
 800befc:	46bd      	mov	sp, r7
 800befe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf02:	4770      	bx	lr

0800bf04 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 800bf04:	b480      	push	{r7}
 800bf06:	b083      	sub	sp, #12
 800bf08:	af00      	add	r7, sp, #0
 800bf0a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf10:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800bf14:	d103      	bne.n	800bf1e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2201      	movs	r2, #1
 800bf1a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800bf1c:	e007      	b.n	800bf2e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800bf1e:	687b      	ldr	r3, [r7, #4]
 800bf20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bf22:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800bf26:	d102      	bne.n	800bf2e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2208      	movs	r2, #8
 800bf2c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800bf2e:	bf00      	nop
 800bf30:	370c      	adds	r7, #12
 800bf32:	46bd      	mov	sp, r7
 800bf34:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf38:	4770      	bx	lr
	...

0800bf3c <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 800bf3c:	b580      	push	{r7, lr}
 800bf3e:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 800bf40:	4b06      	ldr	r3, [pc, #24]	; (800bf5c <HAL_PWR_PVD_IRQHandler+0x20>)
 800bf42:	695b      	ldr	r3, [r3, #20]
 800bf44:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d005      	beq.n	800bf58 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 800bf4c:	f000 f808 	bl	800bf60 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 800bf50:	4b02      	ldr	r3, [pc, #8]	; (800bf5c <HAL_PWR_PVD_IRQHandler+0x20>)
 800bf52:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800bf56:	615a      	str	r2, [r3, #20]
  }
}
 800bf58:	bf00      	nop
 800bf5a:	bd80      	pop	{r7, pc}
 800bf5c:	40013c00 	.word	0x40013c00

0800bf60 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 800bf60:	b480      	push	{r7}
 800bf62:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 800bf64:	bf00      	nop
 800bf66:	46bd      	mov	sp, r7
 800bf68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf6c:	4770      	bx	lr
	...

0800bf70 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800bf70:	b580      	push	{r7, lr}
 800bf72:	b082      	sub	sp, #8
 800bf74:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800bf76:	2300      	movs	r3, #0
 800bf78:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800bf7a:	2300      	movs	r3, #0
 800bf7c:	603b      	str	r3, [r7, #0]
 800bf7e:	4b20      	ldr	r3, [pc, #128]	; (800c000 <HAL_PWREx_EnableOverDrive+0x90>)
 800bf80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf82:	4a1f      	ldr	r2, [pc, #124]	; (800c000 <HAL_PWREx_EnableOverDrive+0x90>)
 800bf84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bf88:	6413      	str	r3, [r2, #64]	; 0x40
 800bf8a:	4b1d      	ldr	r3, [pc, #116]	; (800c000 <HAL_PWREx_EnableOverDrive+0x90>)
 800bf8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bf92:	603b      	str	r3, [r7, #0]
 800bf94:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800bf96:	4b1b      	ldr	r3, [pc, #108]	; (800c004 <HAL_PWREx_EnableOverDrive+0x94>)
 800bf98:	2201      	movs	r2, #1
 800bf9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bf9c:	f7fb f9be 	bl	800731c <HAL_GetTick>
 800bfa0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bfa2:	e009      	b.n	800bfb8 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bfa4:	f7fb f9ba 	bl	800731c <HAL_GetTick>
 800bfa8:	4602      	mov	r2, r0
 800bfaa:	687b      	ldr	r3, [r7, #4]
 800bfac:	1ad3      	subs	r3, r2, r3
 800bfae:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfb2:	d901      	bls.n	800bfb8 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800bfb4:	2303      	movs	r3, #3
 800bfb6:	e01f      	b.n	800bff8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800bfb8:	4b13      	ldr	r3, [pc, #76]	; (800c008 <HAL_PWREx_EnableOverDrive+0x98>)
 800bfba:	685b      	ldr	r3, [r3, #4]
 800bfbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800bfc0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfc4:	d1ee      	bne.n	800bfa4 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800bfc6:	4b11      	ldr	r3, [pc, #68]	; (800c00c <HAL_PWREx_EnableOverDrive+0x9c>)
 800bfc8:	2201      	movs	r2, #1
 800bfca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800bfcc:	f7fb f9a6 	bl	800731c <HAL_GetTick>
 800bfd0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bfd2:	e009      	b.n	800bfe8 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800bfd4:	f7fb f9a2 	bl	800731c <HAL_GetTick>
 800bfd8:	4602      	mov	r2, r0
 800bfda:	687b      	ldr	r3, [r7, #4]
 800bfdc:	1ad3      	subs	r3, r2, r3
 800bfde:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800bfe2:	d901      	bls.n	800bfe8 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 800bfe4:	2303      	movs	r3, #3
 800bfe6:	e007      	b.n	800bff8 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800bfe8:	4b07      	ldr	r3, [pc, #28]	; (800c008 <HAL_PWREx_EnableOverDrive+0x98>)
 800bfea:	685b      	ldr	r3, [r3, #4]
 800bfec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800bff0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800bff4:	d1ee      	bne.n	800bfd4 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800bff6:	2300      	movs	r3, #0
}
 800bff8:	4618      	mov	r0, r3
 800bffa:	3708      	adds	r7, #8
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	40023800 	.word	0x40023800
 800c004:	420e0040 	.word	0x420e0040
 800c008:	40007000 	.word	0x40007000
 800c00c:	420e0044 	.word	0x420e0044

0800c010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c010:	b580      	push	{r7, lr}
 800c012:	b084      	sub	sp, #16
 800c014:	af00      	add	r7, sp, #0
 800c016:	6078      	str	r0, [r7, #4]
 800c018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2b00      	cmp	r3, #0
 800c01e:	d101      	bne.n	800c024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c020:	2301      	movs	r3, #1
 800c022:	e0cc      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800c024:	4b68      	ldr	r3, [pc, #416]	; (800c1c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	f003 030f 	and.w	r3, r3, #15
 800c02c:	683a      	ldr	r2, [r7, #0]
 800c02e:	429a      	cmp	r2, r3
 800c030:	d90c      	bls.n	800c04c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c032:	4b65      	ldr	r3, [pc, #404]	; (800c1c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c034:	683a      	ldr	r2, [r7, #0]
 800c036:	b2d2      	uxtb	r2, r2
 800c038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c03a:	4b63      	ldr	r3, [pc, #396]	; (800c1c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	f003 030f 	and.w	r3, r3, #15
 800c042:	683a      	ldr	r2, [r7, #0]
 800c044:	429a      	cmp	r2, r3
 800c046:	d001      	beq.n	800c04c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800c048:	2301      	movs	r3, #1
 800c04a:	e0b8      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	f003 0302 	and.w	r3, r3, #2
 800c054:	2b00      	cmp	r3, #0
 800c056:	d020      	beq.n	800c09a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	f003 0304 	and.w	r3, r3, #4
 800c060:	2b00      	cmp	r3, #0
 800c062:	d005      	beq.n	800c070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800c064:	4b59      	ldr	r3, [pc, #356]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c066:	689b      	ldr	r3, [r3, #8]
 800c068:	4a58      	ldr	r2, [pc, #352]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c06a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800c06e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c070:	687b      	ldr	r3, [r7, #4]
 800c072:	681b      	ldr	r3, [r3, #0]
 800c074:	f003 0308 	and.w	r3, r3, #8
 800c078:	2b00      	cmp	r3, #0
 800c07a:	d005      	beq.n	800c088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800c07c:	4b53      	ldr	r3, [pc, #332]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	4a52      	ldr	r2, [pc, #328]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800c086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c088:	4b50      	ldr	r3, [pc, #320]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c08a:	689b      	ldr	r3, [r3, #8]
 800c08c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	494d      	ldr	r1, [pc, #308]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c096:	4313      	orrs	r3, r2
 800c098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c09a:	687b      	ldr	r3, [r7, #4]
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	f003 0301 	and.w	r3, r3, #1
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d044      	beq.n	800c130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	685b      	ldr	r3, [r3, #4]
 800c0aa:	2b01      	cmp	r3, #1
 800c0ac:	d107      	bne.n	800c0be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c0ae:	4b47      	ldr	r3, [pc, #284]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c0b0:	681b      	ldr	r3, [r3, #0]
 800c0b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c0b6:	2b00      	cmp	r3, #0
 800c0b8:	d119      	bne.n	800c0ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c0ba:	2301      	movs	r3, #1
 800c0bc:	e07f      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c0be:	687b      	ldr	r3, [r7, #4]
 800c0c0:	685b      	ldr	r3, [r3, #4]
 800c0c2:	2b02      	cmp	r3, #2
 800c0c4:	d003      	beq.n	800c0ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800c0c6:	687b      	ldr	r3, [r7, #4]
 800c0c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800c0ca:	2b03      	cmp	r3, #3
 800c0cc:	d107      	bne.n	800c0de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800c0ce:	4b3f      	ldr	r3, [pc, #252]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c0d0:	681b      	ldr	r3, [r3, #0]
 800c0d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c0d6:	2b00      	cmp	r3, #0
 800c0d8:	d109      	bne.n	800c0ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c0da:	2301      	movs	r3, #1
 800c0dc:	e06f      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c0de:	4b3b      	ldr	r3, [pc, #236]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c0e0:	681b      	ldr	r3, [r3, #0]
 800c0e2:	f003 0302 	and.w	r3, r3, #2
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d101      	bne.n	800c0ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800c0ea:	2301      	movs	r3, #1
 800c0ec:	e067      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800c0ee:	4b37      	ldr	r3, [pc, #220]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	f023 0203 	bic.w	r2, r3, #3
 800c0f6:	687b      	ldr	r3, [r7, #4]
 800c0f8:	685b      	ldr	r3, [r3, #4]
 800c0fa:	4934      	ldr	r1, [pc, #208]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c0fc:	4313      	orrs	r3, r2
 800c0fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800c100:	f7fb f90c 	bl	800731c <HAL_GetTick>
 800c104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c106:	e00a      	b.n	800c11e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c108:	f7fb f908 	bl	800731c <HAL_GetTick>
 800c10c:	4602      	mov	r2, r0
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	1ad3      	subs	r3, r2, r3
 800c112:	f241 3288 	movw	r2, #5000	; 0x1388
 800c116:	4293      	cmp	r3, r2
 800c118:	d901      	bls.n	800c11e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800c11a:	2303      	movs	r3, #3
 800c11c:	e04f      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c11e:	4b2b      	ldr	r3, [pc, #172]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c120:	689b      	ldr	r3, [r3, #8]
 800c122:	f003 020c 	and.w	r2, r3, #12
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	685b      	ldr	r3, [r3, #4]
 800c12a:	009b      	lsls	r3, r3, #2
 800c12c:	429a      	cmp	r2, r3
 800c12e:	d1eb      	bne.n	800c108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800c130:	4b25      	ldr	r3, [pc, #148]	; (800c1c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c132:	681b      	ldr	r3, [r3, #0]
 800c134:	f003 030f 	and.w	r3, r3, #15
 800c138:	683a      	ldr	r2, [r7, #0]
 800c13a:	429a      	cmp	r2, r3
 800c13c:	d20c      	bcs.n	800c158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c13e:	4b22      	ldr	r3, [pc, #136]	; (800c1c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c140:	683a      	ldr	r2, [r7, #0]
 800c142:	b2d2      	uxtb	r2, r2
 800c144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800c146:	4b20      	ldr	r3, [pc, #128]	; (800c1c8 <HAL_RCC_ClockConfig+0x1b8>)
 800c148:	681b      	ldr	r3, [r3, #0]
 800c14a:	f003 030f 	and.w	r3, r3, #15
 800c14e:	683a      	ldr	r2, [r7, #0]
 800c150:	429a      	cmp	r2, r3
 800c152:	d001      	beq.n	800c158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800c154:	2301      	movs	r3, #1
 800c156:	e032      	b.n	800c1be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	681b      	ldr	r3, [r3, #0]
 800c15c:	f003 0304 	and.w	r3, r3, #4
 800c160:	2b00      	cmp	r3, #0
 800c162:	d008      	beq.n	800c176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800c164:	4b19      	ldr	r3, [pc, #100]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c166:	689b      	ldr	r3, [r3, #8]
 800c168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	68db      	ldr	r3, [r3, #12]
 800c170:	4916      	ldr	r1, [pc, #88]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c172:	4313      	orrs	r3, r2
 800c174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c176:	687b      	ldr	r3, [r7, #4]
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f003 0308 	and.w	r3, r3, #8
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d009      	beq.n	800c196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800c182:	4b12      	ldr	r3, [pc, #72]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c184:	689b      	ldr	r3, [r3, #8]
 800c186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800c18a:	687b      	ldr	r3, [r7, #4]
 800c18c:	691b      	ldr	r3, [r3, #16]
 800c18e:	00db      	lsls	r3, r3, #3
 800c190:	490e      	ldr	r1, [pc, #56]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c192:	4313      	orrs	r3, r2
 800c194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800c196:	f000 f887 	bl	800c2a8 <HAL_RCC_GetSysClockFreq>
 800c19a:	4602      	mov	r2, r0
 800c19c:	4b0b      	ldr	r3, [pc, #44]	; (800c1cc <HAL_RCC_ClockConfig+0x1bc>)
 800c19e:	689b      	ldr	r3, [r3, #8]
 800c1a0:	091b      	lsrs	r3, r3, #4
 800c1a2:	f003 030f 	and.w	r3, r3, #15
 800c1a6:	490a      	ldr	r1, [pc, #40]	; (800c1d0 <HAL_RCC_ClockConfig+0x1c0>)
 800c1a8:	5ccb      	ldrb	r3, [r1, r3]
 800c1aa:	fa22 f303 	lsr.w	r3, r2, r3
 800c1ae:	4a09      	ldr	r2, [pc, #36]	; (800c1d4 <HAL_RCC_ClockConfig+0x1c4>)
 800c1b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800c1b2:	4b09      	ldr	r3, [pc, #36]	; (800c1d8 <HAL_RCC_ClockConfig+0x1c8>)
 800c1b4:	681b      	ldr	r3, [r3, #0]
 800c1b6:	4618      	mov	r0, r3
 800c1b8:	f7fa fe9e 	bl	8006ef8 <HAL_InitTick>

  return HAL_OK;
 800c1bc:	2300      	movs	r3, #0
}
 800c1be:	4618      	mov	r0, r3
 800c1c0:	3710      	adds	r7, #16
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	bd80      	pop	{r7, pc}
 800c1c6:	bf00      	nop
 800c1c8:	40023c00 	.word	0x40023c00
 800c1cc:	40023800 	.word	0x40023800
 800c1d0:	08016c0c 	.word	0x08016c0c
 800c1d4:	200001a0 	.word	0x200001a0
 800c1d8:	200001a4 	.word	0x200001a4

0800c1dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800c1dc:	b480      	push	{r7}
 800c1de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800c1e0:	4b03      	ldr	r3, [pc, #12]	; (800c1f0 <HAL_RCC_GetHCLKFreq+0x14>)
 800c1e2:	681b      	ldr	r3, [r3, #0]
}
 800c1e4:	4618      	mov	r0, r3
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1ec:	4770      	bx	lr
 800c1ee:	bf00      	nop
 800c1f0:	200001a0 	.word	0x200001a0

0800c1f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800c1f4:	b580      	push	{r7, lr}
 800c1f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800c1f8:	f7ff fff0 	bl	800c1dc <HAL_RCC_GetHCLKFreq>
 800c1fc:	4602      	mov	r2, r0
 800c1fe:	4b05      	ldr	r3, [pc, #20]	; (800c214 <HAL_RCC_GetPCLK1Freq+0x20>)
 800c200:	689b      	ldr	r3, [r3, #8]
 800c202:	0a9b      	lsrs	r3, r3, #10
 800c204:	f003 0307 	and.w	r3, r3, #7
 800c208:	4903      	ldr	r1, [pc, #12]	; (800c218 <HAL_RCC_GetPCLK1Freq+0x24>)
 800c20a:	5ccb      	ldrb	r3, [r1, r3]
 800c20c:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c210:	4618      	mov	r0, r3
 800c212:	bd80      	pop	{r7, pc}
 800c214:	40023800 	.word	0x40023800
 800c218:	08016c1c 	.word	0x08016c1c

0800c21c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800c21c:	b580      	push	{r7, lr}
 800c21e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800c220:	f7ff ffdc 	bl	800c1dc <HAL_RCC_GetHCLKFreq>
 800c224:	4602      	mov	r2, r0
 800c226:	4b05      	ldr	r3, [pc, #20]	; (800c23c <HAL_RCC_GetPCLK2Freq+0x20>)
 800c228:	689b      	ldr	r3, [r3, #8]
 800c22a:	0b5b      	lsrs	r3, r3, #13
 800c22c:	f003 0307 	and.w	r3, r3, #7
 800c230:	4903      	ldr	r1, [pc, #12]	; (800c240 <HAL_RCC_GetPCLK2Freq+0x24>)
 800c232:	5ccb      	ldrb	r3, [r1, r3]
 800c234:	fa22 f303 	lsr.w	r3, r2, r3
}
 800c238:	4618      	mov	r0, r3
 800c23a:	bd80      	pop	{r7, pc}
 800c23c:	40023800 	.word	0x40023800
 800c240:	08016c1c 	.word	0x08016c1c

0800c244 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800c244:	b480      	push	{r7}
 800c246:	b083      	sub	sp, #12
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
 800c24c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800c24e:	687b      	ldr	r3, [r7, #4]
 800c250:	220f      	movs	r2, #15
 800c252:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800c254:	4b12      	ldr	r3, [pc, #72]	; (800c2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800c256:	689b      	ldr	r3, [r3, #8]
 800c258:	f003 0203 	and.w	r2, r3, #3
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800c260:	4b0f      	ldr	r3, [pc, #60]	; (800c2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800c262:	689b      	ldr	r3, [r3, #8]
 800c264:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800c26c:	4b0c      	ldr	r3, [pc, #48]	; (800c2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800c26e:	689b      	ldr	r3, [r3, #8]
 800c270:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800c278:	4b09      	ldr	r3, [pc, #36]	; (800c2a0 <HAL_RCC_GetClockConfig+0x5c>)
 800c27a:	689b      	ldr	r3, [r3, #8]
 800c27c:	08db      	lsrs	r3, r3, #3
 800c27e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800c286:	4b07      	ldr	r3, [pc, #28]	; (800c2a4 <HAL_RCC_GetClockConfig+0x60>)
 800c288:	681b      	ldr	r3, [r3, #0]
 800c28a:	f003 020f 	and.w	r2, r3, #15
 800c28e:	683b      	ldr	r3, [r7, #0]
 800c290:	601a      	str	r2, [r3, #0]
}
 800c292:	bf00      	nop
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
 800c29e:	bf00      	nop
 800c2a0:	40023800 	.word	0x40023800
 800c2a4:	40023c00 	.word	0x40023c00

0800c2a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c2a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800c2ac:	b0ae      	sub	sp, #184	; 0xb8
 800c2ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 800c2b6:	2300      	movs	r3, #0
 800c2b8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 800c2bc:	2300      	movs	r3, #0
 800c2be:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 800c2c8:	2300      	movs	r3, #0
 800c2ca:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c2ce:	4bcb      	ldr	r3, [pc, #812]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x354>)
 800c2d0:	689b      	ldr	r3, [r3, #8]
 800c2d2:	f003 030c 	and.w	r3, r3, #12
 800c2d6:	2b0c      	cmp	r3, #12
 800c2d8:	f200 8206 	bhi.w	800c6e8 <HAL_RCC_GetSysClockFreq+0x440>
 800c2dc:	a201      	add	r2, pc, #4	; (adr r2, 800c2e4 <HAL_RCC_GetSysClockFreq+0x3c>)
 800c2de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c2e2:	bf00      	nop
 800c2e4:	0800c319 	.word	0x0800c319
 800c2e8:	0800c6e9 	.word	0x0800c6e9
 800c2ec:	0800c6e9 	.word	0x0800c6e9
 800c2f0:	0800c6e9 	.word	0x0800c6e9
 800c2f4:	0800c321 	.word	0x0800c321
 800c2f8:	0800c6e9 	.word	0x0800c6e9
 800c2fc:	0800c6e9 	.word	0x0800c6e9
 800c300:	0800c6e9 	.word	0x0800c6e9
 800c304:	0800c329 	.word	0x0800c329
 800c308:	0800c6e9 	.word	0x0800c6e9
 800c30c:	0800c6e9 	.word	0x0800c6e9
 800c310:	0800c6e9 	.word	0x0800c6e9
 800c314:	0800c519 	.word	0x0800c519
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800c318:	4bb9      	ldr	r3, [pc, #740]	; (800c600 <HAL_RCC_GetSysClockFreq+0x358>)
 800c31a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 800c31e:	e1e7      	b.n	800c6f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800c320:	4bb8      	ldr	r3, [pc, #736]	; (800c604 <HAL_RCC_GetSysClockFreq+0x35c>)
 800c322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c326:	e1e3      	b.n	800c6f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c328:	4bb4      	ldr	r3, [pc, #720]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x354>)
 800c32a:	685b      	ldr	r3, [r3, #4]
 800c32c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c330:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c334:	4bb1      	ldr	r3, [pc, #708]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x354>)
 800c336:	685b      	ldr	r3, [r3, #4]
 800c338:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	d071      	beq.n	800c424 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c340:	4bae      	ldr	r3, [pc, #696]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x354>)
 800c342:	685b      	ldr	r3, [r3, #4]
 800c344:	099b      	lsrs	r3, r3, #6
 800c346:	2200      	movs	r2, #0
 800c348:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800c34c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800c350:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c354:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c358:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800c35c:	2300      	movs	r3, #0
 800c35e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c362:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800c366:	4622      	mov	r2, r4
 800c368:	462b      	mov	r3, r5
 800c36a:	f04f 0000 	mov.w	r0, #0
 800c36e:	f04f 0100 	mov.w	r1, #0
 800c372:	0159      	lsls	r1, r3, #5
 800c374:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c378:	0150      	lsls	r0, r2, #5
 800c37a:	4602      	mov	r2, r0
 800c37c:	460b      	mov	r3, r1
 800c37e:	4621      	mov	r1, r4
 800c380:	1a51      	subs	r1, r2, r1
 800c382:	6439      	str	r1, [r7, #64]	; 0x40
 800c384:	4629      	mov	r1, r5
 800c386:	eb63 0301 	sbc.w	r3, r3, r1
 800c38a:	647b      	str	r3, [r7, #68]	; 0x44
 800c38c:	f04f 0200 	mov.w	r2, #0
 800c390:	f04f 0300 	mov.w	r3, #0
 800c394:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800c398:	4649      	mov	r1, r9
 800c39a:	018b      	lsls	r3, r1, #6
 800c39c:	4641      	mov	r1, r8
 800c39e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c3a2:	4641      	mov	r1, r8
 800c3a4:	018a      	lsls	r2, r1, #6
 800c3a6:	4641      	mov	r1, r8
 800c3a8:	1a51      	subs	r1, r2, r1
 800c3aa:	63b9      	str	r1, [r7, #56]	; 0x38
 800c3ac:	4649      	mov	r1, r9
 800c3ae:	eb63 0301 	sbc.w	r3, r3, r1
 800c3b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c3b4:	f04f 0200 	mov.w	r2, #0
 800c3b8:	f04f 0300 	mov.w	r3, #0
 800c3bc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 800c3c0:	4649      	mov	r1, r9
 800c3c2:	00cb      	lsls	r3, r1, #3
 800c3c4:	4641      	mov	r1, r8
 800c3c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800c3ca:	4641      	mov	r1, r8
 800c3cc:	00ca      	lsls	r2, r1, #3
 800c3ce:	4610      	mov	r0, r2
 800c3d0:	4619      	mov	r1, r3
 800c3d2:	4603      	mov	r3, r0
 800c3d4:	4622      	mov	r2, r4
 800c3d6:	189b      	adds	r3, r3, r2
 800c3d8:	633b      	str	r3, [r7, #48]	; 0x30
 800c3da:	462b      	mov	r3, r5
 800c3dc:	460a      	mov	r2, r1
 800c3de:	eb42 0303 	adc.w	r3, r2, r3
 800c3e2:	637b      	str	r3, [r7, #52]	; 0x34
 800c3e4:	f04f 0200 	mov.w	r2, #0
 800c3e8:	f04f 0300 	mov.w	r3, #0
 800c3ec:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800c3f0:	4629      	mov	r1, r5
 800c3f2:	024b      	lsls	r3, r1, #9
 800c3f4:	4621      	mov	r1, r4
 800c3f6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c3fa:	4621      	mov	r1, r4
 800c3fc:	024a      	lsls	r2, r1, #9
 800c3fe:	4610      	mov	r0, r2
 800c400:	4619      	mov	r1, r3
 800c402:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c406:	2200      	movs	r2, #0
 800c408:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800c40c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800c410:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800c414:	f7f4 fc58 	bl	8000cc8 <__aeabi_uldivmod>
 800c418:	4602      	mov	r2, r0
 800c41a:	460b      	mov	r3, r1
 800c41c:	4613      	mov	r3, r2
 800c41e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c422:	e067      	b.n	800c4f4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c424:	4b75      	ldr	r3, [pc, #468]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x354>)
 800c426:	685b      	ldr	r3, [r3, #4]
 800c428:	099b      	lsrs	r3, r3, #6
 800c42a:	2200      	movs	r2, #0
 800c42c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c430:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800c434:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c438:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c43c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c43e:	2300      	movs	r3, #0
 800c440:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c442:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800c446:	4622      	mov	r2, r4
 800c448:	462b      	mov	r3, r5
 800c44a:	f04f 0000 	mov.w	r0, #0
 800c44e:	f04f 0100 	mov.w	r1, #0
 800c452:	0159      	lsls	r1, r3, #5
 800c454:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c458:	0150      	lsls	r0, r2, #5
 800c45a:	4602      	mov	r2, r0
 800c45c:	460b      	mov	r3, r1
 800c45e:	4621      	mov	r1, r4
 800c460:	1a51      	subs	r1, r2, r1
 800c462:	62b9      	str	r1, [r7, #40]	; 0x28
 800c464:	4629      	mov	r1, r5
 800c466:	eb63 0301 	sbc.w	r3, r3, r1
 800c46a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800c46c:	f04f 0200 	mov.w	r2, #0
 800c470:	f04f 0300 	mov.w	r3, #0
 800c474:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800c478:	4649      	mov	r1, r9
 800c47a:	018b      	lsls	r3, r1, #6
 800c47c:	4641      	mov	r1, r8
 800c47e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c482:	4641      	mov	r1, r8
 800c484:	018a      	lsls	r2, r1, #6
 800c486:	4641      	mov	r1, r8
 800c488:	ebb2 0a01 	subs.w	sl, r2, r1
 800c48c:	4649      	mov	r1, r9
 800c48e:	eb63 0b01 	sbc.w	fp, r3, r1
 800c492:	f04f 0200 	mov.w	r2, #0
 800c496:	f04f 0300 	mov.w	r3, #0
 800c49a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800c49e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800c4a2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c4a6:	4692      	mov	sl, r2
 800c4a8:	469b      	mov	fp, r3
 800c4aa:	4623      	mov	r3, r4
 800c4ac:	eb1a 0303 	adds.w	r3, sl, r3
 800c4b0:	623b      	str	r3, [r7, #32]
 800c4b2:	462b      	mov	r3, r5
 800c4b4:	eb4b 0303 	adc.w	r3, fp, r3
 800c4b8:	627b      	str	r3, [r7, #36]	; 0x24
 800c4ba:	f04f 0200 	mov.w	r2, #0
 800c4be:	f04f 0300 	mov.w	r3, #0
 800c4c2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800c4c6:	4629      	mov	r1, r5
 800c4c8:	028b      	lsls	r3, r1, #10
 800c4ca:	4621      	mov	r1, r4
 800c4cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c4d0:	4621      	mov	r1, r4
 800c4d2:	028a      	lsls	r2, r1, #10
 800c4d4:	4610      	mov	r0, r2
 800c4d6:	4619      	mov	r1, r3
 800c4d8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c4dc:	2200      	movs	r2, #0
 800c4de:	673b      	str	r3, [r7, #112]	; 0x70
 800c4e0:	677a      	str	r2, [r7, #116]	; 0x74
 800c4e2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800c4e6:	f7f4 fbef 	bl	8000cc8 <__aeabi_uldivmod>
 800c4ea:	4602      	mov	r2, r0
 800c4ec:	460b      	mov	r3, r1
 800c4ee:	4613      	mov	r3, r2
 800c4f0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800c4f4:	4b41      	ldr	r3, [pc, #260]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x354>)
 800c4f6:	685b      	ldr	r3, [r3, #4]
 800c4f8:	0c1b      	lsrs	r3, r3, #16
 800c4fa:	f003 0303 	and.w	r3, r3, #3
 800c4fe:	3301      	adds	r3, #1
 800c500:	005b      	lsls	r3, r3, #1
 800c502:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800c506:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c50a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800c50e:	fbb2 f3f3 	udiv	r3, r2, r3
 800c512:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c516:	e0eb      	b.n	800c6f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800c518:	4b38      	ldr	r3, [pc, #224]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x354>)
 800c51a:	685b      	ldr	r3, [r3, #4]
 800c51c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800c520:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800c524:	4b35      	ldr	r3, [pc, #212]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x354>)
 800c526:	685b      	ldr	r3, [r3, #4]
 800c528:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c52c:	2b00      	cmp	r3, #0
 800c52e:	d06b      	beq.n	800c608 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c530:	4b32      	ldr	r3, [pc, #200]	; (800c5fc <HAL_RCC_GetSysClockFreq+0x354>)
 800c532:	685b      	ldr	r3, [r3, #4]
 800c534:	099b      	lsrs	r3, r3, #6
 800c536:	2200      	movs	r2, #0
 800c538:	66bb      	str	r3, [r7, #104]	; 0x68
 800c53a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c53c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800c53e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c542:	663b      	str	r3, [r7, #96]	; 0x60
 800c544:	2300      	movs	r3, #0
 800c546:	667b      	str	r3, [r7, #100]	; 0x64
 800c548:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 800c54c:	4622      	mov	r2, r4
 800c54e:	462b      	mov	r3, r5
 800c550:	f04f 0000 	mov.w	r0, #0
 800c554:	f04f 0100 	mov.w	r1, #0
 800c558:	0159      	lsls	r1, r3, #5
 800c55a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c55e:	0150      	lsls	r0, r2, #5
 800c560:	4602      	mov	r2, r0
 800c562:	460b      	mov	r3, r1
 800c564:	4621      	mov	r1, r4
 800c566:	1a51      	subs	r1, r2, r1
 800c568:	61b9      	str	r1, [r7, #24]
 800c56a:	4629      	mov	r1, r5
 800c56c:	eb63 0301 	sbc.w	r3, r3, r1
 800c570:	61fb      	str	r3, [r7, #28]
 800c572:	f04f 0200 	mov.w	r2, #0
 800c576:	f04f 0300 	mov.w	r3, #0
 800c57a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800c57e:	4659      	mov	r1, fp
 800c580:	018b      	lsls	r3, r1, #6
 800c582:	4651      	mov	r1, sl
 800c584:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c588:	4651      	mov	r1, sl
 800c58a:	018a      	lsls	r2, r1, #6
 800c58c:	4651      	mov	r1, sl
 800c58e:	ebb2 0801 	subs.w	r8, r2, r1
 800c592:	4659      	mov	r1, fp
 800c594:	eb63 0901 	sbc.w	r9, r3, r1
 800c598:	f04f 0200 	mov.w	r2, #0
 800c59c:	f04f 0300 	mov.w	r3, #0
 800c5a0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800c5a4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800c5a8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800c5ac:	4690      	mov	r8, r2
 800c5ae:	4699      	mov	r9, r3
 800c5b0:	4623      	mov	r3, r4
 800c5b2:	eb18 0303 	adds.w	r3, r8, r3
 800c5b6:	613b      	str	r3, [r7, #16]
 800c5b8:	462b      	mov	r3, r5
 800c5ba:	eb49 0303 	adc.w	r3, r9, r3
 800c5be:	617b      	str	r3, [r7, #20]
 800c5c0:	f04f 0200 	mov.w	r2, #0
 800c5c4:	f04f 0300 	mov.w	r3, #0
 800c5c8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 800c5cc:	4629      	mov	r1, r5
 800c5ce:	024b      	lsls	r3, r1, #9
 800c5d0:	4621      	mov	r1, r4
 800c5d2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800c5d6:	4621      	mov	r1, r4
 800c5d8:	024a      	lsls	r2, r1, #9
 800c5da:	4610      	mov	r0, r2
 800c5dc:	4619      	mov	r1, r3
 800c5de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5e2:	2200      	movs	r2, #0
 800c5e4:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 800c5e8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800c5ec:	f7f4 fb6c 	bl	8000cc8 <__aeabi_uldivmod>
 800c5f0:	4602      	mov	r2, r0
 800c5f2:	460b      	mov	r3, r1
 800c5f4:	4613      	mov	r3, r2
 800c5f6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c5fa:	e065      	b.n	800c6c8 <HAL_RCC_GetSysClockFreq+0x420>
 800c5fc:	40023800 	.word	0x40023800
 800c600:	00f42400 	.word	0x00f42400
 800c604:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800c608:	4b3d      	ldr	r3, [pc, #244]	; (800c700 <HAL_RCC_GetSysClockFreq+0x458>)
 800c60a:	685b      	ldr	r3, [r3, #4]
 800c60c:	099b      	lsrs	r3, r3, #6
 800c60e:	2200      	movs	r2, #0
 800c610:	4618      	mov	r0, r3
 800c612:	4611      	mov	r1, r2
 800c614:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800c618:	653b      	str	r3, [r7, #80]	; 0x50
 800c61a:	2300      	movs	r3, #0
 800c61c:	657b      	str	r3, [r7, #84]	; 0x54
 800c61e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 800c622:	4642      	mov	r2, r8
 800c624:	464b      	mov	r3, r9
 800c626:	f04f 0000 	mov.w	r0, #0
 800c62a:	f04f 0100 	mov.w	r1, #0
 800c62e:	0159      	lsls	r1, r3, #5
 800c630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800c634:	0150      	lsls	r0, r2, #5
 800c636:	4602      	mov	r2, r0
 800c638:	460b      	mov	r3, r1
 800c63a:	4641      	mov	r1, r8
 800c63c:	1a51      	subs	r1, r2, r1
 800c63e:	60b9      	str	r1, [r7, #8]
 800c640:	4649      	mov	r1, r9
 800c642:	eb63 0301 	sbc.w	r3, r3, r1
 800c646:	60fb      	str	r3, [r7, #12]
 800c648:	f04f 0200 	mov.w	r2, #0
 800c64c:	f04f 0300 	mov.w	r3, #0
 800c650:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 800c654:	4659      	mov	r1, fp
 800c656:	018b      	lsls	r3, r1, #6
 800c658:	4651      	mov	r1, sl
 800c65a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800c65e:	4651      	mov	r1, sl
 800c660:	018a      	lsls	r2, r1, #6
 800c662:	4651      	mov	r1, sl
 800c664:	1a54      	subs	r4, r2, r1
 800c666:	4659      	mov	r1, fp
 800c668:	eb63 0501 	sbc.w	r5, r3, r1
 800c66c:	f04f 0200 	mov.w	r2, #0
 800c670:	f04f 0300 	mov.w	r3, #0
 800c674:	00eb      	lsls	r3, r5, #3
 800c676:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800c67a:	00e2      	lsls	r2, r4, #3
 800c67c:	4614      	mov	r4, r2
 800c67e:	461d      	mov	r5, r3
 800c680:	4643      	mov	r3, r8
 800c682:	18e3      	adds	r3, r4, r3
 800c684:	603b      	str	r3, [r7, #0]
 800c686:	464b      	mov	r3, r9
 800c688:	eb45 0303 	adc.w	r3, r5, r3
 800c68c:	607b      	str	r3, [r7, #4]
 800c68e:	f04f 0200 	mov.w	r2, #0
 800c692:	f04f 0300 	mov.w	r3, #0
 800c696:	e9d7 4500 	ldrd	r4, r5, [r7]
 800c69a:	4629      	mov	r1, r5
 800c69c:	028b      	lsls	r3, r1, #10
 800c69e:	4621      	mov	r1, r4
 800c6a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800c6a4:	4621      	mov	r1, r4
 800c6a6:	028a      	lsls	r2, r1, #10
 800c6a8:	4610      	mov	r0, r2
 800c6aa:	4619      	mov	r1, r3
 800c6ac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c6b0:	2200      	movs	r2, #0
 800c6b2:	64bb      	str	r3, [r7, #72]	; 0x48
 800c6b4:	64fa      	str	r2, [r7, #76]	; 0x4c
 800c6b6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800c6ba:	f7f4 fb05 	bl	8000cc8 <__aeabi_uldivmod>
 800c6be:	4602      	mov	r2, r0
 800c6c0:	460b      	mov	r3, r1
 800c6c2:	4613      	mov	r3, r2
 800c6c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800c6c8:	4b0d      	ldr	r3, [pc, #52]	; (800c700 <HAL_RCC_GetSysClockFreq+0x458>)
 800c6ca:	685b      	ldr	r3, [r3, #4]
 800c6cc:	0f1b      	lsrs	r3, r3, #28
 800c6ce:	f003 0307 	and.w	r3, r3, #7
 800c6d2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 800c6d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c6da:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800c6de:	fbb2 f3f3 	udiv	r3, r2, r3
 800c6e2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c6e6:	e003      	b.n	800c6f0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800c6e8:	4b06      	ldr	r3, [pc, #24]	; (800c704 <HAL_RCC_GetSysClockFreq+0x45c>)
 800c6ea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800c6ee:	bf00      	nop
    }
  }
  return sysclockfreq;
 800c6f0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 800c6f4:	4618      	mov	r0, r3
 800c6f6:	37b8      	adds	r7, #184	; 0xb8
 800c6f8:	46bd      	mov	sp, r7
 800c6fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800c6fe:	bf00      	nop
 800c700:	40023800 	.word	0x40023800
 800c704:	00f42400 	.word	0x00f42400

0800c708 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800c708:	b580      	push	{r7, lr}
 800c70a:	b086      	sub	sp, #24
 800c70c:	af00      	add	r7, sp, #0
 800c70e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b00      	cmp	r3, #0
 800c714:	d101      	bne.n	800c71a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800c716:	2301      	movs	r3, #1
 800c718:	e28d      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800c71a:	687b      	ldr	r3, [r7, #4]
 800c71c:	681b      	ldr	r3, [r3, #0]
 800c71e:	f003 0301 	and.w	r3, r3, #1
 800c722:	2b00      	cmp	r3, #0
 800c724:	f000 8083 	beq.w	800c82e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c728:	4b94      	ldr	r3, [pc, #592]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c72a:	689b      	ldr	r3, [r3, #8]
 800c72c:	f003 030c 	and.w	r3, r3, #12
 800c730:	2b04      	cmp	r3, #4
 800c732:	d019      	beq.n	800c768 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c734:	4b91      	ldr	r3, [pc, #580]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c736:	689b      	ldr	r3, [r3, #8]
 800c738:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800c73c:	2b08      	cmp	r3, #8
 800c73e:	d106      	bne.n	800c74e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c740:	4b8e      	ldr	r3, [pc, #568]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c742:	685b      	ldr	r3, [r3, #4]
 800c744:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c748:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c74c:	d00c      	beq.n	800c768 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c74e:	4b8b      	ldr	r3, [pc, #556]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c750:	689b      	ldr	r3, [r3, #8]
 800c752:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800c756:	2b0c      	cmp	r3, #12
 800c758:	d112      	bne.n	800c780 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800c75a:	4b88      	ldr	r3, [pc, #544]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c75c:	685b      	ldr	r3, [r3, #4]
 800c75e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800c766:	d10b      	bne.n	800c780 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c768:	4b84      	ldr	r3, [pc, #528]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c76a:	681b      	ldr	r3, [r3, #0]
 800c76c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c770:	2b00      	cmp	r3, #0
 800c772:	d05b      	beq.n	800c82c <HAL_RCC_OscConfig+0x124>
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	685b      	ldr	r3, [r3, #4]
 800c778:	2b00      	cmp	r3, #0
 800c77a:	d157      	bne.n	800c82c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800c77c:	2301      	movs	r3, #1
 800c77e:	e25a      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800c780:	687b      	ldr	r3, [r7, #4]
 800c782:	685b      	ldr	r3, [r3, #4]
 800c784:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c788:	d106      	bne.n	800c798 <HAL_RCC_OscConfig+0x90>
 800c78a:	4b7c      	ldr	r3, [pc, #496]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	4a7b      	ldr	r2, [pc, #492]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c790:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c794:	6013      	str	r3, [r2, #0]
 800c796:	e01d      	b.n	800c7d4 <HAL_RCC_OscConfig+0xcc>
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	685b      	ldr	r3, [r3, #4]
 800c79c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800c7a0:	d10c      	bne.n	800c7bc <HAL_RCC_OscConfig+0xb4>
 800c7a2:	4b76      	ldr	r3, [pc, #472]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	4a75      	ldr	r2, [pc, #468]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c7a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800c7ac:	6013      	str	r3, [r2, #0]
 800c7ae:	4b73      	ldr	r3, [pc, #460]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c7b0:	681b      	ldr	r3, [r3, #0]
 800c7b2:	4a72      	ldr	r2, [pc, #456]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c7b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c7b8:	6013      	str	r3, [r2, #0]
 800c7ba:	e00b      	b.n	800c7d4 <HAL_RCC_OscConfig+0xcc>
 800c7bc:	4b6f      	ldr	r3, [pc, #444]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c7be:	681b      	ldr	r3, [r3, #0]
 800c7c0:	4a6e      	ldr	r2, [pc, #440]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c7c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800c7c6:	6013      	str	r3, [r2, #0]
 800c7c8:	4b6c      	ldr	r3, [pc, #432]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c7ca:	681b      	ldr	r3, [r3, #0]
 800c7cc:	4a6b      	ldr	r2, [pc, #428]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c7ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800c7d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800c7d4:	687b      	ldr	r3, [r7, #4]
 800c7d6:	685b      	ldr	r3, [r3, #4]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d013      	beq.n	800c804 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c7dc:	f7fa fd9e 	bl	800731c <HAL_GetTick>
 800c7e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7e2:	e008      	b.n	800c7f6 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c7e4:	f7fa fd9a 	bl	800731c <HAL_GetTick>
 800c7e8:	4602      	mov	r2, r0
 800c7ea:	693b      	ldr	r3, [r7, #16]
 800c7ec:	1ad3      	subs	r3, r2, r3
 800c7ee:	2b64      	cmp	r3, #100	; 0x64
 800c7f0:	d901      	bls.n	800c7f6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 800c7f2:	2303      	movs	r3, #3
 800c7f4:	e21f      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800c7f6:	4b61      	ldr	r3, [pc, #388]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c7fe:	2b00      	cmp	r3, #0
 800c800:	d0f0      	beq.n	800c7e4 <HAL_RCC_OscConfig+0xdc>
 800c802:	e014      	b.n	800c82e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c804:	f7fa fd8a 	bl	800731c <HAL_GetTick>
 800c808:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c80a:	e008      	b.n	800c81e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800c80c:	f7fa fd86 	bl	800731c <HAL_GetTick>
 800c810:	4602      	mov	r2, r0
 800c812:	693b      	ldr	r3, [r7, #16]
 800c814:	1ad3      	subs	r3, r2, r3
 800c816:	2b64      	cmp	r3, #100	; 0x64
 800c818:	d901      	bls.n	800c81e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800c81a:	2303      	movs	r3, #3
 800c81c:	e20b      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800c81e:	4b57      	ldr	r3, [pc, #348]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c820:	681b      	ldr	r3, [r3, #0]
 800c822:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800c826:	2b00      	cmp	r3, #0
 800c828:	d1f0      	bne.n	800c80c <HAL_RCC_OscConfig+0x104>
 800c82a:	e000      	b.n	800c82e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800c82c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	f003 0302 	and.w	r3, r3, #2
 800c836:	2b00      	cmp	r3, #0
 800c838:	d06f      	beq.n	800c91a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c83a:	4b50      	ldr	r3, [pc, #320]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c83c:	689b      	ldr	r3, [r3, #8]
 800c83e:	f003 030c 	and.w	r3, r3, #12
 800c842:	2b00      	cmp	r3, #0
 800c844:	d017      	beq.n	800c876 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c846:	4b4d      	ldr	r3, [pc, #308]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c848:	689b      	ldr	r3, [r3, #8]
 800c84a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800c84e:	2b08      	cmp	r3, #8
 800c850:	d105      	bne.n	800c85e <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c852:	4b4a      	ldr	r3, [pc, #296]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c854:	685b      	ldr	r3, [r3, #4]
 800c856:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c85a:	2b00      	cmp	r3, #0
 800c85c:	d00b      	beq.n	800c876 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c85e:	4b47      	ldr	r3, [pc, #284]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c860:	689b      	ldr	r3, [r3, #8]
 800c862:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 800c866:	2b0c      	cmp	r3, #12
 800c868:	d11c      	bne.n	800c8a4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800c86a:	4b44      	ldr	r3, [pc, #272]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c86c:	685b      	ldr	r3, [r3, #4]
 800c86e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800c872:	2b00      	cmp	r3, #0
 800c874:	d116      	bne.n	800c8a4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c876:	4b41      	ldr	r3, [pc, #260]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	f003 0302 	and.w	r3, r3, #2
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d005      	beq.n	800c88e <HAL_RCC_OscConfig+0x186>
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	68db      	ldr	r3, [r3, #12]
 800c886:	2b01      	cmp	r3, #1
 800c888:	d001      	beq.n	800c88e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800c88a:	2301      	movs	r3, #1
 800c88c:	e1d3      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c88e:	4b3b      	ldr	r3, [pc, #236]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c890:	681b      	ldr	r3, [r3, #0]
 800c892:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	691b      	ldr	r3, [r3, #16]
 800c89a:	00db      	lsls	r3, r3, #3
 800c89c:	4937      	ldr	r1, [pc, #220]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c89e:	4313      	orrs	r3, r2
 800c8a0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800c8a2:	e03a      	b.n	800c91a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	68db      	ldr	r3, [r3, #12]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d020      	beq.n	800c8ee <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800c8ac:	4b34      	ldr	r3, [pc, #208]	; (800c980 <HAL_RCC_OscConfig+0x278>)
 800c8ae:	2201      	movs	r2, #1
 800c8b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8b2:	f7fa fd33 	bl	800731c <HAL_GetTick>
 800c8b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c8b8:	e008      	b.n	800c8cc <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c8ba:	f7fa fd2f 	bl	800731c <HAL_GetTick>
 800c8be:	4602      	mov	r2, r0
 800c8c0:	693b      	ldr	r3, [r7, #16]
 800c8c2:	1ad3      	subs	r3, r2, r3
 800c8c4:	2b02      	cmp	r3, #2
 800c8c6:	d901      	bls.n	800c8cc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800c8c8:	2303      	movs	r3, #3
 800c8ca:	e1b4      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800c8cc:	4b2b      	ldr	r3, [pc, #172]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c8ce:	681b      	ldr	r3, [r3, #0]
 800c8d0:	f003 0302 	and.w	r3, r3, #2
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d0f0      	beq.n	800c8ba <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800c8d8:	4b28      	ldr	r3, [pc, #160]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c8da:	681b      	ldr	r3, [r3, #0]
 800c8dc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	691b      	ldr	r3, [r3, #16]
 800c8e4:	00db      	lsls	r3, r3, #3
 800c8e6:	4925      	ldr	r1, [pc, #148]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c8e8:	4313      	orrs	r3, r2
 800c8ea:	600b      	str	r3, [r1, #0]
 800c8ec:	e015      	b.n	800c91a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800c8ee:	4b24      	ldr	r3, [pc, #144]	; (800c980 <HAL_RCC_OscConfig+0x278>)
 800c8f0:	2200      	movs	r2, #0
 800c8f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c8f4:	f7fa fd12 	bl	800731c <HAL_GetTick>
 800c8f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c8fa:	e008      	b.n	800c90e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800c8fc:	f7fa fd0e 	bl	800731c <HAL_GetTick>
 800c900:	4602      	mov	r2, r0
 800c902:	693b      	ldr	r3, [r7, #16]
 800c904:	1ad3      	subs	r3, r2, r3
 800c906:	2b02      	cmp	r3, #2
 800c908:	d901      	bls.n	800c90e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800c90a:	2303      	movs	r3, #3
 800c90c:	e193      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800c90e:	4b1b      	ldr	r3, [pc, #108]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	f003 0302 	and.w	r3, r3, #2
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1f0      	bne.n	800c8fc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	681b      	ldr	r3, [r3, #0]
 800c91e:	f003 0308 	and.w	r3, r3, #8
 800c922:	2b00      	cmp	r3, #0
 800c924:	d036      	beq.n	800c994 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	695b      	ldr	r3, [r3, #20]
 800c92a:	2b00      	cmp	r3, #0
 800c92c:	d016      	beq.n	800c95c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c92e:	4b15      	ldr	r3, [pc, #84]	; (800c984 <HAL_RCC_OscConfig+0x27c>)
 800c930:	2201      	movs	r2, #1
 800c932:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c934:	f7fa fcf2 	bl	800731c <HAL_GetTick>
 800c938:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c93a:	e008      	b.n	800c94e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c93c:	f7fa fcee 	bl	800731c <HAL_GetTick>
 800c940:	4602      	mov	r2, r0
 800c942:	693b      	ldr	r3, [r7, #16]
 800c944:	1ad3      	subs	r3, r2, r3
 800c946:	2b02      	cmp	r3, #2
 800c948:	d901      	bls.n	800c94e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800c94a:	2303      	movs	r3, #3
 800c94c:	e173      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800c94e:	4b0b      	ldr	r3, [pc, #44]	; (800c97c <HAL_RCC_OscConfig+0x274>)
 800c950:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c952:	f003 0302 	and.w	r3, r3, #2
 800c956:	2b00      	cmp	r3, #0
 800c958:	d0f0      	beq.n	800c93c <HAL_RCC_OscConfig+0x234>
 800c95a:	e01b      	b.n	800c994 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c95c:	4b09      	ldr	r3, [pc, #36]	; (800c984 <HAL_RCC_OscConfig+0x27c>)
 800c95e:	2200      	movs	r2, #0
 800c960:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c962:	f7fa fcdb 	bl	800731c <HAL_GetTick>
 800c966:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c968:	e00e      	b.n	800c988 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800c96a:	f7fa fcd7 	bl	800731c <HAL_GetTick>
 800c96e:	4602      	mov	r2, r0
 800c970:	693b      	ldr	r3, [r7, #16]
 800c972:	1ad3      	subs	r3, r2, r3
 800c974:	2b02      	cmp	r3, #2
 800c976:	d907      	bls.n	800c988 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 800c978:	2303      	movs	r3, #3
 800c97a:	e15c      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
 800c97c:	40023800 	.word	0x40023800
 800c980:	42470000 	.word	0x42470000
 800c984:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800c988:	4b8a      	ldr	r3, [pc, #552]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800c98a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c98c:	f003 0302 	and.w	r3, r3, #2
 800c990:	2b00      	cmp	r3, #0
 800c992:	d1ea      	bne.n	800c96a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	f003 0304 	and.w	r3, r3, #4
 800c99c:	2b00      	cmp	r3, #0
 800c99e:	f000 8097 	beq.w	800cad0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 800c9a2:	2300      	movs	r3, #0
 800c9a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800c9a6:	4b83      	ldr	r3, [pc, #524]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800c9a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d10f      	bne.n	800c9d2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800c9b2:	2300      	movs	r3, #0
 800c9b4:	60bb      	str	r3, [r7, #8]
 800c9b6:	4b7f      	ldr	r3, [pc, #508]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800c9b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9ba:	4a7e      	ldr	r2, [pc, #504]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800c9bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800c9c0:	6413      	str	r3, [r2, #64]	; 0x40
 800c9c2:	4b7c      	ldr	r3, [pc, #496]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800c9c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c9c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800c9ca:	60bb      	str	r3, [r7, #8]
 800c9cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800c9ce:	2301      	movs	r3, #1
 800c9d0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9d2:	4b79      	ldr	r3, [pc, #484]	; (800cbb8 <HAL_RCC_OscConfig+0x4b0>)
 800c9d4:	681b      	ldr	r3, [r3, #0]
 800c9d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c9da:	2b00      	cmp	r3, #0
 800c9dc:	d118      	bne.n	800ca10 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800c9de:	4b76      	ldr	r3, [pc, #472]	; (800cbb8 <HAL_RCC_OscConfig+0x4b0>)
 800c9e0:	681b      	ldr	r3, [r3, #0]
 800c9e2:	4a75      	ldr	r2, [pc, #468]	; (800cbb8 <HAL_RCC_OscConfig+0x4b0>)
 800c9e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800c9e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800c9ea:	f7fa fc97 	bl	800731c <HAL_GetTick>
 800c9ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800c9f0:	e008      	b.n	800ca04 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c9f2:	f7fa fc93 	bl	800731c <HAL_GetTick>
 800c9f6:	4602      	mov	r2, r0
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	1ad3      	subs	r3, r2, r3
 800c9fc:	2b02      	cmp	r3, #2
 800c9fe:	d901      	bls.n	800ca04 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800ca00:	2303      	movs	r3, #3
 800ca02:	e118      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800ca04:	4b6c      	ldr	r3, [pc, #432]	; (800cbb8 <HAL_RCC_OscConfig+0x4b0>)
 800ca06:	681b      	ldr	r3, [r3, #0]
 800ca08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d0f0      	beq.n	800c9f2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	689b      	ldr	r3, [r3, #8]
 800ca14:	2b01      	cmp	r3, #1
 800ca16:	d106      	bne.n	800ca26 <HAL_RCC_OscConfig+0x31e>
 800ca18:	4b66      	ldr	r3, [pc, #408]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800ca1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca1c:	4a65      	ldr	r2, [pc, #404]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800ca1e:	f043 0301 	orr.w	r3, r3, #1
 800ca22:	6713      	str	r3, [r2, #112]	; 0x70
 800ca24:	e01c      	b.n	800ca60 <HAL_RCC_OscConfig+0x358>
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	689b      	ldr	r3, [r3, #8]
 800ca2a:	2b05      	cmp	r3, #5
 800ca2c:	d10c      	bne.n	800ca48 <HAL_RCC_OscConfig+0x340>
 800ca2e:	4b61      	ldr	r3, [pc, #388]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800ca30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca32:	4a60      	ldr	r2, [pc, #384]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800ca34:	f043 0304 	orr.w	r3, r3, #4
 800ca38:	6713      	str	r3, [r2, #112]	; 0x70
 800ca3a:	4b5e      	ldr	r3, [pc, #376]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800ca3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca3e:	4a5d      	ldr	r2, [pc, #372]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800ca40:	f043 0301 	orr.w	r3, r3, #1
 800ca44:	6713      	str	r3, [r2, #112]	; 0x70
 800ca46:	e00b      	b.n	800ca60 <HAL_RCC_OscConfig+0x358>
 800ca48:	4b5a      	ldr	r3, [pc, #360]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800ca4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca4c:	4a59      	ldr	r2, [pc, #356]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800ca4e:	f023 0301 	bic.w	r3, r3, #1
 800ca52:	6713      	str	r3, [r2, #112]	; 0x70
 800ca54:	4b57      	ldr	r3, [pc, #348]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800ca56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca58:	4a56      	ldr	r2, [pc, #344]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800ca5a:	f023 0304 	bic.w	r3, r3, #4
 800ca5e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800ca60:	687b      	ldr	r3, [r7, #4]
 800ca62:	689b      	ldr	r3, [r3, #8]
 800ca64:	2b00      	cmp	r3, #0
 800ca66:	d015      	beq.n	800ca94 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca68:	f7fa fc58 	bl	800731c <HAL_GetTick>
 800ca6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca6e:	e00a      	b.n	800ca86 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca70:	f7fa fc54 	bl	800731c <HAL_GetTick>
 800ca74:	4602      	mov	r2, r0
 800ca76:	693b      	ldr	r3, [r7, #16]
 800ca78:	1ad3      	subs	r3, r2, r3
 800ca7a:	f241 3288 	movw	r2, #5000	; 0x1388
 800ca7e:	4293      	cmp	r3, r2
 800ca80:	d901      	bls.n	800ca86 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 800ca82:	2303      	movs	r3, #3
 800ca84:	e0d7      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800ca86:	4b4b      	ldr	r3, [pc, #300]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800ca88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ca8a:	f003 0302 	and.w	r3, r3, #2
 800ca8e:	2b00      	cmp	r3, #0
 800ca90:	d0ee      	beq.n	800ca70 <HAL_RCC_OscConfig+0x368>
 800ca92:	e014      	b.n	800cabe <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800ca94:	f7fa fc42 	bl	800731c <HAL_GetTick>
 800ca98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800ca9a:	e00a      	b.n	800cab2 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800ca9c:	f7fa fc3e 	bl	800731c <HAL_GetTick>
 800caa0:	4602      	mov	r2, r0
 800caa2:	693b      	ldr	r3, [r7, #16]
 800caa4:	1ad3      	subs	r3, r2, r3
 800caa6:	f241 3288 	movw	r2, #5000	; 0x1388
 800caaa:	4293      	cmp	r3, r2
 800caac:	d901      	bls.n	800cab2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800caae:	2303      	movs	r3, #3
 800cab0:	e0c1      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800cab2:	4b40      	ldr	r3, [pc, #256]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800cab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800cab6:	f003 0302 	and.w	r3, r3, #2
 800caba:	2b00      	cmp	r3, #0
 800cabc:	d1ee      	bne.n	800ca9c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800cabe:	7dfb      	ldrb	r3, [r7, #23]
 800cac0:	2b01      	cmp	r3, #1
 800cac2:	d105      	bne.n	800cad0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800cac4:	4b3b      	ldr	r3, [pc, #236]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800cac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cac8:	4a3a      	ldr	r2, [pc, #232]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800caca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800cace:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	699b      	ldr	r3, [r3, #24]
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	f000 80ad 	beq.w	800cc34 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800cada:	4b36      	ldr	r3, [pc, #216]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800cadc:	689b      	ldr	r3, [r3, #8]
 800cade:	f003 030c 	and.w	r3, r3, #12
 800cae2:	2b08      	cmp	r3, #8
 800cae4:	d060      	beq.n	800cba8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800cae6:	687b      	ldr	r3, [r7, #4]
 800cae8:	699b      	ldr	r3, [r3, #24]
 800caea:	2b02      	cmp	r3, #2
 800caec:	d145      	bne.n	800cb7a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800caee:	4b33      	ldr	r3, [pc, #204]	; (800cbbc <HAL_RCC_OscConfig+0x4b4>)
 800caf0:	2200      	movs	r2, #0
 800caf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800caf4:	f7fa fc12 	bl	800731c <HAL_GetTick>
 800caf8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cafa:	e008      	b.n	800cb0e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cafc:	f7fa fc0e 	bl	800731c <HAL_GetTick>
 800cb00:	4602      	mov	r2, r0
 800cb02:	693b      	ldr	r3, [r7, #16]
 800cb04:	1ad3      	subs	r3, r2, r3
 800cb06:	2b02      	cmp	r3, #2
 800cb08:	d901      	bls.n	800cb0e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800cb0a:	2303      	movs	r3, #3
 800cb0c:	e093      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb0e:	4b29      	ldr	r3, [pc, #164]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800cb10:	681b      	ldr	r3, [r3, #0]
 800cb12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d1f0      	bne.n	800cafc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800cb1a:	687b      	ldr	r3, [r7, #4]
 800cb1c:	69da      	ldr	r2, [r3, #28]
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	6a1b      	ldr	r3, [r3, #32]
 800cb22:	431a      	orrs	r2, r3
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cb28:	019b      	lsls	r3, r3, #6
 800cb2a:	431a      	orrs	r2, r3
 800cb2c:	687b      	ldr	r3, [r7, #4]
 800cb2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cb30:	085b      	lsrs	r3, r3, #1
 800cb32:	3b01      	subs	r3, #1
 800cb34:	041b      	lsls	r3, r3, #16
 800cb36:	431a      	orrs	r2, r3
 800cb38:	687b      	ldr	r3, [r7, #4]
 800cb3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb3c:	061b      	lsls	r3, r3, #24
 800cb3e:	431a      	orrs	r2, r3
 800cb40:	687b      	ldr	r3, [r7, #4]
 800cb42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cb44:	071b      	lsls	r3, r3, #28
 800cb46:	491b      	ldr	r1, [pc, #108]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800cb48:	4313      	orrs	r3, r2
 800cb4a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800cb4c:	4b1b      	ldr	r3, [pc, #108]	; (800cbbc <HAL_RCC_OscConfig+0x4b4>)
 800cb4e:	2201      	movs	r2, #1
 800cb50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb52:	f7fa fbe3 	bl	800731c <HAL_GetTick>
 800cb56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb58:	e008      	b.n	800cb6c <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb5a:	f7fa fbdf 	bl	800731c <HAL_GetTick>
 800cb5e:	4602      	mov	r2, r0
 800cb60:	693b      	ldr	r3, [r7, #16]
 800cb62:	1ad3      	subs	r3, r2, r3
 800cb64:	2b02      	cmp	r3, #2
 800cb66:	d901      	bls.n	800cb6c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 800cb68:	2303      	movs	r3, #3
 800cb6a:	e064      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800cb6c:	4b11      	ldr	r3, [pc, #68]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800cb6e:	681b      	ldr	r3, [r3, #0]
 800cb70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cb74:	2b00      	cmp	r3, #0
 800cb76:	d0f0      	beq.n	800cb5a <HAL_RCC_OscConfig+0x452>
 800cb78:	e05c      	b.n	800cc34 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800cb7a:	4b10      	ldr	r3, [pc, #64]	; (800cbbc <HAL_RCC_OscConfig+0x4b4>)
 800cb7c:	2200      	movs	r2, #0
 800cb7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800cb80:	f7fa fbcc 	bl	800731c <HAL_GetTick>
 800cb84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb86:	e008      	b.n	800cb9a <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800cb88:	f7fa fbc8 	bl	800731c <HAL_GetTick>
 800cb8c:	4602      	mov	r2, r0
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	1ad3      	subs	r3, r2, r3
 800cb92:	2b02      	cmp	r3, #2
 800cb94:	d901      	bls.n	800cb9a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 800cb96:	2303      	movs	r3, #3
 800cb98:	e04d      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800cb9a:	4b06      	ldr	r3, [pc, #24]	; (800cbb4 <HAL_RCC_OscConfig+0x4ac>)
 800cb9c:	681b      	ldr	r3, [r3, #0]
 800cb9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1f0      	bne.n	800cb88 <HAL_RCC_OscConfig+0x480>
 800cba6:	e045      	b.n	800cc34 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	699b      	ldr	r3, [r3, #24]
 800cbac:	2b01      	cmp	r3, #1
 800cbae:	d107      	bne.n	800cbc0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 800cbb0:	2301      	movs	r3, #1
 800cbb2:	e040      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
 800cbb4:	40023800 	.word	0x40023800
 800cbb8:	40007000 	.word	0x40007000
 800cbbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800cbc0:	4b1f      	ldr	r3, [pc, #124]	; (800cc40 <HAL_RCC_OscConfig+0x538>)
 800cbc2:	685b      	ldr	r3, [r3, #4]
 800cbc4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	699b      	ldr	r3, [r3, #24]
 800cbca:	2b01      	cmp	r3, #1
 800cbcc:	d030      	beq.n	800cc30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cbce:	68fb      	ldr	r3, [r7, #12]
 800cbd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800cbd4:	687b      	ldr	r3, [r7, #4]
 800cbd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800cbd8:	429a      	cmp	r2, r3
 800cbda:	d129      	bne.n	800cc30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cbdc:	68fb      	ldr	r3, [r7, #12]
 800cbde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800cbe2:	687b      	ldr	r3, [r7, #4]
 800cbe4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800cbe6:	429a      	cmp	r2, r3
 800cbe8:	d122      	bne.n	800cc30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cbea:	68fa      	ldr	r2, [r7, #12]
 800cbec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800cbf0:	4013      	ands	r3, r2
 800cbf2:	687a      	ldr	r2, [r7, #4]
 800cbf4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800cbf6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800cbf8:	4293      	cmp	r3, r2
 800cbfa:	d119      	bne.n	800cc30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800cc02:	687b      	ldr	r3, [r7, #4]
 800cc04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cc06:	085b      	lsrs	r3, r3, #1
 800cc08:	3b01      	subs	r3, #1
 800cc0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800cc0c:	429a      	cmp	r2, r3
 800cc0e:	d10f      	bne.n	800cc30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cc10:	68fb      	ldr	r3, [r7, #12]
 800cc12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cc1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800cc1c:	429a      	cmp	r2, r3
 800cc1e:	d107      	bne.n	800cc30 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800cc20:	68fb      	ldr	r3, [r7, #12]
 800cc22:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800cc26:	687b      	ldr	r3, [r7, #4]
 800cc28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cc2a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800cc2c:	429a      	cmp	r2, r3
 800cc2e:	d001      	beq.n	800cc34 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800cc30:	2301      	movs	r3, #1
 800cc32:	e000      	b.n	800cc36 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3718      	adds	r7, #24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	40023800 	.word	0x40023800

0800cc44 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800cc44:	b580      	push	{r7, lr}
 800cc46:	b082      	sub	sp, #8
 800cc48:	af00      	add	r7, sp, #0
 800cc4a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800cc4c:	687b      	ldr	r3, [r7, #4]
 800cc4e:	2b00      	cmp	r3, #0
 800cc50:	d101      	bne.n	800cc56 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800cc52:	2301      	movs	r3, #1
 800cc54:	e041      	b.n	800ccda <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cc5c:	b2db      	uxtb	r3, r3
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d106      	bne.n	800cc70 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800cc62:	687b      	ldr	r3, [r7, #4]
 800cc64:	2200      	movs	r2, #0
 800cc66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800cc6a:	6878      	ldr	r0, [r7, #4]
 800cc6c:	f7fa f828 	bl	8006cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cc70:	687b      	ldr	r3, [r7, #4]
 800cc72:	2202      	movs	r2, #2
 800cc74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cc78:	687b      	ldr	r3, [r7, #4]
 800cc7a:	681a      	ldr	r2, [r3, #0]
 800cc7c:	687b      	ldr	r3, [r7, #4]
 800cc7e:	3304      	adds	r3, #4
 800cc80:	4619      	mov	r1, r3
 800cc82:	4610      	mov	r0, r2
 800cc84:	f000 fcca 	bl	800d61c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cc88:	687b      	ldr	r3, [r7, #4]
 800cc8a:	2201      	movs	r2, #1
 800cc8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cc90:	687b      	ldr	r3, [r7, #4]
 800cc92:	2201      	movs	r2, #1
 800cc94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	2201      	movs	r2, #1
 800cc9c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cca0:	687b      	ldr	r3, [r7, #4]
 800cca2:	2201      	movs	r2, #1
 800cca4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cca8:	687b      	ldr	r3, [r7, #4]
 800ccaa:	2201      	movs	r2, #1
 800ccac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800ccb0:	687b      	ldr	r3, [r7, #4]
 800ccb2:	2201      	movs	r2, #1
 800ccb4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800ccb8:	687b      	ldr	r3, [r7, #4]
 800ccba:	2201      	movs	r2, #1
 800ccbc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ccc0:	687b      	ldr	r3, [r7, #4]
 800ccc2:	2201      	movs	r2, #1
 800ccc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	2201      	movs	r2, #1
 800cccc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	2201      	movs	r2, #1
 800ccd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ccd8:	2300      	movs	r3, #0
}
 800ccda:	4618      	mov	r0, r3
 800ccdc:	3708      	adds	r7, #8
 800ccde:	46bd      	mov	sp, r7
 800cce0:	bd80      	pop	{r7, pc}
	...

0800cce4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800cce4:	b480      	push	{r7}
 800cce6:	b085      	sub	sp, #20
 800cce8:	af00      	add	r7, sp, #0
 800ccea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ccf2:	b2db      	uxtb	r3, r3
 800ccf4:	2b01      	cmp	r3, #1
 800ccf6:	d001      	beq.n	800ccfc <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800ccf8:	2301      	movs	r3, #1
 800ccfa:	e046      	b.n	800cd8a <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	2202      	movs	r2, #2
 800cd00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cd04:	687b      	ldr	r3, [r7, #4]
 800cd06:	681b      	ldr	r3, [r3, #0]
 800cd08:	4a23      	ldr	r2, [pc, #140]	; (800cd98 <HAL_TIM_Base_Start+0xb4>)
 800cd0a:	4293      	cmp	r3, r2
 800cd0c:	d022      	beq.n	800cd54 <HAL_TIM_Base_Start+0x70>
 800cd0e:	687b      	ldr	r3, [r7, #4]
 800cd10:	681b      	ldr	r3, [r3, #0]
 800cd12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cd16:	d01d      	beq.n	800cd54 <HAL_TIM_Base_Start+0x70>
 800cd18:	687b      	ldr	r3, [r7, #4]
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	4a1f      	ldr	r2, [pc, #124]	; (800cd9c <HAL_TIM_Base_Start+0xb8>)
 800cd1e:	4293      	cmp	r3, r2
 800cd20:	d018      	beq.n	800cd54 <HAL_TIM_Base_Start+0x70>
 800cd22:	687b      	ldr	r3, [r7, #4]
 800cd24:	681b      	ldr	r3, [r3, #0]
 800cd26:	4a1e      	ldr	r2, [pc, #120]	; (800cda0 <HAL_TIM_Base_Start+0xbc>)
 800cd28:	4293      	cmp	r3, r2
 800cd2a:	d013      	beq.n	800cd54 <HAL_TIM_Base_Start+0x70>
 800cd2c:	687b      	ldr	r3, [r7, #4]
 800cd2e:	681b      	ldr	r3, [r3, #0]
 800cd30:	4a1c      	ldr	r2, [pc, #112]	; (800cda4 <HAL_TIM_Base_Start+0xc0>)
 800cd32:	4293      	cmp	r3, r2
 800cd34:	d00e      	beq.n	800cd54 <HAL_TIM_Base_Start+0x70>
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	681b      	ldr	r3, [r3, #0]
 800cd3a:	4a1b      	ldr	r2, [pc, #108]	; (800cda8 <HAL_TIM_Base_Start+0xc4>)
 800cd3c:	4293      	cmp	r3, r2
 800cd3e:	d009      	beq.n	800cd54 <HAL_TIM_Base_Start+0x70>
 800cd40:	687b      	ldr	r3, [r7, #4]
 800cd42:	681b      	ldr	r3, [r3, #0]
 800cd44:	4a19      	ldr	r2, [pc, #100]	; (800cdac <HAL_TIM_Base_Start+0xc8>)
 800cd46:	4293      	cmp	r3, r2
 800cd48:	d004      	beq.n	800cd54 <HAL_TIM_Base_Start+0x70>
 800cd4a:	687b      	ldr	r3, [r7, #4]
 800cd4c:	681b      	ldr	r3, [r3, #0]
 800cd4e:	4a18      	ldr	r2, [pc, #96]	; (800cdb0 <HAL_TIM_Base_Start+0xcc>)
 800cd50:	4293      	cmp	r3, r2
 800cd52:	d111      	bne.n	800cd78 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800cd54:	687b      	ldr	r3, [r7, #4]
 800cd56:	681b      	ldr	r3, [r3, #0]
 800cd58:	689b      	ldr	r3, [r3, #8]
 800cd5a:	f003 0307 	and.w	r3, r3, #7
 800cd5e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd60:	68fb      	ldr	r3, [r7, #12]
 800cd62:	2b06      	cmp	r3, #6
 800cd64:	d010      	beq.n	800cd88 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	681a      	ldr	r2, [r3, #0]
 800cd6c:	687b      	ldr	r3, [r7, #4]
 800cd6e:	681b      	ldr	r3, [r3, #0]
 800cd70:	f042 0201 	orr.w	r2, r2, #1
 800cd74:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800cd76:	e007      	b.n	800cd88 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800cd78:	687b      	ldr	r3, [r7, #4]
 800cd7a:	681b      	ldr	r3, [r3, #0]
 800cd7c:	681a      	ldr	r2, [r3, #0]
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681b      	ldr	r3, [r3, #0]
 800cd82:	f042 0201 	orr.w	r2, r2, #1
 800cd86:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800cd88:	2300      	movs	r3, #0
}
 800cd8a:	4618      	mov	r0, r3
 800cd8c:	3714      	adds	r7, #20
 800cd8e:	46bd      	mov	sp, r7
 800cd90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd94:	4770      	bx	lr
 800cd96:	bf00      	nop
 800cd98:	40010000 	.word	0x40010000
 800cd9c:	40000400 	.word	0x40000400
 800cda0:	40000800 	.word	0x40000800
 800cda4:	40000c00 	.word	0x40000c00
 800cda8:	40010400 	.word	0x40010400
 800cdac:	40014000 	.word	0x40014000
 800cdb0:	40001800 	.word	0x40001800

0800cdb4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800cdb4:	b480      	push	{r7}
 800cdb6:	b085      	sub	sp, #20
 800cdb8:	af00      	add	r7, sp, #0
 800cdba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800cdbc:	687b      	ldr	r3, [r7, #4]
 800cdbe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800cdc2:	b2db      	uxtb	r3, r3
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d001      	beq.n	800cdcc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800cdc8:	2301      	movs	r3, #1
 800cdca:	e04e      	b.n	800ce6a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cdcc:	687b      	ldr	r3, [r7, #4]
 800cdce:	2202      	movs	r2, #2
 800cdd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	68da      	ldr	r2, [r3, #12]
 800cdda:	687b      	ldr	r3, [r7, #4]
 800cddc:	681b      	ldr	r3, [r3, #0]
 800cdde:	f042 0201 	orr.w	r2, r2, #1
 800cde2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800cde4:	687b      	ldr	r3, [r7, #4]
 800cde6:	681b      	ldr	r3, [r3, #0]
 800cde8:	4a23      	ldr	r2, [pc, #140]	; (800ce78 <HAL_TIM_Base_Start_IT+0xc4>)
 800cdea:	4293      	cmp	r3, r2
 800cdec:	d022      	beq.n	800ce34 <HAL_TIM_Base_Start_IT+0x80>
 800cdee:	687b      	ldr	r3, [r7, #4]
 800cdf0:	681b      	ldr	r3, [r3, #0]
 800cdf2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800cdf6:	d01d      	beq.n	800ce34 <HAL_TIM_Base_Start_IT+0x80>
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4a1f      	ldr	r2, [pc, #124]	; (800ce7c <HAL_TIM_Base_Start_IT+0xc8>)
 800cdfe:	4293      	cmp	r3, r2
 800ce00:	d018      	beq.n	800ce34 <HAL_TIM_Base_Start_IT+0x80>
 800ce02:	687b      	ldr	r3, [r7, #4]
 800ce04:	681b      	ldr	r3, [r3, #0]
 800ce06:	4a1e      	ldr	r2, [pc, #120]	; (800ce80 <HAL_TIM_Base_Start_IT+0xcc>)
 800ce08:	4293      	cmp	r3, r2
 800ce0a:	d013      	beq.n	800ce34 <HAL_TIM_Base_Start_IT+0x80>
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	4a1c      	ldr	r2, [pc, #112]	; (800ce84 <HAL_TIM_Base_Start_IT+0xd0>)
 800ce12:	4293      	cmp	r3, r2
 800ce14:	d00e      	beq.n	800ce34 <HAL_TIM_Base_Start_IT+0x80>
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	4a1b      	ldr	r2, [pc, #108]	; (800ce88 <HAL_TIM_Base_Start_IT+0xd4>)
 800ce1c:	4293      	cmp	r3, r2
 800ce1e:	d009      	beq.n	800ce34 <HAL_TIM_Base_Start_IT+0x80>
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	4a19      	ldr	r2, [pc, #100]	; (800ce8c <HAL_TIM_Base_Start_IT+0xd8>)
 800ce26:	4293      	cmp	r3, r2
 800ce28:	d004      	beq.n	800ce34 <HAL_TIM_Base_Start_IT+0x80>
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	681b      	ldr	r3, [r3, #0]
 800ce2e:	4a18      	ldr	r2, [pc, #96]	; (800ce90 <HAL_TIM_Base_Start_IT+0xdc>)
 800ce30:	4293      	cmp	r3, r2
 800ce32:	d111      	bne.n	800ce58 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	689b      	ldr	r3, [r3, #8]
 800ce3a:	f003 0307 	and.w	r3, r3, #7
 800ce3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce40:	68fb      	ldr	r3, [r7, #12]
 800ce42:	2b06      	cmp	r3, #6
 800ce44:	d010      	beq.n	800ce68 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800ce46:	687b      	ldr	r3, [r7, #4]
 800ce48:	681b      	ldr	r3, [r3, #0]
 800ce4a:	681a      	ldr	r2, [r3, #0]
 800ce4c:	687b      	ldr	r3, [r7, #4]
 800ce4e:	681b      	ldr	r3, [r3, #0]
 800ce50:	f042 0201 	orr.w	r2, r2, #1
 800ce54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800ce56:	e007      	b.n	800ce68 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	681a      	ldr	r2, [r3, #0]
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	681b      	ldr	r3, [r3, #0]
 800ce62:	f042 0201 	orr.w	r2, r2, #1
 800ce66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800ce68:	2300      	movs	r3, #0
}
 800ce6a:	4618      	mov	r0, r3
 800ce6c:	3714      	adds	r7, #20
 800ce6e:	46bd      	mov	sp, r7
 800ce70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce74:	4770      	bx	lr
 800ce76:	bf00      	nop
 800ce78:	40010000 	.word	0x40010000
 800ce7c:	40000400 	.word	0x40000400
 800ce80:	40000800 	.word	0x40000800
 800ce84:	40000c00 	.word	0x40000c00
 800ce88:	40010400 	.word	0x40010400
 800ce8c:	40014000 	.word	0x40014000
 800ce90:	40001800 	.word	0x40001800

0800ce94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b082      	sub	sp, #8
 800ce98:	af00      	add	r7, sp, #0
 800ce9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800ce9c:	687b      	ldr	r3, [r7, #4]
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d101      	bne.n	800cea6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800cea2:	2301      	movs	r3, #1
 800cea4:	e041      	b.n	800cf2a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800ceac:	b2db      	uxtb	r3, r3
 800ceae:	2b00      	cmp	r3, #0
 800ceb0:	d106      	bne.n	800cec0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800ceb2:	687b      	ldr	r3, [r7, #4]
 800ceb4:	2200      	movs	r2, #0
 800ceb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800ceba:	6878      	ldr	r0, [r7, #4]
 800cebc:	f000 f839 	bl	800cf32 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800cec0:	687b      	ldr	r3, [r7, #4]
 800cec2:	2202      	movs	r2, #2
 800cec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cec8:	687b      	ldr	r3, [r7, #4]
 800ceca:	681a      	ldr	r2, [r3, #0]
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	3304      	adds	r3, #4
 800ced0:	4619      	mov	r1, r3
 800ced2:	4610      	mov	r0, r2
 800ced4:	f000 fba2 	bl	800d61c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	2201      	movs	r2, #1
 800cedc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cee0:	687b      	ldr	r3, [r7, #4]
 800cee2:	2201      	movs	r2, #1
 800cee4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cee8:	687b      	ldr	r3, [r7, #4]
 800ceea:	2201      	movs	r2, #1
 800ceec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2201      	movs	r2, #1
 800cef4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cef8:	687b      	ldr	r3, [r7, #4]
 800cefa:	2201      	movs	r2, #1
 800cefc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	2201      	movs	r2, #1
 800cf04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800cf08:	687b      	ldr	r3, [r7, #4]
 800cf0a:	2201      	movs	r2, #1
 800cf0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cf10:	687b      	ldr	r3, [r7, #4]
 800cf12:	2201      	movs	r2, #1
 800cf14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	2201      	movs	r2, #1
 800cf1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800cf20:	687b      	ldr	r3, [r7, #4]
 800cf22:	2201      	movs	r2, #1
 800cf24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800cf28:	2300      	movs	r3, #0
}
 800cf2a:	4618      	mov	r0, r3
 800cf2c:	3708      	adds	r7, #8
 800cf2e:	46bd      	mov	sp, r7
 800cf30:	bd80      	pop	{r7, pc}

0800cf32 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800cf32:	b480      	push	{r7}
 800cf34:	b083      	sub	sp, #12
 800cf36:	af00      	add	r7, sp, #0
 800cf38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800cf3a:	bf00      	nop
 800cf3c:	370c      	adds	r7, #12
 800cf3e:	46bd      	mov	sp, r7
 800cf40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf44:	4770      	bx	lr
	...

0800cf48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800cf48:	b580      	push	{r7, lr}
 800cf4a:	b084      	sub	sp, #16
 800cf4c:	af00      	add	r7, sp, #0
 800cf4e:	6078      	str	r0, [r7, #4]
 800cf50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d109      	bne.n	800cf6c <HAL_TIM_PWM_Start+0x24>
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800cf5e:	b2db      	uxtb	r3, r3
 800cf60:	2b01      	cmp	r3, #1
 800cf62:	bf14      	ite	ne
 800cf64:	2301      	movne	r3, #1
 800cf66:	2300      	moveq	r3, #0
 800cf68:	b2db      	uxtb	r3, r3
 800cf6a:	e022      	b.n	800cfb2 <HAL_TIM_PWM_Start+0x6a>
 800cf6c:	683b      	ldr	r3, [r7, #0]
 800cf6e:	2b04      	cmp	r3, #4
 800cf70:	d109      	bne.n	800cf86 <HAL_TIM_PWM_Start+0x3e>
 800cf72:	687b      	ldr	r3, [r7, #4]
 800cf74:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800cf78:	b2db      	uxtb	r3, r3
 800cf7a:	2b01      	cmp	r3, #1
 800cf7c:	bf14      	ite	ne
 800cf7e:	2301      	movne	r3, #1
 800cf80:	2300      	moveq	r3, #0
 800cf82:	b2db      	uxtb	r3, r3
 800cf84:	e015      	b.n	800cfb2 <HAL_TIM_PWM_Start+0x6a>
 800cf86:	683b      	ldr	r3, [r7, #0]
 800cf88:	2b08      	cmp	r3, #8
 800cf8a:	d109      	bne.n	800cfa0 <HAL_TIM_PWM_Start+0x58>
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800cf92:	b2db      	uxtb	r3, r3
 800cf94:	2b01      	cmp	r3, #1
 800cf96:	bf14      	ite	ne
 800cf98:	2301      	movne	r3, #1
 800cf9a:	2300      	moveq	r3, #0
 800cf9c:	b2db      	uxtb	r3, r3
 800cf9e:	e008      	b.n	800cfb2 <HAL_TIM_PWM_Start+0x6a>
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800cfa6:	b2db      	uxtb	r3, r3
 800cfa8:	2b01      	cmp	r3, #1
 800cfaa:	bf14      	ite	ne
 800cfac:	2301      	movne	r3, #1
 800cfae:	2300      	moveq	r3, #0
 800cfb0:	b2db      	uxtb	r3, r3
 800cfb2:	2b00      	cmp	r3, #0
 800cfb4:	d001      	beq.n	800cfba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800cfb6:	2301      	movs	r3, #1
 800cfb8:	e07c      	b.n	800d0b4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800cfba:	683b      	ldr	r3, [r7, #0]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d104      	bne.n	800cfca <HAL_TIM_PWM_Start+0x82>
 800cfc0:	687b      	ldr	r3, [r7, #4]
 800cfc2:	2202      	movs	r2, #2
 800cfc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800cfc8:	e013      	b.n	800cff2 <HAL_TIM_PWM_Start+0xaa>
 800cfca:	683b      	ldr	r3, [r7, #0]
 800cfcc:	2b04      	cmp	r3, #4
 800cfce:	d104      	bne.n	800cfda <HAL_TIM_PWM_Start+0x92>
 800cfd0:	687b      	ldr	r3, [r7, #4]
 800cfd2:	2202      	movs	r2, #2
 800cfd4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800cfd8:	e00b      	b.n	800cff2 <HAL_TIM_PWM_Start+0xaa>
 800cfda:	683b      	ldr	r3, [r7, #0]
 800cfdc:	2b08      	cmp	r3, #8
 800cfde:	d104      	bne.n	800cfea <HAL_TIM_PWM_Start+0xa2>
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	2202      	movs	r2, #2
 800cfe4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800cfe8:	e003      	b.n	800cff2 <HAL_TIM_PWM_Start+0xaa>
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	2202      	movs	r2, #2
 800cfee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800cff2:	687b      	ldr	r3, [r7, #4]
 800cff4:	681b      	ldr	r3, [r3, #0]
 800cff6:	2201      	movs	r2, #1
 800cff8:	6839      	ldr	r1, [r7, #0]
 800cffa:	4618      	mov	r0, r3
 800cffc:	f000 fe04 	bl	800dc08 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800d000:	687b      	ldr	r3, [r7, #4]
 800d002:	681b      	ldr	r3, [r3, #0]
 800d004:	4a2d      	ldr	r2, [pc, #180]	; (800d0bc <HAL_TIM_PWM_Start+0x174>)
 800d006:	4293      	cmp	r3, r2
 800d008:	d004      	beq.n	800d014 <HAL_TIM_PWM_Start+0xcc>
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	681b      	ldr	r3, [r3, #0]
 800d00e:	4a2c      	ldr	r2, [pc, #176]	; (800d0c0 <HAL_TIM_PWM_Start+0x178>)
 800d010:	4293      	cmp	r3, r2
 800d012:	d101      	bne.n	800d018 <HAL_TIM_PWM_Start+0xd0>
 800d014:	2301      	movs	r3, #1
 800d016:	e000      	b.n	800d01a <HAL_TIM_PWM_Start+0xd2>
 800d018:	2300      	movs	r3, #0
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d007      	beq.n	800d02e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	681b      	ldr	r3, [r3, #0]
 800d028:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800d02c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	4a22      	ldr	r2, [pc, #136]	; (800d0bc <HAL_TIM_PWM_Start+0x174>)
 800d034:	4293      	cmp	r3, r2
 800d036:	d022      	beq.n	800d07e <HAL_TIM_PWM_Start+0x136>
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d040:	d01d      	beq.n	800d07e <HAL_TIM_PWM_Start+0x136>
 800d042:	687b      	ldr	r3, [r7, #4]
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	4a1f      	ldr	r2, [pc, #124]	; (800d0c4 <HAL_TIM_PWM_Start+0x17c>)
 800d048:	4293      	cmp	r3, r2
 800d04a:	d018      	beq.n	800d07e <HAL_TIM_PWM_Start+0x136>
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	4a1d      	ldr	r2, [pc, #116]	; (800d0c8 <HAL_TIM_PWM_Start+0x180>)
 800d052:	4293      	cmp	r3, r2
 800d054:	d013      	beq.n	800d07e <HAL_TIM_PWM_Start+0x136>
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	681b      	ldr	r3, [r3, #0]
 800d05a:	4a1c      	ldr	r2, [pc, #112]	; (800d0cc <HAL_TIM_PWM_Start+0x184>)
 800d05c:	4293      	cmp	r3, r2
 800d05e:	d00e      	beq.n	800d07e <HAL_TIM_PWM_Start+0x136>
 800d060:	687b      	ldr	r3, [r7, #4]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	4a16      	ldr	r2, [pc, #88]	; (800d0c0 <HAL_TIM_PWM_Start+0x178>)
 800d066:	4293      	cmp	r3, r2
 800d068:	d009      	beq.n	800d07e <HAL_TIM_PWM_Start+0x136>
 800d06a:	687b      	ldr	r3, [r7, #4]
 800d06c:	681b      	ldr	r3, [r3, #0]
 800d06e:	4a18      	ldr	r2, [pc, #96]	; (800d0d0 <HAL_TIM_PWM_Start+0x188>)
 800d070:	4293      	cmp	r3, r2
 800d072:	d004      	beq.n	800d07e <HAL_TIM_PWM_Start+0x136>
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	4a16      	ldr	r2, [pc, #88]	; (800d0d4 <HAL_TIM_PWM_Start+0x18c>)
 800d07a:	4293      	cmp	r3, r2
 800d07c:	d111      	bne.n	800d0a2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	689b      	ldr	r3, [r3, #8]
 800d084:	f003 0307 	and.w	r3, r3, #7
 800d088:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d08a:	68fb      	ldr	r3, [r7, #12]
 800d08c:	2b06      	cmp	r3, #6
 800d08e:	d010      	beq.n	800d0b2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	681a      	ldr	r2, [r3, #0]
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	f042 0201 	orr.w	r2, r2, #1
 800d09e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800d0a0:	e007      	b.n	800d0b2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800d0a2:	687b      	ldr	r3, [r7, #4]
 800d0a4:	681b      	ldr	r3, [r3, #0]
 800d0a6:	681a      	ldr	r2, [r3, #0]
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	f042 0201 	orr.w	r2, r2, #1
 800d0b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800d0b2:	2300      	movs	r3, #0
}
 800d0b4:	4618      	mov	r0, r3
 800d0b6:	3710      	adds	r7, #16
 800d0b8:	46bd      	mov	sp, r7
 800d0ba:	bd80      	pop	{r7, pc}
 800d0bc:	40010000 	.word	0x40010000
 800d0c0:	40010400 	.word	0x40010400
 800d0c4:	40000400 	.word	0x40000400
 800d0c8:	40000800 	.word	0x40000800
 800d0cc:	40000c00 	.word	0x40000c00
 800d0d0:	40014000 	.word	0x40014000
 800d0d4:	40001800 	.word	0x40001800

0800d0d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b084      	sub	sp, #16
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800d0e0:	687b      	ldr	r3, [r7, #4]
 800d0e2:	681b      	ldr	r3, [r3, #0]
 800d0e4:	68db      	ldr	r3, [r3, #12]
 800d0e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	681b      	ldr	r3, [r3, #0]
 800d0ec:	691b      	ldr	r3, [r3, #16]
 800d0ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800d0f0:	68bb      	ldr	r3, [r7, #8]
 800d0f2:	f003 0302 	and.w	r3, r3, #2
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d020      	beq.n	800d13c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	f003 0302 	and.w	r3, r3, #2
 800d100:	2b00      	cmp	r3, #0
 800d102:	d01b      	beq.n	800d13c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	681b      	ldr	r3, [r3, #0]
 800d108:	f06f 0202 	mvn.w	r2, #2
 800d10c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800d10e:	687b      	ldr	r3, [r7, #4]
 800d110:	2201      	movs	r2, #1
 800d112:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	681b      	ldr	r3, [r3, #0]
 800d118:	699b      	ldr	r3, [r3, #24]
 800d11a:	f003 0303 	and.w	r3, r3, #3
 800d11e:	2b00      	cmp	r3, #0
 800d120:	d003      	beq.n	800d12a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800d122:	6878      	ldr	r0, [r7, #4]
 800d124:	f000 fa5b 	bl	800d5de <HAL_TIM_IC_CaptureCallback>
 800d128:	e005      	b.n	800d136 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800d12a:	6878      	ldr	r0, [r7, #4]
 800d12c:	f000 fa4d 	bl	800d5ca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d130:	6878      	ldr	r0, [r7, #4]
 800d132:	f000 fa5e 	bl	800d5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	2200      	movs	r2, #0
 800d13a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800d13c:	68bb      	ldr	r3, [r7, #8]
 800d13e:	f003 0304 	and.w	r3, r3, #4
 800d142:	2b00      	cmp	r3, #0
 800d144:	d020      	beq.n	800d188 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800d146:	68fb      	ldr	r3, [r7, #12]
 800d148:	f003 0304 	and.w	r3, r3, #4
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d01b      	beq.n	800d188 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800d150:	687b      	ldr	r3, [r7, #4]
 800d152:	681b      	ldr	r3, [r3, #0]
 800d154:	f06f 0204 	mvn.w	r2, #4
 800d158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	2202      	movs	r2, #2
 800d15e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800d160:	687b      	ldr	r3, [r7, #4]
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	699b      	ldr	r3, [r3, #24]
 800d166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d16a:	2b00      	cmp	r3, #0
 800d16c:	d003      	beq.n	800d176 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d16e:	6878      	ldr	r0, [r7, #4]
 800d170:	f000 fa35 	bl	800d5de <HAL_TIM_IC_CaptureCallback>
 800d174:	e005      	b.n	800d182 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d176:	6878      	ldr	r0, [r7, #4]
 800d178:	f000 fa27 	bl	800d5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d17c:	6878      	ldr	r0, [r7, #4]
 800d17e:	f000 fa38 	bl	800d5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2200      	movs	r2, #0
 800d186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800d188:	68bb      	ldr	r3, [r7, #8]
 800d18a:	f003 0308 	and.w	r3, r3, #8
 800d18e:	2b00      	cmp	r3, #0
 800d190:	d020      	beq.n	800d1d4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800d192:	68fb      	ldr	r3, [r7, #12]
 800d194:	f003 0308 	and.w	r3, r3, #8
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d01b      	beq.n	800d1d4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	f06f 0208 	mvn.w	r2, #8
 800d1a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800d1a6:	687b      	ldr	r3, [r7, #4]
 800d1a8:	2204      	movs	r2, #4
 800d1aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	69db      	ldr	r3, [r3, #28]
 800d1b2:	f003 0303 	and.w	r3, r3, #3
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	d003      	beq.n	800d1c2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d1ba:	6878      	ldr	r0, [r7, #4]
 800d1bc:	f000 fa0f 	bl	800d5de <HAL_TIM_IC_CaptureCallback>
 800d1c0:	e005      	b.n	800d1ce <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d1c2:	6878      	ldr	r0, [r7, #4]
 800d1c4:	f000 fa01 	bl	800d5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d1c8:	6878      	ldr	r0, [r7, #4]
 800d1ca:	f000 fa12 	bl	800d5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	2200      	movs	r2, #0
 800d1d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800d1d4:	68bb      	ldr	r3, [r7, #8]
 800d1d6:	f003 0310 	and.w	r3, r3, #16
 800d1da:	2b00      	cmp	r3, #0
 800d1dc:	d020      	beq.n	800d220 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800d1de:	68fb      	ldr	r3, [r7, #12]
 800d1e0:	f003 0310 	and.w	r3, r3, #16
 800d1e4:	2b00      	cmp	r3, #0
 800d1e6:	d01b      	beq.n	800d220 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	f06f 0210 	mvn.w	r2, #16
 800d1f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	2208      	movs	r2, #8
 800d1f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800d1f8:	687b      	ldr	r3, [r7, #4]
 800d1fa:	681b      	ldr	r3, [r3, #0]
 800d1fc:	69db      	ldr	r3, [r3, #28]
 800d1fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d202:	2b00      	cmp	r3, #0
 800d204:	d003      	beq.n	800d20e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800d206:	6878      	ldr	r0, [r7, #4]
 800d208:	f000 f9e9 	bl	800d5de <HAL_TIM_IC_CaptureCallback>
 800d20c:	e005      	b.n	800d21a <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 f9db 	bl	800d5ca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800d214:	6878      	ldr	r0, [r7, #4]
 800d216:	f000 f9ec 	bl	800d5f2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800d21a:	687b      	ldr	r3, [r7, #4]
 800d21c:	2200      	movs	r2, #0
 800d21e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800d220:	68bb      	ldr	r3, [r7, #8]
 800d222:	f003 0301 	and.w	r3, r3, #1
 800d226:	2b00      	cmp	r3, #0
 800d228:	d00c      	beq.n	800d244 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	f003 0301 	and.w	r3, r3, #1
 800d230:	2b00      	cmp	r3, #0
 800d232:	d007      	beq.n	800d244 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	f06f 0201 	mvn.w	r2, #1
 800d23c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800d23e:	6878      	ldr	r0, [r7, #4]
 800d240:	f7f8 fd6a 	bl	8005d18 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800d244:	68bb      	ldr	r3, [r7, #8]
 800d246:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d24a:	2b00      	cmp	r3, #0
 800d24c:	d00c      	beq.n	800d268 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800d24e:	68fb      	ldr	r3, [r7, #12]
 800d250:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d254:	2b00      	cmp	r3, #0
 800d256:	d007      	beq.n	800d268 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800d260:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800d262:	6878      	ldr	r0, [r7, #4]
 800d264:	f000 fdce 	bl	800de04 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800d268:	68bb      	ldr	r3, [r7, #8]
 800d26a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d26e:	2b00      	cmp	r3, #0
 800d270:	d00c      	beq.n	800d28c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800d272:	68fb      	ldr	r3, [r7, #12]
 800d274:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d278:	2b00      	cmp	r3, #0
 800d27a:	d007      	beq.n	800d28c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800d27c:	687b      	ldr	r3, [r7, #4]
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800d284:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800d286:	6878      	ldr	r0, [r7, #4]
 800d288:	f000 f9bd 	bl	800d606 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800d28c:	68bb      	ldr	r3, [r7, #8]
 800d28e:	f003 0320 	and.w	r3, r3, #32
 800d292:	2b00      	cmp	r3, #0
 800d294:	d00c      	beq.n	800d2b0 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800d296:	68fb      	ldr	r3, [r7, #12]
 800d298:	f003 0320 	and.w	r3, r3, #32
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d007      	beq.n	800d2b0 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	681b      	ldr	r3, [r3, #0]
 800d2a4:	f06f 0220 	mvn.w	r2, #32
 800d2a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800d2aa:	6878      	ldr	r0, [r7, #4]
 800d2ac:	f000 fda0 	bl	800ddf0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800d2b0:	bf00      	nop
 800d2b2:	3710      	adds	r7, #16
 800d2b4:	46bd      	mov	sp, r7
 800d2b6:	bd80      	pop	{r7, pc}

0800d2b8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b086      	sub	sp, #24
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	60f8      	str	r0, [r7, #12]
 800d2c0:	60b9      	str	r1, [r7, #8]
 800d2c2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d2ce:	2b01      	cmp	r3, #1
 800d2d0:	d101      	bne.n	800d2d6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800d2d2:	2302      	movs	r3, #2
 800d2d4:	e0ae      	b.n	800d434 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800d2d6:	68fb      	ldr	r3, [r7, #12]
 800d2d8:	2201      	movs	r2, #1
 800d2da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	2b0c      	cmp	r3, #12
 800d2e2:	f200 809f 	bhi.w	800d424 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800d2e6:	a201      	add	r2, pc, #4	; (adr r2, 800d2ec <HAL_TIM_PWM_ConfigChannel+0x34>)
 800d2e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d2ec:	0800d321 	.word	0x0800d321
 800d2f0:	0800d425 	.word	0x0800d425
 800d2f4:	0800d425 	.word	0x0800d425
 800d2f8:	0800d425 	.word	0x0800d425
 800d2fc:	0800d361 	.word	0x0800d361
 800d300:	0800d425 	.word	0x0800d425
 800d304:	0800d425 	.word	0x0800d425
 800d308:	0800d425 	.word	0x0800d425
 800d30c:	0800d3a3 	.word	0x0800d3a3
 800d310:	0800d425 	.word	0x0800d425
 800d314:	0800d425 	.word	0x0800d425
 800d318:	0800d425 	.word	0x0800d425
 800d31c:	0800d3e3 	.word	0x0800d3e3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800d320:	68fb      	ldr	r3, [r7, #12]
 800d322:	681b      	ldr	r3, [r3, #0]
 800d324:	68b9      	ldr	r1, [r7, #8]
 800d326:	4618      	mov	r0, r3
 800d328:	f000 fa24 	bl	800d774 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800d32c:	68fb      	ldr	r3, [r7, #12]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	699a      	ldr	r2, [r3, #24]
 800d332:	68fb      	ldr	r3, [r7, #12]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f042 0208 	orr.w	r2, r2, #8
 800d33a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800d33c:	68fb      	ldr	r3, [r7, #12]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	699a      	ldr	r2, [r3, #24]
 800d342:	68fb      	ldr	r3, [r7, #12]
 800d344:	681b      	ldr	r3, [r3, #0]
 800d346:	f022 0204 	bic.w	r2, r2, #4
 800d34a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800d34c:	68fb      	ldr	r3, [r7, #12]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	6999      	ldr	r1, [r3, #24]
 800d352:	68bb      	ldr	r3, [r7, #8]
 800d354:	691a      	ldr	r2, [r3, #16]
 800d356:	68fb      	ldr	r3, [r7, #12]
 800d358:	681b      	ldr	r3, [r3, #0]
 800d35a:	430a      	orrs	r2, r1
 800d35c:	619a      	str	r2, [r3, #24]
      break;
 800d35e:	e064      	b.n	800d42a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800d360:	68fb      	ldr	r3, [r7, #12]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	68b9      	ldr	r1, [r7, #8]
 800d366:	4618      	mov	r0, r3
 800d368:	f000 fa74 	bl	800d854 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800d36c:	68fb      	ldr	r3, [r7, #12]
 800d36e:	681b      	ldr	r3, [r3, #0]
 800d370:	699a      	ldr	r2, [r3, #24]
 800d372:	68fb      	ldr	r3, [r7, #12]
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d37a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800d37c:	68fb      	ldr	r3, [r7, #12]
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	699a      	ldr	r2, [r3, #24]
 800d382:	68fb      	ldr	r3, [r7, #12]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d38a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800d38c:	68fb      	ldr	r3, [r7, #12]
 800d38e:	681b      	ldr	r3, [r3, #0]
 800d390:	6999      	ldr	r1, [r3, #24]
 800d392:	68bb      	ldr	r3, [r7, #8]
 800d394:	691b      	ldr	r3, [r3, #16]
 800d396:	021a      	lsls	r2, r3, #8
 800d398:	68fb      	ldr	r3, [r7, #12]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	430a      	orrs	r2, r1
 800d39e:	619a      	str	r2, [r3, #24]
      break;
 800d3a0:	e043      	b.n	800d42a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800d3a2:	68fb      	ldr	r3, [r7, #12]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	68b9      	ldr	r1, [r7, #8]
 800d3a8:	4618      	mov	r0, r3
 800d3aa:	f000 fac9 	bl	800d940 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800d3ae:	68fb      	ldr	r3, [r7, #12]
 800d3b0:	681b      	ldr	r3, [r3, #0]
 800d3b2:	69da      	ldr	r2, [r3, #28]
 800d3b4:	68fb      	ldr	r3, [r7, #12]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	f042 0208 	orr.w	r2, r2, #8
 800d3bc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800d3be:	68fb      	ldr	r3, [r7, #12]
 800d3c0:	681b      	ldr	r3, [r3, #0]
 800d3c2:	69da      	ldr	r2, [r3, #28]
 800d3c4:	68fb      	ldr	r3, [r7, #12]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	f022 0204 	bic.w	r2, r2, #4
 800d3cc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	69d9      	ldr	r1, [r3, #28]
 800d3d4:	68bb      	ldr	r3, [r7, #8]
 800d3d6:	691a      	ldr	r2, [r3, #16]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
 800d3da:	681b      	ldr	r3, [r3, #0]
 800d3dc:	430a      	orrs	r2, r1
 800d3de:	61da      	str	r2, [r3, #28]
      break;
 800d3e0:	e023      	b.n	800d42a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	68b9      	ldr	r1, [r7, #8]
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	f000 fb1d 	bl	800da28 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800d3ee:	68fb      	ldr	r3, [r7, #12]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	69da      	ldr	r2, [r3, #28]
 800d3f4:	68fb      	ldr	r3, [r7, #12]
 800d3f6:	681b      	ldr	r3, [r3, #0]
 800d3f8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800d3fc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800d3fe:	68fb      	ldr	r3, [r7, #12]
 800d400:	681b      	ldr	r3, [r3, #0]
 800d402:	69da      	ldr	r2, [r3, #28]
 800d404:	68fb      	ldr	r3, [r7, #12]
 800d406:	681b      	ldr	r3, [r3, #0]
 800d408:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800d40c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800d40e:	68fb      	ldr	r3, [r7, #12]
 800d410:	681b      	ldr	r3, [r3, #0]
 800d412:	69d9      	ldr	r1, [r3, #28]
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	691b      	ldr	r3, [r3, #16]
 800d418:	021a      	lsls	r2, r3, #8
 800d41a:	68fb      	ldr	r3, [r7, #12]
 800d41c:	681b      	ldr	r3, [r3, #0]
 800d41e:	430a      	orrs	r2, r1
 800d420:	61da      	str	r2, [r3, #28]
      break;
 800d422:	e002      	b.n	800d42a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800d424:	2301      	movs	r3, #1
 800d426:	75fb      	strb	r3, [r7, #23]
      break;
 800d428:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800d42a:	68fb      	ldr	r3, [r7, #12]
 800d42c:	2200      	movs	r2, #0
 800d42e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d432:	7dfb      	ldrb	r3, [r7, #23]
}
 800d434:	4618      	mov	r0, r3
 800d436:	3718      	adds	r7, #24
 800d438:	46bd      	mov	sp, r7
 800d43a:	bd80      	pop	{r7, pc}

0800d43c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800d43c:	b580      	push	{r7, lr}
 800d43e:	b084      	sub	sp, #16
 800d440:	af00      	add	r7, sp, #0
 800d442:	6078      	str	r0, [r7, #4]
 800d444:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d446:	2300      	movs	r3, #0
 800d448:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d450:	2b01      	cmp	r3, #1
 800d452:	d101      	bne.n	800d458 <HAL_TIM_ConfigClockSource+0x1c>
 800d454:	2302      	movs	r3, #2
 800d456:	e0b4      	b.n	800d5c2 <HAL_TIM_ConfigClockSource+0x186>
 800d458:	687b      	ldr	r3, [r7, #4]
 800d45a:	2201      	movs	r2, #1
 800d45c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800d460:	687b      	ldr	r3, [r7, #4]
 800d462:	2202      	movs	r2, #2
 800d464:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800d468:	687b      	ldr	r3, [r7, #4]
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	689b      	ldr	r3, [r3, #8]
 800d46e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800d470:	68bb      	ldr	r3, [r7, #8]
 800d472:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800d476:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800d478:	68bb      	ldr	r3, [r7, #8]
 800d47a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800d47e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	68ba      	ldr	r2, [r7, #8]
 800d486:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800d488:	683b      	ldr	r3, [r7, #0]
 800d48a:	681b      	ldr	r3, [r3, #0]
 800d48c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d490:	d03e      	beq.n	800d510 <HAL_TIM_ConfigClockSource+0xd4>
 800d492:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d496:	f200 8087 	bhi.w	800d5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d49a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d49e:	f000 8086 	beq.w	800d5ae <HAL_TIM_ConfigClockSource+0x172>
 800d4a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d4a6:	d87f      	bhi.n	800d5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4a8:	2b70      	cmp	r3, #112	; 0x70
 800d4aa:	d01a      	beq.n	800d4e2 <HAL_TIM_ConfigClockSource+0xa6>
 800d4ac:	2b70      	cmp	r3, #112	; 0x70
 800d4ae:	d87b      	bhi.n	800d5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4b0:	2b60      	cmp	r3, #96	; 0x60
 800d4b2:	d050      	beq.n	800d556 <HAL_TIM_ConfigClockSource+0x11a>
 800d4b4:	2b60      	cmp	r3, #96	; 0x60
 800d4b6:	d877      	bhi.n	800d5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4b8:	2b50      	cmp	r3, #80	; 0x50
 800d4ba:	d03c      	beq.n	800d536 <HAL_TIM_ConfigClockSource+0xfa>
 800d4bc:	2b50      	cmp	r3, #80	; 0x50
 800d4be:	d873      	bhi.n	800d5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4c0:	2b40      	cmp	r3, #64	; 0x40
 800d4c2:	d058      	beq.n	800d576 <HAL_TIM_ConfigClockSource+0x13a>
 800d4c4:	2b40      	cmp	r3, #64	; 0x40
 800d4c6:	d86f      	bhi.n	800d5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4c8:	2b30      	cmp	r3, #48	; 0x30
 800d4ca:	d064      	beq.n	800d596 <HAL_TIM_ConfigClockSource+0x15a>
 800d4cc:	2b30      	cmp	r3, #48	; 0x30
 800d4ce:	d86b      	bhi.n	800d5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4d0:	2b20      	cmp	r3, #32
 800d4d2:	d060      	beq.n	800d596 <HAL_TIM_ConfigClockSource+0x15a>
 800d4d4:	2b20      	cmp	r3, #32
 800d4d6:	d867      	bhi.n	800d5a8 <HAL_TIM_ConfigClockSource+0x16c>
 800d4d8:	2b00      	cmp	r3, #0
 800d4da:	d05c      	beq.n	800d596 <HAL_TIM_ConfigClockSource+0x15a>
 800d4dc:	2b10      	cmp	r3, #16
 800d4de:	d05a      	beq.n	800d596 <HAL_TIM_ConfigClockSource+0x15a>
 800d4e0:	e062      	b.n	800d5a8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d4e6:	683b      	ldr	r3, [r7, #0]
 800d4e8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d4ee:	683b      	ldr	r3, [r7, #0]
 800d4f0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d4f2:	f000 fb69 	bl	800dbc8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	681b      	ldr	r3, [r3, #0]
 800d4fa:	689b      	ldr	r3, [r3, #8]
 800d4fc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800d4fe:	68bb      	ldr	r3, [r7, #8]
 800d500:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800d504:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	68ba      	ldr	r2, [r7, #8]
 800d50c:	609a      	str	r2, [r3, #8]
      break;
 800d50e:	e04f      	b.n	800d5b0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800d510:	687b      	ldr	r3, [r7, #4]
 800d512:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800d514:	683b      	ldr	r3, [r7, #0]
 800d516:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800d518:	683b      	ldr	r3, [r7, #0]
 800d51a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800d520:	f000 fb52 	bl	800dbc8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	681b      	ldr	r3, [r3, #0]
 800d528:	689a      	ldr	r2, [r3, #8]
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	681b      	ldr	r3, [r3, #0]
 800d52e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800d532:	609a      	str	r2, [r3, #8]
      break;
 800d534:	e03c      	b.n	800d5b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d536:	687b      	ldr	r3, [r7, #4]
 800d538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d53a:	683b      	ldr	r3, [r7, #0]
 800d53c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d542:	461a      	mov	r2, r3
 800d544:	f000 fac6 	bl	800dad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800d548:	687b      	ldr	r3, [r7, #4]
 800d54a:	681b      	ldr	r3, [r3, #0]
 800d54c:	2150      	movs	r1, #80	; 0x50
 800d54e:	4618      	mov	r0, r3
 800d550:	f000 fb1f 	bl	800db92 <TIM_ITRx_SetConfig>
      break;
 800d554:	e02c      	b.n	800d5b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800d556:	687b      	ldr	r3, [r7, #4]
 800d558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d55a:	683b      	ldr	r3, [r7, #0]
 800d55c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d55e:	683b      	ldr	r3, [r7, #0]
 800d560:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800d562:	461a      	mov	r2, r3
 800d564:	f000 fae5 	bl	800db32 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	2160      	movs	r1, #96	; 0x60
 800d56e:	4618      	mov	r0, r3
 800d570:	f000 fb0f 	bl	800db92 <TIM_ITRx_SetConfig>
      break;
 800d574:	e01c      	b.n	800d5b0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800d576:	687b      	ldr	r3, [r7, #4]
 800d578:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800d57a:	683b      	ldr	r3, [r7, #0]
 800d57c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800d57e:	683b      	ldr	r3, [r7, #0]
 800d580:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800d582:	461a      	mov	r2, r3
 800d584:	f000 faa6 	bl	800dad4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800d588:	687b      	ldr	r3, [r7, #4]
 800d58a:	681b      	ldr	r3, [r3, #0]
 800d58c:	2140      	movs	r1, #64	; 0x40
 800d58e:	4618      	mov	r0, r3
 800d590:	f000 faff 	bl	800db92 <TIM_ITRx_SetConfig>
      break;
 800d594:	e00c      	b.n	800d5b0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	681a      	ldr	r2, [r3, #0]
 800d59a:	683b      	ldr	r3, [r7, #0]
 800d59c:	681b      	ldr	r3, [r3, #0]
 800d59e:	4619      	mov	r1, r3
 800d5a0:	4610      	mov	r0, r2
 800d5a2:	f000 faf6 	bl	800db92 <TIM_ITRx_SetConfig>
      break;
 800d5a6:	e003      	b.n	800d5b0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800d5a8:	2301      	movs	r3, #1
 800d5aa:	73fb      	strb	r3, [r7, #15]
      break;
 800d5ac:	e000      	b.n	800d5b0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800d5ae:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800d5b8:	687b      	ldr	r3, [r7, #4]
 800d5ba:	2200      	movs	r2, #0
 800d5bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800d5c0:	7bfb      	ldrb	r3, [r7, #15]
}
 800d5c2:	4618      	mov	r0, r3
 800d5c4:	3710      	adds	r7, #16
 800d5c6:	46bd      	mov	sp, r7
 800d5c8:	bd80      	pop	{r7, pc}

0800d5ca <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800d5ca:	b480      	push	{r7}
 800d5cc:	b083      	sub	sp, #12
 800d5ce:	af00      	add	r7, sp, #0
 800d5d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800d5d2:	bf00      	nop
 800d5d4:	370c      	adds	r7, #12
 800d5d6:	46bd      	mov	sp, r7
 800d5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5dc:	4770      	bx	lr

0800d5de <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800d5de:	b480      	push	{r7}
 800d5e0:	b083      	sub	sp, #12
 800d5e2:	af00      	add	r7, sp, #0
 800d5e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800d5e6:	bf00      	nop
 800d5e8:	370c      	adds	r7, #12
 800d5ea:	46bd      	mov	sp, r7
 800d5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5f0:	4770      	bx	lr

0800d5f2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800d5f2:	b480      	push	{r7}
 800d5f4:	b083      	sub	sp, #12
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800d5fa:	bf00      	nop
 800d5fc:	370c      	adds	r7, #12
 800d5fe:	46bd      	mov	sp, r7
 800d600:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d604:	4770      	bx	lr

0800d606 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800d606:	b480      	push	{r7}
 800d608:	b083      	sub	sp, #12
 800d60a:	af00      	add	r7, sp, #0
 800d60c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800d60e:	bf00      	nop
 800d610:	370c      	adds	r7, #12
 800d612:	46bd      	mov	sp, r7
 800d614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d618:	4770      	bx	lr
	...

0800d61c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800d61c:	b480      	push	{r7}
 800d61e:	b085      	sub	sp, #20
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800d626:	687b      	ldr	r3, [r7, #4]
 800d628:	681b      	ldr	r3, [r3, #0]
 800d62a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800d62c:	687b      	ldr	r3, [r7, #4]
 800d62e:	4a46      	ldr	r2, [pc, #280]	; (800d748 <TIM_Base_SetConfig+0x12c>)
 800d630:	4293      	cmp	r3, r2
 800d632:	d013      	beq.n	800d65c <TIM_Base_SetConfig+0x40>
 800d634:	687b      	ldr	r3, [r7, #4]
 800d636:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d63a:	d00f      	beq.n	800d65c <TIM_Base_SetConfig+0x40>
 800d63c:	687b      	ldr	r3, [r7, #4]
 800d63e:	4a43      	ldr	r2, [pc, #268]	; (800d74c <TIM_Base_SetConfig+0x130>)
 800d640:	4293      	cmp	r3, r2
 800d642:	d00b      	beq.n	800d65c <TIM_Base_SetConfig+0x40>
 800d644:	687b      	ldr	r3, [r7, #4]
 800d646:	4a42      	ldr	r2, [pc, #264]	; (800d750 <TIM_Base_SetConfig+0x134>)
 800d648:	4293      	cmp	r3, r2
 800d64a:	d007      	beq.n	800d65c <TIM_Base_SetConfig+0x40>
 800d64c:	687b      	ldr	r3, [r7, #4]
 800d64e:	4a41      	ldr	r2, [pc, #260]	; (800d754 <TIM_Base_SetConfig+0x138>)
 800d650:	4293      	cmp	r3, r2
 800d652:	d003      	beq.n	800d65c <TIM_Base_SetConfig+0x40>
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	4a40      	ldr	r2, [pc, #256]	; (800d758 <TIM_Base_SetConfig+0x13c>)
 800d658:	4293      	cmp	r3, r2
 800d65a:	d108      	bne.n	800d66e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800d65c:	68fb      	ldr	r3, [r7, #12]
 800d65e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800d664:	683b      	ldr	r3, [r7, #0]
 800d666:	685b      	ldr	r3, [r3, #4]
 800d668:	68fa      	ldr	r2, [r7, #12]
 800d66a:	4313      	orrs	r3, r2
 800d66c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800d66e:	687b      	ldr	r3, [r7, #4]
 800d670:	4a35      	ldr	r2, [pc, #212]	; (800d748 <TIM_Base_SetConfig+0x12c>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d02b      	beq.n	800d6ce <TIM_Base_SetConfig+0xb2>
 800d676:	687b      	ldr	r3, [r7, #4]
 800d678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800d67c:	d027      	beq.n	800d6ce <TIM_Base_SetConfig+0xb2>
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	4a32      	ldr	r2, [pc, #200]	; (800d74c <TIM_Base_SetConfig+0x130>)
 800d682:	4293      	cmp	r3, r2
 800d684:	d023      	beq.n	800d6ce <TIM_Base_SetConfig+0xb2>
 800d686:	687b      	ldr	r3, [r7, #4]
 800d688:	4a31      	ldr	r2, [pc, #196]	; (800d750 <TIM_Base_SetConfig+0x134>)
 800d68a:	4293      	cmp	r3, r2
 800d68c:	d01f      	beq.n	800d6ce <TIM_Base_SetConfig+0xb2>
 800d68e:	687b      	ldr	r3, [r7, #4]
 800d690:	4a30      	ldr	r2, [pc, #192]	; (800d754 <TIM_Base_SetConfig+0x138>)
 800d692:	4293      	cmp	r3, r2
 800d694:	d01b      	beq.n	800d6ce <TIM_Base_SetConfig+0xb2>
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	4a2f      	ldr	r2, [pc, #188]	; (800d758 <TIM_Base_SetConfig+0x13c>)
 800d69a:	4293      	cmp	r3, r2
 800d69c:	d017      	beq.n	800d6ce <TIM_Base_SetConfig+0xb2>
 800d69e:	687b      	ldr	r3, [r7, #4]
 800d6a0:	4a2e      	ldr	r2, [pc, #184]	; (800d75c <TIM_Base_SetConfig+0x140>)
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	d013      	beq.n	800d6ce <TIM_Base_SetConfig+0xb2>
 800d6a6:	687b      	ldr	r3, [r7, #4]
 800d6a8:	4a2d      	ldr	r2, [pc, #180]	; (800d760 <TIM_Base_SetConfig+0x144>)
 800d6aa:	4293      	cmp	r3, r2
 800d6ac:	d00f      	beq.n	800d6ce <TIM_Base_SetConfig+0xb2>
 800d6ae:	687b      	ldr	r3, [r7, #4]
 800d6b0:	4a2c      	ldr	r2, [pc, #176]	; (800d764 <TIM_Base_SetConfig+0x148>)
 800d6b2:	4293      	cmp	r3, r2
 800d6b4:	d00b      	beq.n	800d6ce <TIM_Base_SetConfig+0xb2>
 800d6b6:	687b      	ldr	r3, [r7, #4]
 800d6b8:	4a2b      	ldr	r2, [pc, #172]	; (800d768 <TIM_Base_SetConfig+0x14c>)
 800d6ba:	4293      	cmp	r3, r2
 800d6bc:	d007      	beq.n	800d6ce <TIM_Base_SetConfig+0xb2>
 800d6be:	687b      	ldr	r3, [r7, #4]
 800d6c0:	4a2a      	ldr	r2, [pc, #168]	; (800d76c <TIM_Base_SetConfig+0x150>)
 800d6c2:	4293      	cmp	r3, r2
 800d6c4:	d003      	beq.n	800d6ce <TIM_Base_SetConfig+0xb2>
 800d6c6:	687b      	ldr	r3, [r7, #4]
 800d6c8:	4a29      	ldr	r2, [pc, #164]	; (800d770 <TIM_Base_SetConfig+0x154>)
 800d6ca:	4293      	cmp	r3, r2
 800d6cc:	d108      	bne.n	800d6e0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800d6ce:	68fb      	ldr	r3, [r7, #12]
 800d6d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d6d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800d6d6:	683b      	ldr	r3, [r7, #0]
 800d6d8:	68db      	ldr	r3, [r3, #12]
 800d6da:	68fa      	ldr	r2, [r7, #12]
 800d6dc:	4313      	orrs	r3, r2
 800d6de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800d6e6:	683b      	ldr	r3, [r7, #0]
 800d6e8:	695b      	ldr	r3, [r3, #20]
 800d6ea:	4313      	orrs	r3, r2
 800d6ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800d6ee:	687b      	ldr	r3, [r7, #4]
 800d6f0:	68fa      	ldr	r2, [r7, #12]
 800d6f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800d6f4:	683b      	ldr	r3, [r7, #0]
 800d6f6:	689a      	ldr	r2, [r3, #8]
 800d6f8:	687b      	ldr	r3, [r7, #4]
 800d6fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800d6fc:	683b      	ldr	r3, [r7, #0]
 800d6fe:	681a      	ldr	r2, [r3, #0]
 800d700:	687b      	ldr	r3, [r7, #4]
 800d702:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800d704:	687b      	ldr	r3, [r7, #4]
 800d706:	4a10      	ldr	r2, [pc, #64]	; (800d748 <TIM_Base_SetConfig+0x12c>)
 800d708:	4293      	cmp	r3, r2
 800d70a:	d003      	beq.n	800d714 <TIM_Base_SetConfig+0xf8>
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	4a12      	ldr	r2, [pc, #72]	; (800d758 <TIM_Base_SetConfig+0x13c>)
 800d710:	4293      	cmp	r3, r2
 800d712:	d103      	bne.n	800d71c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	691a      	ldr	r2, [r3, #16]
 800d718:	687b      	ldr	r3, [r7, #4]
 800d71a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2201      	movs	r2, #1
 800d720:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800d722:	687b      	ldr	r3, [r7, #4]
 800d724:	691b      	ldr	r3, [r3, #16]
 800d726:	f003 0301 	and.w	r3, r3, #1
 800d72a:	2b01      	cmp	r3, #1
 800d72c:	d105      	bne.n	800d73a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800d72e:	687b      	ldr	r3, [r7, #4]
 800d730:	691b      	ldr	r3, [r3, #16]
 800d732:	f023 0201 	bic.w	r2, r3, #1
 800d736:	687b      	ldr	r3, [r7, #4]
 800d738:	611a      	str	r2, [r3, #16]
  }
}
 800d73a:	bf00      	nop
 800d73c:	3714      	adds	r7, #20
 800d73e:	46bd      	mov	sp, r7
 800d740:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d744:	4770      	bx	lr
 800d746:	bf00      	nop
 800d748:	40010000 	.word	0x40010000
 800d74c:	40000400 	.word	0x40000400
 800d750:	40000800 	.word	0x40000800
 800d754:	40000c00 	.word	0x40000c00
 800d758:	40010400 	.word	0x40010400
 800d75c:	40014000 	.word	0x40014000
 800d760:	40014400 	.word	0x40014400
 800d764:	40014800 	.word	0x40014800
 800d768:	40001800 	.word	0x40001800
 800d76c:	40001c00 	.word	0x40001c00
 800d770:	40002000 	.word	0x40002000

0800d774 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d774:	b480      	push	{r7}
 800d776:	b087      	sub	sp, #28
 800d778:	af00      	add	r7, sp, #0
 800d77a:	6078      	str	r0, [r7, #4]
 800d77c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	6a1b      	ldr	r3, [r3, #32]
 800d782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	6a1b      	ldr	r3, [r3, #32]
 800d788:	f023 0201 	bic.w	r2, r3, #1
 800d78c:	687b      	ldr	r3, [r7, #4]
 800d78e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d790:	687b      	ldr	r3, [r7, #4]
 800d792:	685b      	ldr	r3, [r3, #4]
 800d794:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d796:	687b      	ldr	r3, [r7, #4]
 800d798:	699b      	ldr	r3, [r3, #24]
 800d79a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d7a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800d7a4:	68fb      	ldr	r3, [r7, #12]
 800d7a6:	f023 0303 	bic.w	r3, r3, #3
 800d7aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d7ac:	683b      	ldr	r3, [r7, #0]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	68fa      	ldr	r2, [r7, #12]
 800d7b2:	4313      	orrs	r3, r2
 800d7b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800d7b6:	697b      	ldr	r3, [r7, #20]
 800d7b8:	f023 0302 	bic.w	r3, r3, #2
 800d7bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800d7be:	683b      	ldr	r3, [r7, #0]
 800d7c0:	689b      	ldr	r3, [r3, #8]
 800d7c2:	697a      	ldr	r2, [r7, #20]
 800d7c4:	4313      	orrs	r3, r2
 800d7c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800d7c8:	687b      	ldr	r3, [r7, #4]
 800d7ca:	4a20      	ldr	r2, [pc, #128]	; (800d84c <TIM_OC1_SetConfig+0xd8>)
 800d7cc:	4293      	cmp	r3, r2
 800d7ce:	d003      	beq.n	800d7d8 <TIM_OC1_SetConfig+0x64>
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	4a1f      	ldr	r2, [pc, #124]	; (800d850 <TIM_OC1_SetConfig+0xdc>)
 800d7d4:	4293      	cmp	r3, r2
 800d7d6:	d10c      	bne.n	800d7f2 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800d7d8:	697b      	ldr	r3, [r7, #20]
 800d7da:	f023 0308 	bic.w	r3, r3, #8
 800d7de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800d7e0:	683b      	ldr	r3, [r7, #0]
 800d7e2:	68db      	ldr	r3, [r3, #12]
 800d7e4:	697a      	ldr	r2, [r7, #20]
 800d7e6:	4313      	orrs	r3, r2
 800d7e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800d7ea:	697b      	ldr	r3, [r7, #20]
 800d7ec:	f023 0304 	bic.w	r3, r3, #4
 800d7f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d7f2:	687b      	ldr	r3, [r7, #4]
 800d7f4:	4a15      	ldr	r2, [pc, #84]	; (800d84c <TIM_OC1_SetConfig+0xd8>)
 800d7f6:	4293      	cmp	r3, r2
 800d7f8:	d003      	beq.n	800d802 <TIM_OC1_SetConfig+0x8e>
 800d7fa:	687b      	ldr	r3, [r7, #4]
 800d7fc:	4a14      	ldr	r2, [pc, #80]	; (800d850 <TIM_OC1_SetConfig+0xdc>)
 800d7fe:	4293      	cmp	r3, r2
 800d800:	d111      	bne.n	800d826 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800d802:	693b      	ldr	r3, [r7, #16]
 800d804:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d808:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800d80a:	693b      	ldr	r3, [r7, #16]
 800d80c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d810:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800d812:	683b      	ldr	r3, [r7, #0]
 800d814:	695b      	ldr	r3, [r3, #20]
 800d816:	693a      	ldr	r2, [r7, #16]
 800d818:	4313      	orrs	r3, r2
 800d81a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800d81c:	683b      	ldr	r3, [r7, #0]
 800d81e:	699b      	ldr	r3, [r3, #24]
 800d820:	693a      	ldr	r2, [r7, #16]
 800d822:	4313      	orrs	r3, r2
 800d824:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d826:	687b      	ldr	r3, [r7, #4]
 800d828:	693a      	ldr	r2, [r7, #16]
 800d82a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d82c:	687b      	ldr	r3, [r7, #4]
 800d82e:	68fa      	ldr	r2, [r7, #12]
 800d830:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800d832:	683b      	ldr	r3, [r7, #0]
 800d834:	685a      	ldr	r2, [r3, #4]
 800d836:	687b      	ldr	r3, [r7, #4]
 800d838:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d83a:	687b      	ldr	r3, [r7, #4]
 800d83c:	697a      	ldr	r2, [r7, #20]
 800d83e:	621a      	str	r2, [r3, #32]
}
 800d840:	bf00      	nop
 800d842:	371c      	adds	r7, #28
 800d844:	46bd      	mov	sp, r7
 800d846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84a:	4770      	bx	lr
 800d84c:	40010000 	.word	0x40010000
 800d850:	40010400 	.word	0x40010400

0800d854 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d854:	b480      	push	{r7}
 800d856:	b087      	sub	sp, #28
 800d858:	af00      	add	r7, sp, #0
 800d85a:	6078      	str	r0, [r7, #4]
 800d85c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	6a1b      	ldr	r3, [r3, #32]
 800d862:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	6a1b      	ldr	r3, [r3, #32]
 800d868:	f023 0210 	bic.w	r2, r3, #16
 800d86c:	687b      	ldr	r3, [r7, #4]
 800d86e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	685b      	ldr	r3, [r3, #4]
 800d874:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800d876:	687b      	ldr	r3, [r7, #4]
 800d878:	699b      	ldr	r3, [r3, #24]
 800d87a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800d882:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800d884:	68fb      	ldr	r3, [r7, #12]
 800d886:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800d88a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800d88c:	683b      	ldr	r3, [r7, #0]
 800d88e:	681b      	ldr	r3, [r3, #0]
 800d890:	021b      	lsls	r3, r3, #8
 800d892:	68fa      	ldr	r2, [r7, #12]
 800d894:	4313      	orrs	r3, r2
 800d896:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800d898:	697b      	ldr	r3, [r7, #20]
 800d89a:	f023 0320 	bic.w	r3, r3, #32
 800d89e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	689b      	ldr	r3, [r3, #8]
 800d8a4:	011b      	lsls	r3, r3, #4
 800d8a6:	697a      	ldr	r2, [r7, #20]
 800d8a8:	4313      	orrs	r3, r2
 800d8aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	4a22      	ldr	r2, [pc, #136]	; (800d938 <TIM_OC2_SetConfig+0xe4>)
 800d8b0:	4293      	cmp	r3, r2
 800d8b2:	d003      	beq.n	800d8bc <TIM_OC2_SetConfig+0x68>
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	4a21      	ldr	r2, [pc, #132]	; (800d93c <TIM_OC2_SetConfig+0xe8>)
 800d8b8:	4293      	cmp	r3, r2
 800d8ba:	d10d      	bne.n	800d8d8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800d8bc:	697b      	ldr	r3, [r7, #20]
 800d8be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d8c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	68db      	ldr	r3, [r3, #12]
 800d8c8:	011b      	lsls	r3, r3, #4
 800d8ca:	697a      	ldr	r2, [r7, #20]
 800d8cc:	4313      	orrs	r3, r2
 800d8ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800d8d0:	697b      	ldr	r3, [r7, #20]
 800d8d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d8d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	4a17      	ldr	r2, [pc, #92]	; (800d938 <TIM_OC2_SetConfig+0xe4>)
 800d8dc:	4293      	cmp	r3, r2
 800d8de:	d003      	beq.n	800d8e8 <TIM_OC2_SetConfig+0x94>
 800d8e0:	687b      	ldr	r3, [r7, #4]
 800d8e2:	4a16      	ldr	r2, [pc, #88]	; (800d93c <TIM_OC2_SetConfig+0xe8>)
 800d8e4:	4293      	cmp	r3, r2
 800d8e6:	d113      	bne.n	800d910 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800d8e8:	693b      	ldr	r3, [r7, #16]
 800d8ea:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d8ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800d8f0:	693b      	ldr	r3, [r7, #16]
 800d8f2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d8f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800d8f8:	683b      	ldr	r3, [r7, #0]
 800d8fa:	695b      	ldr	r3, [r3, #20]
 800d8fc:	009b      	lsls	r3, r3, #2
 800d8fe:	693a      	ldr	r2, [r7, #16]
 800d900:	4313      	orrs	r3, r2
 800d902:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800d904:	683b      	ldr	r3, [r7, #0]
 800d906:	699b      	ldr	r3, [r3, #24]
 800d908:	009b      	lsls	r3, r3, #2
 800d90a:	693a      	ldr	r2, [r7, #16]
 800d90c:	4313      	orrs	r3, r2
 800d90e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d910:	687b      	ldr	r3, [r7, #4]
 800d912:	693a      	ldr	r2, [r7, #16]
 800d914:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	68fa      	ldr	r2, [r7, #12]
 800d91a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800d91c:	683b      	ldr	r3, [r7, #0]
 800d91e:	685a      	ldr	r2, [r3, #4]
 800d920:	687b      	ldr	r3, [r7, #4]
 800d922:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	697a      	ldr	r2, [r7, #20]
 800d928:	621a      	str	r2, [r3, #32]
}
 800d92a:	bf00      	nop
 800d92c:	371c      	adds	r7, #28
 800d92e:	46bd      	mov	sp, r7
 800d930:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d934:	4770      	bx	lr
 800d936:	bf00      	nop
 800d938:	40010000 	.word	0x40010000
 800d93c:	40010400 	.word	0x40010400

0800d940 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800d940:	b480      	push	{r7}
 800d942:	b087      	sub	sp, #28
 800d944:	af00      	add	r7, sp, #0
 800d946:	6078      	str	r0, [r7, #4]
 800d948:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	6a1b      	ldr	r3, [r3, #32]
 800d94e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	6a1b      	ldr	r3, [r3, #32]
 800d954:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d958:	687b      	ldr	r3, [r7, #4]
 800d95a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800d95c:	687b      	ldr	r3, [r7, #4]
 800d95e:	685b      	ldr	r3, [r3, #4]
 800d960:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	69db      	ldr	r3, [r3, #28]
 800d966:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800d968:	68fb      	ldr	r3, [r7, #12]
 800d96a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800d96e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800d970:	68fb      	ldr	r3, [r7, #12]
 800d972:	f023 0303 	bic.w	r3, r3, #3
 800d976:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800d978:	683b      	ldr	r3, [r7, #0]
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	68fa      	ldr	r2, [r7, #12]
 800d97e:	4313      	orrs	r3, r2
 800d980:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800d982:	697b      	ldr	r3, [r7, #20]
 800d984:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800d988:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800d98a:	683b      	ldr	r3, [r7, #0]
 800d98c:	689b      	ldr	r3, [r3, #8]
 800d98e:	021b      	lsls	r3, r3, #8
 800d990:	697a      	ldr	r2, [r7, #20]
 800d992:	4313      	orrs	r3, r2
 800d994:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800d996:	687b      	ldr	r3, [r7, #4]
 800d998:	4a21      	ldr	r2, [pc, #132]	; (800da20 <TIM_OC3_SetConfig+0xe0>)
 800d99a:	4293      	cmp	r3, r2
 800d99c:	d003      	beq.n	800d9a6 <TIM_OC3_SetConfig+0x66>
 800d99e:	687b      	ldr	r3, [r7, #4]
 800d9a0:	4a20      	ldr	r2, [pc, #128]	; (800da24 <TIM_OC3_SetConfig+0xe4>)
 800d9a2:	4293      	cmp	r3, r2
 800d9a4:	d10d      	bne.n	800d9c2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800d9a6:	697b      	ldr	r3, [r7, #20]
 800d9a8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800d9ac:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800d9ae:	683b      	ldr	r3, [r7, #0]
 800d9b0:	68db      	ldr	r3, [r3, #12]
 800d9b2:	021b      	lsls	r3, r3, #8
 800d9b4:	697a      	ldr	r2, [r7, #20]
 800d9b6:	4313      	orrs	r3, r2
 800d9b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800d9ba:	697b      	ldr	r3, [r7, #20]
 800d9bc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800d9c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800d9c2:	687b      	ldr	r3, [r7, #4]
 800d9c4:	4a16      	ldr	r2, [pc, #88]	; (800da20 <TIM_OC3_SetConfig+0xe0>)
 800d9c6:	4293      	cmp	r3, r2
 800d9c8:	d003      	beq.n	800d9d2 <TIM_OC3_SetConfig+0x92>
 800d9ca:	687b      	ldr	r3, [r7, #4]
 800d9cc:	4a15      	ldr	r2, [pc, #84]	; (800da24 <TIM_OC3_SetConfig+0xe4>)
 800d9ce:	4293      	cmp	r3, r2
 800d9d0:	d113      	bne.n	800d9fa <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800d9d2:	693b      	ldr	r3, [r7, #16]
 800d9d4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800d9d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800d9e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	695b      	ldr	r3, [r3, #20]
 800d9e6:	011b      	lsls	r3, r3, #4
 800d9e8:	693a      	ldr	r2, [r7, #16]
 800d9ea:	4313      	orrs	r3, r2
 800d9ec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800d9ee:	683b      	ldr	r3, [r7, #0]
 800d9f0:	699b      	ldr	r3, [r3, #24]
 800d9f2:	011b      	lsls	r3, r3, #4
 800d9f4:	693a      	ldr	r2, [r7, #16]
 800d9f6:	4313      	orrs	r3, r2
 800d9f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	693a      	ldr	r2, [r7, #16]
 800d9fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800da00:	687b      	ldr	r3, [r7, #4]
 800da02:	68fa      	ldr	r2, [r7, #12]
 800da04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800da06:	683b      	ldr	r3, [r7, #0]
 800da08:	685a      	ldr	r2, [r3, #4]
 800da0a:	687b      	ldr	r3, [r7, #4]
 800da0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800da0e:	687b      	ldr	r3, [r7, #4]
 800da10:	697a      	ldr	r2, [r7, #20]
 800da12:	621a      	str	r2, [r3, #32]
}
 800da14:	bf00      	nop
 800da16:	371c      	adds	r7, #28
 800da18:	46bd      	mov	sp, r7
 800da1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da1e:	4770      	bx	lr
 800da20:	40010000 	.word	0x40010000
 800da24:	40010400 	.word	0x40010400

0800da28 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800da28:	b480      	push	{r7}
 800da2a:	b087      	sub	sp, #28
 800da2c:	af00      	add	r7, sp, #0
 800da2e:	6078      	str	r0, [r7, #4]
 800da30:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800da32:	687b      	ldr	r3, [r7, #4]
 800da34:	6a1b      	ldr	r3, [r3, #32]
 800da36:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	6a1b      	ldr	r3, [r3, #32]
 800da3c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	685b      	ldr	r3, [r3, #4]
 800da48:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	69db      	ldr	r3, [r3, #28]
 800da4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800da50:	68fb      	ldr	r3, [r7, #12]
 800da52:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800da56:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800da58:	68fb      	ldr	r3, [r7, #12]
 800da5a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800da5e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800da60:	683b      	ldr	r3, [r7, #0]
 800da62:	681b      	ldr	r3, [r3, #0]
 800da64:	021b      	lsls	r3, r3, #8
 800da66:	68fa      	ldr	r2, [r7, #12]
 800da68:	4313      	orrs	r3, r2
 800da6a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800da72:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800da74:	683b      	ldr	r3, [r7, #0]
 800da76:	689b      	ldr	r3, [r3, #8]
 800da78:	031b      	lsls	r3, r3, #12
 800da7a:	693a      	ldr	r2, [r7, #16]
 800da7c:	4313      	orrs	r3, r2
 800da7e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800da80:	687b      	ldr	r3, [r7, #4]
 800da82:	4a12      	ldr	r2, [pc, #72]	; (800dacc <TIM_OC4_SetConfig+0xa4>)
 800da84:	4293      	cmp	r3, r2
 800da86:	d003      	beq.n	800da90 <TIM_OC4_SetConfig+0x68>
 800da88:	687b      	ldr	r3, [r7, #4]
 800da8a:	4a11      	ldr	r2, [pc, #68]	; (800dad0 <TIM_OC4_SetConfig+0xa8>)
 800da8c:	4293      	cmp	r3, r2
 800da8e:	d109      	bne.n	800daa4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800da90:	697b      	ldr	r3, [r7, #20]
 800da92:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800da96:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800da98:	683b      	ldr	r3, [r7, #0]
 800da9a:	695b      	ldr	r3, [r3, #20]
 800da9c:	019b      	lsls	r3, r3, #6
 800da9e:	697a      	ldr	r2, [r7, #20]
 800daa0:	4313      	orrs	r3, r2
 800daa2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800daa4:	687b      	ldr	r3, [r7, #4]
 800daa6:	697a      	ldr	r2, [r7, #20]
 800daa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	68fa      	ldr	r2, [r7, #12]
 800daae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800dab0:	683b      	ldr	r3, [r7, #0]
 800dab2:	685a      	ldr	r2, [r3, #4]
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800dab8:	687b      	ldr	r3, [r7, #4]
 800daba:	693a      	ldr	r2, [r7, #16]
 800dabc:	621a      	str	r2, [r3, #32]
}
 800dabe:	bf00      	nop
 800dac0:	371c      	adds	r7, #28
 800dac2:	46bd      	mov	sp, r7
 800dac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dac8:	4770      	bx	lr
 800daca:	bf00      	nop
 800dacc:	40010000 	.word	0x40010000
 800dad0:	40010400 	.word	0x40010400

0800dad4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800dad4:	b480      	push	{r7}
 800dad6:	b087      	sub	sp, #28
 800dad8:	af00      	add	r7, sp, #0
 800dada:	60f8      	str	r0, [r7, #12]
 800dadc:	60b9      	str	r1, [r7, #8]
 800dade:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800dae0:	68fb      	ldr	r3, [r7, #12]
 800dae2:	6a1b      	ldr	r3, [r3, #32]
 800dae4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800dae6:	68fb      	ldr	r3, [r7, #12]
 800dae8:	6a1b      	ldr	r3, [r3, #32]
 800daea:	f023 0201 	bic.w	r2, r3, #1
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	699b      	ldr	r3, [r3, #24]
 800daf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800daf8:	693b      	ldr	r3, [r7, #16]
 800dafa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800dafe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800db00:	687b      	ldr	r3, [r7, #4]
 800db02:	011b      	lsls	r3, r3, #4
 800db04:	693a      	ldr	r2, [r7, #16]
 800db06:	4313      	orrs	r3, r2
 800db08:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	f023 030a 	bic.w	r3, r3, #10
 800db10:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800db12:	697a      	ldr	r2, [r7, #20]
 800db14:	68bb      	ldr	r3, [r7, #8]
 800db16:	4313      	orrs	r3, r2
 800db18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800db1a:	68fb      	ldr	r3, [r7, #12]
 800db1c:	693a      	ldr	r2, [r7, #16]
 800db1e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	697a      	ldr	r2, [r7, #20]
 800db24:	621a      	str	r2, [r3, #32]
}
 800db26:	bf00      	nop
 800db28:	371c      	adds	r7, #28
 800db2a:	46bd      	mov	sp, r7
 800db2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db30:	4770      	bx	lr

0800db32 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800db32:	b480      	push	{r7}
 800db34:	b087      	sub	sp, #28
 800db36:	af00      	add	r7, sp, #0
 800db38:	60f8      	str	r0, [r7, #12]
 800db3a:	60b9      	str	r1, [r7, #8]
 800db3c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800db3e:	68fb      	ldr	r3, [r7, #12]
 800db40:	6a1b      	ldr	r3, [r3, #32]
 800db42:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800db44:	68fb      	ldr	r3, [r7, #12]
 800db46:	6a1b      	ldr	r3, [r3, #32]
 800db48:	f023 0210 	bic.w	r2, r3, #16
 800db4c:	68fb      	ldr	r3, [r7, #12]
 800db4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	699b      	ldr	r3, [r3, #24]
 800db54:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800db56:	693b      	ldr	r3, [r7, #16]
 800db58:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800db5c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800db5e:	687b      	ldr	r3, [r7, #4]
 800db60:	031b      	lsls	r3, r3, #12
 800db62:	693a      	ldr	r2, [r7, #16]
 800db64:	4313      	orrs	r3, r2
 800db66:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800db68:	697b      	ldr	r3, [r7, #20]
 800db6a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800db6e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800db70:	68bb      	ldr	r3, [r7, #8]
 800db72:	011b      	lsls	r3, r3, #4
 800db74:	697a      	ldr	r2, [r7, #20]
 800db76:	4313      	orrs	r3, r2
 800db78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800db7a:	68fb      	ldr	r3, [r7, #12]
 800db7c:	693a      	ldr	r2, [r7, #16]
 800db7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	697a      	ldr	r2, [r7, #20]
 800db84:	621a      	str	r2, [r3, #32]
}
 800db86:	bf00      	nop
 800db88:	371c      	adds	r7, #28
 800db8a:	46bd      	mov	sp, r7
 800db8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db90:	4770      	bx	lr

0800db92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800db92:	b480      	push	{r7}
 800db94:	b085      	sub	sp, #20
 800db96:	af00      	add	r7, sp, #0
 800db98:	6078      	str	r0, [r7, #4]
 800db9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	689b      	ldr	r3, [r3, #8]
 800dba0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800dba2:	68fb      	ldr	r3, [r7, #12]
 800dba4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dba8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800dbaa:	683a      	ldr	r2, [r7, #0]
 800dbac:	68fb      	ldr	r3, [r7, #12]
 800dbae:	4313      	orrs	r3, r2
 800dbb0:	f043 0307 	orr.w	r3, r3, #7
 800dbb4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	68fa      	ldr	r2, [r7, #12]
 800dbba:	609a      	str	r2, [r3, #8]
}
 800dbbc:	bf00      	nop
 800dbbe:	3714      	adds	r7, #20
 800dbc0:	46bd      	mov	sp, r7
 800dbc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbc6:	4770      	bx	lr

0800dbc8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800dbc8:	b480      	push	{r7}
 800dbca:	b087      	sub	sp, #28
 800dbcc:	af00      	add	r7, sp, #0
 800dbce:	60f8      	str	r0, [r7, #12]
 800dbd0:	60b9      	str	r1, [r7, #8]
 800dbd2:	607a      	str	r2, [r7, #4]
 800dbd4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	689b      	ldr	r3, [r3, #8]
 800dbda:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800dbdc:	697b      	ldr	r3, [r7, #20]
 800dbde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800dbe2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800dbe4:	683b      	ldr	r3, [r7, #0]
 800dbe6:	021a      	lsls	r2, r3, #8
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	431a      	orrs	r2, r3
 800dbec:	68bb      	ldr	r3, [r7, #8]
 800dbee:	4313      	orrs	r3, r2
 800dbf0:	697a      	ldr	r2, [r7, #20]
 800dbf2:	4313      	orrs	r3, r2
 800dbf4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	697a      	ldr	r2, [r7, #20]
 800dbfa:	609a      	str	r2, [r3, #8]
}
 800dbfc:	bf00      	nop
 800dbfe:	371c      	adds	r7, #28
 800dc00:	46bd      	mov	sp, r7
 800dc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc06:	4770      	bx	lr

0800dc08 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800dc08:	b480      	push	{r7}
 800dc0a:	b087      	sub	sp, #28
 800dc0c:	af00      	add	r7, sp, #0
 800dc0e:	60f8      	str	r0, [r7, #12]
 800dc10:	60b9      	str	r1, [r7, #8]
 800dc12:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800dc14:	68bb      	ldr	r3, [r7, #8]
 800dc16:	f003 031f 	and.w	r3, r3, #31
 800dc1a:	2201      	movs	r2, #1
 800dc1c:	fa02 f303 	lsl.w	r3, r2, r3
 800dc20:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	6a1a      	ldr	r2, [r3, #32]
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	43db      	mvns	r3, r3
 800dc2a:	401a      	ands	r2, r3
 800dc2c:	68fb      	ldr	r3, [r7, #12]
 800dc2e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800dc30:	68fb      	ldr	r3, [r7, #12]
 800dc32:	6a1a      	ldr	r2, [r3, #32]
 800dc34:	68bb      	ldr	r3, [r7, #8]
 800dc36:	f003 031f 	and.w	r3, r3, #31
 800dc3a:	6879      	ldr	r1, [r7, #4]
 800dc3c:	fa01 f303 	lsl.w	r3, r1, r3
 800dc40:	431a      	orrs	r2, r3
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	621a      	str	r2, [r3, #32]
}
 800dc46:	bf00      	nop
 800dc48:	371c      	adds	r7, #28
 800dc4a:	46bd      	mov	sp, r7
 800dc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc50:	4770      	bx	lr
	...

0800dc54 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800dc54:	b480      	push	{r7}
 800dc56:	b085      	sub	sp, #20
 800dc58:	af00      	add	r7, sp, #0
 800dc5a:	6078      	str	r0, [r7, #4]
 800dc5c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800dc5e:	687b      	ldr	r3, [r7, #4]
 800dc60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dc64:	2b01      	cmp	r3, #1
 800dc66:	d101      	bne.n	800dc6c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800dc68:	2302      	movs	r3, #2
 800dc6a:	e05a      	b.n	800dd22 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	2201      	movs	r2, #1
 800dc70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	2202      	movs	r2, #2
 800dc78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	681b      	ldr	r3, [r3, #0]
 800dc80:	685b      	ldr	r3, [r3, #4]
 800dc82:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	689b      	ldr	r3, [r3, #8]
 800dc8a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800dc8c:	68fb      	ldr	r3, [r7, #12]
 800dc8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800dc92:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800dc94:	683b      	ldr	r3, [r7, #0]
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	68fa      	ldr	r2, [r7, #12]
 800dc9a:	4313      	orrs	r3, r2
 800dc9c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800dc9e:	687b      	ldr	r3, [r7, #4]
 800dca0:	681b      	ldr	r3, [r3, #0]
 800dca2:	68fa      	ldr	r2, [r7, #12]
 800dca4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800dca6:	687b      	ldr	r3, [r7, #4]
 800dca8:	681b      	ldr	r3, [r3, #0]
 800dcaa:	4a21      	ldr	r2, [pc, #132]	; (800dd30 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800dcac:	4293      	cmp	r3, r2
 800dcae:	d022      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	681b      	ldr	r3, [r3, #0]
 800dcb4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800dcb8:	d01d      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcba:	687b      	ldr	r3, [r7, #4]
 800dcbc:	681b      	ldr	r3, [r3, #0]
 800dcbe:	4a1d      	ldr	r2, [pc, #116]	; (800dd34 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800dcc0:	4293      	cmp	r3, r2
 800dcc2:	d018      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcc4:	687b      	ldr	r3, [r7, #4]
 800dcc6:	681b      	ldr	r3, [r3, #0]
 800dcc8:	4a1b      	ldr	r2, [pc, #108]	; (800dd38 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800dcca:	4293      	cmp	r3, r2
 800dccc:	d013      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcce:	687b      	ldr	r3, [r7, #4]
 800dcd0:	681b      	ldr	r3, [r3, #0]
 800dcd2:	4a1a      	ldr	r2, [pc, #104]	; (800dd3c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800dcd4:	4293      	cmp	r3, r2
 800dcd6:	d00e      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcd8:	687b      	ldr	r3, [r7, #4]
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	4a18      	ldr	r2, [pc, #96]	; (800dd40 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800dcde:	4293      	cmp	r3, r2
 800dce0:	d009      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dce2:	687b      	ldr	r3, [r7, #4]
 800dce4:	681b      	ldr	r3, [r3, #0]
 800dce6:	4a17      	ldr	r2, [pc, #92]	; (800dd44 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800dce8:	4293      	cmp	r3, r2
 800dcea:	d004      	beq.n	800dcf6 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800dcec:	687b      	ldr	r3, [r7, #4]
 800dcee:	681b      	ldr	r3, [r3, #0]
 800dcf0:	4a15      	ldr	r2, [pc, #84]	; (800dd48 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800dcf2:	4293      	cmp	r3, r2
 800dcf4:	d10c      	bne.n	800dd10 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800dcf6:	68bb      	ldr	r3, [r7, #8]
 800dcf8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dcfc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800dcfe:	683b      	ldr	r3, [r7, #0]
 800dd00:	685b      	ldr	r3, [r3, #4]
 800dd02:	68ba      	ldr	r2, [r7, #8]
 800dd04:	4313      	orrs	r3, r2
 800dd06:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800dd08:	687b      	ldr	r3, [r7, #4]
 800dd0a:	681b      	ldr	r3, [r3, #0]
 800dd0c:	68ba      	ldr	r2, [r7, #8]
 800dd0e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800dd10:	687b      	ldr	r3, [r7, #4]
 800dd12:	2201      	movs	r2, #1
 800dd14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800dd18:	687b      	ldr	r3, [r7, #4]
 800dd1a:	2200      	movs	r2, #0
 800dd1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dd20:	2300      	movs	r3, #0
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	3714      	adds	r7, #20
 800dd26:	46bd      	mov	sp, r7
 800dd28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2c:	4770      	bx	lr
 800dd2e:	bf00      	nop
 800dd30:	40010000 	.word	0x40010000
 800dd34:	40000400 	.word	0x40000400
 800dd38:	40000800 	.word	0x40000800
 800dd3c:	40000c00 	.word	0x40000c00
 800dd40:	40010400 	.word	0x40010400
 800dd44:	40014000 	.word	0x40014000
 800dd48:	40001800 	.word	0x40001800

0800dd4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800dd4c:	b480      	push	{r7}
 800dd4e:	b085      	sub	sp, #20
 800dd50:	af00      	add	r7, sp, #0
 800dd52:	6078      	str	r0, [r7, #4]
 800dd54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800dd56:	2300      	movs	r3, #0
 800dd58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800dd5a:	687b      	ldr	r3, [r7, #4]
 800dd5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800dd60:	2b01      	cmp	r3, #1
 800dd62:	d101      	bne.n	800dd68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 800dd64:	2302      	movs	r3, #2
 800dd66:	e03d      	b.n	800dde4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 800dd68:	687b      	ldr	r3, [r7, #4]
 800dd6a:	2201      	movs	r2, #1
 800dd6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800dd70:	68fb      	ldr	r3, [r7, #12]
 800dd72:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 800dd76:	683b      	ldr	r3, [r7, #0]
 800dd78:	68db      	ldr	r3, [r3, #12]
 800dd7a:	4313      	orrs	r3, r2
 800dd7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800dd7e:	68fb      	ldr	r3, [r7, #12]
 800dd80:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800dd84:	683b      	ldr	r3, [r7, #0]
 800dd86:	689b      	ldr	r3, [r3, #8]
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800dd92:	683b      	ldr	r3, [r7, #0]
 800dd94:	685b      	ldr	r3, [r3, #4]
 800dd96:	4313      	orrs	r3, r2
 800dd98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	681b      	ldr	r3, [r3, #0]
 800dda4:	4313      	orrs	r3, r2
 800dda6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800dda8:	68fb      	ldr	r3, [r7, #12]
 800ddaa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800ddae:	683b      	ldr	r3, [r7, #0]
 800ddb0:	691b      	ldr	r3, [r3, #16]
 800ddb2:	4313      	orrs	r3, r2
 800ddb4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800ddb6:	68fb      	ldr	r3, [r7, #12]
 800ddb8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800ddbc:	683b      	ldr	r3, [r7, #0]
 800ddbe:	695b      	ldr	r3, [r3, #20]
 800ddc0:	4313      	orrs	r3, r2
 800ddc2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 800ddc4:	68fb      	ldr	r3, [r7, #12]
 800ddc6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800ddca:	683b      	ldr	r3, [r7, #0]
 800ddcc:	69db      	ldr	r3, [r3, #28]
 800ddce:	4313      	orrs	r3, r2
 800ddd0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800ddd2:	687b      	ldr	r3, [r7, #4]
 800ddd4:	681b      	ldr	r3, [r3, #0]
 800ddd6:	68fa      	ldr	r2, [r7, #12]
 800ddd8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800ddda:	687b      	ldr	r3, [r7, #4]
 800dddc:	2200      	movs	r2, #0
 800ddde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800dde2:	2300      	movs	r3, #0
}
 800dde4:	4618      	mov	r0, r3
 800dde6:	3714      	adds	r7, #20
 800dde8:	46bd      	mov	sp, r7
 800ddea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddee:	4770      	bx	lr

0800ddf0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ddf0:	b480      	push	{r7}
 800ddf2:	b083      	sub	sp, #12
 800ddf4:	af00      	add	r7, sp, #0
 800ddf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ddf8:	bf00      	nop
 800ddfa:	370c      	adds	r7, #12
 800ddfc:	46bd      	mov	sp, r7
 800ddfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de02:	4770      	bx	lr

0800de04 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800de04:	b480      	push	{r7}
 800de06:	b083      	sub	sp, #12
 800de08:	af00      	add	r7, sp, #0
 800de0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800de0c:	bf00      	nop
 800de0e:	370c      	adds	r7, #12
 800de10:	46bd      	mov	sp, r7
 800de12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de16:	4770      	bx	lr

0800de18 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800de18:	b580      	push	{r7, lr}
 800de1a:	b082      	sub	sp, #8
 800de1c:	af00      	add	r7, sp, #0
 800de1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800de20:	687b      	ldr	r3, [r7, #4]
 800de22:	2b00      	cmp	r3, #0
 800de24:	d101      	bne.n	800de2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800de26:	2301      	movs	r3, #1
 800de28:	e042      	b.n	800deb0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800de2a:	687b      	ldr	r3, [r7, #4]
 800de2c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800de30:	b2db      	uxtb	r3, r3
 800de32:	2b00      	cmp	r3, #0
 800de34:	d106      	bne.n	800de44 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800de36:	687b      	ldr	r3, [r7, #4]
 800de38:	2200      	movs	r2, #0
 800de3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800de3e:	6878      	ldr	r0, [r7, #4]
 800de40:	f7f9 f812 	bl	8006e68 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2224      	movs	r2, #36	; 0x24
 800de48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800de4c:	687b      	ldr	r3, [r7, #4]
 800de4e:	681b      	ldr	r3, [r3, #0]
 800de50:	68da      	ldr	r2, [r3, #12]
 800de52:	687b      	ldr	r3, [r7, #4]
 800de54:	681b      	ldr	r3, [r3, #0]
 800de56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800de5a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800de5c:	6878      	ldr	r0, [r7, #4]
 800de5e:	f000 f82b 	bl	800deb8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800de62:	687b      	ldr	r3, [r7, #4]
 800de64:	681b      	ldr	r3, [r3, #0]
 800de66:	691a      	ldr	r2, [r3, #16]
 800de68:	687b      	ldr	r3, [r7, #4]
 800de6a:	681b      	ldr	r3, [r3, #0]
 800de6c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800de70:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800de72:	687b      	ldr	r3, [r7, #4]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	695a      	ldr	r2, [r3, #20]
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800de80:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	681b      	ldr	r3, [r3, #0]
 800de86:	68da      	ldr	r2, [r3, #12]
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	681b      	ldr	r3, [r3, #0]
 800de8c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800de90:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	2200      	movs	r2, #0
 800de96:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	2220      	movs	r2, #32
 800de9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800dea0:	687b      	ldr	r3, [r7, #4]
 800dea2:	2220      	movs	r2, #32
 800dea4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dea8:	687b      	ldr	r3, [r7, #4]
 800deaa:	2200      	movs	r2, #0
 800deac:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800deae:	2300      	movs	r3, #0
}
 800deb0:	4618      	mov	r0, r3
 800deb2:	3708      	adds	r7, #8
 800deb4:	46bd      	mov	sp, r7
 800deb6:	bd80      	pop	{r7, pc}

0800deb8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800deb8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800debc:	b0c0      	sub	sp, #256	; 0x100
 800debe:	af00      	add	r7, sp, #0
 800dec0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800dec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	691b      	ldr	r3, [r3, #16]
 800decc:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800ded0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ded4:	68d9      	ldr	r1, [r3, #12]
 800ded6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800deda:	681a      	ldr	r2, [r3, #0]
 800dedc:	ea40 0301 	orr.w	r3, r0, r1
 800dee0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800dee2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dee6:	689a      	ldr	r2, [r3, #8]
 800dee8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800deec:	691b      	ldr	r3, [r3, #16]
 800deee:	431a      	orrs	r2, r3
 800def0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800def4:	695b      	ldr	r3, [r3, #20]
 800def6:	431a      	orrs	r2, r3
 800def8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800defc:	69db      	ldr	r3, [r3, #28]
 800defe:	4313      	orrs	r3, r2
 800df00:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800df04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	68db      	ldr	r3, [r3, #12]
 800df0c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800df10:	f021 010c 	bic.w	r1, r1, #12
 800df14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df18:	681a      	ldr	r2, [r3, #0]
 800df1a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800df1e:	430b      	orrs	r3, r1
 800df20:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800df22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df26:	681b      	ldr	r3, [r3, #0]
 800df28:	695b      	ldr	r3, [r3, #20]
 800df2a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800df2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df32:	6999      	ldr	r1, [r3, #24]
 800df34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df38:	681a      	ldr	r2, [r3, #0]
 800df3a:	ea40 0301 	orr.w	r3, r0, r1
 800df3e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800df40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df44:	681a      	ldr	r2, [r3, #0]
 800df46:	4b8f      	ldr	r3, [pc, #572]	; (800e184 <UART_SetConfig+0x2cc>)
 800df48:	429a      	cmp	r2, r3
 800df4a:	d005      	beq.n	800df58 <UART_SetConfig+0xa0>
 800df4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df50:	681a      	ldr	r2, [r3, #0]
 800df52:	4b8d      	ldr	r3, [pc, #564]	; (800e188 <UART_SetConfig+0x2d0>)
 800df54:	429a      	cmp	r2, r3
 800df56:	d104      	bne.n	800df62 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800df58:	f7fe f960 	bl	800c21c <HAL_RCC_GetPCLK2Freq>
 800df5c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800df60:	e003      	b.n	800df6a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800df62:	f7fe f947 	bl	800c1f4 <HAL_RCC_GetPCLK1Freq>
 800df66:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800df6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800df6e:	69db      	ldr	r3, [r3, #28]
 800df70:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800df74:	f040 810c 	bne.w	800e190 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800df78:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800df7c:	2200      	movs	r2, #0
 800df7e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800df82:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800df86:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800df8a:	4622      	mov	r2, r4
 800df8c:	462b      	mov	r3, r5
 800df8e:	1891      	adds	r1, r2, r2
 800df90:	65b9      	str	r1, [r7, #88]	; 0x58
 800df92:	415b      	adcs	r3, r3
 800df94:	65fb      	str	r3, [r7, #92]	; 0x5c
 800df96:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800df9a:	4621      	mov	r1, r4
 800df9c:	eb12 0801 	adds.w	r8, r2, r1
 800dfa0:	4629      	mov	r1, r5
 800dfa2:	eb43 0901 	adc.w	r9, r3, r1
 800dfa6:	f04f 0200 	mov.w	r2, #0
 800dfaa:	f04f 0300 	mov.w	r3, #0
 800dfae:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800dfb2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800dfb6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800dfba:	4690      	mov	r8, r2
 800dfbc:	4699      	mov	r9, r3
 800dfbe:	4623      	mov	r3, r4
 800dfc0:	eb18 0303 	adds.w	r3, r8, r3
 800dfc4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800dfc8:	462b      	mov	r3, r5
 800dfca:	eb49 0303 	adc.w	r3, r9, r3
 800dfce:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800dfd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800dfd6:	685b      	ldr	r3, [r3, #4]
 800dfd8:	2200      	movs	r2, #0
 800dfda:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800dfde:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800dfe2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800dfe6:	460b      	mov	r3, r1
 800dfe8:	18db      	adds	r3, r3, r3
 800dfea:	653b      	str	r3, [r7, #80]	; 0x50
 800dfec:	4613      	mov	r3, r2
 800dfee:	eb42 0303 	adc.w	r3, r2, r3
 800dff2:	657b      	str	r3, [r7, #84]	; 0x54
 800dff4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800dff8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800dffc:	f7f2 fe64 	bl	8000cc8 <__aeabi_uldivmod>
 800e000:	4602      	mov	r2, r0
 800e002:	460b      	mov	r3, r1
 800e004:	4b61      	ldr	r3, [pc, #388]	; (800e18c <UART_SetConfig+0x2d4>)
 800e006:	fba3 2302 	umull	r2, r3, r3, r2
 800e00a:	095b      	lsrs	r3, r3, #5
 800e00c:	011c      	lsls	r4, r3, #4
 800e00e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e012:	2200      	movs	r2, #0
 800e014:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800e018:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800e01c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800e020:	4642      	mov	r2, r8
 800e022:	464b      	mov	r3, r9
 800e024:	1891      	adds	r1, r2, r2
 800e026:	64b9      	str	r1, [r7, #72]	; 0x48
 800e028:	415b      	adcs	r3, r3
 800e02a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e02c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800e030:	4641      	mov	r1, r8
 800e032:	eb12 0a01 	adds.w	sl, r2, r1
 800e036:	4649      	mov	r1, r9
 800e038:	eb43 0b01 	adc.w	fp, r3, r1
 800e03c:	f04f 0200 	mov.w	r2, #0
 800e040:	f04f 0300 	mov.w	r3, #0
 800e044:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800e048:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800e04c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800e050:	4692      	mov	sl, r2
 800e052:	469b      	mov	fp, r3
 800e054:	4643      	mov	r3, r8
 800e056:	eb1a 0303 	adds.w	r3, sl, r3
 800e05a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800e05e:	464b      	mov	r3, r9
 800e060:	eb4b 0303 	adc.w	r3, fp, r3
 800e064:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800e068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e06c:	685b      	ldr	r3, [r3, #4]
 800e06e:	2200      	movs	r2, #0
 800e070:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800e074:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800e078:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800e07c:	460b      	mov	r3, r1
 800e07e:	18db      	adds	r3, r3, r3
 800e080:	643b      	str	r3, [r7, #64]	; 0x40
 800e082:	4613      	mov	r3, r2
 800e084:	eb42 0303 	adc.w	r3, r2, r3
 800e088:	647b      	str	r3, [r7, #68]	; 0x44
 800e08a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800e08e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800e092:	f7f2 fe19 	bl	8000cc8 <__aeabi_uldivmod>
 800e096:	4602      	mov	r2, r0
 800e098:	460b      	mov	r3, r1
 800e09a:	4611      	mov	r1, r2
 800e09c:	4b3b      	ldr	r3, [pc, #236]	; (800e18c <UART_SetConfig+0x2d4>)
 800e09e:	fba3 2301 	umull	r2, r3, r3, r1
 800e0a2:	095b      	lsrs	r3, r3, #5
 800e0a4:	2264      	movs	r2, #100	; 0x64
 800e0a6:	fb02 f303 	mul.w	r3, r2, r3
 800e0aa:	1acb      	subs	r3, r1, r3
 800e0ac:	00db      	lsls	r3, r3, #3
 800e0ae:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800e0b2:	4b36      	ldr	r3, [pc, #216]	; (800e18c <UART_SetConfig+0x2d4>)
 800e0b4:	fba3 2302 	umull	r2, r3, r3, r2
 800e0b8:	095b      	lsrs	r3, r3, #5
 800e0ba:	005b      	lsls	r3, r3, #1
 800e0bc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800e0c0:	441c      	add	r4, r3
 800e0c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e0c6:	2200      	movs	r2, #0
 800e0c8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800e0cc:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800e0d0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800e0d4:	4642      	mov	r2, r8
 800e0d6:	464b      	mov	r3, r9
 800e0d8:	1891      	adds	r1, r2, r2
 800e0da:	63b9      	str	r1, [r7, #56]	; 0x38
 800e0dc:	415b      	adcs	r3, r3
 800e0de:	63fb      	str	r3, [r7, #60]	; 0x3c
 800e0e0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800e0e4:	4641      	mov	r1, r8
 800e0e6:	1851      	adds	r1, r2, r1
 800e0e8:	6339      	str	r1, [r7, #48]	; 0x30
 800e0ea:	4649      	mov	r1, r9
 800e0ec:	414b      	adcs	r3, r1
 800e0ee:	637b      	str	r3, [r7, #52]	; 0x34
 800e0f0:	f04f 0200 	mov.w	r2, #0
 800e0f4:	f04f 0300 	mov.w	r3, #0
 800e0f8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800e0fc:	4659      	mov	r1, fp
 800e0fe:	00cb      	lsls	r3, r1, #3
 800e100:	4651      	mov	r1, sl
 800e102:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e106:	4651      	mov	r1, sl
 800e108:	00ca      	lsls	r2, r1, #3
 800e10a:	4610      	mov	r0, r2
 800e10c:	4619      	mov	r1, r3
 800e10e:	4603      	mov	r3, r0
 800e110:	4642      	mov	r2, r8
 800e112:	189b      	adds	r3, r3, r2
 800e114:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800e118:	464b      	mov	r3, r9
 800e11a:	460a      	mov	r2, r1
 800e11c:	eb42 0303 	adc.w	r3, r2, r3
 800e120:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800e124:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e128:	685b      	ldr	r3, [r3, #4]
 800e12a:	2200      	movs	r2, #0
 800e12c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800e130:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800e134:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800e138:	460b      	mov	r3, r1
 800e13a:	18db      	adds	r3, r3, r3
 800e13c:	62bb      	str	r3, [r7, #40]	; 0x28
 800e13e:	4613      	mov	r3, r2
 800e140:	eb42 0303 	adc.w	r3, r2, r3
 800e144:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e146:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800e14a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800e14e:	f7f2 fdbb 	bl	8000cc8 <__aeabi_uldivmod>
 800e152:	4602      	mov	r2, r0
 800e154:	460b      	mov	r3, r1
 800e156:	4b0d      	ldr	r3, [pc, #52]	; (800e18c <UART_SetConfig+0x2d4>)
 800e158:	fba3 1302 	umull	r1, r3, r3, r2
 800e15c:	095b      	lsrs	r3, r3, #5
 800e15e:	2164      	movs	r1, #100	; 0x64
 800e160:	fb01 f303 	mul.w	r3, r1, r3
 800e164:	1ad3      	subs	r3, r2, r3
 800e166:	00db      	lsls	r3, r3, #3
 800e168:	3332      	adds	r3, #50	; 0x32
 800e16a:	4a08      	ldr	r2, [pc, #32]	; (800e18c <UART_SetConfig+0x2d4>)
 800e16c:	fba2 2303 	umull	r2, r3, r2, r3
 800e170:	095b      	lsrs	r3, r3, #5
 800e172:	f003 0207 	and.w	r2, r3, #7
 800e176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e17a:	681b      	ldr	r3, [r3, #0]
 800e17c:	4422      	add	r2, r4
 800e17e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800e180:	e106      	b.n	800e390 <UART_SetConfig+0x4d8>
 800e182:	bf00      	nop
 800e184:	40011000 	.word	0x40011000
 800e188:	40011400 	.word	0x40011400
 800e18c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800e190:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e194:	2200      	movs	r2, #0
 800e196:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800e19a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800e19e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800e1a2:	4642      	mov	r2, r8
 800e1a4:	464b      	mov	r3, r9
 800e1a6:	1891      	adds	r1, r2, r2
 800e1a8:	6239      	str	r1, [r7, #32]
 800e1aa:	415b      	adcs	r3, r3
 800e1ac:	627b      	str	r3, [r7, #36]	; 0x24
 800e1ae:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800e1b2:	4641      	mov	r1, r8
 800e1b4:	1854      	adds	r4, r2, r1
 800e1b6:	4649      	mov	r1, r9
 800e1b8:	eb43 0501 	adc.w	r5, r3, r1
 800e1bc:	f04f 0200 	mov.w	r2, #0
 800e1c0:	f04f 0300 	mov.w	r3, #0
 800e1c4:	00eb      	lsls	r3, r5, #3
 800e1c6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800e1ca:	00e2      	lsls	r2, r4, #3
 800e1cc:	4614      	mov	r4, r2
 800e1ce:	461d      	mov	r5, r3
 800e1d0:	4643      	mov	r3, r8
 800e1d2:	18e3      	adds	r3, r4, r3
 800e1d4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800e1d8:	464b      	mov	r3, r9
 800e1da:	eb45 0303 	adc.w	r3, r5, r3
 800e1de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800e1e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e1e6:	685b      	ldr	r3, [r3, #4]
 800e1e8:	2200      	movs	r2, #0
 800e1ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800e1ee:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800e1f2:	f04f 0200 	mov.w	r2, #0
 800e1f6:	f04f 0300 	mov.w	r3, #0
 800e1fa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800e1fe:	4629      	mov	r1, r5
 800e200:	008b      	lsls	r3, r1, #2
 800e202:	4621      	mov	r1, r4
 800e204:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e208:	4621      	mov	r1, r4
 800e20a:	008a      	lsls	r2, r1, #2
 800e20c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800e210:	f7f2 fd5a 	bl	8000cc8 <__aeabi_uldivmod>
 800e214:	4602      	mov	r2, r0
 800e216:	460b      	mov	r3, r1
 800e218:	4b60      	ldr	r3, [pc, #384]	; (800e39c <UART_SetConfig+0x4e4>)
 800e21a:	fba3 2302 	umull	r2, r3, r3, r2
 800e21e:	095b      	lsrs	r3, r3, #5
 800e220:	011c      	lsls	r4, r3, #4
 800e222:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e226:	2200      	movs	r2, #0
 800e228:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800e22c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800e230:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800e234:	4642      	mov	r2, r8
 800e236:	464b      	mov	r3, r9
 800e238:	1891      	adds	r1, r2, r2
 800e23a:	61b9      	str	r1, [r7, #24]
 800e23c:	415b      	adcs	r3, r3
 800e23e:	61fb      	str	r3, [r7, #28]
 800e240:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e244:	4641      	mov	r1, r8
 800e246:	1851      	adds	r1, r2, r1
 800e248:	6139      	str	r1, [r7, #16]
 800e24a:	4649      	mov	r1, r9
 800e24c:	414b      	adcs	r3, r1
 800e24e:	617b      	str	r3, [r7, #20]
 800e250:	f04f 0200 	mov.w	r2, #0
 800e254:	f04f 0300 	mov.w	r3, #0
 800e258:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800e25c:	4659      	mov	r1, fp
 800e25e:	00cb      	lsls	r3, r1, #3
 800e260:	4651      	mov	r1, sl
 800e262:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e266:	4651      	mov	r1, sl
 800e268:	00ca      	lsls	r2, r1, #3
 800e26a:	4610      	mov	r0, r2
 800e26c:	4619      	mov	r1, r3
 800e26e:	4603      	mov	r3, r0
 800e270:	4642      	mov	r2, r8
 800e272:	189b      	adds	r3, r3, r2
 800e274:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800e278:	464b      	mov	r3, r9
 800e27a:	460a      	mov	r2, r1
 800e27c:	eb42 0303 	adc.w	r3, r2, r3
 800e280:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800e284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e288:	685b      	ldr	r3, [r3, #4]
 800e28a:	2200      	movs	r2, #0
 800e28c:	67bb      	str	r3, [r7, #120]	; 0x78
 800e28e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800e290:	f04f 0200 	mov.w	r2, #0
 800e294:	f04f 0300 	mov.w	r3, #0
 800e298:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800e29c:	4649      	mov	r1, r9
 800e29e:	008b      	lsls	r3, r1, #2
 800e2a0:	4641      	mov	r1, r8
 800e2a2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e2a6:	4641      	mov	r1, r8
 800e2a8:	008a      	lsls	r2, r1, #2
 800e2aa:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800e2ae:	f7f2 fd0b 	bl	8000cc8 <__aeabi_uldivmod>
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	460b      	mov	r3, r1
 800e2b6:	4611      	mov	r1, r2
 800e2b8:	4b38      	ldr	r3, [pc, #224]	; (800e39c <UART_SetConfig+0x4e4>)
 800e2ba:	fba3 2301 	umull	r2, r3, r3, r1
 800e2be:	095b      	lsrs	r3, r3, #5
 800e2c0:	2264      	movs	r2, #100	; 0x64
 800e2c2:	fb02 f303 	mul.w	r3, r2, r3
 800e2c6:	1acb      	subs	r3, r1, r3
 800e2c8:	011b      	lsls	r3, r3, #4
 800e2ca:	3332      	adds	r3, #50	; 0x32
 800e2cc:	4a33      	ldr	r2, [pc, #204]	; (800e39c <UART_SetConfig+0x4e4>)
 800e2ce:	fba2 2303 	umull	r2, r3, r2, r3
 800e2d2:	095b      	lsrs	r3, r3, #5
 800e2d4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800e2d8:	441c      	add	r4, r3
 800e2da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800e2de:	2200      	movs	r2, #0
 800e2e0:	673b      	str	r3, [r7, #112]	; 0x70
 800e2e2:	677a      	str	r2, [r7, #116]	; 0x74
 800e2e4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800e2e8:	4642      	mov	r2, r8
 800e2ea:	464b      	mov	r3, r9
 800e2ec:	1891      	adds	r1, r2, r2
 800e2ee:	60b9      	str	r1, [r7, #8]
 800e2f0:	415b      	adcs	r3, r3
 800e2f2:	60fb      	str	r3, [r7, #12]
 800e2f4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800e2f8:	4641      	mov	r1, r8
 800e2fa:	1851      	adds	r1, r2, r1
 800e2fc:	6039      	str	r1, [r7, #0]
 800e2fe:	4649      	mov	r1, r9
 800e300:	414b      	adcs	r3, r1
 800e302:	607b      	str	r3, [r7, #4]
 800e304:	f04f 0200 	mov.w	r2, #0
 800e308:	f04f 0300 	mov.w	r3, #0
 800e30c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800e310:	4659      	mov	r1, fp
 800e312:	00cb      	lsls	r3, r1, #3
 800e314:	4651      	mov	r1, sl
 800e316:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800e31a:	4651      	mov	r1, sl
 800e31c:	00ca      	lsls	r2, r1, #3
 800e31e:	4610      	mov	r0, r2
 800e320:	4619      	mov	r1, r3
 800e322:	4603      	mov	r3, r0
 800e324:	4642      	mov	r2, r8
 800e326:	189b      	adds	r3, r3, r2
 800e328:	66bb      	str	r3, [r7, #104]	; 0x68
 800e32a:	464b      	mov	r3, r9
 800e32c:	460a      	mov	r2, r1
 800e32e:	eb42 0303 	adc.w	r3, r2, r3
 800e332:	66fb      	str	r3, [r7, #108]	; 0x6c
 800e334:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e338:	685b      	ldr	r3, [r3, #4]
 800e33a:	2200      	movs	r2, #0
 800e33c:	663b      	str	r3, [r7, #96]	; 0x60
 800e33e:	667a      	str	r2, [r7, #100]	; 0x64
 800e340:	f04f 0200 	mov.w	r2, #0
 800e344:	f04f 0300 	mov.w	r3, #0
 800e348:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800e34c:	4649      	mov	r1, r9
 800e34e:	008b      	lsls	r3, r1, #2
 800e350:	4641      	mov	r1, r8
 800e352:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800e356:	4641      	mov	r1, r8
 800e358:	008a      	lsls	r2, r1, #2
 800e35a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800e35e:	f7f2 fcb3 	bl	8000cc8 <__aeabi_uldivmod>
 800e362:	4602      	mov	r2, r0
 800e364:	460b      	mov	r3, r1
 800e366:	4b0d      	ldr	r3, [pc, #52]	; (800e39c <UART_SetConfig+0x4e4>)
 800e368:	fba3 1302 	umull	r1, r3, r3, r2
 800e36c:	095b      	lsrs	r3, r3, #5
 800e36e:	2164      	movs	r1, #100	; 0x64
 800e370:	fb01 f303 	mul.w	r3, r1, r3
 800e374:	1ad3      	subs	r3, r2, r3
 800e376:	011b      	lsls	r3, r3, #4
 800e378:	3332      	adds	r3, #50	; 0x32
 800e37a:	4a08      	ldr	r2, [pc, #32]	; (800e39c <UART_SetConfig+0x4e4>)
 800e37c:	fba2 2303 	umull	r2, r3, r2, r3
 800e380:	095b      	lsrs	r3, r3, #5
 800e382:	f003 020f 	and.w	r2, r3, #15
 800e386:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	4422      	add	r2, r4
 800e38e:	609a      	str	r2, [r3, #8]
}
 800e390:	bf00      	nop
 800e392:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800e396:	46bd      	mov	sp, r7
 800e398:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e39c:	51eb851f 	.word	0x51eb851f

0800e3a0 <__NVIC_SetPriority>:
{
 800e3a0:	b480      	push	{r7}
 800e3a2:	b083      	sub	sp, #12
 800e3a4:	af00      	add	r7, sp, #0
 800e3a6:	4603      	mov	r3, r0
 800e3a8:	6039      	str	r1, [r7, #0]
 800e3aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800e3ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3b0:	2b00      	cmp	r3, #0
 800e3b2:	db0a      	blt.n	800e3ca <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e3b4:	683b      	ldr	r3, [r7, #0]
 800e3b6:	b2da      	uxtb	r2, r3
 800e3b8:	490c      	ldr	r1, [pc, #48]	; (800e3ec <__NVIC_SetPriority+0x4c>)
 800e3ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800e3be:	0112      	lsls	r2, r2, #4
 800e3c0:	b2d2      	uxtb	r2, r2
 800e3c2:	440b      	add	r3, r1
 800e3c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800e3c8:	e00a      	b.n	800e3e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800e3ca:	683b      	ldr	r3, [r7, #0]
 800e3cc:	b2da      	uxtb	r2, r3
 800e3ce:	4908      	ldr	r1, [pc, #32]	; (800e3f0 <__NVIC_SetPriority+0x50>)
 800e3d0:	79fb      	ldrb	r3, [r7, #7]
 800e3d2:	f003 030f 	and.w	r3, r3, #15
 800e3d6:	3b04      	subs	r3, #4
 800e3d8:	0112      	lsls	r2, r2, #4
 800e3da:	b2d2      	uxtb	r2, r2
 800e3dc:	440b      	add	r3, r1
 800e3de:	761a      	strb	r2, [r3, #24]
}
 800e3e0:	bf00      	nop
 800e3e2:	370c      	adds	r7, #12
 800e3e4:	46bd      	mov	sp, r7
 800e3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ea:	4770      	bx	lr
 800e3ec:	e000e100 	.word	0xe000e100
 800e3f0:	e000ed00 	.word	0xe000ed00

0800e3f4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800e3f4:	b580      	push	{r7, lr}
 800e3f6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800e3f8:	4b05      	ldr	r3, [pc, #20]	; (800e410 <SysTick_Handler+0x1c>)
 800e3fa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800e3fc:	f001 ff68 	bl	80102d0 <xTaskGetSchedulerState>
 800e400:	4603      	mov	r3, r0
 800e402:	2b01      	cmp	r3, #1
 800e404:	d001      	beq.n	800e40a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800e406:	f002 fe4f 	bl	80110a8 <xPortSysTickHandler>
  }
}
 800e40a:	bf00      	nop
 800e40c:	bd80      	pop	{r7, pc}
 800e40e:	bf00      	nop
 800e410:	e000e010 	.word	0xe000e010

0800e414 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800e414:	b580      	push	{r7, lr}
 800e416:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800e418:	2100      	movs	r1, #0
 800e41a:	f06f 0004 	mvn.w	r0, #4
 800e41e:	f7ff ffbf 	bl	800e3a0 <__NVIC_SetPriority>
#endif
}
 800e422:	bf00      	nop
 800e424:	bd80      	pop	{r7, pc}
	...

0800e428 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800e428:	b480      	push	{r7}
 800e42a:	b083      	sub	sp, #12
 800e42c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e42e:	f3ef 8305 	mrs	r3, IPSR
 800e432:	603b      	str	r3, [r7, #0]
  return(result);
 800e434:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e436:	2b00      	cmp	r3, #0
 800e438:	d003      	beq.n	800e442 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800e43a:	f06f 0305 	mvn.w	r3, #5
 800e43e:	607b      	str	r3, [r7, #4]
 800e440:	e00c      	b.n	800e45c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800e442:	4b0a      	ldr	r3, [pc, #40]	; (800e46c <osKernelInitialize+0x44>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	2b00      	cmp	r3, #0
 800e448:	d105      	bne.n	800e456 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800e44a:	4b08      	ldr	r3, [pc, #32]	; (800e46c <osKernelInitialize+0x44>)
 800e44c:	2201      	movs	r2, #1
 800e44e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800e450:	2300      	movs	r3, #0
 800e452:	607b      	str	r3, [r7, #4]
 800e454:	e002      	b.n	800e45c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800e456:	f04f 33ff 	mov.w	r3, #4294967295
 800e45a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e45c:	687b      	ldr	r3, [r7, #4]
}
 800e45e:	4618      	mov	r0, r3
 800e460:	370c      	adds	r7, #12
 800e462:	46bd      	mov	sp, r7
 800e464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e468:	4770      	bx	lr
 800e46a:	bf00      	nop
 800e46c:	2001a934 	.word	0x2001a934

0800e470 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800e470:	b580      	push	{r7, lr}
 800e472:	b082      	sub	sp, #8
 800e474:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e476:	f3ef 8305 	mrs	r3, IPSR
 800e47a:	603b      	str	r3, [r7, #0]
  return(result);
 800e47c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d003      	beq.n	800e48a <osKernelStart+0x1a>
    stat = osErrorISR;
 800e482:	f06f 0305 	mvn.w	r3, #5
 800e486:	607b      	str	r3, [r7, #4]
 800e488:	e010      	b.n	800e4ac <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800e48a:	4b0b      	ldr	r3, [pc, #44]	; (800e4b8 <osKernelStart+0x48>)
 800e48c:	681b      	ldr	r3, [r3, #0]
 800e48e:	2b01      	cmp	r3, #1
 800e490:	d109      	bne.n	800e4a6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800e492:	f7ff ffbf 	bl	800e414 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800e496:	4b08      	ldr	r3, [pc, #32]	; (800e4b8 <osKernelStart+0x48>)
 800e498:	2202      	movs	r2, #2
 800e49a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800e49c:	f001 fad0 	bl	800fa40 <vTaskStartScheduler>
      stat = osOK;
 800e4a0:	2300      	movs	r3, #0
 800e4a2:	607b      	str	r3, [r7, #4]
 800e4a4:	e002      	b.n	800e4ac <osKernelStart+0x3c>
    } else {
      stat = osError;
 800e4a6:	f04f 33ff 	mov.w	r3, #4294967295
 800e4aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800e4ac:	687b      	ldr	r3, [r7, #4]
}
 800e4ae:	4618      	mov	r0, r3
 800e4b0:	3708      	adds	r7, #8
 800e4b2:	46bd      	mov	sp, r7
 800e4b4:	bd80      	pop	{r7, pc}
 800e4b6:	bf00      	nop
 800e4b8:	2001a934 	.word	0x2001a934

0800e4bc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800e4bc:	b580      	push	{r7, lr}
 800e4be:	b08e      	sub	sp, #56	; 0x38
 800e4c0:	af04      	add	r7, sp, #16
 800e4c2:	60f8      	str	r0, [r7, #12]
 800e4c4:	60b9      	str	r1, [r7, #8]
 800e4c6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800e4c8:	2300      	movs	r3, #0
 800e4ca:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e4cc:	f3ef 8305 	mrs	r3, IPSR
 800e4d0:	617b      	str	r3, [r7, #20]
  return(result);
 800e4d2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d17e      	bne.n	800e5d6 <osThreadNew+0x11a>
 800e4d8:	68fb      	ldr	r3, [r7, #12]
 800e4da:	2b00      	cmp	r3, #0
 800e4dc:	d07b      	beq.n	800e5d6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800e4de:	2380      	movs	r3, #128	; 0x80
 800e4e0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800e4e2:	2318      	movs	r3, #24
 800e4e4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800e4e6:	2300      	movs	r3, #0
 800e4e8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800e4ea:	f04f 33ff 	mov.w	r3, #4294967295
 800e4ee:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800e4f0:	687b      	ldr	r3, [r7, #4]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	d045      	beq.n	800e582 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800e4f6:	687b      	ldr	r3, [r7, #4]
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	2b00      	cmp	r3, #0
 800e4fc:	d002      	beq.n	800e504 <osThreadNew+0x48>
        name = attr->name;
 800e4fe:	687b      	ldr	r3, [r7, #4]
 800e500:	681b      	ldr	r3, [r3, #0]
 800e502:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800e504:	687b      	ldr	r3, [r7, #4]
 800e506:	699b      	ldr	r3, [r3, #24]
 800e508:	2b00      	cmp	r3, #0
 800e50a:	d002      	beq.n	800e512 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	699b      	ldr	r3, [r3, #24]
 800e510:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800e512:	69fb      	ldr	r3, [r7, #28]
 800e514:	2b00      	cmp	r3, #0
 800e516:	d008      	beq.n	800e52a <osThreadNew+0x6e>
 800e518:	69fb      	ldr	r3, [r7, #28]
 800e51a:	2b38      	cmp	r3, #56	; 0x38
 800e51c:	d805      	bhi.n	800e52a <osThreadNew+0x6e>
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	685b      	ldr	r3, [r3, #4]
 800e522:	f003 0301 	and.w	r3, r3, #1
 800e526:	2b00      	cmp	r3, #0
 800e528:	d001      	beq.n	800e52e <osThreadNew+0x72>
        return (NULL);
 800e52a:	2300      	movs	r3, #0
 800e52c:	e054      	b.n	800e5d8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800e52e:	687b      	ldr	r3, [r7, #4]
 800e530:	695b      	ldr	r3, [r3, #20]
 800e532:	2b00      	cmp	r3, #0
 800e534:	d003      	beq.n	800e53e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800e536:	687b      	ldr	r3, [r7, #4]
 800e538:	695b      	ldr	r3, [r3, #20]
 800e53a:	089b      	lsrs	r3, r3, #2
 800e53c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e53e:	687b      	ldr	r3, [r7, #4]
 800e540:	689b      	ldr	r3, [r3, #8]
 800e542:	2b00      	cmp	r3, #0
 800e544:	d00e      	beq.n	800e564 <osThreadNew+0xa8>
 800e546:	687b      	ldr	r3, [r7, #4]
 800e548:	68db      	ldr	r3, [r3, #12]
 800e54a:	2b5b      	cmp	r3, #91	; 0x5b
 800e54c:	d90a      	bls.n	800e564 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e54e:	687b      	ldr	r3, [r7, #4]
 800e550:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800e552:	2b00      	cmp	r3, #0
 800e554:	d006      	beq.n	800e564 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	695b      	ldr	r3, [r3, #20]
 800e55a:	2b00      	cmp	r3, #0
 800e55c:	d002      	beq.n	800e564 <osThreadNew+0xa8>
        mem = 1;
 800e55e:	2301      	movs	r3, #1
 800e560:	61bb      	str	r3, [r7, #24]
 800e562:	e010      	b.n	800e586 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	689b      	ldr	r3, [r3, #8]
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d10c      	bne.n	800e586 <osThreadNew+0xca>
 800e56c:	687b      	ldr	r3, [r7, #4]
 800e56e:	68db      	ldr	r3, [r3, #12]
 800e570:	2b00      	cmp	r3, #0
 800e572:	d108      	bne.n	800e586 <osThreadNew+0xca>
 800e574:	687b      	ldr	r3, [r7, #4]
 800e576:	691b      	ldr	r3, [r3, #16]
 800e578:	2b00      	cmp	r3, #0
 800e57a:	d104      	bne.n	800e586 <osThreadNew+0xca>
          mem = 0;
 800e57c:	2300      	movs	r3, #0
 800e57e:	61bb      	str	r3, [r7, #24]
 800e580:	e001      	b.n	800e586 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800e582:	2300      	movs	r3, #0
 800e584:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800e586:	69bb      	ldr	r3, [r7, #24]
 800e588:	2b01      	cmp	r3, #1
 800e58a:	d110      	bne.n	800e5ae <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800e590:	687a      	ldr	r2, [r7, #4]
 800e592:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800e594:	9202      	str	r2, [sp, #8]
 800e596:	9301      	str	r3, [sp, #4]
 800e598:	69fb      	ldr	r3, [r7, #28]
 800e59a:	9300      	str	r3, [sp, #0]
 800e59c:	68bb      	ldr	r3, [r7, #8]
 800e59e:	6a3a      	ldr	r2, [r7, #32]
 800e5a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5a2:	68f8      	ldr	r0, [r7, #12]
 800e5a4:	f001 f876 	bl	800f694 <xTaskCreateStatic>
 800e5a8:	4603      	mov	r3, r0
 800e5aa:	613b      	str	r3, [r7, #16]
 800e5ac:	e013      	b.n	800e5d6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800e5ae:	69bb      	ldr	r3, [r7, #24]
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d110      	bne.n	800e5d6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800e5b4:	6a3b      	ldr	r3, [r7, #32]
 800e5b6:	b29a      	uxth	r2, r3
 800e5b8:	f107 0310 	add.w	r3, r7, #16
 800e5bc:	9301      	str	r3, [sp, #4]
 800e5be:	69fb      	ldr	r3, [r7, #28]
 800e5c0:	9300      	str	r3, [sp, #0]
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e5c6:	68f8      	ldr	r0, [r7, #12]
 800e5c8:	f001 f8c1 	bl	800f74e <xTaskCreate>
 800e5cc:	4603      	mov	r3, r0
 800e5ce:	2b01      	cmp	r3, #1
 800e5d0:	d001      	beq.n	800e5d6 <osThreadNew+0x11a>
            hTask = NULL;
 800e5d2:	2300      	movs	r3, #0
 800e5d4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800e5d6:	693b      	ldr	r3, [r7, #16]
}
 800e5d8:	4618      	mov	r0, r3
 800e5da:	3728      	adds	r7, #40	; 0x28
 800e5dc:	46bd      	mov	sp, r7
 800e5de:	bd80      	pop	{r7, pc}

0800e5e0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800e5e0:	b580      	push	{r7, lr}
 800e5e2:	b084      	sub	sp, #16
 800e5e4:	af00      	add	r7, sp, #0
 800e5e6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e5e8:	f3ef 8305 	mrs	r3, IPSR
 800e5ec:	60bb      	str	r3, [r7, #8]
  return(result);
 800e5ee:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d003      	beq.n	800e5fc <osDelay+0x1c>
    stat = osErrorISR;
 800e5f4:	f06f 0305 	mvn.w	r3, #5
 800e5f8:	60fb      	str	r3, [r7, #12]
 800e5fa:	e007      	b.n	800e60c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800e5fc:	2300      	movs	r3, #0
 800e5fe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800e600:	687b      	ldr	r3, [r7, #4]
 800e602:	2b00      	cmp	r3, #0
 800e604:	d002      	beq.n	800e60c <osDelay+0x2c>
      vTaskDelay(ticks);
 800e606:	6878      	ldr	r0, [r7, #4]
 800e608:	f001 f9e6 	bl	800f9d8 <vTaskDelay>
    }
  }

  return (stat);
 800e60c:	68fb      	ldr	r3, [r7, #12]
}
 800e60e:	4618      	mov	r0, r3
 800e610:	3710      	adds	r7, #16
 800e612:	46bd      	mov	sp, r7
 800e614:	bd80      	pop	{r7, pc}
	...

0800e618 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800e618:	b480      	push	{r7}
 800e61a:	b085      	sub	sp, #20
 800e61c:	af00      	add	r7, sp, #0
 800e61e:	60f8      	str	r0, [r7, #12]
 800e620:	60b9      	str	r1, [r7, #8]
 800e622:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800e624:	68fb      	ldr	r3, [r7, #12]
 800e626:	4a07      	ldr	r2, [pc, #28]	; (800e644 <vApplicationGetIdleTaskMemory+0x2c>)
 800e628:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800e62a:	68bb      	ldr	r3, [r7, #8]
 800e62c:	4a06      	ldr	r2, [pc, #24]	; (800e648 <vApplicationGetIdleTaskMemory+0x30>)
 800e62e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2280      	movs	r2, #128	; 0x80
 800e634:	601a      	str	r2, [r3, #0]
}
 800e636:	bf00      	nop
 800e638:	3714      	adds	r7, #20
 800e63a:	46bd      	mov	sp, r7
 800e63c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e640:	4770      	bx	lr
 800e642:	bf00      	nop
 800e644:	2001a938 	.word	0x2001a938
 800e648:	2001a994 	.word	0x2001a994

0800e64c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800e64c:	b480      	push	{r7}
 800e64e:	b085      	sub	sp, #20
 800e650:	af00      	add	r7, sp, #0
 800e652:	60f8      	str	r0, [r7, #12]
 800e654:	60b9      	str	r1, [r7, #8]
 800e656:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800e658:	68fb      	ldr	r3, [r7, #12]
 800e65a:	4a07      	ldr	r2, [pc, #28]	; (800e678 <vApplicationGetTimerTaskMemory+0x2c>)
 800e65c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800e65e:	68bb      	ldr	r3, [r7, #8]
 800e660:	4a06      	ldr	r2, [pc, #24]	; (800e67c <vApplicationGetTimerTaskMemory+0x30>)
 800e662:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	f44f 7280 	mov.w	r2, #256	; 0x100
 800e66a:	601a      	str	r2, [r3, #0]
}
 800e66c:	bf00      	nop
 800e66e:	3714      	adds	r7, #20
 800e670:	46bd      	mov	sp, r7
 800e672:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e676:	4770      	bx	lr
 800e678:	2001ab94 	.word	0x2001ab94
 800e67c:	2001abf0 	.word	0x2001abf0

0800e680 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	f103 0208 	add.w	r2, r3, #8
 800e68e:	687b      	ldr	r3, [r7, #4]
 800e690:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	f04f 32ff 	mov.w	r2, #4294967295
 800e698:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	f103 0208 	add.w	r2, r3, #8
 800e6a0:	687b      	ldr	r3, [r7, #4]
 800e6a2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800e6a4:	687b      	ldr	r3, [r7, #4]
 800e6a6:	f103 0208 	add.w	r2, r3, #8
 800e6aa:	687b      	ldr	r3, [r7, #4]
 800e6ac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800e6ae:	687b      	ldr	r3, [r7, #4]
 800e6b0:	2200      	movs	r2, #0
 800e6b2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800e6b4:	bf00      	nop
 800e6b6:	370c      	adds	r7, #12
 800e6b8:	46bd      	mov	sp, r7
 800e6ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6be:	4770      	bx	lr

0800e6c0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800e6c0:	b480      	push	{r7}
 800e6c2:	b083      	sub	sp, #12
 800e6c4:	af00      	add	r7, sp, #0
 800e6c6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2200      	movs	r2, #0
 800e6cc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800e6ce:	bf00      	nop
 800e6d0:	370c      	adds	r7, #12
 800e6d2:	46bd      	mov	sp, r7
 800e6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6d8:	4770      	bx	lr

0800e6da <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e6da:	b480      	push	{r7}
 800e6dc:	b085      	sub	sp, #20
 800e6de:	af00      	add	r7, sp, #0
 800e6e0:	6078      	str	r0, [r7, #4]
 800e6e2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800e6e4:	687b      	ldr	r3, [r7, #4]
 800e6e6:	685b      	ldr	r3, [r3, #4]
 800e6e8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800e6ea:	683b      	ldr	r3, [r7, #0]
 800e6ec:	68fa      	ldr	r2, [r7, #12]
 800e6ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	689a      	ldr	r2, [r3, #8]
 800e6f4:	683b      	ldr	r3, [r7, #0]
 800e6f6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	689b      	ldr	r3, [r3, #8]
 800e6fc:	683a      	ldr	r2, [r7, #0]
 800e6fe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800e700:	68fb      	ldr	r3, [r7, #12]
 800e702:	683a      	ldr	r2, [r7, #0]
 800e704:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800e706:	683b      	ldr	r3, [r7, #0]
 800e708:	687a      	ldr	r2, [r7, #4]
 800e70a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e70c:	687b      	ldr	r3, [r7, #4]
 800e70e:	681b      	ldr	r3, [r3, #0]
 800e710:	1c5a      	adds	r2, r3, #1
 800e712:	687b      	ldr	r3, [r7, #4]
 800e714:	601a      	str	r2, [r3, #0]
}
 800e716:	bf00      	nop
 800e718:	3714      	adds	r7, #20
 800e71a:	46bd      	mov	sp, r7
 800e71c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e720:	4770      	bx	lr

0800e722 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800e722:	b480      	push	{r7}
 800e724:	b085      	sub	sp, #20
 800e726:	af00      	add	r7, sp, #0
 800e728:	6078      	str	r0, [r7, #4]
 800e72a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800e72c:	683b      	ldr	r3, [r7, #0]
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800e732:	68bb      	ldr	r3, [r7, #8]
 800e734:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e738:	d103      	bne.n	800e742 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800e73a:	687b      	ldr	r3, [r7, #4]
 800e73c:	691b      	ldr	r3, [r3, #16]
 800e73e:	60fb      	str	r3, [r7, #12]
 800e740:	e00c      	b.n	800e75c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800e742:	687b      	ldr	r3, [r7, #4]
 800e744:	3308      	adds	r3, #8
 800e746:	60fb      	str	r3, [r7, #12]
 800e748:	e002      	b.n	800e750 <vListInsert+0x2e>
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	685b      	ldr	r3, [r3, #4]
 800e74e:	60fb      	str	r3, [r7, #12]
 800e750:	68fb      	ldr	r3, [r7, #12]
 800e752:	685b      	ldr	r3, [r3, #4]
 800e754:	681b      	ldr	r3, [r3, #0]
 800e756:	68ba      	ldr	r2, [r7, #8]
 800e758:	429a      	cmp	r2, r3
 800e75a:	d2f6      	bcs.n	800e74a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800e75c:	68fb      	ldr	r3, [r7, #12]
 800e75e:	685a      	ldr	r2, [r3, #4]
 800e760:	683b      	ldr	r3, [r7, #0]
 800e762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800e764:	683b      	ldr	r3, [r7, #0]
 800e766:	685b      	ldr	r3, [r3, #4]
 800e768:	683a      	ldr	r2, [r7, #0]
 800e76a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800e76c:	683b      	ldr	r3, [r7, #0]
 800e76e:	68fa      	ldr	r2, [r7, #12]
 800e770:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800e772:	68fb      	ldr	r3, [r7, #12]
 800e774:	683a      	ldr	r2, [r7, #0]
 800e776:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800e778:	683b      	ldr	r3, [r7, #0]
 800e77a:	687a      	ldr	r2, [r7, #4]
 800e77c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800e77e:	687b      	ldr	r3, [r7, #4]
 800e780:	681b      	ldr	r3, [r3, #0]
 800e782:	1c5a      	adds	r2, r3, #1
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	601a      	str	r2, [r3, #0]
}
 800e788:	bf00      	nop
 800e78a:	3714      	adds	r7, #20
 800e78c:	46bd      	mov	sp, r7
 800e78e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e792:	4770      	bx	lr

0800e794 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800e794:	b480      	push	{r7}
 800e796:	b085      	sub	sp, #20
 800e798:	af00      	add	r7, sp, #0
 800e79a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800e79c:	687b      	ldr	r3, [r7, #4]
 800e79e:	691b      	ldr	r3, [r3, #16]
 800e7a0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	685b      	ldr	r3, [r3, #4]
 800e7a6:	687a      	ldr	r2, [r7, #4]
 800e7a8:	6892      	ldr	r2, [r2, #8]
 800e7aa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	689b      	ldr	r3, [r3, #8]
 800e7b0:	687a      	ldr	r2, [r7, #4]
 800e7b2:	6852      	ldr	r2, [r2, #4]
 800e7b4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800e7b6:	68fb      	ldr	r3, [r7, #12]
 800e7b8:	685b      	ldr	r3, [r3, #4]
 800e7ba:	687a      	ldr	r2, [r7, #4]
 800e7bc:	429a      	cmp	r2, r3
 800e7be:	d103      	bne.n	800e7c8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800e7c0:	687b      	ldr	r3, [r7, #4]
 800e7c2:	689a      	ldr	r2, [r3, #8]
 800e7c4:	68fb      	ldr	r3, [r7, #12]
 800e7c6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	1e5a      	subs	r2, r3, #1
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	681b      	ldr	r3, [r3, #0]
}
 800e7dc:	4618      	mov	r0, r3
 800e7de:	3714      	adds	r7, #20
 800e7e0:	46bd      	mov	sp, r7
 800e7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e7e6:	4770      	bx	lr

0800e7e8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800e7e8:	b580      	push	{r7, lr}
 800e7ea:	b084      	sub	sp, #16
 800e7ec:	af00      	add	r7, sp, #0
 800e7ee:	6078      	str	r0, [r7, #4]
 800e7f0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800e7f2:	687b      	ldr	r3, [r7, #4]
 800e7f4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800e7f6:	68fb      	ldr	r3, [r7, #12]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d10a      	bne.n	800e812 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800e7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e800:	f383 8811 	msr	BASEPRI, r3
 800e804:	f3bf 8f6f 	isb	sy
 800e808:	f3bf 8f4f 	dsb	sy
 800e80c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800e80e:	bf00      	nop
 800e810:	e7fe      	b.n	800e810 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800e812:	f002 fbb7 	bl	8010f84 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e816:	68fb      	ldr	r3, [r7, #12]
 800e818:	681a      	ldr	r2, [r3, #0]
 800e81a:	68fb      	ldr	r3, [r7, #12]
 800e81c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e81e:	68f9      	ldr	r1, [r7, #12]
 800e820:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e822:	fb01 f303 	mul.w	r3, r1, r3
 800e826:	441a      	add	r2, r3
 800e828:	68fb      	ldr	r3, [r7, #12]
 800e82a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e82c:	68fb      	ldr	r3, [r7, #12]
 800e82e:	2200      	movs	r2, #0
 800e830:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e832:	68fb      	ldr	r3, [r7, #12]
 800e834:	681a      	ldr	r2, [r3, #0]
 800e836:	68fb      	ldr	r3, [r7, #12]
 800e838:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e83a:	68fb      	ldr	r3, [r7, #12]
 800e83c:	681a      	ldr	r2, [r3, #0]
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800e842:	3b01      	subs	r3, #1
 800e844:	68f9      	ldr	r1, [r7, #12]
 800e846:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800e848:	fb01 f303 	mul.w	r3, r1, r3
 800e84c:	441a      	add	r2, r3
 800e84e:	68fb      	ldr	r3, [r7, #12]
 800e850:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	22ff      	movs	r2, #255	; 0xff
 800e856:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	22ff      	movs	r2, #255	; 0xff
 800e85e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800e862:	683b      	ldr	r3, [r7, #0]
 800e864:	2b00      	cmp	r3, #0
 800e866:	d114      	bne.n	800e892 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e868:	68fb      	ldr	r3, [r7, #12]
 800e86a:	691b      	ldr	r3, [r3, #16]
 800e86c:	2b00      	cmp	r3, #0
 800e86e:	d01a      	beq.n	800e8a6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	3310      	adds	r3, #16
 800e874:	4618      	mov	r0, r3
 800e876:	f001 fb6d 	bl	800ff54 <xTaskRemoveFromEventList>
 800e87a:	4603      	mov	r3, r0
 800e87c:	2b00      	cmp	r3, #0
 800e87e:	d012      	beq.n	800e8a6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800e880:	4b0c      	ldr	r3, [pc, #48]	; (800e8b4 <xQueueGenericReset+0xcc>)
 800e882:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e886:	601a      	str	r2, [r3, #0]
 800e888:	f3bf 8f4f 	dsb	sy
 800e88c:	f3bf 8f6f 	isb	sy
 800e890:	e009      	b.n	800e8a6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e892:	68fb      	ldr	r3, [r7, #12]
 800e894:	3310      	adds	r3, #16
 800e896:	4618      	mov	r0, r3
 800e898:	f7ff fef2 	bl	800e680 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e89c:	68fb      	ldr	r3, [r7, #12]
 800e89e:	3324      	adds	r3, #36	; 0x24
 800e8a0:	4618      	mov	r0, r3
 800e8a2:	f7ff feed 	bl	800e680 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800e8a6:	f002 fb9d 	bl	8010fe4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800e8aa:	2301      	movs	r3, #1
}
 800e8ac:	4618      	mov	r0, r3
 800e8ae:	3710      	adds	r7, #16
 800e8b0:	46bd      	mov	sp, r7
 800e8b2:	bd80      	pop	{r7, pc}
 800e8b4:	e000ed04 	.word	0xe000ed04

0800e8b8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800e8b8:	b580      	push	{r7, lr}
 800e8ba:	b08e      	sub	sp, #56	; 0x38
 800e8bc:	af02      	add	r7, sp, #8
 800e8be:	60f8      	str	r0, [r7, #12]
 800e8c0:	60b9      	str	r1, [r7, #8]
 800e8c2:	607a      	str	r2, [r7, #4]
 800e8c4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e8c6:	68fb      	ldr	r3, [r7, #12]
 800e8c8:	2b00      	cmp	r3, #0
 800e8ca:	d10a      	bne.n	800e8e2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800e8cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8d0:	f383 8811 	msr	BASEPRI, r3
 800e8d4:	f3bf 8f6f 	isb	sy
 800e8d8:	f3bf 8f4f 	dsb	sy
 800e8dc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800e8de:	bf00      	nop
 800e8e0:	e7fe      	b.n	800e8e0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800e8e2:	683b      	ldr	r3, [r7, #0]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d10a      	bne.n	800e8fe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800e8e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8ec:	f383 8811 	msr	BASEPRI, r3
 800e8f0:	f3bf 8f6f 	isb	sy
 800e8f4:	f3bf 8f4f 	dsb	sy
 800e8f8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800e8fa:	bf00      	nop
 800e8fc:	e7fe      	b.n	800e8fc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e8fe:	687b      	ldr	r3, [r7, #4]
 800e900:	2b00      	cmp	r3, #0
 800e902:	d002      	beq.n	800e90a <xQueueGenericCreateStatic+0x52>
 800e904:	68bb      	ldr	r3, [r7, #8]
 800e906:	2b00      	cmp	r3, #0
 800e908:	d001      	beq.n	800e90e <xQueueGenericCreateStatic+0x56>
 800e90a:	2301      	movs	r3, #1
 800e90c:	e000      	b.n	800e910 <xQueueGenericCreateStatic+0x58>
 800e90e:	2300      	movs	r3, #0
 800e910:	2b00      	cmp	r3, #0
 800e912:	d10a      	bne.n	800e92a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800e914:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e918:	f383 8811 	msr	BASEPRI, r3
 800e91c:	f3bf 8f6f 	isb	sy
 800e920:	f3bf 8f4f 	dsb	sy
 800e924:	623b      	str	r3, [r7, #32]
}
 800e926:	bf00      	nop
 800e928:	e7fe      	b.n	800e928 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e92a:	687b      	ldr	r3, [r7, #4]
 800e92c:	2b00      	cmp	r3, #0
 800e92e:	d102      	bne.n	800e936 <xQueueGenericCreateStatic+0x7e>
 800e930:	68bb      	ldr	r3, [r7, #8]
 800e932:	2b00      	cmp	r3, #0
 800e934:	d101      	bne.n	800e93a <xQueueGenericCreateStatic+0x82>
 800e936:	2301      	movs	r3, #1
 800e938:	e000      	b.n	800e93c <xQueueGenericCreateStatic+0x84>
 800e93a:	2300      	movs	r3, #0
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d10a      	bne.n	800e956 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800e940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e944:	f383 8811 	msr	BASEPRI, r3
 800e948:	f3bf 8f6f 	isb	sy
 800e94c:	f3bf 8f4f 	dsb	sy
 800e950:	61fb      	str	r3, [r7, #28]
}
 800e952:	bf00      	nop
 800e954:	e7fe      	b.n	800e954 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e956:	2350      	movs	r3, #80	; 0x50
 800e958:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e95a:	697b      	ldr	r3, [r7, #20]
 800e95c:	2b50      	cmp	r3, #80	; 0x50
 800e95e:	d00a      	beq.n	800e976 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800e960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e964:	f383 8811 	msr	BASEPRI, r3
 800e968:	f3bf 8f6f 	isb	sy
 800e96c:	f3bf 8f4f 	dsb	sy
 800e970:	61bb      	str	r3, [r7, #24]
}
 800e972:	bf00      	nop
 800e974:	e7fe      	b.n	800e974 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e976:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800e978:	683b      	ldr	r3, [r7, #0]
 800e97a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800e97c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e97e:	2b00      	cmp	r3, #0
 800e980:	d00d      	beq.n	800e99e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e982:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e984:	2201      	movs	r2, #1
 800e986:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800e98a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800e98e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e990:	9300      	str	r3, [sp, #0]
 800e992:	4613      	mov	r3, r2
 800e994:	687a      	ldr	r2, [r7, #4]
 800e996:	68b9      	ldr	r1, [r7, #8]
 800e998:	68f8      	ldr	r0, [r7, #12]
 800e99a:	f000 f83f 	bl	800ea1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800e99e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800e9a0:	4618      	mov	r0, r3
 800e9a2:	3730      	adds	r7, #48	; 0x30
 800e9a4:	46bd      	mov	sp, r7
 800e9a6:	bd80      	pop	{r7, pc}

0800e9a8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b08a      	sub	sp, #40	; 0x28
 800e9ac:	af02      	add	r7, sp, #8
 800e9ae:	60f8      	str	r0, [r7, #12]
 800e9b0:	60b9      	str	r1, [r7, #8]
 800e9b2:	4613      	mov	r3, r2
 800e9b4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	2b00      	cmp	r3, #0
 800e9ba:	d10a      	bne.n	800e9d2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800e9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e9c0:	f383 8811 	msr	BASEPRI, r3
 800e9c4:	f3bf 8f6f 	isb	sy
 800e9c8:	f3bf 8f4f 	dsb	sy
 800e9cc:	613b      	str	r3, [r7, #16]
}
 800e9ce:	bf00      	nop
 800e9d0:	e7fe      	b.n	800e9d0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e9d2:	68fb      	ldr	r3, [r7, #12]
 800e9d4:	68ba      	ldr	r2, [r7, #8]
 800e9d6:	fb02 f303 	mul.w	r3, r2, r3
 800e9da:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e9dc:	69fb      	ldr	r3, [r7, #28]
 800e9de:	3350      	adds	r3, #80	; 0x50
 800e9e0:	4618      	mov	r0, r3
 800e9e2:	f002 fbf1 	bl	80111c8 <pvPortMalloc>
 800e9e6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800e9e8:	69bb      	ldr	r3, [r7, #24]
 800e9ea:	2b00      	cmp	r3, #0
 800e9ec:	d011      	beq.n	800ea12 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800e9ee:	69bb      	ldr	r3, [r7, #24]
 800e9f0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e9f2:	697b      	ldr	r3, [r7, #20]
 800e9f4:	3350      	adds	r3, #80	; 0x50
 800e9f6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e9f8:	69bb      	ldr	r3, [r7, #24]
 800e9fa:	2200      	movs	r2, #0
 800e9fc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ea00:	79fa      	ldrb	r2, [r7, #7]
 800ea02:	69bb      	ldr	r3, [r7, #24]
 800ea04:	9300      	str	r3, [sp, #0]
 800ea06:	4613      	mov	r3, r2
 800ea08:	697a      	ldr	r2, [r7, #20]
 800ea0a:	68b9      	ldr	r1, [r7, #8]
 800ea0c:	68f8      	ldr	r0, [r7, #12]
 800ea0e:	f000 f805 	bl	800ea1c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ea12:	69bb      	ldr	r3, [r7, #24]
	}
 800ea14:	4618      	mov	r0, r3
 800ea16:	3720      	adds	r7, #32
 800ea18:	46bd      	mov	sp, r7
 800ea1a:	bd80      	pop	{r7, pc}

0800ea1c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b084      	sub	sp, #16
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	60f8      	str	r0, [r7, #12]
 800ea24:	60b9      	str	r1, [r7, #8]
 800ea26:	607a      	str	r2, [r7, #4]
 800ea28:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ea2a:	68bb      	ldr	r3, [r7, #8]
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d103      	bne.n	800ea38 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800ea30:	69bb      	ldr	r3, [r7, #24]
 800ea32:	69ba      	ldr	r2, [r7, #24]
 800ea34:	601a      	str	r2, [r3, #0]
 800ea36:	e002      	b.n	800ea3e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ea38:	69bb      	ldr	r3, [r7, #24]
 800ea3a:	687a      	ldr	r2, [r7, #4]
 800ea3c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ea3e:	69bb      	ldr	r3, [r7, #24]
 800ea40:	68fa      	ldr	r2, [r7, #12]
 800ea42:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ea44:	69bb      	ldr	r3, [r7, #24]
 800ea46:	68ba      	ldr	r2, [r7, #8]
 800ea48:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800ea4a:	2101      	movs	r1, #1
 800ea4c:	69b8      	ldr	r0, [r7, #24]
 800ea4e:	f7ff fecb 	bl	800e7e8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800ea52:	69bb      	ldr	r3, [r7, #24]
 800ea54:	78fa      	ldrb	r2, [r7, #3]
 800ea56:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800ea5a:	bf00      	nop
 800ea5c:	3710      	adds	r7, #16
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	bd80      	pop	{r7, pc}
	...

0800ea64 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800ea64:	b580      	push	{r7, lr}
 800ea66:	b08e      	sub	sp, #56	; 0x38
 800ea68:	af00      	add	r7, sp, #0
 800ea6a:	60f8      	str	r0, [r7, #12]
 800ea6c:	60b9      	str	r1, [r7, #8]
 800ea6e:	607a      	str	r2, [r7, #4]
 800ea70:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800ea72:	2300      	movs	r3, #0
 800ea74:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ea76:	68fb      	ldr	r3, [r7, #12]
 800ea78:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800ea7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d10a      	bne.n	800ea96 <xQueueGenericSend+0x32>
	__asm volatile
 800ea80:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea84:	f383 8811 	msr	BASEPRI, r3
 800ea88:	f3bf 8f6f 	isb	sy
 800ea8c:	f3bf 8f4f 	dsb	sy
 800ea90:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ea92:	bf00      	nop
 800ea94:	e7fe      	b.n	800ea94 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ea96:	68bb      	ldr	r3, [r7, #8]
 800ea98:	2b00      	cmp	r3, #0
 800ea9a:	d103      	bne.n	800eaa4 <xQueueGenericSend+0x40>
 800ea9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ea9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eaa0:	2b00      	cmp	r3, #0
 800eaa2:	d101      	bne.n	800eaa8 <xQueueGenericSend+0x44>
 800eaa4:	2301      	movs	r3, #1
 800eaa6:	e000      	b.n	800eaaa <xQueueGenericSend+0x46>
 800eaa8:	2300      	movs	r3, #0
 800eaaa:	2b00      	cmp	r3, #0
 800eaac:	d10a      	bne.n	800eac4 <xQueueGenericSend+0x60>
	__asm volatile
 800eaae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eab2:	f383 8811 	msr	BASEPRI, r3
 800eab6:	f3bf 8f6f 	isb	sy
 800eaba:	f3bf 8f4f 	dsb	sy
 800eabe:	627b      	str	r3, [r7, #36]	; 0x24
}
 800eac0:	bf00      	nop
 800eac2:	e7fe      	b.n	800eac2 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	2b02      	cmp	r3, #2
 800eac8:	d103      	bne.n	800ead2 <xQueueGenericSend+0x6e>
 800eaca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eacc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eace:	2b01      	cmp	r3, #1
 800ead0:	d101      	bne.n	800ead6 <xQueueGenericSend+0x72>
 800ead2:	2301      	movs	r3, #1
 800ead4:	e000      	b.n	800ead8 <xQueueGenericSend+0x74>
 800ead6:	2300      	movs	r3, #0
 800ead8:	2b00      	cmp	r3, #0
 800eada:	d10a      	bne.n	800eaf2 <xQueueGenericSend+0x8e>
	__asm volatile
 800eadc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eae0:	f383 8811 	msr	BASEPRI, r3
 800eae4:	f3bf 8f6f 	isb	sy
 800eae8:	f3bf 8f4f 	dsb	sy
 800eaec:	623b      	str	r3, [r7, #32]
}
 800eaee:	bf00      	nop
 800eaf0:	e7fe      	b.n	800eaf0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800eaf2:	f001 fbed 	bl	80102d0 <xTaskGetSchedulerState>
 800eaf6:	4603      	mov	r3, r0
 800eaf8:	2b00      	cmp	r3, #0
 800eafa:	d102      	bne.n	800eb02 <xQueueGenericSend+0x9e>
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	2b00      	cmp	r3, #0
 800eb00:	d101      	bne.n	800eb06 <xQueueGenericSend+0xa2>
 800eb02:	2301      	movs	r3, #1
 800eb04:	e000      	b.n	800eb08 <xQueueGenericSend+0xa4>
 800eb06:	2300      	movs	r3, #0
 800eb08:	2b00      	cmp	r3, #0
 800eb0a:	d10a      	bne.n	800eb22 <xQueueGenericSend+0xbe>
	__asm volatile
 800eb0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb10:	f383 8811 	msr	BASEPRI, r3
 800eb14:	f3bf 8f6f 	isb	sy
 800eb18:	f3bf 8f4f 	dsb	sy
 800eb1c:	61fb      	str	r3, [r7, #28]
}
 800eb1e:	bf00      	nop
 800eb20:	e7fe      	b.n	800eb20 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800eb22:	f002 fa2f 	bl	8010f84 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800eb26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800eb2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eb2e:	429a      	cmp	r2, r3
 800eb30:	d302      	bcc.n	800eb38 <xQueueGenericSend+0xd4>
 800eb32:	683b      	ldr	r3, [r7, #0]
 800eb34:	2b02      	cmp	r3, #2
 800eb36:	d129      	bne.n	800eb8c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800eb38:	683a      	ldr	r2, [r7, #0]
 800eb3a:	68b9      	ldr	r1, [r7, #8]
 800eb3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800eb3e:	f000 fc3b 	bl	800f3b8 <prvCopyDataToQueue>
 800eb42:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800eb44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d010      	beq.n	800eb6e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800eb4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eb4e:	3324      	adds	r3, #36	; 0x24
 800eb50:	4618      	mov	r0, r3
 800eb52:	f001 f9ff 	bl	800ff54 <xTaskRemoveFromEventList>
 800eb56:	4603      	mov	r3, r0
 800eb58:	2b00      	cmp	r3, #0
 800eb5a:	d013      	beq.n	800eb84 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800eb5c:	4b3f      	ldr	r3, [pc, #252]	; (800ec5c <xQueueGenericSend+0x1f8>)
 800eb5e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb62:	601a      	str	r2, [r3, #0]
 800eb64:	f3bf 8f4f 	dsb	sy
 800eb68:	f3bf 8f6f 	isb	sy
 800eb6c:	e00a      	b.n	800eb84 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800eb6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eb70:	2b00      	cmp	r3, #0
 800eb72:	d007      	beq.n	800eb84 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800eb74:	4b39      	ldr	r3, [pc, #228]	; (800ec5c <xQueueGenericSend+0x1f8>)
 800eb76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb7a:	601a      	str	r2, [r3, #0]
 800eb7c:	f3bf 8f4f 	dsb	sy
 800eb80:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800eb84:	f002 fa2e 	bl	8010fe4 <vPortExitCritical>
				return pdPASS;
 800eb88:	2301      	movs	r3, #1
 800eb8a:	e063      	b.n	800ec54 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800eb8c:	687b      	ldr	r3, [r7, #4]
 800eb8e:	2b00      	cmp	r3, #0
 800eb90:	d103      	bne.n	800eb9a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800eb92:	f002 fa27 	bl	8010fe4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800eb96:	2300      	movs	r3, #0
 800eb98:	e05c      	b.n	800ec54 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800eb9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800eb9c:	2b00      	cmp	r3, #0
 800eb9e:	d106      	bne.n	800ebae <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eba0:	f107 0314 	add.w	r3, r7, #20
 800eba4:	4618      	mov	r0, r3
 800eba6:	f001 fa39 	bl	801001c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ebaa:	2301      	movs	r3, #1
 800ebac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ebae:	f002 fa19 	bl	8010fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ebb2:	f000 ffab 	bl	800fb0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ebb6:	f002 f9e5 	bl	8010f84 <vPortEnterCritical>
 800ebba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebbc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ebc0:	b25b      	sxtb	r3, r3
 800ebc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebc6:	d103      	bne.n	800ebd0 <xQueueGenericSend+0x16c>
 800ebc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebca:	2200      	movs	r2, #0
 800ebcc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ebd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ebd6:	b25b      	sxtb	r3, r3
 800ebd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ebdc:	d103      	bne.n	800ebe6 <xQueueGenericSend+0x182>
 800ebde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ebe0:	2200      	movs	r2, #0
 800ebe2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ebe6:	f002 f9fd 	bl	8010fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ebea:	1d3a      	adds	r2, r7, #4
 800ebec:	f107 0314 	add.w	r3, r7, #20
 800ebf0:	4611      	mov	r1, r2
 800ebf2:	4618      	mov	r0, r3
 800ebf4:	f001 fa28 	bl	8010048 <xTaskCheckForTimeOut>
 800ebf8:	4603      	mov	r3, r0
 800ebfa:	2b00      	cmp	r3, #0
 800ebfc:	d124      	bne.n	800ec48 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800ebfe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec00:	f000 fcd2 	bl	800f5a8 <prvIsQueueFull>
 800ec04:	4603      	mov	r3, r0
 800ec06:	2b00      	cmp	r3, #0
 800ec08:	d018      	beq.n	800ec3c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800ec0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ec0c:	3310      	adds	r3, #16
 800ec0e:	687a      	ldr	r2, [r7, #4]
 800ec10:	4611      	mov	r1, r2
 800ec12:	4618      	mov	r0, r3
 800ec14:	f001 f94e 	bl	800feb4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800ec18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec1a:	f000 fc5d 	bl	800f4d8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800ec1e:	f000 ff83 	bl	800fb28 <xTaskResumeAll>
 800ec22:	4603      	mov	r3, r0
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	f47f af7c 	bne.w	800eb22 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800ec2a:	4b0c      	ldr	r3, [pc, #48]	; (800ec5c <xQueueGenericSend+0x1f8>)
 800ec2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec30:	601a      	str	r2, [r3, #0]
 800ec32:	f3bf 8f4f 	dsb	sy
 800ec36:	f3bf 8f6f 	isb	sy
 800ec3a:	e772      	b.n	800eb22 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800ec3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec3e:	f000 fc4b 	bl	800f4d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ec42:	f000 ff71 	bl	800fb28 <xTaskResumeAll>
 800ec46:	e76c      	b.n	800eb22 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800ec48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800ec4a:	f000 fc45 	bl	800f4d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ec4e:	f000 ff6b 	bl	800fb28 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800ec52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800ec54:	4618      	mov	r0, r3
 800ec56:	3738      	adds	r7, #56	; 0x38
 800ec58:	46bd      	mov	sp, r7
 800ec5a:	bd80      	pop	{r7, pc}
 800ec5c:	e000ed04 	.word	0xe000ed04

0800ec60 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800ec60:	b580      	push	{r7, lr}
 800ec62:	b090      	sub	sp, #64	; 0x40
 800ec64:	af00      	add	r7, sp, #0
 800ec66:	60f8      	str	r0, [r7, #12]
 800ec68:	60b9      	str	r1, [r7, #8]
 800ec6a:	607a      	str	r2, [r7, #4]
 800ec6c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800ec6e:	68fb      	ldr	r3, [r7, #12]
 800ec70:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800ec72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec74:	2b00      	cmp	r3, #0
 800ec76:	d10a      	bne.n	800ec8e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800ec78:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec7c:	f383 8811 	msr	BASEPRI, r3
 800ec80:	f3bf 8f6f 	isb	sy
 800ec84:	f3bf 8f4f 	dsb	sy
 800ec88:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800ec8a:	bf00      	nop
 800ec8c:	e7fe      	b.n	800ec8c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ec8e:	68bb      	ldr	r3, [r7, #8]
 800ec90:	2b00      	cmp	r3, #0
 800ec92:	d103      	bne.n	800ec9c <xQueueGenericSendFromISR+0x3c>
 800ec94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ec96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ec98:	2b00      	cmp	r3, #0
 800ec9a:	d101      	bne.n	800eca0 <xQueueGenericSendFromISR+0x40>
 800ec9c:	2301      	movs	r3, #1
 800ec9e:	e000      	b.n	800eca2 <xQueueGenericSendFromISR+0x42>
 800eca0:	2300      	movs	r3, #0
 800eca2:	2b00      	cmp	r3, #0
 800eca4:	d10a      	bne.n	800ecbc <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800eca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecaa:	f383 8811 	msr	BASEPRI, r3
 800ecae:	f3bf 8f6f 	isb	sy
 800ecb2:	f3bf 8f4f 	dsb	sy
 800ecb6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800ecb8:	bf00      	nop
 800ecba:	e7fe      	b.n	800ecba <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ecbc:	683b      	ldr	r3, [r7, #0]
 800ecbe:	2b02      	cmp	r3, #2
 800ecc0:	d103      	bne.n	800ecca <xQueueGenericSendFromISR+0x6a>
 800ecc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ecc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ecc6:	2b01      	cmp	r3, #1
 800ecc8:	d101      	bne.n	800ecce <xQueueGenericSendFromISR+0x6e>
 800ecca:	2301      	movs	r3, #1
 800eccc:	e000      	b.n	800ecd0 <xQueueGenericSendFromISR+0x70>
 800ecce:	2300      	movs	r3, #0
 800ecd0:	2b00      	cmp	r3, #0
 800ecd2:	d10a      	bne.n	800ecea <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800ecd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecd8:	f383 8811 	msr	BASEPRI, r3
 800ecdc:	f3bf 8f6f 	isb	sy
 800ece0:	f3bf 8f4f 	dsb	sy
 800ece4:	623b      	str	r3, [r7, #32]
}
 800ece6:	bf00      	nop
 800ece8:	e7fe      	b.n	800ece8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ecea:	f002 fa2d 	bl	8011148 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800ecee:	f3ef 8211 	mrs	r2, BASEPRI
 800ecf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ecf6:	f383 8811 	msr	BASEPRI, r3
 800ecfa:	f3bf 8f6f 	isb	sy
 800ecfe:	f3bf 8f4f 	dsb	sy
 800ed02:	61fa      	str	r2, [r7, #28]
 800ed04:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800ed06:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ed08:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ed0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed0c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ed0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d302      	bcc.n	800ed1c <xQueueGenericSendFromISR+0xbc>
 800ed16:	683b      	ldr	r3, [r7, #0]
 800ed18:	2b02      	cmp	r3, #2
 800ed1a:	d12f      	bne.n	800ed7c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ed1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ed22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ed26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ed2a:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ed2c:	683a      	ldr	r2, [r7, #0]
 800ed2e:	68b9      	ldr	r1, [r7, #8]
 800ed30:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ed32:	f000 fb41 	bl	800f3b8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ed36:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ed3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ed3e:	d112      	bne.n	800ed66 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ed40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ed44:	2b00      	cmp	r3, #0
 800ed46:	d016      	beq.n	800ed76 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ed48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed4a:	3324      	adds	r3, #36	; 0x24
 800ed4c:	4618      	mov	r0, r3
 800ed4e:	f001 f901 	bl	800ff54 <xTaskRemoveFromEventList>
 800ed52:	4603      	mov	r3, r0
 800ed54:	2b00      	cmp	r3, #0
 800ed56:	d00e      	beq.n	800ed76 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	2b00      	cmp	r3, #0
 800ed5c:	d00b      	beq.n	800ed76 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ed5e:	687b      	ldr	r3, [r7, #4]
 800ed60:	2201      	movs	r2, #1
 800ed62:	601a      	str	r2, [r3, #0]
 800ed64:	e007      	b.n	800ed76 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ed66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ed6a:	3301      	adds	r3, #1
 800ed6c:	b2db      	uxtb	r3, r3
 800ed6e:	b25a      	sxtb	r2, r3
 800ed70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ed72:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ed76:	2301      	movs	r3, #1
 800ed78:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ed7a:	e001      	b.n	800ed80 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ed7c:	2300      	movs	r3, #0
 800ed7e:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ed80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ed82:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ed84:	697b      	ldr	r3, [r7, #20]
 800ed86:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ed8a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ed8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ed8e:	4618      	mov	r0, r3
 800ed90:	3740      	adds	r7, #64	; 0x40
 800ed92:	46bd      	mov	sp, r7
 800ed94:	bd80      	pop	{r7, pc}

0800ed96 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800ed96:	b580      	push	{r7, lr}
 800ed98:	b08e      	sub	sp, #56	; 0x38
 800ed9a:	af00      	add	r7, sp, #0
 800ed9c:	6078      	str	r0, [r7, #4]
 800ed9e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800eda0:	687b      	ldr	r3, [r7, #4]
 800eda2:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800eda4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d10a      	bne.n	800edc0 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800edaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edae:	f383 8811 	msr	BASEPRI, r3
 800edb2:	f3bf 8f6f 	isb	sy
 800edb6:	f3bf 8f4f 	dsb	sy
 800edba:	623b      	str	r3, [r7, #32]
}
 800edbc:	bf00      	nop
 800edbe:	e7fe      	b.n	800edbe <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800edc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800edc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800edc4:	2b00      	cmp	r3, #0
 800edc6:	d00a      	beq.n	800edde <xQueueGiveFromISR+0x48>
	__asm volatile
 800edc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edcc:	f383 8811 	msr	BASEPRI, r3
 800edd0:	f3bf 8f6f 	isb	sy
 800edd4:	f3bf 8f4f 	dsb	sy
 800edd8:	61fb      	str	r3, [r7, #28]
}
 800edda:	bf00      	nop
 800eddc:	e7fe      	b.n	800eddc <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800edde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede0:	681b      	ldr	r3, [r3, #0]
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d103      	bne.n	800edee <xQueueGiveFromISR+0x58>
 800ede6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ede8:	689b      	ldr	r3, [r3, #8]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d101      	bne.n	800edf2 <xQueueGiveFromISR+0x5c>
 800edee:	2301      	movs	r3, #1
 800edf0:	e000      	b.n	800edf4 <xQueueGiveFromISR+0x5e>
 800edf2:	2300      	movs	r3, #0
 800edf4:	2b00      	cmp	r3, #0
 800edf6:	d10a      	bne.n	800ee0e <xQueueGiveFromISR+0x78>
	__asm volatile
 800edf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfc:	f383 8811 	msr	BASEPRI, r3
 800ee00:	f3bf 8f6f 	isb	sy
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	61bb      	str	r3, [r7, #24]
}
 800ee0a:	bf00      	nop
 800ee0c:	e7fe      	b.n	800ee0c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ee0e:	f002 f99b 	bl	8011148 <vPortValidateInterruptPriority>
	__asm volatile
 800ee12:	f3ef 8211 	mrs	r2, BASEPRI
 800ee16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1a:	f383 8811 	msr	BASEPRI, r3
 800ee1e:	f3bf 8f6f 	isb	sy
 800ee22:	f3bf 8f4f 	dsb	sy
 800ee26:	617a      	str	r2, [r7, #20]
 800ee28:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ee2a:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ee2c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ee2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ee32:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ee34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ee38:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ee3a:	429a      	cmp	r2, r3
 800ee3c:	d22b      	bcs.n	800ee96 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ee3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee40:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ee44:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ee48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee4a:	1c5a      	adds	r2, r3, #1
 800ee4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee4e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ee50:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ee54:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee58:	d112      	bne.n	800ee80 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ee5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ee5e:	2b00      	cmp	r3, #0
 800ee60:	d016      	beq.n	800ee90 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ee62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee64:	3324      	adds	r3, #36	; 0x24
 800ee66:	4618      	mov	r0, r3
 800ee68:	f001 f874 	bl	800ff54 <xTaskRemoveFromEventList>
 800ee6c:	4603      	mov	r3, r0
 800ee6e:	2b00      	cmp	r3, #0
 800ee70:	d00e      	beq.n	800ee90 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ee72:	683b      	ldr	r3, [r7, #0]
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d00b      	beq.n	800ee90 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ee78:	683b      	ldr	r3, [r7, #0]
 800ee7a:	2201      	movs	r2, #1
 800ee7c:	601a      	str	r2, [r3, #0]
 800ee7e:	e007      	b.n	800ee90 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ee80:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ee84:	3301      	adds	r3, #1
 800ee86:	b2db      	uxtb	r3, r3
 800ee88:	b25a      	sxtb	r2, r3
 800ee8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ee8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ee90:	2301      	movs	r3, #1
 800ee92:	637b      	str	r3, [r7, #52]	; 0x34
 800ee94:	e001      	b.n	800ee9a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ee96:	2300      	movs	r3, #0
 800ee98:	637b      	str	r3, [r7, #52]	; 0x34
 800ee9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ee9c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800ee9e:	68fb      	ldr	r3, [r7, #12]
 800eea0:	f383 8811 	msr	BASEPRI, r3
}
 800eea4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800eea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800eea8:	4618      	mov	r0, r3
 800eeaa:	3738      	adds	r7, #56	; 0x38
 800eeac:	46bd      	mov	sp, r7
 800eeae:	bd80      	pop	{r7, pc}

0800eeb0 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800eeb0:	b580      	push	{r7, lr}
 800eeb2:	b08c      	sub	sp, #48	; 0x30
 800eeb4:	af00      	add	r7, sp, #0
 800eeb6:	60f8      	str	r0, [r7, #12]
 800eeb8:	60b9      	str	r1, [r7, #8]
 800eeba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800eebc:	2300      	movs	r3, #0
 800eebe:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800eec0:	68fb      	ldr	r3, [r7, #12]
 800eec2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800eec4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eec6:	2b00      	cmp	r3, #0
 800eec8:	d10a      	bne.n	800eee0 <xQueueReceive+0x30>
	__asm volatile
 800eeca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eece:	f383 8811 	msr	BASEPRI, r3
 800eed2:	f3bf 8f6f 	isb	sy
 800eed6:	f3bf 8f4f 	dsb	sy
 800eeda:	623b      	str	r3, [r7, #32]
}
 800eedc:	bf00      	nop
 800eede:	e7fe      	b.n	800eede <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800eee0:	68bb      	ldr	r3, [r7, #8]
 800eee2:	2b00      	cmp	r3, #0
 800eee4:	d103      	bne.n	800eeee <xQueueReceive+0x3e>
 800eee6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800eeea:	2b00      	cmp	r3, #0
 800eeec:	d101      	bne.n	800eef2 <xQueueReceive+0x42>
 800eeee:	2301      	movs	r3, #1
 800eef0:	e000      	b.n	800eef4 <xQueueReceive+0x44>
 800eef2:	2300      	movs	r3, #0
 800eef4:	2b00      	cmp	r3, #0
 800eef6:	d10a      	bne.n	800ef0e <xQueueReceive+0x5e>
	__asm volatile
 800eef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eefc:	f383 8811 	msr	BASEPRI, r3
 800ef00:	f3bf 8f6f 	isb	sy
 800ef04:	f3bf 8f4f 	dsb	sy
 800ef08:	61fb      	str	r3, [r7, #28]
}
 800ef0a:	bf00      	nop
 800ef0c:	e7fe      	b.n	800ef0c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ef0e:	f001 f9df 	bl	80102d0 <xTaskGetSchedulerState>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d102      	bne.n	800ef1e <xQueueReceive+0x6e>
 800ef18:	687b      	ldr	r3, [r7, #4]
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	d101      	bne.n	800ef22 <xQueueReceive+0x72>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e000      	b.n	800ef24 <xQueueReceive+0x74>
 800ef22:	2300      	movs	r3, #0
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d10a      	bne.n	800ef3e <xQueueReceive+0x8e>
	__asm volatile
 800ef28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef2c:	f383 8811 	msr	BASEPRI, r3
 800ef30:	f3bf 8f6f 	isb	sy
 800ef34:	f3bf 8f4f 	dsb	sy
 800ef38:	61bb      	str	r3, [r7, #24]
}
 800ef3a:	bf00      	nop
 800ef3c:	e7fe      	b.n	800ef3c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ef3e:	f002 f821 	bl	8010f84 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ef42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ef46:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ef48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef4a:	2b00      	cmp	r3, #0
 800ef4c:	d01f      	beq.n	800ef8e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ef4e:	68b9      	ldr	r1, [r7, #8]
 800ef50:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ef52:	f000 fa9b 	bl	800f48c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ef56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ef58:	1e5a      	subs	r2, r3, #1
 800ef5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef5c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ef5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef60:	691b      	ldr	r3, [r3, #16]
 800ef62:	2b00      	cmp	r3, #0
 800ef64:	d00f      	beq.n	800ef86 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ef66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef68:	3310      	adds	r3, #16
 800ef6a:	4618      	mov	r0, r3
 800ef6c:	f000 fff2 	bl	800ff54 <xTaskRemoveFromEventList>
 800ef70:	4603      	mov	r3, r0
 800ef72:	2b00      	cmp	r3, #0
 800ef74:	d007      	beq.n	800ef86 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ef76:	4b3d      	ldr	r3, [pc, #244]	; (800f06c <xQueueReceive+0x1bc>)
 800ef78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ef7c:	601a      	str	r2, [r3, #0]
 800ef7e:	f3bf 8f4f 	dsb	sy
 800ef82:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ef86:	f002 f82d 	bl	8010fe4 <vPortExitCritical>
				return pdPASS;
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	e069      	b.n	800f062 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d103      	bne.n	800ef9c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ef94:	f002 f826 	bl	8010fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ef98:	2300      	movs	r3, #0
 800ef9a:	e062      	b.n	800f062 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ef9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ef9e:	2b00      	cmp	r3, #0
 800efa0:	d106      	bne.n	800efb0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800efa2:	f107 0310 	add.w	r3, r7, #16
 800efa6:	4618      	mov	r0, r3
 800efa8:	f001 f838 	bl	801001c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800efac:	2301      	movs	r3, #1
 800efae:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800efb0:	f002 f818 	bl	8010fe4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800efb4:	f000 fdaa 	bl	800fb0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800efb8:	f001 ffe4 	bl	8010f84 <vPortEnterCritical>
 800efbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efbe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800efc2:	b25b      	sxtb	r3, r3
 800efc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efc8:	d103      	bne.n	800efd2 <xQueueReceive+0x122>
 800efca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efcc:	2200      	movs	r2, #0
 800efce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800efd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efd4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800efd8:	b25b      	sxtb	r3, r3
 800efda:	f1b3 3fff 	cmp.w	r3, #4294967295
 800efde:	d103      	bne.n	800efe8 <xQueueReceive+0x138>
 800efe0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800efe2:	2200      	movs	r2, #0
 800efe4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800efe8:	f001 fffc 	bl	8010fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800efec:	1d3a      	adds	r2, r7, #4
 800efee:	f107 0310 	add.w	r3, r7, #16
 800eff2:	4611      	mov	r1, r2
 800eff4:	4618      	mov	r0, r3
 800eff6:	f001 f827 	bl	8010048 <xTaskCheckForTimeOut>
 800effa:	4603      	mov	r3, r0
 800effc:	2b00      	cmp	r3, #0
 800effe:	d123      	bne.n	800f048 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f000:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f002:	f000 fabb 	bl	800f57c <prvIsQueueEmpty>
 800f006:	4603      	mov	r3, r0
 800f008:	2b00      	cmp	r3, #0
 800f00a:	d017      	beq.n	800f03c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f00e:	3324      	adds	r3, #36	; 0x24
 800f010:	687a      	ldr	r2, [r7, #4]
 800f012:	4611      	mov	r1, r2
 800f014:	4618      	mov	r0, r3
 800f016:	f000 ff4d 	bl	800feb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f01a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f01c:	f000 fa5c 	bl	800f4d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f020:	f000 fd82 	bl	800fb28 <xTaskResumeAll>
 800f024:	4603      	mov	r3, r0
 800f026:	2b00      	cmp	r3, #0
 800f028:	d189      	bne.n	800ef3e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800f02a:	4b10      	ldr	r3, [pc, #64]	; (800f06c <xQueueReceive+0x1bc>)
 800f02c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f030:	601a      	str	r2, [r3, #0]
 800f032:	f3bf 8f4f 	dsb	sy
 800f036:	f3bf 8f6f 	isb	sy
 800f03a:	e780      	b.n	800ef3e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f03c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f03e:	f000 fa4b 	bl	800f4d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f042:	f000 fd71 	bl	800fb28 <xTaskResumeAll>
 800f046:	e77a      	b.n	800ef3e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f048:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f04a:	f000 fa45 	bl	800f4d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f04e:	f000 fd6b 	bl	800fb28 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f052:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f054:	f000 fa92 	bl	800f57c <prvIsQueueEmpty>
 800f058:	4603      	mov	r3, r0
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	f43f af6f 	beq.w	800ef3e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f060:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f062:	4618      	mov	r0, r3
 800f064:	3730      	adds	r7, #48	; 0x30
 800f066:	46bd      	mov	sp, r7
 800f068:	bd80      	pop	{r7, pc}
 800f06a:	bf00      	nop
 800f06c:	e000ed04 	.word	0xe000ed04

0800f070 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b08e      	sub	sp, #56	; 0x38
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f07a:	2300      	movs	r3, #0
 800f07c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f082:	2300      	movs	r3, #0
 800f084:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f086:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f088:	2b00      	cmp	r3, #0
 800f08a:	d10a      	bne.n	800f0a2 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800f08c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f090:	f383 8811 	msr	BASEPRI, r3
 800f094:	f3bf 8f6f 	isb	sy
 800f098:	f3bf 8f4f 	dsb	sy
 800f09c:	623b      	str	r3, [r7, #32]
}
 800f09e:	bf00      	nop
 800f0a0:	e7fe      	b.n	800f0a0 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f0a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f0a6:	2b00      	cmp	r3, #0
 800f0a8:	d00a      	beq.n	800f0c0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800f0aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0ae:	f383 8811 	msr	BASEPRI, r3
 800f0b2:	f3bf 8f6f 	isb	sy
 800f0b6:	f3bf 8f4f 	dsb	sy
 800f0ba:	61fb      	str	r3, [r7, #28]
}
 800f0bc:	bf00      	nop
 800f0be:	e7fe      	b.n	800f0be <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f0c0:	f001 f906 	bl	80102d0 <xTaskGetSchedulerState>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	2b00      	cmp	r3, #0
 800f0c8:	d102      	bne.n	800f0d0 <xQueueSemaphoreTake+0x60>
 800f0ca:	683b      	ldr	r3, [r7, #0]
 800f0cc:	2b00      	cmp	r3, #0
 800f0ce:	d101      	bne.n	800f0d4 <xQueueSemaphoreTake+0x64>
 800f0d0:	2301      	movs	r3, #1
 800f0d2:	e000      	b.n	800f0d6 <xQueueSemaphoreTake+0x66>
 800f0d4:	2300      	movs	r3, #0
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d10a      	bne.n	800f0f0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800f0da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0de:	f383 8811 	msr	BASEPRI, r3
 800f0e2:	f3bf 8f6f 	isb	sy
 800f0e6:	f3bf 8f4f 	dsb	sy
 800f0ea:	61bb      	str	r3, [r7, #24]
}
 800f0ec:	bf00      	nop
 800f0ee:	e7fe      	b.n	800f0ee <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f0f0:	f001 ff48 	bl	8010f84 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800f0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f0f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f0f8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800f0fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f0fc:	2b00      	cmp	r3, #0
 800f0fe:	d024      	beq.n	800f14a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800f100:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f102:	1e5a      	subs	r2, r3, #1
 800f104:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f106:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f108:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f10a:	681b      	ldr	r3, [r3, #0]
 800f10c:	2b00      	cmp	r3, #0
 800f10e:	d104      	bne.n	800f11a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800f110:	f001 fa54 	bl	80105bc <pvTaskIncrementMutexHeldCount>
 800f114:	4602      	mov	r2, r0
 800f116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f118:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f11a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f11c:	691b      	ldr	r3, [r3, #16]
 800f11e:	2b00      	cmp	r3, #0
 800f120:	d00f      	beq.n	800f142 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f122:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f124:	3310      	adds	r3, #16
 800f126:	4618      	mov	r0, r3
 800f128:	f000 ff14 	bl	800ff54 <xTaskRemoveFromEventList>
 800f12c:	4603      	mov	r3, r0
 800f12e:	2b00      	cmp	r3, #0
 800f130:	d007      	beq.n	800f142 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f132:	4b54      	ldr	r3, [pc, #336]	; (800f284 <xQueueSemaphoreTake+0x214>)
 800f134:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f138:	601a      	str	r2, [r3, #0]
 800f13a:	f3bf 8f4f 	dsb	sy
 800f13e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f142:	f001 ff4f 	bl	8010fe4 <vPortExitCritical>
				return pdPASS;
 800f146:	2301      	movs	r3, #1
 800f148:	e097      	b.n	800f27a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f14a:	683b      	ldr	r3, [r7, #0]
 800f14c:	2b00      	cmp	r3, #0
 800f14e:	d111      	bne.n	800f174 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800f150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f152:	2b00      	cmp	r3, #0
 800f154:	d00a      	beq.n	800f16c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800f156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f15a:	f383 8811 	msr	BASEPRI, r3
 800f15e:	f3bf 8f6f 	isb	sy
 800f162:	f3bf 8f4f 	dsb	sy
 800f166:	617b      	str	r3, [r7, #20]
}
 800f168:	bf00      	nop
 800f16a:	e7fe      	b.n	800f16a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800f16c:	f001 ff3a 	bl	8010fe4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f170:	2300      	movs	r3, #0
 800f172:	e082      	b.n	800f27a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f174:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f176:	2b00      	cmp	r3, #0
 800f178:	d106      	bne.n	800f188 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f17a:	f107 030c 	add.w	r3, r7, #12
 800f17e:	4618      	mov	r0, r3
 800f180:	f000 ff4c 	bl	801001c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f184:	2301      	movs	r3, #1
 800f186:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f188:	f001 ff2c 	bl	8010fe4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f18c:	f000 fcbe 	bl	800fb0c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f190:	f001 fef8 	bl	8010f84 <vPortEnterCritical>
 800f194:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f196:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f19a:	b25b      	sxtb	r3, r3
 800f19c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1a0:	d103      	bne.n	800f1aa <xQueueSemaphoreTake+0x13a>
 800f1a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f1aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ac:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f1b0:	b25b      	sxtb	r3, r3
 800f1b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f1b6:	d103      	bne.n	800f1c0 <xQueueSemaphoreTake+0x150>
 800f1b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ba:	2200      	movs	r2, #0
 800f1bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f1c0:	f001 ff10 	bl	8010fe4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f1c4:	463a      	mov	r2, r7
 800f1c6:	f107 030c 	add.w	r3, r7, #12
 800f1ca:	4611      	mov	r1, r2
 800f1cc:	4618      	mov	r0, r3
 800f1ce:	f000 ff3b 	bl	8010048 <xTaskCheckForTimeOut>
 800f1d2:	4603      	mov	r3, r0
 800f1d4:	2b00      	cmp	r3, #0
 800f1d6:	d132      	bne.n	800f23e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f1d8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f1da:	f000 f9cf 	bl	800f57c <prvIsQueueEmpty>
 800f1de:	4603      	mov	r3, r0
 800f1e0:	2b00      	cmp	r3, #0
 800f1e2:	d026      	beq.n	800f232 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f1e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1e6:	681b      	ldr	r3, [r3, #0]
 800f1e8:	2b00      	cmp	r3, #0
 800f1ea:	d109      	bne.n	800f200 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800f1ec:	f001 feca 	bl	8010f84 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f1f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f2:	689b      	ldr	r3, [r3, #8]
 800f1f4:	4618      	mov	r0, r3
 800f1f6:	f001 f889 	bl	801030c <xTaskPriorityInherit>
 800f1fa:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800f1fc:	f001 fef2 	bl	8010fe4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f202:	3324      	adds	r3, #36	; 0x24
 800f204:	683a      	ldr	r2, [r7, #0]
 800f206:	4611      	mov	r1, r2
 800f208:	4618      	mov	r0, r3
 800f20a:	f000 fe53 	bl	800feb4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f20e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f210:	f000 f962 	bl	800f4d8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f214:	f000 fc88 	bl	800fb28 <xTaskResumeAll>
 800f218:	4603      	mov	r3, r0
 800f21a:	2b00      	cmp	r3, #0
 800f21c:	f47f af68 	bne.w	800f0f0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800f220:	4b18      	ldr	r3, [pc, #96]	; (800f284 <xQueueSemaphoreTake+0x214>)
 800f222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f226:	601a      	str	r2, [r3, #0]
 800f228:	f3bf 8f4f 	dsb	sy
 800f22c:	f3bf 8f6f 	isb	sy
 800f230:	e75e      	b.n	800f0f0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800f232:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f234:	f000 f950 	bl	800f4d8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f238:	f000 fc76 	bl	800fb28 <xTaskResumeAll>
 800f23c:	e758      	b.n	800f0f0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800f23e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f240:	f000 f94a 	bl	800f4d8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f244:	f000 fc70 	bl	800fb28 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f248:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f24a:	f000 f997 	bl	800f57c <prvIsQueueEmpty>
 800f24e:	4603      	mov	r3, r0
 800f250:	2b00      	cmp	r3, #0
 800f252:	f43f af4d 	beq.w	800f0f0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800f256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f258:	2b00      	cmp	r3, #0
 800f25a:	d00d      	beq.n	800f278 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800f25c:	f001 fe92 	bl	8010f84 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800f260:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800f262:	f000 f891 	bl	800f388 <prvGetDisinheritPriorityAfterTimeout>
 800f266:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800f268:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f26a:	689b      	ldr	r3, [r3, #8]
 800f26c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f26e:	4618      	mov	r0, r3
 800f270:	f001 f922 	bl	80104b8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800f274:	f001 feb6 	bl	8010fe4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f278:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f27a:	4618      	mov	r0, r3
 800f27c:	3738      	adds	r7, #56	; 0x38
 800f27e:	46bd      	mov	sp, r7
 800f280:	bd80      	pop	{r7, pc}
 800f282:	bf00      	nop
 800f284:	e000ed04 	.word	0xe000ed04

0800f288 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f288:	b580      	push	{r7, lr}
 800f28a:	b08e      	sub	sp, #56	; 0x38
 800f28c:	af00      	add	r7, sp, #0
 800f28e:	60f8      	str	r0, [r7, #12]
 800f290:	60b9      	str	r1, [r7, #8]
 800f292:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d10a      	bne.n	800f2b4 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800f29e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2a2:	f383 8811 	msr	BASEPRI, r3
 800f2a6:	f3bf 8f6f 	isb	sy
 800f2aa:	f3bf 8f4f 	dsb	sy
 800f2ae:	623b      	str	r3, [r7, #32]
}
 800f2b0:	bf00      	nop
 800f2b2:	e7fe      	b.n	800f2b2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f2b4:	68bb      	ldr	r3, [r7, #8]
 800f2b6:	2b00      	cmp	r3, #0
 800f2b8:	d103      	bne.n	800f2c2 <xQueueReceiveFromISR+0x3a>
 800f2ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f2bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f2be:	2b00      	cmp	r3, #0
 800f2c0:	d101      	bne.n	800f2c6 <xQueueReceiveFromISR+0x3e>
 800f2c2:	2301      	movs	r3, #1
 800f2c4:	e000      	b.n	800f2c8 <xQueueReceiveFromISR+0x40>
 800f2c6:	2300      	movs	r3, #0
 800f2c8:	2b00      	cmp	r3, #0
 800f2ca:	d10a      	bne.n	800f2e2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800f2cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2d0:	f383 8811 	msr	BASEPRI, r3
 800f2d4:	f3bf 8f6f 	isb	sy
 800f2d8:	f3bf 8f4f 	dsb	sy
 800f2dc:	61fb      	str	r3, [r7, #28]
}
 800f2de:	bf00      	nop
 800f2e0:	e7fe      	b.n	800f2e0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f2e2:	f001 ff31 	bl	8011148 <vPortValidateInterruptPriority>
	__asm volatile
 800f2e6:	f3ef 8211 	mrs	r2, BASEPRI
 800f2ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2ee:	f383 8811 	msr	BASEPRI, r3
 800f2f2:	f3bf 8f6f 	isb	sy
 800f2f6:	f3bf 8f4f 	dsb	sy
 800f2fa:	61ba      	str	r2, [r7, #24]
 800f2fc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800f2fe:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f300:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f302:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f304:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f306:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d02f      	beq.n	800f36e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800f30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f310:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f314:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f318:	68b9      	ldr	r1, [r7, #8]
 800f31a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f31c:	f000 f8b6 	bl	800f48c <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f320:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f322:	1e5a      	subs	r2, r3, #1
 800f324:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f326:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800f328:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f32c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f330:	d112      	bne.n	800f358 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f332:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f334:	691b      	ldr	r3, [r3, #16]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d016      	beq.n	800f368 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f33a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f33c:	3310      	adds	r3, #16
 800f33e:	4618      	mov	r0, r3
 800f340:	f000 fe08 	bl	800ff54 <xTaskRemoveFromEventList>
 800f344:	4603      	mov	r3, r0
 800f346:	2b00      	cmp	r3, #0
 800f348:	d00e      	beq.n	800f368 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2b00      	cmp	r3, #0
 800f34e:	d00b      	beq.n	800f368 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800f350:	687b      	ldr	r3, [r7, #4]
 800f352:	2201      	movs	r2, #1
 800f354:	601a      	str	r2, [r3, #0]
 800f356:	e007      	b.n	800f368 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800f358:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f35c:	3301      	adds	r3, #1
 800f35e:	b2db      	uxtb	r3, r3
 800f360:	b25a      	sxtb	r2, r3
 800f362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f364:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800f368:	2301      	movs	r3, #1
 800f36a:	637b      	str	r3, [r7, #52]	; 0x34
 800f36c:	e001      	b.n	800f372 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800f36e:	2300      	movs	r3, #0
 800f370:	637b      	str	r3, [r7, #52]	; 0x34
 800f372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f374:	613b      	str	r3, [r7, #16]
	__asm volatile
 800f376:	693b      	ldr	r3, [r7, #16]
 800f378:	f383 8811 	msr	BASEPRI, r3
}
 800f37c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f37e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f380:	4618      	mov	r0, r3
 800f382:	3738      	adds	r7, #56	; 0x38
 800f384:	46bd      	mov	sp, r7
 800f386:	bd80      	pop	{r7, pc}

0800f388 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800f388:	b480      	push	{r7}
 800f38a:	b085      	sub	sp, #20
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800f390:	687b      	ldr	r3, [r7, #4]
 800f392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f394:	2b00      	cmp	r3, #0
 800f396:	d006      	beq.n	800f3a6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f39c:	681b      	ldr	r3, [r3, #0]
 800f39e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800f3a2:	60fb      	str	r3, [r7, #12]
 800f3a4:	e001      	b.n	800f3aa <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800f3a6:	2300      	movs	r3, #0
 800f3a8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800f3aa:	68fb      	ldr	r3, [r7, #12]
	}
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	3714      	adds	r7, #20
 800f3b0:	46bd      	mov	sp, r7
 800f3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3b6:	4770      	bx	lr

0800f3b8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800f3b8:	b580      	push	{r7, lr}
 800f3ba:	b086      	sub	sp, #24
 800f3bc:	af00      	add	r7, sp, #0
 800f3be:	60f8      	str	r0, [r7, #12]
 800f3c0:	60b9      	str	r1, [r7, #8]
 800f3c2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800f3c4:	2300      	movs	r3, #0
 800f3c6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f3c8:	68fb      	ldr	r3, [r7, #12]
 800f3ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f3cc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800f3ce:	68fb      	ldr	r3, [r7, #12]
 800f3d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3d2:	2b00      	cmp	r3, #0
 800f3d4:	d10d      	bne.n	800f3f2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	681b      	ldr	r3, [r3, #0]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d14d      	bne.n	800f47a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800f3de:	68fb      	ldr	r3, [r7, #12]
 800f3e0:	689b      	ldr	r3, [r3, #8]
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f000 fffa 	bl	80103dc <xTaskPriorityDisinherit>
 800f3e8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800f3ea:	68fb      	ldr	r3, [r7, #12]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	609a      	str	r2, [r3, #8]
 800f3f0:	e043      	b.n	800f47a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	2b00      	cmp	r3, #0
 800f3f6:	d119      	bne.n	800f42c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f3f8:	68fb      	ldr	r3, [r7, #12]
 800f3fa:	6858      	ldr	r0, [r3, #4]
 800f3fc:	68fb      	ldr	r3, [r7, #12]
 800f3fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f400:	461a      	mov	r2, r3
 800f402:	68b9      	ldr	r1, [r7, #8]
 800f404:	f005 ff92 	bl	801532c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f408:	68fb      	ldr	r3, [r7, #12]
 800f40a:	685a      	ldr	r2, [r3, #4]
 800f40c:	68fb      	ldr	r3, [r7, #12]
 800f40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f410:	441a      	add	r2, r3
 800f412:	68fb      	ldr	r3, [r7, #12]
 800f414:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f416:	68fb      	ldr	r3, [r7, #12]
 800f418:	685a      	ldr	r2, [r3, #4]
 800f41a:	68fb      	ldr	r3, [r7, #12]
 800f41c:	689b      	ldr	r3, [r3, #8]
 800f41e:	429a      	cmp	r2, r3
 800f420:	d32b      	bcc.n	800f47a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	681a      	ldr	r2, [r3, #0]
 800f426:	68fb      	ldr	r3, [r7, #12]
 800f428:	605a      	str	r2, [r3, #4]
 800f42a:	e026      	b.n	800f47a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800f42c:	68fb      	ldr	r3, [r7, #12]
 800f42e:	68d8      	ldr	r0, [r3, #12]
 800f430:	68fb      	ldr	r3, [r7, #12]
 800f432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f434:	461a      	mov	r2, r3
 800f436:	68b9      	ldr	r1, [r7, #8]
 800f438:	f005 ff78 	bl	801532c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800f43c:	68fb      	ldr	r3, [r7, #12]
 800f43e:	68da      	ldr	r2, [r3, #12]
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f444:	425b      	negs	r3, r3
 800f446:	441a      	add	r2, r3
 800f448:	68fb      	ldr	r3, [r7, #12]
 800f44a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800f44c:	68fb      	ldr	r3, [r7, #12]
 800f44e:	68da      	ldr	r2, [r3, #12]
 800f450:	68fb      	ldr	r3, [r7, #12]
 800f452:	681b      	ldr	r3, [r3, #0]
 800f454:	429a      	cmp	r2, r3
 800f456:	d207      	bcs.n	800f468 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	689a      	ldr	r2, [r3, #8]
 800f45c:	68fb      	ldr	r3, [r7, #12]
 800f45e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f460:	425b      	negs	r3, r3
 800f462:	441a      	add	r2, r3
 800f464:	68fb      	ldr	r3, [r7, #12]
 800f466:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800f468:	687b      	ldr	r3, [r7, #4]
 800f46a:	2b02      	cmp	r3, #2
 800f46c:	d105      	bne.n	800f47a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f46e:	693b      	ldr	r3, [r7, #16]
 800f470:	2b00      	cmp	r3, #0
 800f472:	d002      	beq.n	800f47a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800f474:	693b      	ldr	r3, [r7, #16]
 800f476:	3b01      	subs	r3, #1
 800f478:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f47a:	693b      	ldr	r3, [r7, #16]
 800f47c:	1c5a      	adds	r2, r3, #1
 800f47e:	68fb      	ldr	r3, [r7, #12]
 800f480:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800f482:	697b      	ldr	r3, [r7, #20]
}
 800f484:	4618      	mov	r0, r3
 800f486:	3718      	adds	r7, #24
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800f48c:	b580      	push	{r7, lr}
 800f48e:	b082      	sub	sp, #8
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
 800f494:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800f496:	687b      	ldr	r3, [r7, #4]
 800f498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f49a:	2b00      	cmp	r3, #0
 800f49c:	d018      	beq.n	800f4d0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800f49e:	687b      	ldr	r3, [r7, #4]
 800f4a0:	68da      	ldr	r2, [r3, #12]
 800f4a2:	687b      	ldr	r3, [r7, #4]
 800f4a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4a6:	441a      	add	r2, r3
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	68da      	ldr	r2, [r3, #12]
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	689b      	ldr	r3, [r3, #8]
 800f4b4:	429a      	cmp	r2, r3
 800f4b6:	d303      	bcc.n	800f4c0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800f4b8:	687b      	ldr	r3, [r7, #4]
 800f4ba:	681a      	ldr	r2, [r3, #0]
 800f4bc:	687b      	ldr	r3, [r7, #4]
 800f4be:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	68d9      	ldr	r1, [r3, #12]
 800f4c4:	687b      	ldr	r3, [r7, #4]
 800f4c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f4c8:	461a      	mov	r2, r3
 800f4ca:	6838      	ldr	r0, [r7, #0]
 800f4cc:	f005 ff2e 	bl	801532c <memcpy>
	}
}
 800f4d0:	bf00      	nop
 800f4d2:	3708      	adds	r7, #8
 800f4d4:	46bd      	mov	sp, r7
 800f4d6:	bd80      	pop	{r7, pc}

0800f4d8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800f4d8:	b580      	push	{r7, lr}
 800f4da:	b084      	sub	sp, #16
 800f4dc:	af00      	add	r7, sp, #0
 800f4de:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800f4e0:	f001 fd50 	bl	8010f84 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4ea:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f4ec:	e011      	b.n	800f512 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f4f2:	2b00      	cmp	r3, #0
 800f4f4:	d012      	beq.n	800f51c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	3324      	adds	r3, #36	; 0x24
 800f4fa:	4618      	mov	r0, r3
 800f4fc:	f000 fd2a 	bl	800ff54 <xTaskRemoveFromEventList>
 800f500:	4603      	mov	r3, r0
 800f502:	2b00      	cmp	r3, #0
 800f504:	d001      	beq.n	800f50a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800f506:	f000 fe01 	bl	801010c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800f50a:	7bfb      	ldrb	r3, [r7, #15]
 800f50c:	3b01      	subs	r3, #1
 800f50e:	b2db      	uxtb	r3, r3
 800f510:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800f512:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800f516:	2b00      	cmp	r3, #0
 800f518:	dce9      	bgt.n	800f4ee <prvUnlockQueue+0x16>
 800f51a:	e000      	b.n	800f51e <prvUnlockQueue+0x46>
					break;
 800f51c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	22ff      	movs	r2, #255	; 0xff
 800f522:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800f526:	f001 fd5d 	bl	8010fe4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800f52a:	f001 fd2b 	bl	8010f84 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800f52e:	687b      	ldr	r3, [r7, #4]
 800f530:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f534:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f536:	e011      	b.n	800f55c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	691b      	ldr	r3, [r3, #16]
 800f53c:	2b00      	cmp	r3, #0
 800f53e:	d012      	beq.n	800f566 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	3310      	adds	r3, #16
 800f544:	4618      	mov	r0, r3
 800f546:	f000 fd05 	bl	800ff54 <xTaskRemoveFromEventList>
 800f54a:	4603      	mov	r3, r0
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d001      	beq.n	800f554 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800f550:	f000 fddc 	bl	801010c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800f554:	7bbb      	ldrb	r3, [r7, #14]
 800f556:	3b01      	subs	r3, #1
 800f558:	b2db      	uxtb	r3, r3
 800f55a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800f55c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800f560:	2b00      	cmp	r3, #0
 800f562:	dce9      	bgt.n	800f538 <prvUnlockQueue+0x60>
 800f564:	e000      	b.n	800f568 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800f566:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800f568:	687b      	ldr	r3, [r7, #4]
 800f56a:	22ff      	movs	r2, #255	; 0xff
 800f56c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800f570:	f001 fd38 	bl	8010fe4 <vPortExitCritical>
}
 800f574:	bf00      	nop
 800f576:	3710      	adds	r7, #16
 800f578:	46bd      	mov	sp, r7
 800f57a:	bd80      	pop	{r7, pc}

0800f57c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b084      	sub	sp, #16
 800f580:	af00      	add	r7, sp, #0
 800f582:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f584:	f001 fcfe 	bl	8010f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d102      	bne.n	800f596 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800f590:	2301      	movs	r3, #1
 800f592:	60fb      	str	r3, [r7, #12]
 800f594:	e001      	b.n	800f59a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800f596:	2300      	movs	r3, #0
 800f598:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f59a:	f001 fd23 	bl	8010fe4 <vPortExitCritical>

	return xReturn;
 800f59e:	68fb      	ldr	r3, [r7, #12]
}
 800f5a0:	4618      	mov	r0, r3
 800f5a2:	3710      	adds	r7, #16
 800f5a4:	46bd      	mov	sp, r7
 800f5a6:	bd80      	pop	{r7, pc}

0800f5a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800f5a8:	b580      	push	{r7, lr}
 800f5aa:	b084      	sub	sp, #16
 800f5ac:	af00      	add	r7, sp, #0
 800f5ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800f5b0:	f001 fce8 	bl	8010f84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800f5b4:	687b      	ldr	r3, [r7, #4]
 800f5b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5bc:	429a      	cmp	r2, r3
 800f5be:	d102      	bne.n	800f5c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800f5c0:	2301      	movs	r3, #1
 800f5c2:	60fb      	str	r3, [r7, #12]
 800f5c4:	e001      	b.n	800f5ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800f5c6:	2300      	movs	r3, #0
 800f5c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800f5ca:	f001 fd0b 	bl	8010fe4 <vPortExitCritical>

	return xReturn;
 800f5ce:	68fb      	ldr	r3, [r7, #12]
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	3710      	adds	r7, #16
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	bd80      	pop	{r7, pc}

0800f5d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800f5d8:	b480      	push	{r7}
 800f5da:	b085      	sub	sp, #20
 800f5dc:	af00      	add	r7, sp, #0
 800f5de:	6078      	str	r0, [r7, #4]
 800f5e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	60fb      	str	r3, [r7, #12]
 800f5e6:	e014      	b.n	800f612 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800f5e8:	4a0f      	ldr	r2, [pc, #60]	; (800f628 <vQueueAddToRegistry+0x50>)
 800f5ea:	68fb      	ldr	r3, [r7, #12]
 800f5ec:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d10b      	bne.n	800f60c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800f5f4:	490c      	ldr	r1, [pc, #48]	; (800f628 <vQueueAddToRegistry+0x50>)
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	683a      	ldr	r2, [r7, #0]
 800f5fa:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800f5fe:	4a0a      	ldr	r2, [pc, #40]	; (800f628 <vQueueAddToRegistry+0x50>)
 800f600:	68fb      	ldr	r3, [r7, #12]
 800f602:	00db      	lsls	r3, r3, #3
 800f604:	4413      	add	r3, r2
 800f606:	687a      	ldr	r2, [r7, #4]
 800f608:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800f60a:	e006      	b.n	800f61a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800f60c:	68fb      	ldr	r3, [r7, #12]
 800f60e:	3301      	adds	r3, #1
 800f610:	60fb      	str	r3, [r7, #12]
 800f612:	68fb      	ldr	r3, [r7, #12]
 800f614:	2b07      	cmp	r3, #7
 800f616:	d9e7      	bls.n	800f5e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800f618:	bf00      	nop
 800f61a:	bf00      	nop
 800f61c:	3714      	adds	r7, #20
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr
 800f626:	bf00      	nop
 800f628:	2001aff0 	.word	0x2001aff0

0800f62c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800f62c:	b580      	push	{r7, lr}
 800f62e:	b086      	sub	sp, #24
 800f630:	af00      	add	r7, sp, #0
 800f632:	60f8      	str	r0, [r7, #12]
 800f634:	60b9      	str	r1, [r7, #8]
 800f636:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800f63c:	f001 fca2 	bl	8010f84 <vPortEnterCritical>
 800f640:	697b      	ldr	r3, [r7, #20]
 800f642:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f646:	b25b      	sxtb	r3, r3
 800f648:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f64c:	d103      	bne.n	800f656 <vQueueWaitForMessageRestricted+0x2a>
 800f64e:	697b      	ldr	r3, [r7, #20]
 800f650:	2200      	movs	r2, #0
 800f652:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f656:	697b      	ldr	r3, [r7, #20]
 800f658:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f65c:	b25b      	sxtb	r3, r3
 800f65e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f662:	d103      	bne.n	800f66c <vQueueWaitForMessageRestricted+0x40>
 800f664:	697b      	ldr	r3, [r7, #20]
 800f666:	2200      	movs	r2, #0
 800f668:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f66c:	f001 fcba 	bl	8010fe4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800f670:	697b      	ldr	r3, [r7, #20]
 800f672:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f674:	2b00      	cmp	r3, #0
 800f676:	d106      	bne.n	800f686 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800f678:	697b      	ldr	r3, [r7, #20]
 800f67a:	3324      	adds	r3, #36	; 0x24
 800f67c:	687a      	ldr	r2, [r7, #4]
 800f67e:	68b9      	ldr	r1, [r7, #8]
 800f680:	4618      	mov	r0, r3
 800f682:	f000 fc3b 	bl	800fefc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800f686:	6978      	ldr	r0, [r7, #20]
 800f688:	f7ff ff26 	bl	800f4d8 <prvUnlockQueue>
	}
 800f68c:	bf00      	nop
 800f68e:	3718      	adds	r7, #24
 800f690:	46bd      	mov	sp, r7
 800f692:	bd80      	pop	{r7, pc}

0800f694 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800f694:	b580      	push	{r7, lr}
 800f696:	b08e      	sub	sp, #56	; 0x38
 800f698:	af04      	add	r7, sp, #16
 800f69a:	60f8      	str	r0, [r7, #12]
 800f69c:	60b9      	str	r1, [r7, #8]
 800f69e:	607a      	str	r2, [r7, #4]
 800f6a0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800f6a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f6a4:	2b00      	cmp	r3, #0
 800f6a6:	d10a      	bne.n	800f6be <xTaskCreateStatic+0x2a>
	__asm volatile
 800f6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6ac:	f383 8811 	msr	BASEPRI, r3
 800f6b0:	f3bf 8f6f 	isb	sy
 800f6b4:	f3bf 8f4f 	dsb	sy
 800f6b8:	623b      	str	r3, [r7, #32]
}
 800f6ba:	bf00      	nop
 800f6bc:	e7fe      	b.n	800f6bc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800f6be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6c0:	2b00      	cmp	r3, #0
 800f6c2:	d10a      	bne.n	800f6da <xTaskCreateStatic+0x46>
	__asm volatile
 800f6c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c8:	f383 8811 	msr	BASEPRI, r3
 800f6cc:	f3bf 8f6f 	isb	sy
 800f6d0:	f3bf 8f4f 	dsb	sy
 800f6d4:	61fb      	str	r3, [r7, #28]
}
 800f6d6:	bf00      	nop
 800f6d8:	e7fe      	b.n	800f6d8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800f6da:	235c      	movs	r3, #92	; 0x5c
 800f6dc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f6de:	693b      	ldr	r3, [r7, #16]
 800f6e0:	2b5c      	cmp	r3, #92	; 0x5c
 800f6e2:	d00a      	beq.n	800f6fa <xTaskCreateStatic+0x66>
	__asm volatile
 800f6e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6e8:	f383 8811 	msr	BASEPRI, r3
 800f6ec:	f3bf 8f6f 	isb	sy
 800f6f0:	f3bf 8f4f 	dsb	sy
 800f6f4:	61bb      	str	r3, [r7, #24]
}
 800f6f6:	bf00      	nop
 800f6f8:	e7fe      	b.n	800f6f8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f6fa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800f6fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f6fe:	2b00      	cmp	r3, #0
 800f700:	d01e      	beq.n	800f740 <xTaskCreateStatic+0xac>
 800f702:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f704:	2b00      	cmp	r3, #0
 800f706:	d01b      	beq.n	800f740 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f708:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800f70a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f70c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f70e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800f710:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f714:	2202      	movs	r2, #2
 800f716:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f71a:	2300      	movs	r3, #0
 800f71c:	9303      	str	r3, [sp, #12]
 800f71e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f720:	9302      	str	r3, [sp, #8]
 800f722:	f107 0314 	add.w	r3, r7, #20
 800f726:	9301      	str	r3, [sp, #4]
 800f728:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f72a:	9300      	str	r3, [sp, #0]
 800f72c:	683b      	ldr	r3, [r7, #0]
 800f72e:	687a      	ldr	r2, [r7, #4]
 800f730:	68b9      	ldr	r1, [r7, #8]
 800f732:	68f8      	ldr	r0, [r7, #12]
 800f734:	f000 f850 	bl	800f7d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f738:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800f73a:	f000 f8dd 	bl	800f8f8 <prvAddNewTaskToReadyList>
 800f73e:	e001      	b.n	800f744 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800f740:	2300      	movs	r3, #0
 800f742:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800f744:	697b      	ldr	r3, [r7, #20]
	}
 800f746:	4618      	mov	r0, r3
 800f748:	3728      	adds	r7, #40	; 0x28
 800f74a:	46bd      	mov	sp, r7
 800f74c:	bd80      	pop	{r7, pc}

0800f74e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800f74e:	b580      	push	{r7, lr}
 800f750:	b08c      	sub	sp, #48	; 0x30
 800f752:	af04      	add	r7, sp, #16
 800f754:	60f8      	str	r0, [r7, #12]
 800f756:	60b9      	str	r1, [r7, #8]
 800f758:	603b      	str	r3, [r7, #0]
 800f75a:	4613      	mov	r3, r2
 800f75c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f75e:	88fb      	ldrh	r3, [r7, #6]
 800f760:	009b      	lsls	r3, r3, #2
 800f762:	4618      	mov	r0, r3
 800f764:	f001 fd30 	bl	80111c8 <pvPortMalloc>
 800f768:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800f76a:	697b      	ldr	r3, [r7, #20]
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d00e      	beq.n	800f78e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f770:	205c      	movs	r0, #92	; 0x5c
 800f772:	f001 fd29 	bl	80111c8 <pvPortMalloc>
 800f776:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800f778:	69fb      	ldr	r3, [r7, #28]
 800f77a:	2b00      	cmp	r3, #0
 800f77c:	d003      	beq.n	800f786 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800f77e:	69fb      	ldr	r3, [r7, #28]
 800f780:	697a      	ldr	r2, [r7, #20]
 800f782:	631a      	str	r2, [r3, #48]	; 0x30
 800f784:	e005      	b.n	800f792 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800f786:	6978      	ldr	r0, [r7, #20]
 800f788:	f001 fdea 	bl	8011360 <vPortFree>
 800f78c:	e001      	b.n	800f792 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800f78e:	2300      	movs	r3, #0
 800f790:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800f792:	69fb      	ldr	r3, [r7, #28]
 800f794:	2b00      	cmp	r3, #0
 800f796:	d017      	beq.n	800f7c8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f798:	69fb      	ldr	r3, [r7, #28]
 800f79a:	2200      	movs	r2, #0
 800f79c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f7a0:	88fa      	ldrh	r2, [r7, #6]
 800f7a2:	2300      	movs	r3, #0
 800f7a4:	9303      	str	r3, [sp, #12]
 800f7a6:	69fb      	ldr	r3, [r7, #28]
 800f7a8:	9302      	str	r3, [sp, #8]
 800f7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7ac:	9301      	str	r3, [sp, #4]
 800f7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7b0:	9300      	str	r3, [sp, #0]
 800f7b2:	683b      	ldr	r3, [r7, #0]
 800f7b4:	68b9      	ldr	r1, [r7, #8]
 800f7b6:	68f8      	ldr	r0, [r7, #12]
 800f7b8:	f000 f80e 	bl	800f7d8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f7bc:	69f8      	ldr	r0, [r7, #28]
 800f7be:	f000 f89b 	bl	800f8f8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f7c2:	2301      	movs	r3, #1
 800f7c4:	61bb      	str	r3, [r7, #24]
 800f7c6:	e002      	b.n	800f7ce <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f7c8:	f04f 33ff 	mov.w	r3, #4294967295
 800f7cc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800f7ce:	69bb      	ldr	r3, [r7, #24]
	}
 800f7d0:	4618      	mov	r0, r3
 800f7d2:	3720      	adds	r7, #32
 800f7d4:	46bd      	mov	sp, r7
 800f7d6:	bd80      	pop	{r7, pc}

0800f7d8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800f7d8:	b580      	push	{r7, lr}
 800f7da:	b088      	sub	sp, #32
 800f7dc:	af00      	add	r7, sp, #0
 800f7de:	60f8      	str	r0, [r7, #12]
 800f7e0:	60b9      	str	r1, [r7, #8]
 800f7e2:	607a      	str	r2, [r7, #4]
 800f7e4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800f7e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7e8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	461a      	mov	r2, r3
 800f7f0:	21a5      	movs	r1, #165	; 0xa5
 800f7f2:	f005 fd0b 	bl	801520c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800f7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800f7fa:	687b      	ldr	r3, [r7, #4]
 800f7fc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800f800:	3b01      	subs	r3, #1
 800f802:	009b      	lsls	r3, r3, #2
 800f804:	4413      	add	r3, r2
 800f806:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800f808:	69bb      	ldr	r3, [r7, #24]
 800f80a:	f023 0307 	bic.w	r3, r3, #7
 800f80e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800f810:	69bb      	ldr	r3, [r7, #24]
 800f812:	f003 0307 	and.w	r3, r3, #7
 800f816:	2b00      	cmp	r3, #0
 800f818:	d00a      	beq.n	800f830 <prvInitialiseNewTask+0x58>
	__asm volatile
 800f81a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f81e:	f383 8811 	msr	BASEPRI, r3
 800f822:	f3bf 8f6f 	isb	sy
 800f826:	f3bf 8f4f 	dsb	sy
 800f82a:	617b      	str	r3, [r7, #20]
}
 800f82c:	bf00      	nop
 800f82e:	e7fe      	b.n	800f82e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800f830:	68bb      	ldr	r3, [r7, #8]
 800f832:	2b00      	cmp	r3, #0
 800f834:	d01f      	beq.n	800f876 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f836:	2300      	movs	r3, #0
 800f838:	61fb      	str	r3, [r7, #28]
 800f83a:	e012      	b.n	800f862 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800f83c:	68ba      	ldr	r2, [r7, #8]
 800f83e:	69fb      	ldr	r3, [r7, #28]
 800f840:	4413      	add	r3, r2
 800f842:	7819      	ldrb	r1, [r3, #0]
 800f844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	4413      	add	r3, r2
 800f84a:	3334      	adds	r3, #52	; 0x34
 800f84c:	460a      	mov	r2, r1
 800f84e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800f850:	68ba      	ldr	r2, [r7, #8]
 800f852:	69fb      	ldr	r3, [r7, #28]
 800f854:	4413      	add	r3, r2
 800f856:	781b      	ldrb	r3, [r3, #0]
 800f858:	2b00      	cmp	r3, #0
 800f85a:	d006      	beq.n	800f86a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800f85c:	69fb      	ldr	r3, [r7, #28]
 800f85e:	3301      	adds	r3, #1
 800f860:	61fb      	str	r3, [r7, #28]
 800f862:	69fb      	ldr	r3, [r7, #28]
 800f864:	2b0f      	cmp	r3, #15
 800f866:	d9e9      	bls.n	800f83c <prvInitialiseNewTask+0x64>
 800f868:	e000      	b.n	800f86c <prvInitialiseNewTask+0x94>
			{
				break;
 800f86a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800f86c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f86e:	2200      	movs	r2, #0
 800f870:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800f874:	e003      	b.n	800f87e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800f876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f878:	2200      	movs	r2, #0
 800f87a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800f87e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f880:	2b37      	cmp	r3, #55	; 0x37
 800f882:	d901      	bls.n	800f888 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800f884:	2337      	movs	r3, #55	; 0x37
 800f886:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800f888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f88a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f88c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800f88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f890:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f892:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800f894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f896:	2200      	movs	r2, #0
 800f898:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800f89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f89c:	3304      	adds	r3, #4
 800f89e:	4618      	mov	r0, r3
 800f8a0:	f7fe ff0e 	bl	800e6c0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800f8a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8a6:	3318      	adds	r3, #24
 800f8a8:	4618      	mov	r0, r3
 800f8aa:	f7fe ff09 	bl	800e6c0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800f8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8b2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800f8ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8bc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800f8be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8c2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800f8c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8c6:	2200      	movs	r2, #0
 800f8c8:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800f8ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8cc:	2200      	movs	r2, #0
 800f8ce:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800f8d2:	683a      	ldr	r2, [r7, #0]
 800f8d4:	68f9      	ldr	r1, [r7, #12]
 800f8d6:	69b8      	ldr	r0, [r7, #24]
 800f8d8:	f001 fa26 	bl	8010d28 <pxPortInitialiseStack>
 800f8dc:	4602      	mov	r2, r0
 800f8de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f8e0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800f8e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e4:	2b00      	cmp	r3, #0
 800f8e6:	d002      	beq.n	800f8ee <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800f8e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8ea:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f8ec:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f8ee:	bf00      	nop
 800f8f0:	3720      	adds	r7, #32
 800f8f2:	46bd      	mov	sp, r7
 800f8f4:	bd80      	pop	{r7, pc}
	...

0800f8f8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800f8f8:	b580      	push	{r7, lr}
 800f8fa:	b082      	sub	sp, #8
 800f8fc:	af00      	add	r7, sp, #0
 800f8fe:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800f900:	f001 fb40 	bl	8010f84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800f904:	4b2d      	ldr	r3, [pc, #180]	; (800f9bc <prvAddNewTaskToReadyList+0xc4>)
 800f906:	681b      	ldr	r3, [r3, #0]
 800f908:	3301      	adds	r3, #1
 800f90a:	4a2c      	ldr	r2, [pc, #176]	; (800f9bc <prvAddNewTaskToReadyList+0xc4>)
 800f90c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800f90e:	4b2c      	ldr	r3, [pc, #176]	; (800f9c0 <prvAddNewTaskToReadyList+0xc8>)
 800f910:	681b      	ldr	r3, [r3, #0]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d109      	bne.n	800f92a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800f916:	4a2a      	ldr	r2, [pc, #168]	; (800f9c0 <prvAddNewTaskToReadyList+0xc8>)
 800f918:	687b      	ldr	r3, [r7, #4]
 800f91a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800f91c:	4b27      	ldr	r3, [pc, #156]	; (800f9bc <prvAddNewTaskToReadyList+0xc4>)
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	2b01      	cmp	r3, #1
 800f922:	d110      	bne.n	800f946 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800f924:	f000 fc16 	bl	8010154 <prvInitialiseTaskLists>
 800f928:	e00d      	b.n	800f946 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800f92a:	4b26      	ldr	r3, [pc, #152]	; (800f9c4 <prvAddNewTaskToReadyList+0xcc>)
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	d109      	bne.n	800f946 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800f932:	4b23      	ldr	r3, [pc, #140]	; (800f9c0 <prvAddNewTaskToReadyList+0xc8>)
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f93c:	429a      	cmp	r2, r3
 800f93e:	d802      	bhi.n	800f946 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800f940:	4a1f      	ldr	r2, [pc, #124]	; (800f9c0 <prvAddNewTaskToReadyList+0xc8>)
 800f942:	687b      	ldr	r3, [r7, #4]
 800f944:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800f946:	4b20      	ldr	r3, [pc, #128]	; (800f9c8 <prvAddNewTaskToReadyList+0xd0>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	3301      	adds	r3, #1
 800f94c:	4a1e      	ldr	r2, [pc, #120]	; (800f9c8 <prvAddNewTaskToReadyList+0xd0>)
 800f94e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800f950:	4b1d      	ldr	r3, [pc, #116]	; (800f9c8 <prvAddNewTaskToReadyList+0xd0>)
 800f952:	681a      	ldr	r2, [r3, #0]
 800f954:	687b      	ldr	r3, [r7, #4]
 800f956:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800f958:	687b      	ldr	r3, [r7, #4]
 800f95a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f95c:	4b1b      	ldr	r3, [pc, #108]	; (800f9cc <prvAddNewTaskToReadyList+0xd4>)
 800f95e:	681b      	ldr	r3, [r3, #0]
 800f960:	429a      	cmp	r2, r3
 800f962:	d903      	bls.n	800f96c <prvAddNewTaskToReadyList+0x74>
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f968:	4a18      	ldr	r2, [pc, #96]	; (800f9cc <prvAddNewTaskToReadyList+0xd4>)
 800f96a:	6013      	str	r3, [r2, #0]
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f970:	4613      	mov	r3, r2
 800f972:	009b      	lsls	r3, r3, #2
 800f974:	4413      	add	r3, r2
 800f976:	009b      	lsls	r3, r3, #2
 800f978:	4a15      	ldr	r2, [pc, #84]	; (800f9d0 <prvAddNewTaskToReadyList+0xd8>)
 800f97a:	441a      	add	r2, r3
 800f97c:	687b      	ldr	r3, [r7, #4]
 800f97e:	3304      	adds	r3, #4
 800f980:	4619      	mov	r1, r3
 800f982:	4610      	mov	r0, r2
 800f984:	f7fe fea9 	bl	800e6da <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800f988:	f001 fb2c 	bl	8010fe4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800f98c:	4b0d      	ldr	r3, [pc, #52]	; (800f9c4 <prvAddNewTaskToReadyList+0xcc>)
 800f98e:	681b      	ldr	r3, [r3, #0]
 800f990:	2b00      	cmp	r3, #0
 800f992:	d00e      	beq.n	800f9b2 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800f994:	4b0a      	ldr	r3, [pc, #40]	; (800f9c0 <prvAddNewTaskToReadyList+0xc8>)
 800f996:	681b      	ldr	r3, [r3, #0]
 800f998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800f99e:	429a      	cmp	r2, r3
 800f9a0:	d207      	bcs.n	800f9b2 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800f9a2:	4b0c      	ldr	r3, [pc, #48]	; (800f9d4 <prvAddNewTaskToReadyList+0xdc>)
 800f9a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f9a8:	601a      	str	r2, [r3, #0]
 800f9aa:	f3bf 8f4f 	dsb	sy
 800f9ae:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f9b2:	bf00      	nop
 800f9b4:	3708      	adds	r7, #8
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}
 800f9ba:	bf00      	nop
 800f9bc:	2001b504 	.word	0x2001b504
 800f9c0:	2001b030 	.word	0x2001b030
 800f9c4:	2001b510 	.word	0x2001b510
 800f9c8:	2001b520 	.word	0x2001b520
 800f9cc:	2001b50c 	.word	0x2001b50c
 800f9d0:	2001b034 	.word	0x2001b034
 800f9d4:	e000ed04 	.word	0xe000ed04

0800f9d8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800f9d8:	b580      	push	{r7, lr}
 800f9da:	b084      	sub	sp, #16
 800f9dc:	af00      	add	r7, sp, #0
 800f9de:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800f9e4:	687b      	ldr	r3, [r7, #4]
 800f9e6:	2b00      	cmp	r3, #0
 800f9e8:	d017      	beq.n	800fa1a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800f9ea:	4b13      	ldr	r3, [pc, #76]	; (800fa38 <vTaskDelay+0x60>)
 800f9ec:	681b      	ldr	r3, [r3, #0]
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d00a      	beq.n	800fa08 <vTaskDelay+0x30>
	__asm volatile
 800f9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f6:	f383 8811 	msr	BASEPRI, r3
 800f9fa:	f3bf 8f6f 	isb	sy
 800f9fe:	f3bf 8f4f 	dsb	sy
 800fa02:	60bb      	str	r3, [r7, #8]
}
 800fa04:	bf00      	nop
 800fa06:	e7fe      	b.n	800fa06 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800fa08:	f000 f880 	bl	800fb0c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800fa0c:	2100      	movs	r1, #0
 800fa0e:	6878      	ldr	r0, [r7, #4]
 800fa10:	f000 fde8 	bl	80105e4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800fa14:	f000 f888 	bl	800fb28 <xTaskResumeAll>
 800fa18:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800fa1a:	68fb      	ldr	r3, [r7, #12]
 800fa1c:	2b00      	cmp	r3, #0
 800fa1e:	d107      	bne.n	800fa30 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800fa20:	4b06      	ldr	r3, [pc, #24]	; (800fa3c <vTaskDelay+0x64>)
 800fa22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa26:	601a      	str	r2, [r3, #0]
 800fa28:	f3bf 8f4f 	dsb	sy
 800fa2c:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800fa30:	bf00      	nop
 800fa32:	3710      	adds	r7, #16
 800fa34:	46bd      	mov	sp, r7
 800fa36:	bd80      	pop	{r7, pc}
 800fa38:	2001b52c 	.word	0x2001b52c
 800fa3c:	e000ed04 	.word	0xe000ed04

0800fa40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800fa40:	b580      	push	{r7, lr}
 800fa42:	b08a      	sub	sp, #40	; 0x28
 800fa44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800fa46:	2300      	movs	r3, #0
 800fa48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800fa4a:	2300      	movs	r3, #0
 800fa4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800fa4e:	463a      	mov	r2, r7
 800fa50:	1d39      	adds	r1, r7, #4
 800fa52:	f107 0308 	add.w	r3, r7, #8
 800fa56:	4618      	mov	r0, r3
 800fa58:	f7fe fdde 	bl	800e618 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800fa5c:	6839      	ldr	r1, [r7, #0]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	68ba      	ldr	r2, [r7, #8]
 800fa62:	9202      	str	r2, [sp, #8]
 800fa64:	9301      	str	r3, [sp, #4]
 800fa66:	2300      	movs	r3, #0
 800fa68:	9300      	str	r3, [sp, #0]
 800fa6a:	2300      	movs	r3, #0
 800fa6c:	460a      	mov	r2, r1
 800fa6e:	4921      	ldr	r1, [pc, #132]	; (800faf4 <vTaskStartScheduler+0xb4>)
 800fa70:	4821      	ldr	r0, [pc, #132]	; (800faf8 <vTaskStartScheduler+0xb8>)
 800fa72:	f7ff fe0f 	bl	800f694 <xTaskCreateStatic>
 800fa76:	4603      	mov	r3, r0
 800fa78:	4a20      	ldr	r2, [pc, #128]	; (800fafc <vTaskStartScheduler+0xbc>)
 800fa7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800fa7c:	4b1f      	ldr	r3, [pc, #124]	; (800fafc <vTaskStartScheduler+0xbc>)
 800fa7e:	681b      	ldr	r3, [r3, #0]
 800fa80:	2b00      	cmp	r3, #0
 800fa82:	d002      	beq.n	800fa8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800fa84:	2301      	movs	r3, #1
 800fa86:	617b      	str	r3, [r7, #20]
 800fa88:	e001      	b.n	800fa8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800fa8e:	697b      	ldr	r3, [r7, #20]
 800fa90:	2b01      	cmp	r3, #1
 800fa92:	d102      	bne.n	800fa9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800fa94:	f000 fdfa 	bl	801068c <xTimerCreateTimerTask>
 800fa98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800fa9a:	697b      	ldr	r3, [r7, #20]
 800fa9c:	2b01      	cmp	r3, #1
 800fa9e:	d116      	bne.n	800face <vTaskStartScheduler+0x8e>
	__asm volatile
 800faa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faa4:	f383 8811 	msr	BASEPRI, r3
 800faa8:	f3bf 8f6f 	isb	sy
 800faac:	f3bf 8f4f 	dsb	sy
 800fab0:	613b      	str	r3, [r7, #16]
}
 800fab2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800fab4:	4b12      	ldr	r3, [pc, #72]	; (800fb00 <vTaskStartScheduler+0xc0>)
 800fab6:	f04f 32ff 	mov.w	r2, #4294967295
 800faba:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800fabc:	4b11      	ldr	r3, [pc, #68]	; (800fb04 <vTaskStartScheduler+0xc4>)
 800fabe:	2201      	movs	r2, #1
 800fac0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800fac2:	4b11      	ldr	r3, [pc, #68]	; (800fb08 <vTaskStartScheduler+0xc8>)
 800fac4:	2200      	movs	r2, #0
 800fac6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800fac8:	f001 f9ba 	bl	8010e40 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800facc:	e00e      	b.n	800faec <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800face:	697b      	ldr	r3, [r7, #20]
 800fad0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fad4:	d10a      	bne.n	800faec <vTaskStartScheduler+0xac>
	__asm volatile
 800fad6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fada:	f383 8811 	msr	BASEPRI, r3
 800fade:	f3bf 8f6f 	isb	sy
 800fae2:	f3bf 8f4f 	dsb	sy
 800fae6:	60fb      	str	r3, [r7, #12]
}
 800fae8:	bf00      	nop
 800faea:	e7fe      	b.n	800faea <vTaskStartScheduler+0xaa>
}
 800faec:	bf00      	nop
 800faee:	3718      	adds	r7, #24
 800faf0:	46bd      	mov	sp, r7
 800faf2:	bd80      	pop	{r7, pc}
 800faf4:	08015c38 	.word	0x08015c38
 800faf8:	08010125 	.word	0x08010125
 800fafc:	2001b528 	.word	0x2001b528
 800fb00:	2001b524 	.word	0x2001b524
 800fb04:	2001b510 	.word	0x2001b510
 800fb08:	2001b508 	.word	0x2001b508

0800fb0c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800fb0c:	b480      	push	{r7}
 800fb0e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800fb10:	4b04      	ldr	r3, [pc, #16]	; (800fb24 <vTaskSuspendAll+0x18>)
 800fb12:	681b      	ldr	r3, [r3, #0]
 800fb14:	3301      	adds	r3, #1
 800fb16:	4a03      	ldr	r2, [pc, #12]	; (800fb24 <vTaskSuspendAll+0x18>)
 800fb18:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800fb1a:	bf00      	nop
 800fb1c:	46bd      	mov	sp, r7
 800fb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb22:	4770      	bx	lr
 800fb24:	2001b52c 	.word	0x2001b52c

0800fb28 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800fb28:	b580      	push	{r7, lr}
 800fb2a:	b084      	sub	sp, #16
 800fb2c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800fb2e:	2300      	movs	r3, #0
 800fb30:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800fb32:	2300      	movs	r3, #0
 800fb34:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800fb36:	4b42      	ldr	r3, [pc, #264]	; (800fc40 <xTaskResumeAll+0x118>)
 800fb38:	681b      	ldr	r3, [r3, #0]
 800fb3a:	2b00      	cmp	r3, #0
 800fb3c:	d10a      	bne.n	800fb54 <xTaskResumeAll+0x2c>
	__asm volatile
 800fb3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb42:	f383 8811 	msr	BASEPRI, r3
 800fb46:	f3bf 8f6f 	isb	sy
 800fb4a:	f3bf 8f4f 	dsb	sy
 800fb4e:	603b      	str	r3, [r7, #0]
}
 800fb50:	bf00      	nop
 800fb52:	e7fe      	b.n	800fb52 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800fb54:	f001 fa16 	bl	8010f84 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800fb58:	4b39      	ldr	r3, [pc, #228]	; (800fc40 <xTaskResumeAll+0x118>)
 800fb5a:	681b      	ldr	r3, [r3, #0]
 800fb5c:	3b01      	subs	r3, #1
 800fb5e:	4a38      	ldr	r2, [pc, #224]	; (800fc40 <xTaskResumeAll+0x118>)
 800fb60:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fb62:	4b37      	ldr	r3, [pc, #220]	; (800fc40 <xTaskResumeAll+0x118>)
 800fb64:	681b      	ldr	r3, [r3, #0]
 800fb66:	2b00      	cmp	r3, #0
 800fb68:	d162      	bne.n	800fc30 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800fb6a:	4b36      	ldr	r3, [pc, #216]	; (800fc44 <xTaskResumeAll+0x11c>)
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	d05e      	beq.n	800fc30 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fb72:	e02f      	b.n	800fbd4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fb74:	4b34      	ldr	r3, [pc, #208]	; (800fc48 <xTaskResumeAll+0x120>)
 800fb76:	68db      	ldr	r3, [r3, #12]
 800fb78:	68db      	ldr	r3, [r3, #12]
 800fb7a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fb7c:	68fb      	ldr	r3, [r7, #12]
 800fb7e:	3318      	adds	r3, #24
 800fb80:	4618      	mov	r0, r3
 800fb82:	f7fe fe07 	bl	800e794 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fb86:	68fb      	ldr	r3, [r7, #12]
 800fb88:	3304      	adds	r3, #4
 800fb8a:	4618      	mov	r0, r3
 800fb8c:	f7fe fe02 	bl	800e794 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800fb90:	68fb      	ldr	r3, [r7, #12]
 800fb92:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fb94:	4b2d      	ldr	r3, [pc, #180]	; (800fc4c <xTaskResumeAll+0x124>)
 800fb96:	681b      	ldr	r3, [r3, #0]
 800fb98:	429a      	cmp	r2, r3
 800fb9a:	d903      	bls.n	800fba4 <xTaskResumeAll+0x7c>
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fba0:	4a2a      	ldr	r2, [pc, #168]	; (800fc4c <xTaskResumeAll+0x124>)
 800fba2:	6013      	str	r3, [r2, #0]
 800fba4:	68fb      	ldr	r3, [r7, #12]
 800fba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fba8:	4613      	mov	r3, r2
 800fbaa:	009b      	lsls	r3, r3, #2
 800fbac:	4413      	add	r3, r2
 800fbae:	009b      	lsls	r3, r3, #2
 800fbb0:	4a27      	ldr	r2, [pc, #156]	; (800fc50 <xTaskResumeAll+0x128>)
 800fbb2:	441a      	add	r2, r3
 800fbb4:	68fb      	ldr	r3, [r7, #12]
 800fbb6:	3304      	adds	r3, #4
 800fbb8:	4619      	mov	r1, r3
 800fbba:	4610      	mov	r0, r2
 800fbbc:	f7fe fd8d 	bl	800e6da <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fbc0:	68fb      	ldr	r3, [r7, #12]
 800fbc2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fbc4:	4b23      	ldr	r3, [pc, #140]	; (800fc54 <xTaskResumeAll+0x12c>)
 800fbc6:	681b      	ldr	r3, [r3, #0]
 800fbc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fbca:	429a      	cmp	r2, r3
 800fbcc:	d302      	bcc.n	800fbd4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800fbce:	4b22      	ldr	r3, [pc, #136]	; (800fc58 <xTaskResumeAll+0x130>)
 800fbd0:	2201      	movs	r2, #1
 800fbd2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800fbd4:	4b1c      	ldr	r3, [pc, #112]	; (800fc48 <xTaskResumeAll+0x120>)
 800fbd6:	681b      	ldr	r3, [r3, #0]
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d1cb      	bne.n	800fb74 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800fbdc:	68fb      	ldr	r3, [r7, #12]
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d001      	beq.n	800fbe6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800fbe2:	f000 fb55 	bl	8010290 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800fbe6:	4b1d      	ldr	r3, [pc, #116]	; (800fc5c <xTaskResumeAll+0x134>)
 800fbe8:	681b      	ldr	r3, [r3, #0]
 800fbea:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800fbec:	687b      	ldr	r3, [r7, #4]
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d010      	beq.n	800fc14 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800fbf2:	f000 f847 	bl	800fc84 <xTaskIncrementTick>
 800fbf6:	4603      	mov	r3, r0
 800fbf8:	2b00      	cmp	r3, #0
 800fbfa:	d002      	beq.n	800fc02 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800fbfc:	4b16      	ldr	r3, [pc, #88]	; (800fc58 <xTaskResumeAll+0x130>)
 800fbfe:	2201      	movs	r2, #1
 800fc00:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	3b01      	subs	r3, #1
 800fc06:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800fc08:	687b      	ldr	r3, [r7, #4]
 800fc0a:	2b00      	cmp	r3, #0
 800fc0c:	d1f1      	bne.n	800fbf2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800fc0e:	4b13      	ldr	r3, [pc, #76]	; (800fc5c <xTaskResumeAll+0x134>)
 800fc10:	2200      	movs	r2, #0
 800fc12:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800fc14:	4b10      	ldr	r3, [pc, #64]	; (800fc58 <xTaskResumeAll+0x130>)
 800fc16:	681b      	ldr	r3, [r3, #0]
 800fc18:	2b00      	cmp	r3, #0
 800fc1a:	d009      	beq.n	800fc30 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800fc1c:	2301      	movs	r3, #1
 800fc1e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800fc20:	4b0f      	ldr	r3, [pc, #60]	; (800fc60 <xTaskResumeAll+0x138>)
 800fc22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc26:	601a      	str	r2, [r3, #0]
 800fc28:	f3bf 8f4f 	dsb	sy
 800fc2c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800fc30:	f001 f9d8 	bl	8010fe4 <vPortExitCritical>

	return xAlreadyYielded;
 800fc34:	68bb      	ldr	r3, [r7, #8]
}
 800fc36:	4618      	mov	r0, r3
 800fc38:	3710      	adds	r7, #16
 800fc3a:	46bd      	mov	sp, r7
 800fc3c:	bd80      	pop	{r7, pc}
 800fc3e:	bf00      	nop
 800fc40:	2001b52c 	.word	0x2001b52c
 800fc44:	2001b504 	.word	0x2001b504
 800fc48:	2001b4c4 	.word	0x2001b4c4
 800fc4c:	2001b50c 	.word	0x2001b50c
 800fc50:	2001b034 	.word	0x2001b034
 800fc54:	2001b030 	.word	0x2001b030
 800fc58:	2001b518 	.word	0x2001b518
 800fc5c:	2001b514 	.word	0x2001b514
 800fc60:	e000ed04 	.word	0xe000ed04

0800fc64 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800fc64:	b480      	push	{r7}
 800fc66:	b083      	sub	sp, #12
 800fc68:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800fc6a:	4b05      	ldr	r3, [pc, #20]	; (800fc80 <xTaskGetTickCount+0x1c>)
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800fc70:	687b      	ldr	r3, [r7, #4]
}
 800fc72:	4618      	mov	r0, r3
 800fc74:	370c      	adds	r7, #12
 800fc76:	46bd      	mov	sp, r7
 800fc78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc7c:	4770      	bx	lr
 800fc7e:	bf00      	nop
 800fc80:	2001b508 	.word	0x2001b508

0800fc84 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800fc84:	b580      	push	{r7, lr}
 800fc86:	b086      	sub	sp, #24
 800fc88:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800fc8a:	2300      	movs	r3, #0
 800fc8c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800fc8e:	4b4f      	ldr	r3, [pc, #316]	; (800fdcc <xTaskIncrementTick+0x148>)
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	2b00      	cmp	r3, #0
 800fc94:	f040 808f 	bne.w	800fdb6 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800fc98:	4b4d      	ldr	r3, [pc, #308]	; (800fdd0 <xTaskIncrementTick+0x14c>)
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	3301      	adds	r3, #1
 800fc9e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800fca0:	4a4b      	ldr	r2, [pc, #300]	; (800fdd0 <xTaskIncrementTick+0x14c>)
 800fca2:	693b      	ldr	r3, [r7, #16]
 800fca4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800fca6:	693b      	ldr	r3, [r7, #16]
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d120      	bne.n	800fcee <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800fcac:	4b49      	ldr	r3, [pc, #292]	; (800fdd4 <xTaskIncrementTick+0x150>)
 800fcae:	681b      	ldr	r3, [r3, #0]
 800fcb0:	681b      	ldr	r3, [r3, #0]
 800fcb2:	2b00      	cmp	r3, #0
 800fcb4:	d00a      	beq.n	800fccc <xTaskIncrementTick+0x48>
	__asm volatile
 800fcb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fcba:	f383 8811 	msr	BASEPRI, r3
 800fcbe:	f3bf 8f6f 	isb	sy
 800fcc2:	f3bf 8f4f 	dsb	sy
 800fcc6:	603b      	str	r3, [r7, #0]
}
 800fcc8:	bf00      	nop
 800fcca:	e7fe      	b.n	800fcca <xTaskIncrementTick+0x46>
 800fccc:	4b41      	ldr	r3, [pc, #260]	; (800fdd4 <xTaskIncrementTick+0x150>)
 800fcce:	681b      	ldr	r3, [r3, #0]
 800fcd0:	60fb      	str	r3, [r7, #12]
 800fcd2:	4b41      	ldr	r3, [pc, #260]	; (800fdd8 <xTaskIncrementTick+0x154>)
 800fcd4:	681b      	ldr	r3, [r3, #0]
 800fcd6:	4a3f      	ldr	r2, [pc, #252]	; (800fdd4 <xTaskIncrementTick+0x150>)
 800fcd8:	6013      	str	r3, [r2, #0]
 800fcda:	4a3f      	ldr	r2, [pc, #252]	; (800fdd8 <xTaskIncrementTick+0x154>)
 800fcdc:	68fb      	ldr	r3, [r7, #12]
 800fcde:	6013      	str	r3, [r2, #0]
 800fce0:	4b3e      	ldr	r3, [pc, #248]	; (800fddc <xTaskIncrementTick+0x158>)
 800fce2:	681b      	ldr	r3, [r3, #0]
 800fce4:	3301      	adds	r3, #1
 800fce6:	4a3d      	ldr	r2, [pc, #244]	; (800fddc <xTaskIncrementTick+0x158>)
 800fce8:	6013      	str	r3, [r2, #0]
 800fcea:	f000 fad1 	bl	8010290 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800fcee:	4b3c      	ldr	r3, [pc, #240]	; (800fde0 <xTaskIncrementTick+0x15c>)
 800fcf0:	681b      	ldr	r3, [r3, #0]
 800fcf2:	693a      	ldr	r2, [r7, #16]
 800fcf4:	429a      	cmp	r2, r3
 800fcf6:	d349      	bcc.n	800fd8c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fcf8:	4b36      	ldr	r3, [pc, #216]	; (800fdd4 <xTaskIncrementTick+0x150>)
 800fcfa:	681b      	ldr	r3, [r3, #0]
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	2b00      	cmp	r3, #0
 800fd00:	d104      	bne.n	800fd0c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fd02:	4b37      	ldr	r3, [pc, #220]	; (800fde0 <xTaskIncrementTick+0x15c>)
 800fd04:	f04f 32ff 	mov.w	r2, #4294967295
 800fd08:	601a      	str	r2, [r3, #0]
					break;
 800fd0a:	e03f      	b.n	800fd8c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fd0c:	4b31      	ldr	r3, [pc, #196]	; (800fdd4 <xTaskIncrementTick+0x150>)
 800fd0e:	681b      	ldr	r3, [r3, #0]
 800fd10:	68db      	ldr	r3, [r3, #12]
 800fd12:	68db      	ldr	r3, [r3, #12]
 800fd14:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800fd16:	68bb      	ldr	r3, [r7, #8]
 800fd18:	685b      	ldr	r3, [r3, #4]
 800fd1a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800fd1c:	693a      	ldr	r2, [r7, #16]
 800fd1e:	687b      	ldr	r3, [r7, #4]
 800fd20:	429a      	cmp	r2, r3
 800fd22:	d203      	bcs.n	800fd2c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800fd24:	4a2e      	ldr	r2, [pc, #184]	; (800fde0 <xTaskIncrementTick+0x15c>)
 800fd26:	687b      	ldr	r3, [r7, #4]
 800fd28:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800fd2a:	e02f      	b.n	800fd8c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800fd2c:	68bb      	ldr	r3, [r7, #8]
 800fd2e:	3304      	adds	r3, #4
 800fd30:	4618      	mov	r0, r3
 800fd32:	f7fe fd2f 	bl	800e794 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800fd36:	68bb      	ldr	r3, [r7, #8]
 800fd38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d004      	beq.n	800fd48 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800fd3e:	68bb      	ldr	r3, [r7, #8]
 800fd40:	3318      	adds	r3, #24
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7fe fd26 	bl	800e794 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800fd48:	68bb      	ldr	r3, [r7, #8]
 800fd4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd4c:	4b25      	ldr	r3, [pc, #148]	; (800fde4 <xTaskIncrementTick+0x160>)
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	429a      	cmp	r2, r3
 800fd52:	d903      	bls.n	800fd5c <xTaskIncrementTick+0xd8>
 800fd54:	68bb      	ldr	r3, [r7, #8]
 800fd56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd58:	4a22      	ldr	r2, [pc, #136]	; (800fde4 <xTaskIncrementTick+0x160>)
 800fd5a:	6013      	str	r3, [r2, #0]
 800fd5c:	68bb      	ldr	r3, [r7, #8]
 800fd5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd60:	4613      	mov	r3, r2
 800fd62:	009b      	lsls	r3, r3, #2
 800fd64:	4413      	add	r3, r2
 800fd66:	009b      	lsls	r3, r3, #2
 800fd68:	4a1f      	ldr	r2, [pc, #124]	; (800fde8 <xTaskIncrementTick+0x164>)
 800fd6a:	441a      	add	r2, r3
 800fd6c:	68bb      	ldr	r3, [r7, #8]
 800fd6e:	3304      	adds	r3, #4
 800fd70:	4619      	mov	r1, r3
 800fd72:	4610      	mov	r0, r2
 800fd74:	f7fe fcb1 	bl	800e6da <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800fd78:	68bb      	ldr	r3, [r7, #8]
 800fd7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd7c:	4b1b      	ldr	r3, [pc, #108]	; (800fdec <xTaskIncrementTick+0x168>)
 800fd7e:	681b      	ldr	r3, [r3, #0]
 800fd80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800fd82:	429a      	cmp	r2, r3
 800fd84:	d3b8      	bcc.n	800fcf8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800fd86:	2301      	movs	r3, #1
 800fd88:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800fd8a:	e7b5      	b.n	800fcf8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800fd8c:	4b17      	ldr	r3, [pc, #92]	; (800fdec <xTaskIncrementTick+0x168>)
 800fd8e:	681b      	ldr	r3, [r3, #0]
 800fd90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fd92:	4915      	ldr	r1, [pc, #84]	; (800fde8 <xTaskIncrementTick+0x164>)
 800fd94:	4613      	mov	r3, r2
 800fd96:	009b      	lsls	r3, r3, #2
 800fd98:	4413      	add	r3, r2
 800fd9a:	009b      	lsls	r3, r3, #2
 800fd9c:	440b      	add	r3, r1
 800fd9e:	681b      	ldr	r3, [r3, #0]
 800fda0:	2b01      	cmp	r3, #1
 800fda2:	d901      	bls.n	800fda8 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800fda4:	2301      	movs	r3, #1
 800fda6:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800fda8:	4b11      	ldr	r3, [pc, #68]	; (800fdf0 <xTaskIncrementTick+0x16c>)
 800fdaa:	681b      	ldr	r3, [r3, #0]
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d007      	beq.n	800fdc0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800fdb0:	2301      	movs	r3, #1
 800fdb2:	617b      	str	r3, [r7, #20]
 800fdb4:	e004      	b.n	800fdc0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800fdb6:	4b0f      	ldr	r3, [pc, #60]	; (800fdf4 <xTaskIncrementTick+0x170>)
 800fdb8:	681b      	ldr	r3, [r3, #0]
 800fdba:	3301      	adds	r3, #1
 800fdbc:	4a0d      	ldr	r2, [pc, #52]	; (800fdf4 <xTaskIncrementTick+0x170>)
 800fdbe:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800fdc0:	697b      	ldr	r3, [r7, #20]
}
 800fdc2:	4618      	mov	r0, r3
 800fdc4:	3718      	adds	r7, #24
 800fdc6:	46bd      	mov	sp, r7
 800fdc8:	bd80      	pop	{r7, pc}
 800fdca:	bf00      	nop
 800fdcc:	2001b52c 	.word	0x2001b52c
 800fdd0:	2001b508 	.word	0x2001b508
 800fdd4:	2001b4bc 	.word	0x2001b4bc
 800fdd8:	2001b4c0 	.word	0x2001b4c0
 800fddc:	2001b51c 	.word	0x2001b51c
 800fde0:	2001b524 	.word	0x2001b524
 800fde4:	2001b50c 	.word	0x2001b50c
 800fde8:	2001b034 	.word	0x2001b034
 800fdec:	2001b030 	.word	0x2001b030
 800fdf0:	2001b518 	.word	0x2001b518
 800fdf4:	2001b514 	.word	0x2001b514

0800fdf8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800fdf8:	b480      	push	{r7}
 800fdfa:	b085      	sub	sp, #20
 800fdfc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800fdfe:	4b28      	ldr	r3, [pc, #160]	; (800fea0 <vTaskSwitchContext+0xa8>)
 800fe00:	681b      	ldr	r3, [r3, #0]
 800fe02:	2b00      	cmp	r3, #0
 800fe04:	d003      	beq.n	800fe0e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800fe06:	4b27      	ldr	r3, [pc, #156]	; (800fea4 <vTaskSwitchContext+0xac>)
 800fe08:	2201      	movs	r2, #1
 800fe0a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800fe0c:	e041      	b.n	800fe92 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 800fe0e:	4b25      	ldr	r3, [pc, #148]	; (800fea4 <vTaskSwitchContext+0xac>)
 800fe10:	2200      	movs	r2, #0
 800fe12:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fe14:	4b24      	ldr	r3, [pc, #144]	; (800fea8 <vTaskSwitchContext+0xb0>)
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	60fb      	str	r3, [r7, #12]
 800fe1a:	e010      	b.n	800fe3e <vTaskSwitchContext+0x46>
 800fe1c:	68fb      	ldr	r3, [r7, #12]
 800fe1e:	2b00      	cmp	r3, #0
 800fe20:	d10a      	bne.n	800fe38 <vTaskSwitchContext+0x40>
	__asm volatile
 800fe22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe26:	f383 8811 	msr	BASEPRI, r3
 800fe2a:	f3bf 8f6f 	isb	sy
 800fe2e:	f3bf 8f4f 	dsb	sy
 800fe32:	607b      	str	r3, [r7, #4]
}
 800fe34:	bf00      	nop
 800fe36:	e7fe      	b.n	800fe36 <vTaskSwitchContext+0x3e>
 800fe38:	68fb      	ldr	r3, [r7, #12]
 800fe3a:	3b01      	subs	r3, #1
 800fe3c:	60fb      	str	r3, [r7, #12]
 800fe3e:	491b      	ldr	r1, [pc, #108]	; (800feac <vTaskSwitchContext+0xb4>)
 800fe40:	68fa      	ldr	r2, [r7, #12]
 800fe42:	4613      	mov	r3, r2
 800fe44:	009b      	lsls	r3, r3, #2
 800fe46:	4413      	add	r3, r2
 800fe48:	009b      	lsls	r3, r3, #2
 800fe4a:	440b      	add	r3, r1
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	2b00      	cmp	r3, #0
 800fe50:	d0e4      	beq.n	800fe1c <vTaskSwitchContext+0x24>
 800fe52:	68fa      	ldr	r2, [r7, #12]
 800fe54:	4613      	mov	r3, r2
 800fe56:	009b      	lsls	r3, r3, #2
 800fe58:	4413      	add	r3, r2
 800fe5a:	009b      	lsls	r3, r3, #2
 800fe5c:	4a13      	ldr	r2, [pc, #76]	; (800feac <vTaskSwitchContext+0xb4>)
 800fe5e:	4413      	add	r3, r2
 800fe60:	60bb      	str	r3, [r7, #8]
 800fe62:	68bb      	ldr	r3, [r7, #8]
 800fe64:	685b      	ldr	r3, [r3, #4]
 800fe66:	685a      	ldr	r2, [r3, #4]
 800fe68:	68bb      	ldr	r3, [r7, #8]
 800fe6a:	605a      	str	r2, [r3, #4]
 800fe6c:	68bb      	ldr	r3, [r7, #8]
 800fe6e:	685a      	ldr	r2, [r3, #4]
 800fe70:	68bb      	ldr	r3, [r7, #8]
 800fe72:	3308      	adds	r3, #8
 800fe74:	429a      	cmp	r2, r3
 800fe76:	d104      	bne.n	800fe82 <vTaskSwitchContext+0x8a>
 800fe78:	68bb      	ldr	r3, [r7, #8]
 800fe7a:	685b      	ldr	r3, [r3, #4]
 800fe7c:	685a      	ldr	r2, [r3, #4]
 800fe7e:	68bb      	ldr	r3, [r7, #8]
 800fe80:	605a      	str	r2, [r3, #4]
 800fe82:	68bb      	ldr	r3, [r7, #8]
 800fe84:	685b      	ldr	r3, [r3, #4]
 800fe86:	68db      	ldr	r3, [r3, #12]
 800fe88:	4a09      	ldr	r2, [pc, #36]	; (800feb0 <vTaskSwitchContext+0xb8>)
 800fe8a:	6013      	str	r3, [r2, #0]
 800fe8c:	4a06      	ldr	r2, [pc, #24]	; (800fea8 <vTaskSwitchContext+0xb0>)
 800fe8e:	68fb      	ldr	r3, [r7, #12]
 800fe90:	6013      	str	r3, [r2, #0]
}
 800fe92:	bf00      	nop
 800fe94:	3714      	adds	r7, #20
 800fe96:	46bd      	mov	sp, r7
 800fe98:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fe9c:	4770      	bx	lr
 800fe9e:	bf00      	nop
 800fea0:	2001b52c 	.word	0x2001b52c
 800fea4:	2001b518 	.word	0x2001b518
 800fea8:	2001b50c 	.word	0x2001b50c
 800feac:	2001b034 	.word	0x2001b034
 800feb0:	2001b030 	.word	0x2001b030

0800feb4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800feb4:	b580      	push	{r7, lr}
 800feb6:	b084      	sub	sp, #16
 800feb8:	af00      	add	r7, sp, #0
 800feba:	6078      	str	r0, [r7, #4]
 800febc:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800febe:	687b      	ldr	r3, [r7, #4]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	d10a      	bne.n	800feda <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800fec4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fec8:	f383 8811 	msr	BASEPRI, r3
 800fecc:	f3bf 8f6f 	isb	sy
 800fed0:	f3bf 8f4f 	dsb	sy
 800fed4:	60fb      	str	r3, [r7, #12]
}
 800fed6:	bf00      	nop
 800fed8:	e7fe      	b.n	800fed8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800feda:	4b07      	ldr	r3, [pc, #28]	; (800fef8 <vTaskPlaceOnEventList+0x44>)
 800fedc:	681b      	ldr	r3, [r3, #0]
 800fede:	3318      	adds	r3, #24
 800fee0:	4619      	mov	r1, r3
 800fee2:	6878      	ldr	r0, [r7, #4]
 800fee4:	f7fe fc1d 	bl	800e722 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800fee8:	2101      	movs	r1, #1
 800feea:	6838      	ldr	r0, [r7, #0]
 800feec:	f000 fb7a 	bl	80105e4 <prvAddCurrentTaskToDelayedList>
}
 800fef0:	bf00      	nop
 800fef2:	3710      	adds	r7, #16
 800fef4:	46bd      	mov	sp, r7
 800fef6:	bd80      	pop	{r7, pc}
 800fef8:	2001b030 	.word	0x2001b030

0800fefc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800fefc:	b580      	push	{r7, lr}
 800fefe:	b086      	sub	sp, #24
 800ff00:	af00      	add	r7, sp, #0
 800ff02:	60f8      	str	r0, [r7, #12]
 800ff04:	60b9      	str	r1, [r7, #8]
 800ff06:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ff08:	68fb      	ldr	r3, [r7, #12]
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d10a      	bne.n	800ff24 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800ff0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff12:	f383 8811 	msr	BASEPRI, r3
 800ff16:	f3bf 8f6f 	isb	sy
 800ff1a:	f3bf 8f4f 	dsb	sy
 800ff1e:	617b      	str	r3, [r7, #20]
}
 800ff20:	bf00      	nop
 800ff22:	e7fe      	b.n	800ff22 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ff24:	4b0a      	ldr	r3, [pc, #40]	; (800ff50 <vTaskPlaceOnEventListRestricted+0x54>)
 800ff26:	681b      	ldr	r3, [r3, #0]
 800ff28:	3318      	adds	r3, #24
 800ff2a:	4619      	mov	r1, r3
 800ff2c:	68f8      	ldr	r0, [r7, #12]
 800ff2e:	f7fe fbd4 	bl	800e6da <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ff32:	687b      	ldr	r3, [r7, #4]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d002      	beq.n	800ff3e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ff38:	f04f 33ff 	mov.w	r3, #4294967295
 800ff3c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ff3e:	6879      	ldr	r1, [r7, #4]
 800ff40:	68b8      	ldr	r0, [r7, #8]
 800ff42:	f000 fb4f 	bl	80105e4 <prvAddCurrentTaskToDelayedList>
	}
 800ff46:	bf00      	nop
 800ff48:	3718      	adds	r7, #24
 800ff4a:	46bd      	mov	sp, r7
 800ff4c:	bd80      	pop	{r7, pc}
 800ff4e:	bf00      	nop
 800ff50:	2001b030 	.word	0x2001b030

0800ff54 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ff54:	b580      	push	{r7, lr}
 800ff56:	b086      	sub	sp, #24
 800ff58:	af00      	add	r7, sp, #0
 800ff5a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ff5c:	687b      	ldr	r3, [r7, #4]
 800ff5e:	68db      	ldr	r3, [r3, #12]
 800ff60:	68db      	ldr	r3, [r3, #12]
 800ff62:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ff64:	693b      	ldr	r3, [r7, #16]
 800ff66:	2b00      	cmp	r3, #0
 800ff68:	d10a      	bne.n	800ff80 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ff6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff6e:	f383 8811 	msr	BASEPRI, r3
 800ff72:	f3bf 8f6f 	isb	sy
 800ff76:	f3bf 8f4f 	dsb	sy
 800ff7a:	60fb      	str	r3, [r7, #12]
}
 800ff7c:	bf00      	nop
 800ff7e:	e7fe      	b.n	800ff7e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ff80:	693b      	ldr	r3, [r7, #16]
 800ff82:	3318      	adds	r3, #24
 800ff84:	4618      	mov	r0, r3
 800ff86:	f7fe fc05 	bl	800e794 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ff8a:	4b1e      	ldr	r3, [pc, #120]	; (8010004 <xTaskRemoveFromEventList+0xb0>)
 800ff8c:	681b      	ldr	r3, [r3, #0]
 800ff8e:	2b00      	cmp	r3, #0
 800ff90:	d11d      	bne.n	800ffce <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ff92:	693b      	ldr	r3, [r7, #16]
 800ff94:	3304      	adds	r3, #4
 800ff96:	4618      	mov	r0, r3
 800ff98:	f7fe fbfc 	bl	800e794 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ff9c:	693b      	ldr	r3, [r7, #16]
 800ff9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffa0:	4b19      	ldr	r3, [pc, #100]	; (8010008 <xTaskRemoveFromEventList+0xb4>)
 800ffa2:	681b      	ldr	r3, [r3, #0]
 800ffa4:	429a      	cmp	r2, r3
 800ffa6:	d903      	bls.n	800ffb0 <xTaskRemoveFromEventList+0x5c>
 800ffa8:	693b      	ldr	r3, [r7, #16]
 800ffaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffac:	4a16      	ldr	r2, [pc, #88]	; (8010008 <xTaskRemoveFromEventList+0xb4>)
 800ffae:	6013      	str	r3, [r2, #0]
 800ffb0:	693b      	ldr	r3, [r7, #16]
 800ffb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffb4:	4613      	mov	r3, r2
 800ffb6:	009b      	lsls	r3, r3, #2
 800ffb8:	4413      	add	r3, r2
 800ffba:	009b      	lsls	r3, r3, #2
 800ffbc:	4a13      	ldr	r2, [pc, #76]	; (801000c <xTaskRemoveFromEventList+0xb8>)
 800ffbe:	441a      	add	r2, r3
 800ffc0:	693b      	ldr	r3, [r7, #16]
 800ffc2:	3304      	adds	r3, #4
 800ffc4:	4619      	mov	r1, r3
 800ffc6:	4610      	mov	r0, r2
 800ffc8:	f7fe fb87 	bl	800e6da <vListInsertEnd>
 800ffcc:	e005      	b.n	800ffda <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ffce:	693b      	ldr	r3, [r7, #16]
 800ffd0:	3318      	adds	r3, #24
 800ffd2:	4619      	mov	r1, r3
 800ffd4:	480e      	ldr	r0, [pc, #56]	; (8010010 <xTaskRemoveFromEventList+0xbc>)
 800ffd6:	f7fe fb80 	bl	800e6da <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800ffda:	693b      	ldr	r3, [r7, #16]
 800ffdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ffde:	4b0d      	ldr	r3, [pc, #52]	; (8010014 <xTaskRemoveFromEventList+0xc0>)
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ffe4:	429a      	cmp	r2, r3
 800ffe6:	d905      	bls.n	800fff4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800ffe8:	2301      	movs	r3, #1
 800ffea:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800ffec:	4b0a      	ldr	r3, [pc, #40]	; (8010018 <xTaskRemoveFromEventList+0xc4>)
 800ffee:	2201      	movs	r2, #1
 800fff0:	601a      	str	r2, [r3, #0]
 800fff2:	e001      	b.n	800fff8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800fff4:	2300      	movs	r3, #0
 800fff6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800fff8:	697b      	ldr	r3, [r7, #20]
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3718      	adds	r7, #24
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
 8010002:	bf00      	nop
 8010004:	2001b52c 	.word	0x2001b52c
 8010008:	2001b50c 	.word	0x2001b50c
 801000c:	2001b034 	.word	0x2001b034
 8010010:	2001b4c4 	.word	0x2001b4c4
 8010014:	2001b030 	.word	0x2001b030
 8010018:	2001b518 	.word	0x2001b518

0801001c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 801001c:	b480      	push	{r7}
 801001e:	b083      	sub	sp, #12
 8010020:	af00      	add	r7, sp, #0
 8010022:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8010024:	4b06      	ldr	r3, [pc, #24]	; (8010040 <vTaskInternalSetTimeOutState+0x24>)
 8010026:	681a      	ldr	r2, [r3, #0]
 8010028:	687b      	ldr	r3, [r7, #4]
 801002a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 801002c:	4b05      	ldr	r3, [pc, #20]	; (8010044 <vTaskInternalSetTimeOutState+0x28>)
 801002e:	681a      	ldr	r2, [r3, #0]
 8010030:	687b      	ldr	r3, [r7, #4]
 8010032:	605a      	str	r2, [r3, #4]
}
 8010034:	bf00      	nop
 8010036:	370c      	adds	r7, #12
 8010038:	46bd      	mov	sp, r7
 801003a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801003e:	4770      	bx	lr
 8010040:	2001b51c 	.word	0x2001b51c
 8010044:	2001b508 	.word	0x2001b508

08010048 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010048:	b580      	push	{r7, lr}
 801004a:	b088      	sub	sp, #32
 801004c:	af00      	add	r7, sp, #0
 801004e:	6078      	str	r0, [r7, #4]
 8010050:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	2b00      	cmp	r3, #0
 8010056:	d10a      	bne.n	801006e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8010058:	f04f 0350 	mov.w	r3, #80	; 0x50
 801005c:	f383 8811 	msr	BASEPRI, r3
 8010060:	f3bf 8f6f 	isb	sy
 8010064:	f3bf 8f4f 	dsb	sy
 8010068:	613b      	str	r3, [r7, #16]
}
 801006a:	bf00      	nop
 801006c:	e7fe      	b.n	801006c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 801006e:	683b      	ldr	r3, [r7, #0]
 8010070:	2b00      	cmp	r3, #0
 8010072:	d10a      	bne.n	801008a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8010074:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010078:	f383 8811 	msr	BASEPRI, r3
 801007c:	f3bf 8f6f 	isb	sy
 8010080:	f3bf 8f4f 	dsb	sy
 8010084:	60fb      	str	r3, [r7, #12]
}
 8010086:	bf00      	nop
 8010088:	e7fe      	b.n	8010088 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 801008a:	f000 ff7b 	bl	8010f84 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801008e:	4b1d      	ldr	r3, [pc, #116]	; (8010104 <xTaskCheckForTimeOut+0xbc>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010094:	687b      	ldr	r3, [r7, #4]
 8010096:	685b      	ldr	r3, [r3, #4]
 8010098:	69ba      	ldr	r2, [r7, #24]
 801009a:	1ad3      	subs	r3, r2, r3
 801009c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801009e:	683b      	ldr	r3, [r7, #0]
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80100a6:	d102      	bne.n	80100ae <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80100a8:	2300      	movs	r3, #0
 80100aa:	61fb      	str	r3, [r7, #28]
 80100ac:	e023      	b.n	80100f6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80100ae:	687b      	ldr	r3, [r7, #4]
 80100b0:	681a      	ldr	r2, [r3, #0]
 80100b2:	4b15      	ldr	r3, [pc, #84]	; (8010108 <xTaskCheckForTimeOut+0xc0>)
 80100b4:	681b      	ldr	r3, [r3, #0]
 80100b6:	429a      	cmp	r2, r3
 80100b8:	d007      	beq.n	80100ca <xTaskCheckForTimeOut+0x82>
 80100ba:	687b      	ldr	r3, [r7, #4]
 80100bc:	685b      	ldr	r3, [r3, #4]
 80100be:	69ba      	ldr	r2, [r7, #24]
 80100c0:	429a      	cmp	r2, r3
 80100c2:	d302      	bcc.n	80100ca <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80100c4:	2301      	movs	r3, #1
 80100c6:	61fb      	str	r3, [r7, #28]
 80100c8:	e015      	b.n	80100f6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80100ca:	683b      	ldr	r3, [r7, #0]
 80100cc:	681b      	ldr	r3, [r3, #0]
 80100ce:	697a      	ldr	r2, [r7, #20]
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d20b      	bcs.n	80100ec <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80100d4:	683b      	ldr	r3, [r7, #0]
 80100d6:	681a      	ldr	r2, [r3, #0]
 80100d8:	697b      	ldr	r3, [r7, #20]
 80100da:	1ad2      	subs	r2, r2, r3
 80100dc:	683b      	ldr	r3, [r7, #0]
 80100de:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80100e0:	6878      	ldr	r0, [r7, #4]
 80100e2:	f7ff ff9b 	bl	801001c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80100e6:	2300      	movs	r3, #0
 80100e8:	61fb      	str	r3, [r7, #28]
 80100ea:	e004      	b.n	80100f6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80100ec:	683b      	ldr	r3, [r7, #0]
 80100ee:	2200      	movs	r2, #0
 80100f0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80100f2:	2301      	movs	r3, #1
 80100f4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80100f6:	f000 ff75 	bl	8010fe4 <vPortExitCritical>

	return xReturn;
 80100fa:	69fb      	ldr	r3, [r7, #28]
}
 80100fc:	4618      	mov	r0, r3
 80100fe:	3720      	adds	r7, #32
 8010100:	46bd      	mov	sp, r7
 8010102:	bd80      	pop	{r7, pc}
 8010104:	2001b508 	.word	0x2001b508
 8010108:	2001b51c 	.word	0x2001b51c

0801010c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 801010c:	b480      	push	{r7}
 801010e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010110:	4b03      	ldr	r3, [pc, #12]	; (8010120 <vTaskMissedYield+0x14>)
 8010112:	2201      	movs	r2, #1
 8010114:	601a      	str	r2, [r3, #0]
}
 8010116:	bf00      	nop
 8010118:	46bd      	mov	sp, r7
 801011a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801011e:	4770      	bx	lr
 8010120:	2001b518 	.word	0x2001b518

08010124 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010124:	b580      	push	{r7, lr}
 8010126:	b082      	sub	sp, #8
 8010128:	af00      	add	r7, sp, #0
 801012a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801012c:	f000 f852 	bl	80101d4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010130:	4b06      	ldr	r3, [pc, #24]	; (801014c <prvIdleTask+0x28>)
 8010132:	681b      	ldr	r3, [r3, #0]
 8010134:	2b01      	cmp	r3, #1
 8010136:	d9f9      	bls.n	801012c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010138:	4b05      	ldr	r3, [pc, #20]	; (8010150 <prvIdleTask+0x2c>)
 801013a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801013e:	601a      	str	r2, [r3, #0]
 8010140:	f3bf 8f4f 	dsb	sy
 8010144:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010148:	e7f0      	b.n	801012c <prvIdleTask+0x8>
 801014a:	bf00      	nop
 801014c:	2001b034 	.word	0x2001b034
 8010150:	e000ed04 	.word	0xe000ed04

08010154 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010154:	b580      	push	{r7, lr}
 8010156:	b082      	sub	sp, #8
 8010158:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801015a:	2300      	movs	r3, #0
 801015c:	607b      	str	r3, [r7, #4]
 801015e:	e00c      	b.n	801017a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010160:	687a      	ldr	r2, [r7, #4]
 8010162:	4613      	mov	r3, r2
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	4413      	add	r3, r2
 8010168:	009b      	lsls	r3, r3, #2
 801016a:	4a12      	ldr	r2, [pc, #72]	; (80101b4 <prvInitialiseTaskLists+0x60>)
 801016c:	4413      	add	r3, r2
 801016e:	4618      	mov	r0, r3
 8010170:	f7fe fa86 	bl	800e680 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010174:	687b      	ldr	r3, [r7, #4]
 8010176:	3301      	adds	r3, #1
 8010178:	607b      	str	r3, [r7, #4]
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	2b37      	cmp	r3, #55	; 0x37
 801017e:	d9ef      	bls.n	8010160 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010180:	480d      	ldr	r0, [pc, #52]	; (80101b8 <prvInitialiseTaskLists+0x64>)
 8010182:	f7fe fa7d 	bl	800e680 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010186:	480d      	ldr	r0, [pc, #52]	; (80101bc <prvInitialiseTaskLists+0x68>)
 8010188:	f7fe fa7a 	bl	800e680 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801018c:	480c      	ldr	r0, [pc, #48]	; (80101c0 <prvInitialiseTaskLists+0x6c>)
 801018e:	f7fe fa77 	bl	800e680 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010192:	480c      	ldr	r0, [pc, #48]	; (80101c4 <prvInitialiseTaskLists+0x70>)
 8010194:	f7fe fa74 	bl	800e680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010198:	480b      	ldr	r0, [pc, #44]	; (80101c8 <prvInitialiseTaskLists+0x74>)
 801019a:	f7fe fa71 	bl	800e680 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801019e:	4b0b      	ldr	r3, [pc, #44]	; (80101cc <prvInitialiseTaskLists+0x78>)
 80101a0:	4a05      	ldr	r2, [pc, #20]	; (80101b8 <prvInitialiseTaskLists+0x64>)
 80101a2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80101a4:	4b0a      	ldr	r3, [pc, #40]	; (80101d0 <prvInitialiseTaskLists+0x7c>)
 80101a6:	4a05      	ldr	r2, [pc, #20]	; (80101bc <prvInitialiseTaskLists+0x68>)
 80101a8:	601a      	str	r2, [r3, #0]
}
 80101aa:	bf00      	nop
 80101ac:	3708      	adds	r7, #8
 80101ae:	46bd      	mov	sp, r7
 80101b0:	bd80      	pop	{r7, pc}
 80101b2:	bf00      	nop
 80101b4:	2001b034 	.word	0x2001b034
 80101b8:	2001b494 	.word	0x2001b494
 80101bc:	2001b4a8 	.word	0x2001b4a8
 80101c0:	2001b4c4 	.word	0x2001b4c4
 80101c4:	2001b4d8 	.word	0x2001b4d8
 80101c8:	2001b4f0 	.word	0x2001b4f0
 80101cc:	2001b4bc 	.word	0x2001b4bc
 80101d0:	2001b4c0 	.word	0x2001b4c0

080101d4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80101d4:	b580      	push	{r7, lr}
 80101d6:	b082      	sub	sp, #8
 80101d8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80101da:	e019      	b.n	8010210 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80101dc:	f000 fed2 	bl	8010f84 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80101e0:	4b10      	ldr	r3, [pc, #64]	; (8010224 <prvCheckTasksWaitingTermination+0x50>)
 80101e2:	68db      	ldr	r3, [r3, #12]
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	3304      	adds	r3, #4
 80101ec:	4618      	mov	r0, r3
 80101ee:	f7fe fad1 	bl	800e794 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80101f2:	4b0d      	ldr	r3, [pc, #52]	; (8010228 <prvCheckTasksWaitingTermination+0x54>)
 80101f4:	681b      	ldr	r3, [r3, #0]
 80101f6:	3b01      	subs	r3, #1
 80101f8:	4a0b      	ldr	r2, [pc, #44]	; (8010228 <prvCheckTasksWaitingTermination+0x54>)
 80101fa:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80101fc:	4b0b      	ldr	r3, [pc, #44]	; (801022c <prvCheckTasksWaitingTermination+0x58>)
 80101fe:	681b      	ldr	r3, [r3, #0]
 8010200:	3b01      	subs	r3, #1
 8010202:	4a0a      	ldr	r2, [pc, #40]	; (801022c <prvCheckTasksWaitingTermination+0x58>)
 8010204:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010206:	f000 feed 	bl	8010fe4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801020a:	6878      	ldr	r0, [r7, #4]
 801020c:	f000 f810 	bl	8010230 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010210:	4b06      	ldr	r3, [pc, #24]	; (801022c <prvCheckTasksWaitingTermination+0x58>)
 8010212:	681b      	ldr	r3, [r3, #0]
 8010214:	2b00      	cmp	r3, #0
 8010216:	d1e1      	bne.n	80101dc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010218:	bf00      	nop
 801021a:	bf00      	nop
 801021c:	3708      	adds	r7, #8
 801021e:	46bd      	mov	sp, r7
 8010220:	bd80      	pop	{r7, pc}
 8010222:	bf00      	nop
 8010224:	2001b4d8 	.word	0x2001b4d8
 8010228:	2001b504 	.word	0x2001b504
 801022c:	2001b4ec 	.word	0x2001b4ec

08010230 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010230:	b580      	push	{r7, lr}
 8010232:	b084      	sub	sp, #16
 8010234:	af00      	add	r7, sp, #0
 8010236:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010238:	687b      	ldr	r3, [r7, #4]
 801023a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801023e:	2b00      	cmp	r3, #0
 8010240:	d108      	bne.n	8010254 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010246:	4618      	mov	r0, r3
 8010248:	f001 f88a 	bl	8011360 <vPortFree>
				vPortFree( pxTCB );
 801024c:	6878      	ldr	r0, [r7, #4]
 801024e:	f001 f887 	bl	8011360 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010252:	e018      	b.n	8010286 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010254:	687b      	ldr	r3, [r7, #4]
 8010256:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801025a:	2b01      	cmp	r3, #1
 801025c:	d103      	bne.n	8010266 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 801025e:	6878      	ldr	r0, [r7, #4]
 8010260:	f001 f87e 	bl	8011360 <vPortFree>
	}
 8010264:	e00f      	b.n	8010286 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010266:	687b      	ldr	r3, [r7, #4]
 8010268:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 801026c:	2b02      	cmp	r3, #2
 801026e:	d00a      	beq.n	8010286 <prvDeleteTCB+0x56>
	__asm volatile
 8010270:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010274:	f383 8811 	msr	BASEPRI, r3
 8010278:	f3bf 8f6f 	isb	sy
 801027c:	f3bf 8f4f 	dsb	sy
 8010280:	60fb      	str	r3, [r7, #12]
}
 8010282:	bf00      	nop
 8010284:	e7fe      	b.n	8010284 <prvDeleteTCB+0x54>
	}
 8010286:	bf00      	nop
 8010288:	3710      	adds	r7, #16
 801028a:	46bd      	mov	sp, r7
 801028c:	bd80      	pop	{r7, pc}
	...

08010290 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010290:	b480      	push	{r7}
 8010292:	b083      	sub	sp, #12
 8010294:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010296:	4b0c      	ldr	r3, [pc, #48]	; (80102c8 <prvResetNextTaskUnblockTime+0x38>)
 8010298:	681b      	ldr	r3, [r3, #0]
 801029a:	681b      	ldr	r3, [r3, #0]
 801029c:	2b00      	cmp	r3, #0
 801029e:	d104      	bne.n	80102aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80102a0:	4b0a      	ldr	r3, [pc, #40]	; (80102cc <prvResetNextTaskUnblockTime+0x3c>)
 80102a2:	f04f 32ff 	mov.w	r2, #4294967295
 80102a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80102a8:	e008      	b.n	80102bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80102aa:	4b07      	ldr	r3, [pc, #28]	; (80102c8 <prvResetNextTaskUnblockTime+0x38>)
 80102ac:	681b      	ldr	r3, [r3, #0]
 80102ae:	68db      	ldr	r3, [r3, #12]
 80102b0:	68db      	ldr	r3, [r3, #12]
 80102b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	685b      	ldr	r3, [r3, #4]
 80102b8:	4a04      	ldr	r2, [pc, #16]	; (80102cc <prvResetNextTaskUnblockTime+0x3c>)
 80102ba:	6013      	str	r3, [r2, #0]
}
 80102bc:	bf00      	nop
 80102be:	370c      	adds	r7, #12
 80102c0:	46bd      	mov	sp, r7
 80102c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102c6:	4770      	bx	lr
 80102c8:	2001b4bc 	.word	0x2001b4bc
 80102cc:	2001b524 	.word	0x2001b524

080102d0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80102d0:	b480      	push	{r7}
 80102d2:	b083      	sub	sp, #12
 80102d4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80102d6:	4b0b      	ldr	r3, [pc, #44]	; (8010304 <xTaskGetSchedulerState+0x34>)
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d102      	bne.n	80102e4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80102de:	2301      	movs	r3, #1
 80102e0:	607b      	str	r3, [r7, #4]
 80102e2:	e008      	b.n	80102f6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80102e4:	4b08      	ldr	r3, [pc, #32]	; (8010308 <xTaskGetSchedulerState+0x38>)
 80102e6:	681b      	ldr	r3, [r3, #0]
 80102e8:	2b00      	cmp	r3, #0
 80102ea:	d102      	bne.n	80102f2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80102ec:	2302      	movs	r3, #2
 80102ee:	607b      	str	r3, [r7, #4]
 80102f0:	e001      	b.n	80102f6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80102f2:	2300      	movs	r3, #0
 80102f4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80102f6:	687b      	ldr	r3, [r7, #4]
	}
 80102f8:	4618      	mov	r0, r3
 80102fa:	370c      	adds	r7, #12
 80102fc:	46bd      	mov	sp, r7
 80102fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010302:	4770      	bx	lr
 8010304:	2001b510 	.word	0x2001b510
 8010308:	2001b52c 	.word	0x2001b52c

0801030c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 801030c:	b580      	push	{r7, lr}
 801030e:	b084      	sub	sp, #16
 8010310:	af00      	add	r7, sp, #0
 8010312:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010314:	687b      	ldr	r3, [r7, #4]
 8010316:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010318:	2300      	movs	r3, #0
 801031a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	2b00      	cmp	r3, #0
 8010320:	d051      	beq.n	80103c6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010322:	68bb      	ldr	r3, [r7, #8]
 8010324:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010326:	4b2a      	ldr	r3, [pc, #168]	; (80103d0 <xTaskPriorityInherit+0xc4>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801032c:	429a      	cmp	r2, r3
 801032e:	d241      	bcs.n	80103b4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010330:	68bb      	ldr	r3, [r7, #8]
 8010332:	699b      	ldr	r3, [r3, #24]
 8010334:	2b00      	cmp	r3, #0
 8010336:	db06      	blt.n	8010346 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010338:	4b25      	ldr	r3, [pc, #148]	; (80103d0 <xTaskPriorityInherit+0xc4>)
 801033a:	681b      	ldr	r3, [r3, #0]
 801033c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801033e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010342:	68bb      	ldr	r3, [r7, #8]
 8010344:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010346:	68bb      	ldr	r3, [r7, #8]
 8010348:	6959      	ldr	r1, [r3, #20]
 801034a:	68bb      	ldr	r3, [r7, #8]
 801034c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801034e:	4613      	mov	r3, r2
 8010350:	009b      	lsls	r3, r3, #2
 8010352:	4413      	add	r3, r2
 8010354:	009b      	lsls	r3, r3, #2
 8010356:	4a1f      	ldr	r2, [pc, #124]	; (80103d4 <xTaskPriorityInherit+0xc8>)
 8010358:	4413      	add	r3, r2
 801035a:	4299      	cmp	r1, r3
 801035c:	d122      	bne.n	80103a4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801035e:	68bb      	ldr	r3, [r7, #8]
 8010360:	3304      	adds	r3, #4
 8010362:	4618      	mov	r0, r3
 8010364:	f7fe fa16 	bl	800e794 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010368:	4b19      	ldr	r3, [pc, #100]	; (80103d0 <xTaskPriorityInherit+0xc4>)
 801036a:	681b      	ldr	r3, [r3, #0]
 801036c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801036e:	68bb      	ldr	r3, [r7, #8]
 8010370:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010372:	68bb      	ldr	r3, [r7, #8]
 8010374:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010376:	4b18      	ldr	r3, [pc, #96]	; (80103d8 <xTaskPriorityInherit+0xcc>)
 8010378:	681b      	ldr	r3, [r3, #0]
 801037a:	429a      	cmp	r2, r3
 801037c:	d903      	bls.n	8010386 <xTaskPriorityInherit+0x7a>
 801037e:	68bb      	ldr	r3, [r7, #8]
 8010380:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010382:	4a15      	ldr	r2, [pc, #84]	; (80103d8 <xTaskPriorityInherit+0xcc>)
 8010384:	6013      	str	r3, [r2, #0]
 8010386:	68bb      	ldr	r3, [r7, #8]
 8010388:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801038a:	4613      	mov	r3, r2
 801038c:	009b      	lsls	r3, r3, #2
 801038e:	4413      	add	r3, r2
 8010390:	009b      	lsls	r3, r3, #2
 8010392:	4a10      	ldr	r2, [pc, #64]	; (80103d4 <xTaskPriorityInherit+0xc8>)
 8010394:	441a      	add	r2, r3
 8010396:	68bb      	ldr	r3, [r7, #8]
 8010398:	3304      	adds	r3, #4
 801039a:	4619      	mov	r1, r3
 801039c:	4610      	mov	r0, r2
 801039e:	f7fe f99c 	bl	800e6da <vListInsertEnd>
 80103a2:	e004      	b.n	80103ae <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80103a4:	4b0a      	ldr	r3, [pc, #40]	; (80103d0 <xTaskPriorityInherit+0xc4>)
 80103a6:	681b      	ldr	r3, [r3, #0]
 80103a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80103aa:	68bb      	ldr	r3, [r7, #8]
 80103ac:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80103ae:	2301      	movs	r3, #1
 80103b0:	60fb      	str	r3, [r7, #12]
 80103b2:	e008      	b.n	80103c6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80103b4:	68bb      	ldr	r3, [r7, #8]
 80103b6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80103b8:	4b05      	ldr	r3, [pc, #20]	; (80103d0 <xTaskPriorityInherit+0xc4>)
 80103ba:	681b      	ldr	r3, [r3, #0]
 80103bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80103be:	429a      	cmp	r2, r3
 80103c0:	d201      	bcs.n	80103c6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80103c2:	2301      	movs	r3, #1
 80103c4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80103c6:	68fb      	ldr	r3, [r7, #12]
	}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3710      	adds	r7, #16
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}
 80103d0:	2001b030 	.word	0x2001b030
 80103d4:	2001b034 	.word	0x2001b034
 80103d8:	2001b50c 	.word	0x2001b50c

080103dc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80103dc:	b580      	push	{r7, lr}
 80103de:	b086      	sub	sp, #24
 80103e0:	af00      	add	r7, sp, #0
 80103e2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80103e4:	687b      	ldr	r3, [r7, #4]
 80103e6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80103e8:	2300      	movs	r3, #0
 80103ea:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80103ec:	687b      	ldr	r3, [r7, #4]
 80103ee:	2b00      	cmp	r3, #0
 80103f0:	d056      	beq.n	80104a0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80103f2:	4b2e      	ldr	r3, [pc, #184]	; (80104ac <xTaskPriorityDisinherit+0xd0>)
 80103f4:	681b      	ldr	r3, [r3, #0]
 80103f6:	693a      	ldr	r2, [r7, #16]
 80103f8:	429a      	cmp	r2, r3
 80103fa:	d00a      	beq.n	8010412 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80103fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010400:	f383 8811 	msr	BASEPRI, r3
 8010404:	f3bf 8f6f 	isb	sy
 8010408:	f3bf 8f4f 	dsb	sy
 801040c:	60fb      	str	r3, [r7, #12]
}
 801040e:	bf00      	nop
 8010410:	e7fe      	b.n	8010410 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8010412:	693b      	ldr	r3, [r7, #16]
 8010414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010416:	2b00      	cmp	r3, #0
 8010418:	d10a      	bne.n	8010430 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 801041a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801041e:	f383 8811 	msr	BASEPRI, r3
 8010422:	f3bf 8f6f 	isb	sy
 8010426:	f3bf 8f4f 	dsb	sy
 801042a:	60bb      	str	r3, [r7, #8]
}
 801042c:	bf00      	nop
 801042e:	e7fe      	b.n	801042e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8010430:	693b      	ldr	r3, [r7, #16]
 8010432:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010434:	1e5a      	subs	r2, r3, #1
 8010436:	693b      	ldr	r3, [r7, #16]
 8010438:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801043a:	693b      	ldr	r3, [r7, #16]
 801043c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801043e:	693b      	ldr	r3, [r7, #16]
 8010440:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010442:	429a      	cmp	r2, r3
 8010444:	d02c      	beq.n	80104a0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010446:	693b      	ldr	r3, [r7, #16]
 8010448:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801044a:	2b00      	cmp	r3, #0
 801044c:	d128      	bne.n	80104a0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801044e:	693b      	ldr	r3, [r7, #16]
 8010450:	3304      	adds	r3, #4
 8010452:	4618      	mov	r0, r3
 8010454:	f7fe f99e 	bl	800e794 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010458:	693b      	ldr	r3, [r7, #16]
 801045a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 801045c:	693b      	ldr	r3, [r7, #16]
 801045e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010460:	693b      	ldr	r3, [r7, #16]
 8010462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010464:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010468:	693b      	ldr	r3, [r7, #16]
 801046a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 801046c:	693b      	ldr	r3, [r7, #16]
 801046e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010470:	4b0f      	ldr	r3, [pc, #60]	; (80104b0 <xTaskPriorityDisinherit+0xd4>)
 8010472:	681b      	ldr	r3, [r3, #0]
 8010474:	429a      	cmp	r2, r3
 8010476:	d903      	bls.n	8010480 <xTaskPriorityDisinherit+0xa4>
 8010478:	693b      	ldr	r3, [r7, #16]
 801047a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801047c:	4a0c      	ldr	r2, [pc, #48]	; (80104b0 <xTaskPriorityDisinherit+0xd4>)
 801047e:	6013      	str	r3, [r2, #0]
 8010480:	693b      	ldr	r3, [r7, #16]
 8010482:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010484:	4613      	mov	r3, r2
 8010486:	009b      	lsls	r3, r3, #2
 8010488:	4413      	add	r3, r2
 801048a:	009b      	lsls	r3, r3, #2
 801048c:	4a09      	ldr	r2, [pc, #36]	; (80104b4 <xTaskPriorityDisinherit+0xd8>)
 801048e:	441a      	add	r2, r3
 8010490:	693b      	ldr	r3, [r7, #16]
 8010492:	3304      	adds	r3, #4
 8010494:	4619      	mov	r1, r3
 8010496:	4610      	mov	r0, r2
 8010498:	f7fe f91f 	bl	800e6da <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801049c:	2301      	movs	r3, #1
 801049e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80104a0:	697b      	ldr	r3, [r7, #20]
	}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3718      	adds	r7, #24
 80104a6:	46bd      	mov	sp, r7
 80104a8:	bd80      	pop	{r7, pc}
 80104aa:	bf00      	nop
 80104ac:	2001b030 	.word	0x2001b030
 80104b0:	2001b50c 	.word	0x2001b50c
 80104b4:	2001b034 	.word	0x2001b034

080104b8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 80104b8:	b580      	push	{r7, lr}
 80104ba:	b088      	sub	sp, #32
 80104bc:	af00      	add	r7, sp, #0
 80104be:	6078      	str	r0, [r7, #4]
 80104c0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80104c2:	687b      	ldr	r3, [r7, #4]
 80104c4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80104c6:	2301      	movs	r3, #1
 80104c8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80104ca:	687b      	ldr	r3, [r7, #4]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d06a      	beq.n	80105a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80104d0:	69bb      	ldr	r3, [r7, #24]
 80104d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80104d4:	2b00      	cmp	r3, #0
 80104d6:	d10a      	bne.n	80104ee <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80104d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104dc:	f383 8811 	msr	BASEPRI, r3
 80104e0:	f3bf 8f6f 	isb	sy
 80104e4:	f3bf 8f4f 	dsb	sy
 80104e8:	60fb      	str	r3, [r7, #12]
}
 80104ea:	bf00      	nop
 80104ec:	e7fe      	b.n	80104ec <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80104ee:	69bb      	ldr	r3, [r7, #24]
 80104f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80104f2:	683a      	ldr	r2, [r7, #0]
 80104f4:	429a      	cmp	r2, r3
 80104f6:	d902      	bls.n	80104fe <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80104f8:	683b      	ldr	r3, [r7, #0]
 80104fa:	61fb      	str	r3, [r7, #28]
 80104fc:	e002      	b.n	8010504 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80104fe:	69bb      	ldr	r3, [r7, #24]
 8010500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8010502:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010504:	69bb      	ldr	r3, [r7, #24]
 8010506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010508:	69fa      	ldr	r2, [r7, #28]
 801050a:	429a      	cmp	r2, r3
 801050c:	d04b      	beq.n	80105a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 801050e:	69bb      	ldr	r3, [r7, #24]
 8010510:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010512:	697a      	ldr	r2, [r7, #20]
 8010514:	429a      	cmp	r2, r3
 8010516:	d146      	bne.n	80105a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010518:	4b25      	ldr	r3, [pc, #148]	; (80105b0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 801051a:	681b      	ldr	r3, [r3, #0]
 801051c:	69ba      	ldr	r2, [r7, #24]
 801051e:	429a      	cmp	r2, r3
 8010520:	d10a      	bne.n	8010538 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8010522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010526:	f383 8811 	msr	BASEPRI, r3
 801052a:	f3bf 8f6f 	isb	sy
 801052e:	f3bf 8f4f 	dsb	sy
 8010532:	60bb      	str	r3, [r7, #8]
}
 8010534:	bf00      	nop
 8010536:	e7fe      	b.n	8010536 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010538:	69bb      	ldr	r3, [r7, #24]
 801053a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801053c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 801053e:	69bb      	ldr	r3, [r7, #24]
 8010540:	69fa      	ldr	r2, [r7, #28]
 8010542:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010544:	69bb      	ldr	r3, [r7, #24]
 8010546:	699b      	ldr	r3, [r3, #24]
 8010548:	2b00      	cmp	r3, #0
 801054a:	db04      	blt.n	8010556 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801054c:	69fb      	ldr	r3, [r7, #28]
 801054e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8010552:	69bb      	ldr	r3, [r7, #24]
 8010554:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010556:	69bb      	ldr	r3, [r7, #24]
 8010558:	6959      	ldr	r1, [r3, #20]
 801055a:	693a      	ldr	r2, [r7, #16]
 801055c:	4613      	mov	r3, r2
 801055e:	009b      	lsls	r3, r3, #2
 8010560:	4413      	add	r3, r2
 8010562:	009b      	lsls	r3, r3, #2
 8010564:	4a13      	ldr	r2, [pc, #76]	; (80105b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010566:	4413      	add	r3, r2
 8010568:	4299      	cmp	r1, r3
 801056a:	d11c      	bne.n	80105a6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801056c:	69bb      	ldr	r3, [r7, #24]
 801056e:	3304      	adds	r3, #4
 8010570:	4618      	mov	r0, r3
 8010572:	f7fe f90f 	bl	800e794 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8010576:	69bb      	ldr	r3, [r7, #24]
 8010578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801057a:	4b0f      	ldr	r3, [pc, #60]	; (80105b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 801057c:	681b      	ldr	r3, [r3, #0]
 801057e:	429a      	cmp	r2, r3
 8010580:	d903      	bls.n	801058a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8010582:	69bb      	ldr	r3, [r7, #24]
 8010584:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010586:	4a0c      	ldr	r2, [pc, #48]	; (80105b8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8010588:	6013      	str	r3, [r2, #0]
 801058a:	69bb      	ldr	r3, [r7, #24]
 801058c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801058e:	4613      	mov	r3, r2
 8010590:	009b      	lsls	r3, r3, #2
 8010592:	4413      	add	r3, r2
 8010594:	009b      	lsls	r3, r3, #2
 8010596:	4a07      	ldr	r2, [pc, #28]	; (80105b4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8010598:	441a      	add	r2, r3
 801059a:	69bb      	ldr	r3, [r7, #24]
 801059c:	3304      	adds	r3, #4
 801059e:	4619      	mov	r1, r3
 80105a0:	4610      	mov	r0, r2
 80105a2:	f7fe f89a 	bl	800e6da <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80105a6:	bf00      	nop
 80105a8:	3720      	adds	r7, #32
 80105aa:	46bd      	mov	sp, r7
 80105ac:	bd80      	pop	{r7, pc}
 80105ae:	bf00      	nop
 80105b0:	2001b030 	.word	0x2001b030
 80105b4:	2001b034 	.word	0x2001b034
 80105b8:	2001b50c 	.word	0x2001b50c

080105bc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80105bc:	b480      	push	{r7}
 80105be:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80105c0:	4b07      	ldr	r3, [pc, #28]	; (80105e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d004      	beq.n	80105d2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80105c8:	4b05      	ldr	r3, [pc, #20]	; (80105e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80105ca:	681b      	ldr	r3, [r3, #0]
 80105cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105ce:	3201      	adds	r2, #1
 80105d0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80105d2:	4b03      	ldr	r3, [pc, #12]	; (80105e0 <pvTaskIncrementMutexHeldCount+0x24>)
 80105d4:	681b      	ldr	r3, [r3, #0]
	}
 80105d6:	4618      	mov	r0, r3
 80105d8:	46bd      	mov	sp, r7
 80105da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105de:	4770      	bx	lr
 80105e0:	2001b030 	.word	0x2001b030

080105e4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80105e4:	b580      	push	{r7, lr}
 80105e6:	b084      	sub	sp, #16
 80105e8:	af00      	add	r7, sp, #0
 80105ea:	6078      	str	r0, [r7, #4]
 80105ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80105ee:	4b21      	ldr	r3, [pc, #132]	; (8010674 <prvAddCurrentTaskToDelayedList+0x90>)
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80105f4:	4b20      	ldr	r3, [pc, #128]	; (8010678 <prvAddCurrentTaskToDelayedList+0x94>)
 80105f6:	681b      	ldr	r3, [r3, #0]
 80105f8:	3304      	adds	r3, #4
 80105fa:	4618      	mov	r0, r3
 80105fc:	f7fe f8ca 	bl	800e794 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010606:	d10a      	bne.n	801061e <prvAddCurrentTaskToDelayedList+0x3a>
 8010608:	683b      	ldr	r3, [r7, #0]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d007      	beq.n	801061e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801060e:	4b1a      	ldr	r3, [pc, #104]	; (8010678 <prvAddCurrentTaskToDelayedList+0x94>)
 8010610:	681b      	ldr	r3, [r3, #0]
 8010612:	3304      	adds	r3, #4
 8010614:	4619      	mov	r1, r3
 8010616:	4819      	ldr	r0, [pc, #100]	; (801067c <prvAddCurrentTaskToDelayedList+0x98>)
 8010618:	f7fe f85f 	bl	800e6da <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801061c:	e026      	b.n	801066c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801061e:	68fa      	ldr	r2, [r7, #12]
 8010620:	687b      	ldr	r3, [r7, #4]
 8010622:	4413      	add	r3, r2
 8010624:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8010626:	4b14      	ldr	r3, [pc, #80]	; (8010678 <prvAddCurrentTaskToDelayedList+0x94>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	68ba      	ldr	r2, [r7, #8]
 801062c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801062e:	68ba      	ldr	r2, [r7, #8]
 8010630:	68fb      	ldr	r3, [r7, #12]
 8010632:	429a      	cmp	r2, r3
 8010634:	d209      	bcs.n	801064a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8010636:	4b12      	ldr	r3, [pc, #72]	; (8010680 <prvAddCurrentTaskToDelayedList+0x9c>)
 8010638:	681a      	ldr	r2, [r3, #0]
 801063a:	4b0f      	ldr	r3, [pc, #60]	; (8010678 <prvAddCurrentTaskToDelayedList+0x94>)
 801063c:	681b      	ldr	r3, [r3, #0]
 801063e:	3304      	adds	r3, #4
 8010640:	4619      	mov	r1, r3
 8010642:	4610      	mov	r0, r2
 8010644:	f7fe f86d 	bl	800e722 <vListInsert>
}
 8010648:	e010      	b.n	801066c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801064a:	4b0e      	ldr	r3, [pc, #56]	; (8010684 <prvAddCurrentTaskToDelayedList+0xa0>)
 801064c:	681a      	ldr	r2, [r3, #0]
 801064e:	4b0a      	ldr	r3, [pc, #40]	; (8010678 <prvAddCurrentTaskToDelayedList+0x94>)
 8010650:	681b      	ldr	r3, [r3, #0]
 8010652:	3304      	adds	r3, #4
 8010654:	4619      	mov	r1, r3
 8010656:	4610      	mov	r0, r2
 8010658:	f7fe f863 	bl	800e722 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801065c:	4b0a      	ldr	r3, [pc, #40]	; (8010688 <prvAddCurrentTaskToDelayedList+0xa4>)
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	68ba      	ldr	r2, [r7, #8]
 8010662:	429a      	cmp	r2, r3
 8010664:	d202      	bcs.n	801066c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8010666:	4a08      	ldr	r2, [pc, #32]	; (8010688 <prvAddCurrentTaskToDelayedList+0xa4>)
 8010668:	68bb      	ldr	r3, [r7, #8]
 801066a:	6013      	str	r3, [r2, #0]
}
 801066c:	bf00      	nop
 801066e:	3710      	adds	r7, #16
 8010670:	46bd      	mov	sp, r7
 8010672:	bd80      	pop	{r7, pc}
 8010674:	2001b508 	.word	0x2001b508
 8010678:	2001b030 	.word	0x2001b030
 801067c:	2001b4f0 	.word	0x2001b4f0
 8010680:	2001b4c0 	.word	0x2001b4c0
 8010684:	2001b4bc 	.word	0x2001b4bc
 8010688:	2001b524 	.word	0x2001b524

0801068c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 801068c:	b580      	push	{r7, lr}
 801068e:	b08a      	sub	sp, #40	; 0x28
 8010690:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8010692:	2300      	movs	r3, #0
 8010694:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8010696:	f000 fb07 	bl	8010ca8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 801069a:	4b1c      	ldr	r3, [pc, #112]	; (801070c <xTimerCreateTimerTask+0x80>)
 801069c:	681b      	ldr	r3, [r3, #0]
 801069e:	2b00      	cmp	r3, #0
 80106a0:	d021      	beq.n	80106e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80106a2:	2300      	movs	r3, #0
 80106a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80106a6:	2300      	movs	r3, #0
 80106a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80106aa:	1d3a      	adds	r2, r7, #4
 80106ac:	f107 0108 	add.w	r1, r7, #8
 80106b0:	f107 030c 	add.w	r3, r7, #12
 80106b4:	4618      	mov	r0, r3
 80106b6:	f7fd ffc9 	bl	800e64c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80106ba:	6879      	ldr	r1, [r7, #4]
 80106bc:	68bb      	ldr	r3, [r7, #8]
 80106be:	68fa      	ldr	r2, [r7, #12]
 80106c0:	9202      	str	r2, [sp, #8]
 80106c2:	9301      	str	r3, [sp, #4]
 80106c4:	2302      	movs	r3, #2
 80106c6:	9300      	str	r3, [sp, #0]
 80106c8:	2300      	movs	r3, #0
 80106ca:	460a      	mov	r2, r1
 80106cc:	4910      	ldr	r1, [pc, #64]	; (8010710 <xTimerCreateTimerTask+0x84>)
 80106ce:	4811      	ldr	r0, [pc, #68]	; (8010714 <xTimerCreateTimerTask+0x88>)
 80106d0:	f7fe ffe0 	bl	800f694 <xTaskCreateStatic>
 80106d4:	4603      	mov	r3, r0
 80106d6:	4a10      	ldr	r2, [pc, #64]	; (8010718 <xTimerCreateTimerTask+0x8c>)
 80106d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80106da:	4b0f      	ldr	r3, [pc, #60]	; (8010718 <xTimerCreateTimerTask+0x8c>)
 80106dc:	681b      	ldr	r3, [r3, #0]
 80106de:	2b00      	cmp	r3, #0
 80106e0:	d001      	beq.n	80106e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80106e2:	2301      	movs	r3, #1
 80106e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80106e6:	697b      	ldr	r3, [r7, #20]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	d10a      	bne.n	8010702 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80106ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106f0:	f383 8811 	msr	BASEPRI, r3
 80106f4:	f3bf 8f6f 	isb	sy
 80106f8:	f3bf 8f4f 	dsb	sy
 80106fc:	613b      	str	r3, [r7, #16]
}
 80106fe:	bf00      	nop
 8010700:	e7fe      	b.n	8010700 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8010702:	697b      	ldr	r3, [r7, #20]
}
 8010704:	4618      	mov	r0, r3
 8010706:	3718      	adds	r7, #24
 8010708:	46bd      	mov	sp, r7
 801070a:	bd80      	pop	{r7, pc}
 801070c:	2001b560 	.word	0x2001b560
 8010710:	08015c40 	.word	0x08015c40
 8010714:	08010851 	.word	0x08010851
 8010718:	2001b564 	.word	0x2001b564

0801071c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 801071c:	b580      	push	{r7, lr}
 801071e:	b08a      	sub	sp, #40	; 0x28
 8010720:	af00      	add	r7, sp, #0
 8010722:	60f8      	str	r0, [r7, #12]
 8010724:	60b9      	str	r1, [r7, #8]
 8010726:	607a      	str	r2, [r7, #4]
 8010728:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 801072a:	2300      	movs	r3, #0
 801072c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 801072e:	68fb      	ldr	r3, [r7, #12]
 8010730:	2b00      	cmp	r3, #0
 8010732:	d10a      	bne.n	801074a <xTimerGenericCommand+0x2e>
	__asm volatile
 8010734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010738:	f383 8811 	msr	BASEPRI, r3
 801073c:	f3bf 8f6f 	isb	sy
 8010740:	f3bf 8f4f 	dsb	sy
 8010744:	623b      	str	r3, [r7, #32]
}
 8010746:	bf00      	nop
 8010748:	e7fe      	b.n	8010748 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 801074a:	4b1a      	ldr	r3, [pc, #104]	; (80107b4 <xTimerGenericCommand+0x98>)
 801074c:	681b      	ldr	r3, [r3, #0]
 801074e:	2b00      	cmp	r3, #0
 8010750:	d02a      	beq.n	80107a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8010752:	68bb      	ldr	r3, [r7, #8]
 8010754:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8010756:	687b      	ldr	r3, [r7, #4]
 8010758:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 801075a:	68fb      	ldr	r3, [r7, #12]
 801075c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 801075e:	68bb      	ldr	r3, [r7, #8]
 8010760:	2b05      	cmp	r3, #5
 8010762:	dc18      	bgt.n	8010796 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8010764:	f7ff fdb4 	bl	80102d0 <xTaskGetSchedulerState>
 8010768:	4603      	mov	r3, r0
 801076a:	2b02      	cmp	r3, #2
 801076c:	d109      	bne.n	8010782 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 801076e:	4b11      	ldr	r3, [pc, #68]	; (80107b4 <xTimerGenericCommand+0x98>)
 8010770:	6818      	ldr	r0, [r3, #0]
 8010772:	f107 0110 	add.w	r1, r7, #16
 8010776:	2300      	movs	r3, #0
 8010778:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801077a:	f7fe f973 	bl	800ea64 <xQueueGenericSend>
 801077e:	6278      	str	r0, [r7, #36]	; 0x24
 8010780:	e012      	b.n	80107a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8010782:	4b0c      	ldr	r3, [pc, #48]	; (80107b4 <xTimerGenericCommand+0x98>)
 8010784:	6818      	ldr	r0, [r3, #0]
 8010786:	f107 0110 	add.w	r1, r7, #16
 801078a:	2300      	movs	r3, #0
 801078c:	2200      	movs	r2, #0
 801078e:	f7fe f969 	bl	800ea64 <xQueueGenericSend>
 8010792:	6278      	str	r0, [r7, #36]	; 0x24
 8010794:	e008      	b.n	80107a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8010796:	4b07      	ldr	r3, [pc, #28]	; (80107b4 <xTimerGenericCommand+0x98>)
 8010798:	6818      	ldr	r0, [r3, #0]
 801079a:	f107 0110 	add.w	r1, r7, #16
 801079e:	2300      	movs	r3, #0
 80107a0:	683a      	ldr	r2, [r7, #0]
 80107a2:	f7fe fa5d 	bl	800ec60 <xQueueGenericSendFromISR>
 80107a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80107a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80107aa:	4618      	mov	r0, r3
 80107ac:	3728      	adds	r7, #40	; 0x28
 80107ae:	46bd      	mov	sp, r7
 80107b0:	bd80      	pop	{r7, pc}
 80107b2:	bf00      	nop
 80107b4:	2001b560 	.word	0x2001b560

080107b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80107b8:	b580      	push	{r7, lr}
 80107ba:	b088      	sub	sp, #32
 80107bc:	af02      	add	r7, sp, #8
 80107be:	6078      	str	r0, [r7, #4]
 80107c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80107c2:	4b22      	ldr	r3, [pc, #136]	; (801084c <prvProcessExpiredTimer+0x94>)
 80107c4:	681b      	ldr	r3, [r3, #0]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	68db      	ldr	r3, [r3, #12]
 80107ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80107cc:	697b      	ldr	r3, [r7, #20]
 80107ce:	3304      	adds	r3, #4
 80107d0:	4618      	mov	r0, r3
 80107d2:	f7fd ffdf 	bl	800e794 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80107d6:	697b      	ldr	r3, [r7, #20]
 80107d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80107dc:	f003 0304 	and.w	r3, r3, #4
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d022      	beq.n	801082a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80107e4:	697b      	ldr	r3, [r7, #20]
 80107e6:	699a      	ldr	r2, [r3, #24]
 80107e8:	687b      	ldr	r3, [r7, #4]
 80107ea:	18d1      	adds	r1, r2, r3
 80107ec:	687b      	ldr	r3, [r7, #4]
 80107ee:	683a      	ldr	r2, [r7, #0]
 80107f0:	6978      	ldr	r0, [r7, #20]
 80107f2:	f000 f8d1 	bl	8010998 <prvInsertTimerInActiveList>
 80107f6:	4603      	mov	r3, r0
 80107f8:	2b00      	cmp	r3, #0
 80107fa:	d01f      	beq.n	801083c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80107fc:	2300      	movs	r3, #0
 80107fe:	9300      	str	r3, [sp, #0]
 8010800:	2300      	movs	r3, #0
 8010802:	687a      	ldr	r2, [r7, #4]
 8010804:	2100      	movs	r1, #0
 8010806:	6978      	ldr	r0, [r7, #20]
 8010808:	f7ff ff88 	bl	801071c <xTimerGenericCommand>
 801080c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 801080e:	693b      	ldr	r3, [r7, #16]
 8010810:	2b00      	cmp	r3, #0
 8010812:	d113      	bne.n	801083c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8010814:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010818:	f383 8811 	msr	BASEPRI, r3
 801081c:	f3bf 8f6f 	isb	sy
 8010820:	f3bf 8f4f 	dsb	sy
 8010824:	60fb      	str	r3, [r7, #12]
}
 8010826:	bf00      	nop
 8010828:	e7fe      	b.n	8010828 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 801082a:	697b      	ldr	r3, [r7, #20]
 801082c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010830:	f023 0301 	bic.w	r3, r3, #1
 8010834:	b2da      	uxtb	r2, r3
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 801083c:	697b      	ldr	r3, [r7, #20]
 801083e:	6a1b      	ldr	r3, [r3, #32]
 8010840:	6978      	ldr	r0, [r7, #20]
 8010842:	4798      	blx	r3
}
 8010844:	bf00      	nop
 8010846:	3718      	adds	r7, #24
 8010848:	46bd      	mov	sp, r7
 801084a:	bd80      	pop	{r7, pc}
 801084c:	2001b558 	.word	0x2001b558

08010850 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8010850:	b580      	push	{r7, lr}
 8010852:	b084      	sub	sp, #16
 8010854:	af00      	add	r7, sp, #0
 8010856:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010858:	f107 0308 	add.w	r3, r7, #8
 801085c:	4618      	mov	r0, r3
 801085e:	f000 f857 	bl	8010910 <prvGetNextExpireTime>
 8010862:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8010864:	68bb      	ldr	r3, [r7, #8]
 8010866:	4619      	mov	r1, r3
 8010868:	68f8      	ldr	r0, [r7, #12]
 801086a:	f000 f803 	bl	8010874 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 801086e:	f000 f8d5 	bl	8010a1c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8010872:	e7f1      	b.n	8010858 <prvTimerTask+0x8>

08010874 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8010874:	b580      	push	{r7, lr}
 8010876:	b084      	sub	sp, #16
 8010878:	af00      	add	r7, sp, #0
 801087a:	6078      	str	r0, [r7, #4]
 801087c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 801087e:	f7ff f945 	bl	800fb0c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010882:	f107 0308 	add.w	r3, r7, #8
 8010886:	4618      	mov	r0, r3
 8010888:	f000 f866 	bl	8010958 <prvSampleTimeNow>
 801088c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 801088e:	68bb      	ldr	r3, [r7, #8]
 8010890:	2b00      	cmp	r3, #0
 8010892:	d130      	bne.n	80108f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8010894:	683b      	ldr	r3, [r7, #0]
 8010896:	2b00      	cmp	r3, #0
 8010898:	d10a      	bne.n	80108b0 <prvProcessTimerOrBlockTask+0x3c>
 801089a:	687a      	ldr	r2, [r7, #4]
 801089c:	68fb      	ldr	r3, [r7, #12]
 801089e:	429a      	cmp	r2, r3
 80108a0:	d806      	bhi.n	80108b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80108a2:	f7ff f941 	bl	800fb28 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80108a6:	68f9      	ldr	r1, [r7, #12]
 80108a8:	6878      	ldr	r0, [r7, #4]
 80108aa:	f7ff ff85 	bl	80107b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80108ae:	e024      	b.n	80108fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80108b0:	683b      	ldr	r3, [r7, #0]
 80108b2:	2b00      	cmp	r3, #0
 80108b4:	d008      	beq.n	80108c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80108b6:	4b13      	ldr	r3, [pc, #76]	; (8010904 <prvProcessTimerOrBlockTask+0x90>)
 80108b8:	681b      	ldr	r3, [r3, #0]
 80108ba:	681b      	ldr	r3, [r3, #0]
 80108bc:	2b00      	cmp	r3, #0
 80108be:	d101      	bne.n	80108c4 <prvProcessTimerOrBlockTask+0x50>
 80108c0:	2301      	movs	r3, #1
 80108c2:	e000      	b.n	80108c6 <prvProcessTimerOrBlockTask+0x52>
 80108c4:	2300      	movs	r3, #0
 80108c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80108c8:	4b0f      	ldr	r3, [pc, #60]	; (8010908 <prvProcessTimerOrBlockTask+0x94>)
 80108ca:	6818      	ldr	r0, [r3, #0]
 80108cc:	687a      	ldr	r2, [r7, #4]
 80108ce:	68fb      	ldr	r3, [r7, #12]
 80108d0:	1ad3      	subs	r3, r2, r3
 80108d2:	683a      	ldr	r2, [r7, #0]
 80108d4:	4619      	mov	r1, r3
 80108d6:	f7fe fea9 	bl	800f62c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80108da:	f7ff f925 	bl	800fb28 <xTaskResumeAll>
 80108de:	4603      	mov	r3, r0
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d10a      	bne.n	80108fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80108e4:	4b09      	ldr	r3, [pc, #36]	; (801090c <prvProcessTimerOrBlockTask+0x98>)
 80108e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80108ea:	601a      	str	r2, [r3, #0]
 80108ec:	f3bf 8f4f 	dsb	sy
 80108f0:	f3bf 8f6f 	isb	sy
}
 80108f4:	e001      	b.n	80108fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80108f6:	f7ff f917 	bl	800fb28 <xTaskResumeAll>
}
 80108fa:	bf00      	nop
 80108fc:	3710      	adds	r7, #16
 80108fe:	46bd      	mov	sp, r7
 8010900:	bd80      	pop	{r7, pc}
 8010902:	bf00      	nop
 8010904:	2001b55c 	.word	0x2001b55c
 8010908:	2001b560 	.word	0x2001b560
 801090c:	e000ed04 	.word	0xe000ed04

08010910 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8010910:	b480      	push	{r7}
 8010912:	b085      	sub	sp, #20
 8010914:	af00      	add	r7, sp, #0
 8010916:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8010918:	4b0e      	ldr	r3, [pc, #56]	; (8010954 <prvGetNextExpireTime+0x44>)
 801091a:	681b      	ldr	r3, [r3, #0]
 801091c:	681b      	ldr	r3, [r3, #0]
 801091e:	2b00      	cmp	r3, #0
 8010920:	d101      	bne.n	8010926 <prvGetNextExpireTime+0x16>
 8010922:	2201      	movs	r2, #1
 8010924:	e000      	b.n	8010928 <prvGetNextExpireTime+0x18>
 8010926:	2200      	movs	r2, #0
 8010928:	687b      	ldr	r3, [r7, #4]
 801092a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 801092c:	687b      	ldr	r3, [r7, #4]
 801092e:	681b      	ldr	r3, [r3, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d105      	bne.n	8010940 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010934:	4b07      	ldr	r3, [pc, #28]	; (8010954 <prvGetNextExpireTime+0x44>)
 8010936:	681b      	ldr	r3, [r3, #0]
 8010938:	68db      	ldr	r3, [r3, #12]
 801093a:	681b      	ldr	r3, [r3, #0]
 801093c:	60fb      	str	r3, [r7, #12]
 801093e:	e001      	b.n	8010944 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8010940:	2300      	movs	r3, #0
 8010942:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8010944:	68fb      	ldr	r3, [r7, #12]
}
 8010946:	4618      	mov	r0, r3
 8010948:	3714      	adds	r7, #20
 801094a:	46bd      	mov	sp, r7
 801094c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010950:	4770      	bx	lr
 8010952:	bf00      	nop
 8010954:	2001b558 	.word	0x2001b558

08010958 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8010958:	b580      	push	{r7, lr}
 801095a:	b084      	sub	sp, #16
 801095c:	af00      	add	r7, sp, #0
 801095e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8010960:	f7ff f980 	bl	800fc64 <xTaskGetTickCount>
 8010964:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8010966:	4b0b      	ldr	r3, [pc, #44]	; (8010994 <prvSampleTimeNow+0x3c>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	68fa      	ldr	r2, [r7, #12]
 801096c:	429a      	cmp	r2, r3
 801096e:	d205      	bcs.n	801097c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8010970:	f000 f936 	bl	8010be0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8010974:	687b      	ldr	r3, [r7, #4]
 8010976:	2201      	movs	r2, #1
 8010978:	601a      	str	r2, [r3, #0]
 801097a:	e002      	b.n	8010982 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 801097c:	687b      	ldr	r3, [r7, #4]
 801097e:	2200      	movs	r2, #0
 8010980:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8010982:	4a04      	ldr	r2, [pc, #16]	; (8010994 <prvSampleTimeNow+0x3c>)
 8010984:	68fb      	ldr	r3, [r7, #12]
 8010986:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8010988:	68fb      	ldr	r3, [r7, #12]
}
 801098a:	4618      	mov	r0, r3
 801098c:	3710      	adds	r7, #16
 801098e:	46bd      	mov	sp, r7
 8010990:	bd80      	pop	{r7, pc}
 8010992:	bf00      	nop
 8010994:	2001b568 	.word	0x2001b568

08010998 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8010998:	b580      	push	{r7, lr}
 801099a:	b086      	sub	sp, #24
 801099c:	af00      	add	r7, sp, #0
 801099e:	60f8      	str	r0, [r7, #12]
 80109a0:	60b9      	str	r1, [r7, #8]
 80109a2:	607a      	str	r2, [r7, #4]
 80109a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80109a6:	2300      	movs	r3, #0
 80109a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80109aa:	68fb      	ldr	r3, [r7, #12]
 80109ac:	68ba      	ldr	r2, [r7, #8]
 80109ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80109b0:	68fb      	ldr	r3, [r7, #12]
 80109b2:	68fa      	ldr	r2, [r7, #12]
 80109b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80109b6:	68ba      	ldr	r2, [r7, #8]
 80109b8:	687b      	ldr	r3, [r7, #4]
 80109ba:	429a      	cmp	r2, r3
 80109bc:	d812      	bhi.n	80109e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80109be:	687a      	ldr	r2, [r7, #4]
 80109c0:	683b      	ldr	r3, [r7, #0]
 80109c2:	1ad2      	subs	r2, r2, r3
 80109c4:	68fb      	ldr	r3, [r7, #12]
 80109c6:	699b      	ldr	r3, [r3, #24]
 80109c8:	429a      	cmp	r2, r3
 80109ca:	d302      	bcc.n	80109d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80109cc:	2301      	movs	r3, #1
 80109ce:	617b      	str	r3, [r7, #20]
 80109d0:	e01b      	b.n	8010a0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80109d2:	4b10      	ldr	r3, [pc, #64]	; (8010a14 <prvInsertTimerInActiveList+0x7c>)
 80109d4:	681a      	ldr	r2, [r3, #0]
 80109d6:	68fb      	ldr	r3, [r7, #12]
 80109d8:	3304      	adds	r3, #4
 80109da:	4619      	mov	r1, r3
 80109dc:	4610      	mov	r0, r2
 80109de:	f7fd fea0 	bl	800e722 <vListInsert>
 80109e2:	e012      	b.n	8010a0a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80109e4:	687a      	ldr	r2, [r7, #4]
 80109e6:	683b      	ldr	r3, [r7, #0]
 80109e8:	429a      	cmp	r2, r3
 80109ea:	d206      	bcs.n	80109fa <prvInsertTimerInActiveList+0x62>
 80109ec:	68ba      	ldr	r2, [r7, #8]
 80109ee:	683b      	ldr	r3, [r7, #0]
 80109f0:	429a      	cmp	r2, r3
 80109f2:	d302      	bcc.n	80109fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80109f4:	2301      	movs	r3, #1
 80109f6:	617b      	str	r3, [r7, #20]
 80109f8:	e007      	b.n	8010a0a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80109fa:	4b07      	ldr	r3, [pc, #28]	; (8010a18 <prvInsertTimerInActiveList+0x80>)
 80109fc:	681a      	ldr	r2, [r3, #0]
 80109fe:	68fb      	ldr	r3, [r7, #12]
 8010a00:	3304      	adds	r3, #4
 8010a02:	4619      	mov	r1, r3
 8010a04:	4610      	mov	r0, r2
 8010a06:	f7fd fe8c 	bl	800e722 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8010a0a:	697b      	ldr	r3, [r7, #20]
}
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	3718      	adds	r7, #24
 8010a10:	46bd      	mov	sp, r7
 8010a12:	bd80      	pop	{r7, pc}
 8010a14:	2001b55c 	.word	0x2001b55c
 8010a18:	2001b558 	.word	0x2001b558

08010a1c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8010a1c:	b580      	push	{r7, lr}
 8010a1e:	b08e      	sub	sp, #56	; 0x38
 8010a20:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010a22:	e0ca      	b.n	8010bba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	2b00      	cmp	r3, #0
 8010a28:	da18      	bge.n	8010a5c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8010a2a:	1d3b      	adds	r3, r7, #4
 8010a2c:	3304      	adds	r3, #4
 8010a2e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8010a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a32:	2b00      	cmp	r3, #0
 8010a34:	d10a      	bne.n	8010a4c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8010a36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a3a:	f383 8811 	msr	BASEPRI, r3
 8010a3e:	f3bf 8f6f 	isb	sy
 8010a42:	f3bf 8f4f 	dsb	sy
 8010a46:	61fb      	str	r3, [r7, #28]
}
 8010a48:	bf00      	nop
 8010a4a:	e7fe      	b.n	8010a4a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8010a4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010a4e:	681b      	ldr	r3, [r3, #0]
 8010a50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a52:	6850      	ldr	r0, [r2, #4]
 8010a54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8010a56:	6892      	ldr	r2, [r2, #8]
 8010a58:	4611      	mov	r1, r2
 8010a5a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8010a5c:	687b      	ldr	r3, [r7, #4]
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	f2c0 80ab 	blt.w	8010bba <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8010a64:	68fb      	ldr	r3, [r7, #12]
 8010a66:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8010a68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a6a:	695b      	ldr	r3, [r3, #20]
 8010a6c:	2b00      	cmp	r3, #0
 8010a6e:	d004      	beq.n	8010a7a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010a70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010a72:	3304      	adds	r3, #4
 8010a74:	4618      	mov	r0, r3
 8010a76:	f7fd fe8d 	bl	800e794 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8010a7a:	463b      	mov	r3, r7
 8010a7c:	4618      	mov	r0, r3
 8010a7e:	f7ff ff6b 	bl	8010958 <prvSampleTimeNow>
 8010a82:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8010a84:	687b      	ldr	r3, [r7, #4]
 8010a86:	2b09      	cmp	r3, #9
 8010a88:	f200 8096 	bhi.w	8010bb8 <prvProcessReceivedCommands+0x19c>
 8010a8c:	a201      	add	r2, pc, #4	; (adr r2, 8010a94 <prvProcessReceivedCommands+0x78>)
 8010a8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010a92:	bf00      	nop
 8010a94:	08010abd 	.word	0x08010abd
 8010a98:	08010abd 	.word	0x08010abd
 8010a9c:	08010abd 	.word	0x08010abd
 8010aa0:	08010b31 	.word	0x08010b31
 8010aa4:	08010b45 	.word	0x08010b45
 8010aa8:	08010b8f 	.word	0x08010b8f
 8010aac:	08010abd 	.word	0x08010abd
 8010ab0:	08010abd 	.word	0x08010abd
 8010ab4:	08010b31 	.word	0x08010b31
 8010ab8:	08010b45 	.word	0x08010b45
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010abe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010ac2:	f043 0301 	orr.w	r3, r3, #1
 8010ac6:	b2da      	uxtb	r2, r3
 8010ac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010aca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8010ace:	68ba      	ldr	r2, [r7, #8]
 8010ad0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ad2:	699b      	ldr	r3, [r3, #24]
 8010ad4:	18d1      	adds	r1, r2, r3
 8010ad6:	68bb      	ldr	r3, [r7, #8]
 8010ad8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010ada:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010adc:	f7ff ff5c 	bl	8010998 <prvInsertTimerInActiveList>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	2b00      	cmp	r3, #0
 8010ae4:	d069      	beq.n	8010bba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010ae6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ae8:	6a1b      	ldr	r3, [r3, #32]
 8010aea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010aec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010aee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010af0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010af4:	f003 0304 	and.w	r3, r3, #4
 8010af8:	2b00      	cmp	r3, #0
 8010afa:	d05e      	beq.n	8010bba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8010afc:	68ba      	ldr	r2, [r7, #8]
 8010afe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b00:	699b      	ldr	r3, [r3, #24]
 8010b02:	441a      	add	r2, r3
 8010b04:	2300      	movs	r3, #0
 8010b06:	9300      	str	r3, [sp, #0]
 8010b08:	2300      	movs	r3, #0
 8010b0a:	2100      	movs	r1, #0
 8010b0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b0e:	f7ff fe05 	bl	801071c <xTimerGenericCommand>
 8010b12:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8010b14:	6a3b      	ldr	r3, [r7, #32]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	d14f      	bne.n	8010bba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8010b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b1e:	f383 8811 	msr	BASEPRI, r3
 8010b22:	f3bf 8f6f 	isb	sy
 8010b26:	f3bf 8f4f 	dsb	sy
 8010b2a:	61bb      	str	r3, [r7, #24]
}
 8010b2c:	bf00      	nop
 8010b2e:	e7fe      	b.n	8010b2e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010b30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b36:	f023 0301 	bic.w	r3, r3, #1
 8010b3a:	b2da      	uxtb	r2, r3
 8010b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8010b42:	e03a      	b.n	8010bba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8010b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b4a:	f043 0301 	orr.w	r3, r3, #1
 8010b4e:	b2da      	uxtb	r2, r3
 8010b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8010b56:	68ba      	ldr	r2, [r7, #8]
 8010b58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8010b5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b5e:	699b      	ldr	r3, [r3, #24]
 8010b60:	2b00      	cmp	r3, #0
 8010b62:	d10a      	bne.n	8010b7a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8010b64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b68:	f383 8811 	msr	BASEPRI, r3
 8010b6c:	f3bf 8f6f 	isb	sy
 8010b70:	f3bf 8f4f 	dsb	sy
 8010b74:	617b      	str	r3, [r7, #20]
}
 8010b76:	bf00      	nop
 8010b78:	e7fe      	b.n	8010b78 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8010b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b7c:	699a      	ldr	r2, [r3, #24]
 8010b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b80:	18d1      	adds	r1, r2, r3
 8010b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010b84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010b86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b88:	f7ff ff06 	bl	8010998 <prvInsertTimerInActiveList>
					break;
 8010b8c:	e015      	b.n	8010bba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8010b8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010b90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010b94:	f003 0302 	and.w	r3, r3, #2
 8010b98:	2b00      	cmp	r3, #0
 8010b9a:	d103      	bne.n	8010ba4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8010b9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010b9e:	f000 fbdf 	bl	8011360 <vPortFree>
 8010ba2:	e00a      	b.n	8010bba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8010ba4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010ba6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010baa:	f023 0301 	bic.w	r3, r3, #1
 8010bae:	b2da      	uxtb	r2, r3
 8010bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010bb2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8010bb6:	e000      	b.n	8010bba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8010bb8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8010bba:	4b08      	ldr	r3, [pc, #32]	; (8010bdc <prvProcessReceivedCommands+0x1c0>)
 8010bbc:	681b      	ldr	r3, [r3, #0]
 8010bbe:	1d39      	adds	r1, r7, #4
 8010bc0:	2200      	movs	r2, #0
 8010bc2:	4618      	mov	r0, r3
 8010bc4:	f7fe f974 	bl	800eeb0 <xQueueReceive>
 8010bc8:	4603      	mov	r3, r0
 8010bca:	2b00      	cmp	r3, #0
 8010bcc:	f47f af2a 	bne.w	8010a24 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8010bd0:	bf00      	nop
 8010bd2:	bf00      	nop
 8010bd4:	3730      	adds	r7, #48	; 0x30
 8010bd6:	46bd      	mov	sp, r7
 8010bd8:	bd80      	pop	{r7, pc}
 8010bda:	bf00      	nop
 8010bdc:	2001b560 	.word	0x2001b560

08010be0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8010be0:	b580      	push	{r7, lr}
 8010be2:	b088      	sub	sp, #32
 8010be4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010be6:	e048      	b.n	8010c7a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8010be8:	4b2d      	ldr	r3, [pc, #180]	; (8010ca0 <prvSwitchTimerLists+0xc0>)
 8010bea:	681b      	ldr	r3, [r3, #0]
 8010bec:	68db      	ldr	r3, [r3, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bf2:	4b2b      	ldr	r3, [pc, #172]	; (8010ca0 <prvSwitchTimerLists+0xc0>)
 8010bf4:	681b      	ldr	r3, [r3, #0]
 8010bf6:	68db      	ldr	r3, [r3, #12]
 8010bf8:	68db      	ldr	r3, [r3, #12]
 8010bfa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8010bfc:	68fb      	ldr	r3, [r7, #12]
 8010bfe:	3304      	adds	r3, #4
 8010c00:	4618      	mov	r0, r3
 8010c02:	f7fd fdc7 	bl	800e794 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8010c06:	68fb      	ldr	r3, [r7, #12]
 8010c08:	6a1b      	ldr	r3, [r3, #32]
 8010c0a:	68f8      	ldr	r0, [r7, #12]
 8010c0c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8010c0e:	68fb      	ldr	r3, [r7, #12]
 8010c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8010c14:	f003 0304 	and.w	r3, r3, #4
 8010c18:	2b00      	cmp	r3, #0
 8010c1a:	d02e      	beq.n	8010c7a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8010c1c:	68fb      	ldr	r3, [r7, #12]
 8010c1e:	699b      	ldr	r3, [r3, #24]
 8010c20:	693a      	ldr	r2, [r7, #16]
 8010c22:	4413      	add	r3, r2
 8010c24:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8010c26:	68ba      	ldr	r2, [r7, #8]
 8010c28:	693b      	ldr	r3, [r7, #16]
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	d90e      	bls.n	8010c4c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8010c2e:	68fb      	ldr	r3, [r7, #12]
 8010c30:	68ba      	ldr	r2, [r7, #8]
 8010c32:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8010c34:	68fb      	ldr	r3, [r7, #12]
 8010c36:	68fa      	ldr	r2, [r7, #12]
 8010c38:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8010c3a:	4b19      	ldr	r3, [pc, #100]	; (8010ca0 <prvSwitchTimerLists+0xc0>)
 8010c3c:	681a      	ldr	r2, [r3, #0]
 8010c3e:	68fb      	ldr	r3, [r7, #12]
 8010c40:	3304      	adds	r3, #4
 8010c42:	4619      	mov	r1, r3
 8010c44:	4610      	mov	r0, r2
 8010c46:	f7fd fd6c 	bl	800e722 <vListInsert>
 8010c4a:	e016      	b.n	8010c7a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8010c4c:	2300      	movs	r3, #0
 8010c4e:	9300      	str	r3, [sp, #0]
 8010c50:	2300      	movs	r3, #0
 8010c52:	693a      	ldr	r2, [r7, #16]
 8010c54:	2100      	movs	r1, #0
 8010c56:	68f8      	ldr	r0, [r7, #12]
 8010c58:	f7ff fd60 	bl	801071c <xTimerGenericCommand>
 8010c5c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	2b00      	cmp	r3, #0
 8010c62:	d10a      	bne.n	8010c7a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8010c64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c68:	f383 8811 	msr	BASEPRI, r3
 8010c6c:	f3bf 8f6f 	isb	sy
 8010c70:	f3bf 8f4f 	dsb	sy
 8010c74:	603b      	str	r3, [r7, #0]
}
 8010c76:	bf00      	nop
 8010c78:	e7fe      	b.n	8010c78 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8010c7a:	4b09      	ldr	r3, [pc, #36]	; (8010ca0 <prvSwitchTimerLists+0xc0>)
 8010c7c:	681b      	ldr	r3, [r3, #0]
 8010c7e:	681b      	ldr	r3, [r3, #0]
 8010c80:	2b00      	cmp	r3, #0
 8010c82:	d1b1      	bne.n	8010be8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8010c84:	4b06      	ldr	r3, [pc, #24]	; (8010ca0 <prvSwitchTimerLists+0xc0>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8010c8a:	4b06      	ldr	r3, [pc, #24]	; (8010ca4 <prvSwitchTimerLists+0xc4>)
 8010c8c:	681b      	ldr	r3, [r3, #0]
 8010c8e:	4a04      	ldr	r2, [pc, #16]	; (8010ca0 <prvSwitchTimerLists+0xc0>)
 8010c90:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8010c92:	4a04      	ldr	r2, [pc, #16]	; (8010ca4 <prvSwitchTimerLists+0xc4>)
 8010c94:	697b      	ldr	r3, [r7, #20]
 8010c96:	6013      	str	r3, [r2, #0]
}
 8010c98:	bf00      	nop
 8010c9a:	3718      	adds	r7, #24
 8010c9c:	46bd      	mov	sp, r7
 8010c9e:	bd80      	pop	{r7, pc}
 8010ca0:	2001b558 	.word	0x2001b558
 8010ca4:	2001b55c 	.word	0x2001b55c

08010ca8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8010ca8:	b580      	push	{r7, lr}
 8010caa:	b082      	sub	sp, #8
 8010cac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8010cae:	f000 f969 	bl	8010f84 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8010cb2:	4b15      	ldr	r3, [pc, #84]	; (8010d08 <prvCheckForValidListAndQueue+0x60>)
 8010cb4:	681b      	ldr	r3, [r3, #0]
 8010cb6:	2b00      	cmp	r3, #0
 8010cb8:	d120      	bne.n	8010cfc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8010cba:	4814      	ldr	r0, [pc, #80]	; (8010d0c <prvCheckForValidListAndQueue+0x64>)
 8010cbc:	f7fd fce0 	bl	800e680 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8010cc0:	4813      	ldr	r0, [pc, #76]	; (8010d10 <prvCheckForValidListAndQueue+0x68>)
 8010cc2:	f7fd fcdd 	bl	800e680 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8010cc6:	4b13      	ldr	r3, [pc, #76]	; (8010d14 <prvCheckForValidListAndQueue+0x6c>)
 8010cc8:	4a10      	ldr	r2, [pc, #64]	; (8010d0c <prvCheckForValidListAndQueue+0x64>)
 8010cca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8010ccc:	4b12      	ldr	r3, [pc, #72]	; (8010d18 <prvCheckForValidListAndQueue+0x70>)
 8010cce:	4a10      	ldr	r2, [pc, #64]	; (8010d10 <prvCheckForValidListAndQueue+0x68>)
 8010cd0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8010cd2:	2300      	movs	r3, #0
 8010cd4:	9300      	str	r3, [sp, #0]
 8010cd6:	4b11      	ldr	r3, [pc, #68]	; (8010d1c <prvCheckForValidListAndQueue+0x74>)
 8010cd8:	4a11      	ldr	r2, [pc, #68]	; (8010d20 <prvCheckForValidListAndQueue+0x78>)
 8010cda:	2110      	movs	r1, #16
 8010cdc:	200a      	movs	r0, #10
 8010cde:	f7fd fdeb 	bl	800e8b8 <xQueueGenericCreateStatic>
 8010ce2:	4603      	mov	r3, r0
 8010ce4:	4a08      	ldr	r2, [pc, #32]	; (8010d08 <prvCheckForValidListAndQueue+0x60>)
 8010ce6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8010ce8:	4b07      	ldr	r3, [pc, #28]	; (8010d08 <prvCheckForValidListAndQueue+0x60>)
 8010cea:	681b      	ldr	r3, [r3, #0]
 8010cec:	2b00      	cmp	r3, #0
 8010cee:	d005      	beq.n	8010cfc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8010cf0:	4b05      	ldr	r3, [pc, #20]	; (8010d08 <prvCheckForValidListAndQueue+0x60>)
 8010cf2:	681b      	ldr	r3, [r3, #0]
 8010cf4:	490b      	ldr	r1, [pc, #44]	; (8010d24 <prvCheckForValidListAndQueue+0x7c>)
 8010cf6:	4618      	mov	r0, r3
 8010cf8:	f7fe fc6e 	bl	800f5d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010cfc:	f000 f972 	bl	8010fe4 <vPortExitCritical>
}
 8010d00:	bf00      	nop
 8010d02:	46bd      	mov	sp, r7
 8010d04:	bd80      	pop	{r7, pc}
 8010d06:	bf00      	nop
 8010d08:	2001b560 	.word	0x2001b560
 8010d0c:	2001b530 	.word	0x2001b530
 8010d10:	2001b544 	.word	0x2001b544
 8010d14:	2001b558 	.word	0x2001b558
 8010d18:	2001b55c 	.word	0x2001b55c
 8010d1c:	2001b60c 	.word	0x2001b60c
 8010d20:	2001b56c 	.word	0x2001b56c
 8010d24:	08015c48 	.word	0x08015c48

08010d28 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8010d28:	b480      	push	{r7}
 8010d2a:	b085      	sub	sp, #20
 8010d2c:	af00      	add	r7, sp, #0
 8010d2e:	60f8      	str	r0, [r7, #12]
 8010d30:	60b9      	str	r1, [r7, #8]
 8010d32:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8010d34:	68fb      	ldr	r3, [r7, #12]
 8010d36:	3b04      	subs	r3, #4
 8010d38:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8010d40:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d42:	68fb      	ldr	r3, [r7, #12]
 8010d44:	3b04      	subs	r3, #4
 8010d46:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8010d48:	68bb      	ldr	r3, [r7, #8]
 8010d4a:	f023 0201 	bic.w	r2, r3, #1
 8010d4e:	68fb      	ldr	r3, [r7, #12]
 8010d50:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8010d52:	68fb      	ldr	r3, [r7, #12]
 8010d54:	3b04      	subs	r3, #4
 8010d56:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8010d58:	4a0c      	ldr	r2, [pc, #48]	; (8010d8c <pxPortInitialiseStack+0x64>)
 8010d5a:	68fb      	ldr	r3, [r7, #12]
 8010d5c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8010d5e:	68fb      	ldr	r3, [r7, #12]
 8010d60:	3b14      	subs	r3, #20
 8010d62:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8010d64:	687a      	ldr	r2, [r7, #4]
 8010d66:	68fb      	ldr	r3, [r7, #12]
 8010d68:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8010d6a:	68fb      	ldr	r3, [r7, #12]
 8010d6c:	3b04      	subs	r3, #4
 8010d6e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8010d70:	68fb      	ldr	r3, [r7, #12]
 8010d72:	f06f 0202 	mvn.w	r2, #2
 8010d76:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8010d78:	68fb      	ldr	r3, [r7, #12]
 8010d7a:	3b20      	subs	r3, #32
 8010d7c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8010d7e:	68fb      	ldr	r3, [r7, #12]
}
 8010d80:	4618      	mov	r0, r3
 8010d82:	3714      	adds	r7, #20
 8010d84:	46bd      	mov	sp, r7
 8010d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d8a:	4770      	bx	lr
 8010d8c:	08010d91 	.word	0x08010d91

08010d90 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8010d90:	b480      	push	{r7}
 8010d92:	b085      	sub	sp, #20
 8010d94:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8010d96:	2300      	movs	r3, #0
 8010d98:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8010d9a:	4b12      	ldr	r3, [pc, #72]	; (8010de4 <prvTaskExitError+0x54>)
 8010d9c:	681b      	ldr	r3, [r3, #0]
 8010d9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010da2:	d00a      	beq.n	8010dba <prvTaskExitError+0x2a>
	__asm volatile
 8010da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010da8:	f383 8811 	msr	BASEPRI, r3
 8010dac:	f3bf 8f6f 	isb	sy
 8010db0:	f3bf 8f4f 	dsb	sy
 8010db4:	60fb      	str	r3, [r7, #12]
}
 8010db6:	bf00      	nop
 8010db8:	e7fe      	b.n	8010db8 <prvTaskExitError+0x28>
	__asm volatile
 8010dba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010dbe:	f383 8811 	msr	BASEPRI, r3
 8010dc2:	f3bf 8f6f 	isb	sy
 8010dc6:	f3bf 8f4f 	dsb	sy
 8010dca:	60bb      	str	r3, [r7, #8]
}
 8010dcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8010dce:	bf00      	nop
 8010dd0:	687b      	ldr	r3, [r7, #4]
 8010dd2:	2b00      	cmp	r3, #0
 8010dd4:	d0fc      	beq.n	8010dd0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8010dd6:	bf00      	nop
 8010dd8:	bf00      	nop
 8010dda:	3714      	adds	r7, #20
 8010ddc:	46bd      	mov	sp, r7
 8010dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010de2:	4770      	bx	lr
 8010de4:	200001ac 	.word	0x200001ac
	...

08010df0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8010df0:	4b07      	ldr	r3, [pc, #28]	; (8010e10 <pxCurrentTCBConst2>)
 8010df2:	6819      	ldr	r1, [r3, #0]
 8010df4:	6808      	ldr	r0, [r1, #0]
 8010df6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dfa:	f380 8809 	msr	PSP, r0
 8010dfe:	f3bf 8f6f 	isb	sy
 8010e02:	f04f 0000 	mov.w	r0, #0
 8010e06:	f380 8811 	msr	BASEPRI, r0
 8010e0a:	4770      	bx	lr
 8010e0c:	f3af 8000 	nop.w

08010e10 <pxCurrentTCBConst2>:
 8010e10:	2001b030 	.word	0x2001b030
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8010e14:	bf00      	nop
 8010e16:	bf00      	nop

08010e18 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8010e18:	4808      	ldr	r0, [pc, #32]	; (8010e3c <prvPortStartFirstTask+0x24>)
 8010e1a:	6800      	ldr	r0, [r0, #0]
 8010e1c:	6800      	ldr	r0, [r0, #0]
 8010e1e:	f380 8808 	msr	MSP, r0
 8010e22:	f04f 0000 	mov.w	r0, #0
 8010e26:	f380 8814 	msr	CONTROL, r0
 8010e2a:	b662      	cpsie	i
 8010e2c:	b661      	cpsie	f
 8010e2e:	f3bf 8f4f 	dsb	sy
 8010e32:	f3bf 8f6f 	isb	sy
 8010e36:	df00      	svc	0
 8010e38:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8010e3a:	bf00      	nop
 8010e3c:	e000ed08 	.word	0xe000ed08

08010e40 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8010e40:	b580      	push	{r7, lr}
 8010e42:	b086      	sub	sp, #24
 8010e44:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8010e46:	4b46      	ldr	r3, [pc, #280]	; (8010f60 <xPortStartScheduler+0x120>)
 8010e48:	681b      	ldr	r3, [r3, #0]
 8010e4a:	4a46      	ldr	r2, [pc, #280]	; (8010f64 <xPortStartScheduler+0x124>)
 8010e4c:	4293      	cmp	r3, r2
 8010e4e:	d10a      	bne.n	8010e66 <xPortStartScheduler+0x26>
	__asm volatile
 8010e50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e54:	f383 8811 	msr	BASEPRI, r3
 8010e58:	f3bf 8f6f 	isb	sy
 8010e5c:	f3bf 8f4f 	dsb	sy
 8010e60:	613b      	str	r3, [r7, #16]
}
 8010e62:	bf00      	nop
 8010e64:	e7fe      	b.n	8010e64 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8010e66:	4b3e      	ldr	r3, [pc, #248]	; (8010f60 <xPortStartScheduler+0x120>)
 8010e68:	681b      	ldr	r3, [r3, #0]
 8010e6a:	4a3f      	ldr	r2, [pc, #252]	; (8010f68 <xPortStartScheduler+0x128>)
 8010e6c:	4293      	cmp	r3, r2
 8010e6e:	d10a      	bne.n	8010e86 <xPortStartScheduler+0x46>
	__asm volatile
 8010e70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e74:	f383 8811 	msr	BASEPRI, r3
 8010e78:	f3bf 8f6f 	isb	sy
 8010e7c:	f3bf 8f4f 	dsb	sy
 8010e80:	60fb      	str	r3, [r7, #12]
}
 8010e82:	bf00      	nop
 8010e84:	e7fe      	b.n	8010e84 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8010e86:	4b39      	ldr	r3, [pc, #228]	; (8010f6c <xPortStartScheduler+0x12c>)
 8010e88:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8010e8a:	697b      	ldr	r3, [r7, #20]
 8010e8c:	781b      	ldrb	r3, [r3, #0]
 8010e8e:	b2db      	uxtb	r3, r3
 8010e90:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8010e92:	697b      	ldr	r3, [r7, #20]
 8010e94:	22ff      	movs	r2, #255	; 0xff
 8010e96:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8010e98:	697b      	ldr	r3, [r7, #20]
 8010e9a:	781b      	ldrb	r3, [r3, #0]
 8010e9c:	b2db      	uxtb	r3, r3
 8010e9e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8010ea0:	78fb      	ldrb	r3, [r7, #3]
 8010ea2:	b2db      	uxtb	r3, r3
 8010ea4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8010ea8:	b2da      	uxtb	r2, r3
 8010eaa:	4b31      	ldr	r3, [pc, #196]	; (8010f70 <xPortStartScheduler+0x130>)
 8010eac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8010eae:	4b31      	ldr	r3, [pc, #196]	; (8010f74 <xPortStartScheduler+0x134>)
 8010eb0:	2207      	movs	r2, #7
 8010eb2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010eb4:	e009      	b.n	8010eca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8010eb6:	4b2f      	ldr	r3, [pc, #188]	; (8010f74 <xPortStartScheduler+0x134>)
 8010eb8:	681b      	ldr	r3, [r3, #0]
 8010eba:	3b01      	subs	r3, #1
 8010ebc:	4a2d      	ldr	r2, [pc, #180]	; (8010f74 <xPortStartScheduler+0x134>)
 8010ebe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8010ec0:	78fb      	ldrb	r3, [r7, #3]
 8010ec2:	b2db      	uxtb	r3, r3
 8010ec4:	005b      	lsls	r3, r3, #1
 8010ec6:	b2db      	uxtb	r3, r3
 8010ec8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8010eca:	78fb      	ldrb	r3, [r7, #3]
 8010ecc:	b2db      	uxtb	r3, r3
 8010ece:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8010ed2:	2b80      	cmp	r3, #128	; 0x80
 8010ed4:	d0ef      	beq.n	8010eb6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8010ed6:	4b27      	ldr	r3, [pc, #156]	; (8010f74 <xPortStartScheduler+0x134>)
 8010ed8:	681b      	ldr	r3, [r3, #0]
 8010eda:	f1c3 0307 	rsb	r3, r3, #7
 8010ede:	2b04      	cmp	r3, #4
 8010ee0:	d00a      	beq.n	8010ef8 <xPortStartScheduler+0xb8>
	__asm volatile
 8010ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ee6:	f383 8811 	msr	BASEPRI, r3
 8010eea:	f3bf 8f6f 	isb	sy
 8010eee:	f3bf 8f4f 	dsb	sy
 8010ef2:	60bb      	str	r3, [r7, #8]
}
 8010ef4:	bf00      	nop
 8010ef6:	e7fe      	b.n	8010ef6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8010ef8:	4b1e      	ldr	r3, [pc, #120]	; (8010f74 <xPortStartScheduler+0x134>)
 8010efa:	681b      	ldr	r3, [r3, #0]
 8010efc:	021b      	lsls	r3, r3, #8
 8010efe:	4a1d      	ldr	r2, [pc, #116]	; (8010f74 <xPortStartScheduler+0x134>)
 8010f00:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8010f02:	4b1c      	ldr	r3, [pc, #112]	; (8010f74 <xPortStartScheduler+0x134>)
 8010f04:	681b      	ldr	r3, [r3, #0]
 8010f06:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8010f0a:	4a1a      	ldr	r2, [pc, #104]	; (8010f74 <xPortStartScheduler+0x134>)
 8010f0c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8010f0e:	687b      	ldr	r3, [r7, #4]
 8010f10:	b2da      	uxtb	r2, r3
 8010f12:	697b      	ldr	r3, [r7, #20]
 8010f14:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8010f16:	4b18      	ldr	r3, [pc, #96]	; (8010f78 <xPortStartScheduler+0x138>)
 8010f18:	681b      	ldr	r3, [r3, #0]
 8010f1a:	4a17      	ldr	r2, [pc, #92]	; (8010f78 <xPortStartScheduler+0x138>)
 8010f1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8010f20:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8010f22:	4b15      	ldr	r3, [pc, #84]	; (8010f78 <xPortStartScheduler+0x138>)
 8010f24:	681b      	ldr	r3, [r3, #0]
 8010f26:	4a14      	ldr	r2, [pc, #80]	; (8010f78 <xPortStartScheduler+0x138>)
 8010f28:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8010f2c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8010f2e:	f000 f8dd 	bl	80110ec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8010f32:	4b12      	ldr	r3, [pc, #72]	; (8010f7c <xPortStartScheduler+0x13c>)
 8010f34:	2200      	movs	r2, #0
 8010f36:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8010f38:	f000 f8fc 	bl	8011134 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8010f3c:	4b10      	ldr	r3, [pc, #64]	; (8010f80 <xPortStartScheduler+0x140>)
 8010f3e:	681b      	ldr	r3, [r3, #0]
 8010f40:	4a0f      	ldr	r2, [pc, #60]	; (8010f80 <xPortStartScheduler+0x140>)
 8010f42:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8010f46:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8010f48:	f7ff ff66 	bl	8010e18 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8010f4c:	f7fe ff54 	bl	800fdf8 <vTaskSwitchContext>
	prvTaskExitError();
 8010f50:	f7ff ff1e 	bl	8010d90 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8010f54:	2300      	movs	r3, #0
}
 8010f56:	4618      	mov	r0, r3
 8010f58:	3718      	adds	r7, #24
 8010f5a:	46bd      	mov	sp, r7
 8010f5c:	bd80      	pop	{r7, pc}
 8010f5e:	bf00      	nop
 8010f60:	e000ed00 	.word	0xe000ed00
 8010f64:	410fc271 	.word	0x410fc271
 8010f68:	410fc270 	.word	0x410fc270
 8010f6c:	e000e400 	.word	0xe000e400
 8010f70:	2001b65c 	.word	0x2001b65c
 8010f74:	2001b660 	.word	0x2001b660
 8010f78:	e000ed20 	.word	0xe000ed20
 8010f7c:	200001ac 	.word	0x200001ac
 8010f80:	e000ef34 	.word	0xe000ef34

08010f84 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8010f84:	b480      	push	{r7}
 8010f86:	b083      	sub	sp, #12
 8010f88:	af00      	add	r7, sp, #0
	__asm volatile
 8010f8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f8e:	f383 8811 	msr	BASEPRI, r3
 8010f92:	f3bf 8f6f 	isb	sy
 8010f96:	f3bf 8f4f 	dsb	sy
 8010f9a:	607b      	str	r3, [r7, #4]
}
 8010f9c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8010f9e:	4b0f      	ldr	r3, [pc, #60]	; (8010fdc <vPortEnterCritical+0x58>)
 8010fa0:	681b      	ldr	r3, [r3, #0]
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	4a0d      	ldr	r2, [pc, #52]	; (8010fdc <vPortEnterCritical+0x58>)
 8010fa6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8010fa8:	4b0c      	ldr	r3, [pc, #48]	; (8010fdc <vPortEnterCritical+0x58>)
 8010faa:	681b      	ldr	r3, [r3, #0]
 8010fac:	2b01      	cmp	r3, #1
 8010fae:	d10f      	bne.n	8010fd0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8010fb0:	4b0b      	ldr	r3, [pc, #44]	; (8010fe0 <vPortEnterCritical+0x5c>)
 8010fb2:	681b      	ldr	r3, [r3, #0]
 8010fb4:	b2db      	uxtb	r3, r3
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d00a      	beq.n	8010fd0 <vPortEnterCritical+0x4c>
	__asm volatile
 8010fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010fbe:	f383 8811 	msr	BASEPRI, r3
 8010fc2:	f3bf 8f6f 	isb	sy
 8010fc6:	f3bf 8f4f 	dsb	sy
 8010fca:	603b      	str	r3, [r7, #0]
}
 8010fcc:	bf00      	nop
 8010fce:	e7fe      	b.n	8010fce <vPortEnterCritical+0x4a>
	}
}
 8010fd0:	bf00      	nop
 8010fd2:	370c      	adds	r7, #12
 8010fd4:	46bd      	mov	sp, r7
 8010fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010fda:	4770      	bx	lr
 8010fdc:	200001ac 	.word	0x200001ac
 8010fe0:	e000ed04 	.word	0xe000ed04

08010fe4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8010fe4:	b480      	push	{r7}
 8010fe6:	b083      	sub	sp, #12
 8010fe8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8010fea:	4b12      	ldr	r3, [pc, #72]	; (8011034 <vPortExitCritical+0x50>)
 8010fec:	681b      	ldr	r3, [r3, #0]
 8010fee:	2b00      	cmp	r3, #0
 8010ff0:	d10a      	bne.n	8011008 <vPortExitCritical+0x24>
	__asm volatile
 8010ff2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ff6:	f383 8811 	msr	BASEPRI, r3
 8010ffa:	f3bf 8f6f 	isb	sy
 8010ffe:	f3bf 8f4f 	dsb	sy
 8011002:	607b      	str	r3, [r7, #4]
}
 8011004:	bf00      	nop
 8011006:	e7fe      	b.n	8011006 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8011008:	4b0a      	ldr	r3, [pc, #40]	; (8011034 <vPortExitCritical+0x50>)
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	3b01      	subs	r3, #1
 801100e:	4a09      	ldr	r2, [pc, #36]	; (8011034 <vPortExitCritical+0x50>)
 8011010:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011012:	4b08      	ldr	r3, [pc, #32]	; (8011034 <vPortExitCritical+0x50>)
 8011014:	681b      	ldr	r3, [r3, #0]
 8011016:	2b00      	cmp	r3, #0
 8011018:	d105      	bne.n	8011026 <vPortExitCritical+0x42>
 801101a:	2300      	movs	r3, #0
 801101c:	603b      	str	r3, [r7, #0]
	__asm volatile
 801101e:	683b      	ldr	r3, [r7, #0]
 8011020:	f383 8811 	msr	BASEPRI, r3
}
 8011024:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011026:	bf00      	nop
 8011028:	370c      	adds	r7, #12
 801102a:	46bd      	mov	sp, r7
 801102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011030:	4770      	bx	lr
 8011032:	bf00      	nop
 8011034:	200001ac 	.word	0x200001ac
	...

08011040 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011040:	f3ef 8009 	mrs	r0, PSP
 8011044:	f3bf 8f6f 	isb	sy
 8011048:	4b15      	ldr	r3, [pc, #84]	; (80110a0 <pxCurrentTCBConst>)
 801104a:	681a      	ldr	r2, [r3, #0]
 801104c:	f01e 0f10 	tst.w	lr, #16
 8011050:	bf08      	it	eq
 8011052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801105a:	6010      	str	r0, [r2, #0]
 801105c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011060:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011064:	f380 8811 	msr	BASEPRI, r0
 8011068:	f3bf 8f4f 	dsb	sy
 801106c:	f3bf 8f6f 	isb	sy
 8011070:	f7fe fec2 	bl	800fdf8 <vTaskSwitchContext>
 8011074:	f04f 0000 	mov.w	r0, #0
 8011078:	f380 8811 	msr	BASEPRI, r0
 801107c:	bc09      	pop	{r0, r3}
 801107e:	6819      	ldr	r1, [r3, #0]
 8011080:	6808      	ldr	r0, [r1, #0]
 8011082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011086:	f01e 0f10 	tst.w	lr, #16
 801108a:	bf08      	it	eq
 801108c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011090:	f380 8809 	msr	PSP, r0
 8011094:	f3bf 8f6f 	isb	sy
 8011098:	4770      	bx	lr
 801109a:	bf00      	nop
 801109c:	f3af 8000 	nop.w

080110a0 <pxCurrentTCBConst>:
 80110a0:	2001b030 	.word	0x2001b030
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80110a4:	bf00      	nop
 80110a6:	bf00      	nop

080110a8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80110a8:	b580      	push	{r7, lr}
 80110aa:	b082      	sub	sp, #8
 80110ac:	af00      	add	r7, sp, #0
	__asm volatile
 80110ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80110b2:	f383 8811 	msr	BASEPRI, r3
 80110b6:	f3bf 8f6f 	isb	sy
 80110ba:	f3bf 8f4f 	dsb	sy
 80110be:	607b      	str	r3, [r7, #4]
}
 80110c0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80110c2:	f7fe fddf 	bl	800fc84 <xTaskIncrementTick>
 80110c6:	4603      	mov	r3, r0
 80110c8:	2b00      	cmp	r3, #0
 80110ca:	d003      	beq.n	80110d4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80110cc:	4b06      	ldr	r3, [pc, #24]	; (80110e8 <xPortSysTickHandler+0x40>)
 80110ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80110d2:	601a      	str	r2, [r3, #0]
 80110d4:	2300      	movs	r3, #0
 80110d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80110d8:	683b      	ldr	r3, [r7, #0]
 80110da:	f383 8811 	msr	BASEPRI, r3
}
 80110de:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80110e0:	bf00      	nop
 80110e2:	3708      	adds	r7, #8
 80110e4:	46bd      	mov	sp, r7
 80110e6:	bd80      	pop	{r7, pc}
 80110e8:	e000ed04 	.word	0xe000ed04

080110ec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80110ec:	b480      	push	{r7}
 80110ee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80110f0:	4b0b      	ldr	r3, [pc, #44]	; (8011120 <vPortSetupTimerInterrupt+0x34>)
 80110f2:	2200      	movs	r2, #0
 80110f4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80110f6:	4b0b      	ldr	r3, [pc, #44]	; (8011124 <vPortSetupTimerInterrupt+0x38>)
 80110f8:	2200      	movs	r2, #0
 80110fa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80110fc:	4b0a      	ldr	r3, [pc, #40]	; (8011128 <vPortSetupTimerInterrupt+0x3c>)
 80110fe:	681b      	ldr	r3, [r3, #0]
 8011100:	4a0a      	ldr	r2, [pc, #40]	; (801112c <vPortSetupTimerInterrupt+0x40>)
 8011102:	fba2 2303 	umull	r2, r3, r2, r3
 8011106:	099b      	lsrs	r3, r3, #6
 8011108:	4a09      	ldr	r2, [pc, #36]	; (8011130 <vPortSetupTimerInterrupt+0x44>)
 801110a:	3b01      	subs	r3, #1
 801110c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801110e:	4b04      	ldr	r3, [pc, #16]	; (8011120 <vPortSetupTimerInterrupt+0x34>)
 8011110:	2207      	movs	r2, #7
 8011112:	601a      	str	r2, [r3, #0]
}
 8011114:	bf00      	nop
 8011116:	46bd      	mov	sp, r7
 8011118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801111c:	4770      	bx	lr
 801111e:	bf00      	nop
 8011120:	e000e010 	.word	0xe000e010
 8011124:	e000e018 	.word	0xe000e018
 8011128:	200001a0 	.word	0x200001a0
 801112c:	10624dd3 	.word	0x10624dd3
 8011130:	e000e014 	.word	0xe000e014

08011134 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011134:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011144 <vPortEnableVFP+0x10>
 8011138:	6801      	ldr	r1, [r0, #0]
 801113a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 801113e:	6001      	str	r1, [r0, #0]
 8011140:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011142:	bf00      	nop
 8011144:	e000ed88 	.word	0xe000ed88

08011148 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011148:	b480      	push	{r7}
 801114a:	b085      	sub	sp, #20
 801114c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 801114e:	f3ef 8305 	mrs	r3, IPSR
 8011152:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011154:	68fb      	ldr	r3, [r7, #12]
 8011156:	2b0f      	cmp	r3, #15
 8011158:	d914      	bls.n	8011184 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801115a:	4a17      	ldr	r2, [pc, #92]	; (80111b8 <vPortValidateInterruptPriority+0x70>)
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	4413      	add	r3, r2
 8011160:	781b      	ldrb	r3, [r3, #0]
 8011162:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011164:	4b15      	ldr	r3, [pc, #84]	; (80111bc <vPortValidateInterruptPriority+0x74>)
 8011166:	781b      	ldrb	r3, [r3, #0]
 8011168:	7afa      	ldrb	r2, [r7, #11]
 801116a:	429a      	cmp	r2, r3
 801116c:	d20a      	bcs.n	8011184 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 801116e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011172:	f383 8811 	msr	BASEPRI, r3
 8011176:	f3bf 8f6f 	isb	sy
 801117a:	f3bf 8f4f 	dsb	sy
 801117e:	607b      	str	r3, [r7, #4]
}
 8011180:	bf00      	nop
 8011182:	e7fe      	b.n	8011182 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011184:	4b0e      	ldr	r3, [pc, #56]	; (80111c0 <vPortValidateInterruptPriority+0x78>)
 8011186:	681b      	ldr	r3, [r3, #0]
 8011188:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 801118c:	4b0d      	ldr	r3, [pc, #52]	; (80111c4 <vPortValidateInterruptPriority+0x7c>)
 801118e:	681b      	ldr	r3, [r3, #0]
 8011190:	429a      	cmp	r2, r3
 8011192:	d90a      	bls.n	80111aa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8011194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011198:	f383 8811 	msr	BASEPRI, r3
 801119c:	f3bf 8f6f 	isb	sy
 80111a0:	f3bf 8f4f 	dsb	sy
 80111a4:	603b      	str	r3, [r7, #0]
}
 80111a6:	bf00      	nop
 80111a8:	e7fe      	b.n	80111a8 <vPortValidateInterruptPriority+0x60>
	}
 80111aa:	bf00      	nop
 80111ac:	3714      	adds	r7, #20
 80111ae:	46bd      	mov	sp, r7
 80111b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111b4:	4770      	bx	lr
 80111b6:	bf00      	nop
 80111b8:	e000e3f0 	.word	0xe000e3f0
 80111bc:	2001b65c 	.word	0x2001b65c
 80111c0:	e000ed0c 	.word	0xe000ed0c
 80111c4:	2001b660 	.word	0x2001b660

080111c8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80111c8:	b580      	push	{r7, lr}
 80111ca:	b08a      	sub	sp, #40	; 0x28
 80111cc:	af00      	add	r7, sp, #0
 80111ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80111d0:	2300      	movs	r3, #0
 80111d2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80111d4:	f7fe fc9a 	bl	800fb0c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80111d8:	4b5b      	ldr	r3, [pc, #364]	; (8011348 <pvPortMalloc+0x180>)
 80111da:	681b      	ldr	r3, [r3, #0]
 80111dc:	2b00      	cmp	r3, #0
 80111de:	d101      	bne.n	80111e4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80111e0:	f000 f920 	bl	8011424 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80111e4:	4b59      	ldr	r3, [pc, #356]	; (801134c <pvPortMalloc+0x184>)
 80111e6:	681a      	ldr	r2, [r3, #0]
 80111e8:	687b      	ldr	r3, [r7, #4]
 80111ea:	4013      	ands	r3, r2
 80111ec:	2b00      	cmp	r3, #0
 80111ee:	f040 8093 	bne.w	8011318 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80111f2:	687b      	ldr	r3, [r7, #4]
 80111f4:	2b00      	cmp	r3, #0
 80111f6:	d01d      	beq.n	8011234 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80111f8:	2208      	movs	r2, #8
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	4413      	add	r3, r2
 80111fe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011200:	687b      	ldr	r3, [r7, #4]
 8011202:	f003 0307 	and.w	r3, r3, #7
 8011206:	2b00      	cmp	r3, #0
 8011208:	d014      	beq.n	8011234 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 801120a:	687b      	ldr	r3, [r7, #4]
 801120c:	f023 0307 	bic.w	r3, r3, #7
 8011210:	3308      	adds	r3, #8
 8011212:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	f003 0307 	and.w	r3, r3, #7
 801121a:	2b00      	cmp	r3, #0
 801121c:	d00a      	beq.n	8011234 <pvPortMalloc+0x6c>
	__asm volatile
 801121e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011222:	f383 8811 	msr	BASEPRI, r3
 8011226:	f3bf 8f6f 	isb	sy
 801122a:	f3bf 8f4f 	dsb	sy
 801122e:	617b      	str	r3, [r7, #20]
}
 8011230:	bf00      	nop
 8011232:	e7fe      	b.n	8011232 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011234:	687b      	ldr	r3, [r7, #4]
 8011236:	2b00      	cmp	r3, #0
 8011238:	d06e      	beq.n	8011318 <pvPortMalloc+0x150>
 801123a:	4b45      	ldr	r3, [pc, #276]	; (8011350 <pvPortMalloc+0x188>)
 801123c:	681b      	ldr	r3, [r3, #0]
 801123e:	687a      	ldr	r2, [r7, #4]
 8011240:	429a      	cmp	r2, r3
 8011242:	d869      	bhi.n	8011318 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011244:	4b43      	ldr	r3, [pc, #268]	; (8011354 <pvPortMalloc+0x18c>)
 8011246:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011248:	4b42      	ldr	r3, [pc, #264]	; (8011354 <pvPortMalloc+0x18c>)
 801124a:	681b      	ldr	r3, [r3, #0]
 801124c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801124e:	e004      	b.n	801125a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8011250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011252:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011256:	681b      	ldr	r3, [r3, #0]
 8011258:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801125a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	687a      	ldr	r2, [r7, #4]
 8011260:	429a      	cmp	r2, r3
 8011262:	d903      	bls.n	801126c <pvPortMalloc+0xa4>
 8011264:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011266:	681b      	ldr	r3, [r3, #0]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d1f1      	bne.n	8011250 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801126c:	4b36      	ldr	r3, [pc, #216]	; (8011348 <pvPortMalloc+0x180>)
 801126e:	681b      	ldr	r3, [r3, #0]
 8011270:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011272:	429a      	cmp	r2, r3
 8011274:	d050      	beq.n	8011318 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011276:	6a3b      	ldr	r3, [r7, #32]
 8011278:	681b      	ldr	r3, [r3, #0]
 801127a:	2208      	movs	r2, #8
 801127c:	4413      	add	r3, r2
 801127e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011282:	681a      	ldr	r2, [r3, #0]
 8011284:	6a3b      	ldr	r3, [r7, #32]
 8011286:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801128a:	685a      	ldr	r2, [r3, #4]
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	1ad2      	subs	r2, r2, r3
 8011290:	2308      	movs	r3, #8
 8011292:	005b      	lsls	r3, r3, #1
 8011294:	429a      	cmp	r2, r3
 8011296:	d91f      	bls.n	80112d8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801129a:	687b      	ldr	r3, [r7, #4]
 801129c:	4413      	add	r3, r2
 801129e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80112a0:	69bb      	ldr	r3, [r7, #24]
 80112a2:	f003 0307 	and.w	r3, r3, #7
 80112a6:	2b00      	cmp	r3, #0
 80112a8:	d00a      	beq.n	80112c0 <pvPortMalloc+0xf8>
	__asm volatile
 80112aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112ae:	f383 8811 	msr	BASEPRI, r3
 80112b2:	f3bf 8f6f 	isb	sy
 80112b6:	f3bf 8f4f 	dsb	sy
 80112ba:	613b      	str	r3, [r7, #16]
}
 80112bc:	bf00      	nop
 80112be:	e7fe      	b.n	80112be <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80112c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112c2:	685a      	ldr	r2, [r3, #4]
 80112c4:	687b      	ldr	r3, [r7, #4]
 80112c6:	1ad2      	subs	r2, r2, r3
 80112c8:	69bb      	ldr	r3, [r7, #24]
 80112ca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80112cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112ce:	687a      	ldr	r2, [r7, #4]
 80112d0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80112d2:	69b8      	ldr	r0, [r7, #24]
 80112d4:	f000 f908 	bl	80114e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80112d8:	4b1d      	ldr	r3, [pc, #116]	; (8011350 <pvPortMalloc+0x188>)
 80112da:	681a      	ldr	r2, [r3, #0]
 80112dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112de:	685b      	ldr	r3, [r3, #4]
 80112e0:	1ad3      	subs	r3, r2, r3
 80112e2:	4a1b      	ldr	r2, [pc, #108]	; (8011350 <pvPortMalloc+0x188>)
 80112e4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80112e6:	4b1a      	ldr	r3, [pc, #104]	; (8011350 <pvPortMalloc+0x188>)
 80112e8:	681a      	ldr	r2, [r3, #0]
 80112ea:	4b1b      	ldr	r3, [pc, #108]	; (8011358 <pvPortMalloc+0x190>)
 80112ec:	681b      	ldr	r3, [r3, #0]
 80112ee:	429a      	cmp	r2, r3
 80112f0:	d203      	bcs.n	80112fa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80112f2:	4b17      	ldr	r3, [pc, #92]	; (8011350 <pvPortMalloc+0x188>)
 80112f4:	681b      	ldr	r3, [r3, #0]
 80112f6:	4a18      	ldr	r2, [pc, #96]	; (8011358 <pvPortMalloc+0x190>)
 80112f8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80112fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80112fc:	685a      	ldr	r2, [r3, #4]
 80112fe:	4b13      	ldr	r3, [pc, #76]	; (801134c <pvPortMalloc+0x184>)
 8011300:	681b      	ldr	r3, [r3, #0]
 8011302:	431a      	orrs	r2, r3
 8011304:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011306:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801130a:	2200      	movs	r2, #0
 801130c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 801130e:	4b13      	ldr	r3, [pc, #76]	; (801135c <pvPortMalloc+0x194>)
 8011310:	681b      	ldr	r3, [r3, #0]
 8011312:	3301      	adds	r3, #1
 8011314:	4a11      	ldr	r2, [pc, #68]	; (801135c <pvPortMalloc+0x194>)
 8011316:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011318:	f7fe fc06 	bl	800fb28 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 801131c:	69fb      	ldr	r3, [r7, #28]
 801131e:	f003 0307 	and.w	r3, r3, #7
 8011322:	2b00      	cmp	r3, #0
 8011324:	d00a      	beq.n	801133c <pvPortMalloc+0x174>
	__asm volatile
 8011326:	f04f 0350 	mov.w	r3, #80	; 0x50
 801132a:	f383 8811 	msr	BASEPRI, r3
 801132e:	f3bf 8f6f 	isb	sy
 8011332:	f3bf 8f4f 	dsb	sy
 8011336:	60fb      	str	r3, [r7, #12]
}
 8011338:	bf00      	nop
 801133a:	e7fe      	b.n	801133a <pvPortMalloc+0x172>
	return pvReturn;
 801133c:	69fb      	ldr	r3, [r7, #28]
}
 801133e:	4618      	mov	r0, r3
 8011340:	3728      	adds	r7, #40	; 0x28
 8011342:	46bd      	mov	sp, r7
 8011344:	bd80      	pop	{r7, pc}
 8011346:	bf00      	nop
 8011348:	2001f26c 	.word	0x2001f26c
 801134c:	2001f280 	.word	0x2001f280
 8011350:	2001f270 	.word	0x2001f270
 8011354:	2001f264 	.word	0x2001f264
 8011358:	2001f274 	.word	0x2001f274
 801135c:	2001f278 	.word	0x2001f278

08011360 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011360:	b580      	push	{r7, lr}
 8011362:	b086      	sub	sp, #24
 8011364:	af00      	add	r7, sp, #0
 8011366:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011368:	687b      	ldr	r3, [r7, #4]
 801136a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 801136c:	687b      	ldr	r3, [r7, #4]
 801136e:	2b00      	cmp	r3, #0
 8011370:	d04d      	beq.n	801140e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011372:	2308      	movs	r3, #8
 8011374:	425b      	negs	r3, r3
 8011376:	697a      	ldr	r2, [r7, #20]
 8011378:	4413      	add	r3, r2
 801137a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 801137c:	697b      	ldr	r3, [r7, #20]
 801137e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011380:	693b      	ldr	r3, [r7, #16]
 8011382:	685a      	ldr	r2, [r3, #4]
 8011384:	4b24      	ldr	r3, [pc, #144]	; (8011418 <vPortFree+0xb8>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	4013      	ands	r3, r2
 801138a:	2b00      	cmp	r3, #0
 801138c:	d10a      	bne.n	80113a4 <vPortFree+0x44>
	__asm volatile
 801138e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011392:	f383 8811 	msr	BASEPRI, r3
 8011396:	f3bf 8f6f 	isb	sy
 801139a:	f3bf 8f4f 	dsb	sy
 801139e:	60fb      	str	r3, [r7, #12]
}
 80113a0:	bf00      	nop
 80113a2:	e7fe      	b.n	80113a2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80113a4:	693b      	ldr	r3, [r7, #16]
 80113a6:	681b      	ldr	r3, [r3, #0]
 80113a8:	2b00      	cmp	r3, #0
 80113aa:	d00a      	beq.n	80113c2 <vPortFree+0x62>
	__asm volatile
 80113ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113b0:	f383 8811 	msr	BASEPRI, r3
 80113b4:	f3bf 8f6f 	isb	sy
 80113b8:	f3bf 8f4f 	dsb	sy
 80113bc:	60bb      	str	r3, [r7, #8]
}
 80113be:	bf00      	nop
 80113c0:	e7fe      	b.n	80113c0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80113c2:	693b      	ldr	r3, [r7, #16]
 80113c4:	685a      	ldr	r2, [r3, #4]
 80113c6:	4b14      	ldr	r3, [pc, #80]	; (8011418 <vPortFree+0xb8>)
 80113c8:	681b      	ldr	r3, [r3, #0]
 80113ca:	4013      	ands	r3, r2
 80113cc:	2b00      	cmp	r3, #0
 80113ce:	d01e      	beq.n	801140e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80113d0:	693b      	ldr	r3, [r7, #16]
 80113d2:	681b      	ldr	r3, [r3, #0]
 80113d4:	2b00      	cmp	r3, #0
 80113d6:	d11a      	bne.n	801140e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80113d8:	693b      	ldr	r3, [r7, #16]
 80113da:	685a      	ldr	r2, [r3, #4]
 80113dc:	4b0e      	ldr	r3, [pc, #56]	; (8011418 <vPortFree+0xb8>)
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	43db      	mvns	r3, r3
 80113e2:	401a      	ands	r2, r3
 80113e4:	693b      	ldr	r3, [r7, #16]
 80113e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80113e8:	f7fe fb90 	bl	800fb0c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80113ec:	693b      	ldr	r3, [r7, #16]
 80113ee:	685a      	ldr	r2, [r3, #4]
 80113f0:	4b0a      	ldr	r3, [pc, #40]	; (801141c <vPortFree+0xbc>)
 80113f2:	681b      	ldr	r3, [r3, #0]
 80113f4:	4413      	add	r3, r2
 80113f6:	4a09      	ldr	r2, [pc, #36]	; (801141c <vPortFree+0xbc>)
 80113f8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80113fa:	6938      	ldr	r0, [r7, #16]
 80113fc:	f000 f874 	bl	80114e8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8011400:	4b07      	ldr	r3, [pc, #28]	; (8011420 <vPortFree+0xc0>)
 8011402:	681b      	ldr	r3, [r3, #0]
 8011404:	3301      	adds	r3, #1
 8011406:	4a06      	ldr	r2, [pc, #24]	; (8011420 <vPortFree+0xc0>)
 8011408:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 801140a:	f7fe fb8d 	bl	800fb28 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 801140e:	bf00      	nop
 8011410:	3718      	adds	r7, #24
 8011412:	46bd      	mov	sp, r7
 8011414:	bd80      	pop	{r7, pc}
 8011416:	bf00      	nop
 8011418:	2001f280 	.word	0x2001f280
 801141c:	2001f270 	.word	0x2001f270
 8011420:	2001f27c 	.word	0x2001f27c

08011424 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011424:	b480      	push	{r7}
 8011426:	b085      	sub	sp, #20
 8011428:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801142a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 801142e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8011430:	4b27      	ldr	r3, [pc, #156]	; (80114d0 <prvHeapInit+0xac>)
 8011432:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	f003 0307 	and.w	r3, r3, #7
 801143a:	2b00      	cmp	r3, #0
 801143c:	d00c      	beq.n	8011458 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801143e:	68fb      	ldr	r3, [r7, #12]
 8011440:	3307      	adds	r3, #7
 8011442:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011444:	68fb      	ldr	r3, [r7, #12]
 8011446:	f023 0307 	bic.w	r3, r3, #7
 801144a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801144c:	68ba      	ldr	r2, [r7, #8]
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	1ad3      	subs	r3, r2, r3
 8011452:	4a1f      	ldr	r2, [pc, #124]	; (80114d0 <prvHeapInit+0xac>)
 8011454:	4413      	add	r3, r2
 8011456:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011458:	68fb      	ldr	r3, [r7, #12]
 801145a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801145c:	4a1d      	ldr	r2, [pc, #116]	; (80114d4 <prvHeapInit+0xb0>)
 801145e:	687b      	ldr	r3, [r7, #4]
 8011460:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011462:	4b1c      	ldr	r3, [pc, #112]	; (80114d4 <prvHeapInit+0xb0>)
 8011464:	2200      	movs	r2, #0
 8011466:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011468:	687b      	ldr	r3, [r7, #4]
 801146a:	68ba      	ldr	r2, [r7, #8]
 801146c:	4413      	add	r3, r2
 801146e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8011470:	2208      	movs	r2, #8
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	1a9b      	subs	r3, r3, r2
 8011476:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011478:	68fb      	ldr	r3, [r7, #12]
 801147a:	f023 0307 	bic.w	r3, r3, #7
 801147e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8011480:	68fb      	ldr	r3, [r7, #12]
 8011482:	4a15      	ldr	r2, [pc, #84]	; (80114d8 <prvHeapInit+0xb4>)
 8011484:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011486:	4b14      	ldr	r3, [pc, #80]	; (80114d8 <prvHeapInit+0xb4>)
 8011488:	681b      	ldr	r3, [r3, #0]
 801148a:	2200      	movs	r2, #0
 801148c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801148e:	4b12      	ldr	r3, [pc, #72]	; (80114d8 <prvHeapInit+0xb4>)
 8011490:	681b      	ldr	r3, [r3, #0]
 8011492:	2200      	movs	r2, #0
 8011494:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011496:	687b      	ldr	r3, [r7, #4]
 8011498:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 801149a:	683b      	ldr	r3, [r7, #0]
 801149c:	68fa      	ldr	r2, [r7, #12]
 801149e:	1ad2      	subs	r2, r2, r3
 80114a0:	683b      	ldr	r3, [r7, #0]
 80114a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80114a4:	4b0c      	ldr	r3, [pc, #48]	; (80114d8 <prvHeapInit+0xb4>)
 80114a6:	681a      	ldr	r2, [r3, #0]
 80114a8:	683b      	ldr	r3, [r7, #0]
 80114aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80114ac:	683b      	ldr	r3, [r7, #0]
 80114ae:	685b      	ldr	r3, [r3, #4]
 80114b0:	4a0a      	ldr	r2, [pc, #40]	; (80114dc <prvHeapInit+0xb8>)
 80114b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80114b4:	683b      	ldr	r3, [r7, #0]
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	4a09      	ldr	r2, [pc, #36]	; (80114e0 <prvHeapInit+0xbc>)
 80114ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80114bc:	4b09      	ldr	r3, [pc, #36]	; (80114e4 <prvHeapInit+0xc0>)
 80114be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80114c2:	601a      	str	r2, [r3, #0]
}
 80114c4:	bf00      	nop
 80114c6:	3714      	adds	r7, #20
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr
 80114d0:	2001b664 	.word	0x2001b664
 80114d4:	2001f264 	.word	0x2001f264
 80114d8:	2001f26c 	.word	0x2001f26c
 80114dc:	2001f274 	.word	0x2001f274
 80114e0:	2001f270 	.word	0x2001f270
 80114e4:	2001f280 	.word	0x2001f280

080114e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80114e8:	b480      	push	{r7}
 80114ea:	b085      	sub	sp, #20
 80114ec:	af00      	add	r7, sp, #0
 80114ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80114f0:	4b28      	ldr	r3, [pc, #160]	; (8011594 <prvInsertBlockIntoFreeList+0xac>)
 80114f2:	60fb      	str	r3, [r7, #12]
 80114f4:	e002      	b.n	80114fc <prvInsertBlockIntoFreeList+0x14>
 80114f6:	68fb      	ldr	r3, [r7, #12]
 80114f8:	681b      	ldr	r3, [r3, #0]
 80114fa:	60fb      	str	r3, [r7, #12]
 80114fc:	68fb      	ldr	r3, [r7, #12]
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	687a      	ldr	r2, [r7, #4]
 8011502:	429a      	cmp	r2, r3
 8011504:	d8f7      	bhi.n	80114f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 801150a:	68fb      	ldr	r3, [r7, #12]
 801150c:	685b      	ldr	r3, [r3, #4]
 801150e:	68ba      	ldr	r2, [r7, #8]
 8011510:	4413      	add	r3, r2
 8011512:	687a      	ldr	r2, [r7, #4]
 8011514:	429a      	cmp	r2, r3
 8011516:	d108      	bne.n	801152a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	685a      	ldr	r2, [r3, #4]
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	685b      	ldr	r3, [r3, #4]
 8011520:	441a      	add	r2, r3
 8011522:	68fb      	ldr	r3, [r7, #12]
 8011524:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801152a:	687b      	ldr	r3, [r7, #4]
 801152c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 801152e:	687b      	ldr	r3, [r7, #4]
 8011530:	685b      	ldr	r3, [r3, #4]
 8011532:	68ba      	ldr	r2, [r7, #8]
 8011534:	441a      	add	r2, r3
 8011536:	68fb      	ldr	r3, [r7, #12]
 8011538:	681b      	ldr	r3, [r3, #0]
 801153a:	429a      	cmp	r2, r3
 801153c:	d118      	bne.n	8011570 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 801153e:	68fb      	ldr	r3, [r7, #12]
 8011540:	681a      	ldr	r2, [r3, #0]
 8011542:	4b15      	ldr	r3, [pc, #84]	; (8011598 <prvInsertBlockIntoFreeList+0xb0>)
 8011544:	681b      	ldr	r3, [r3, #0]
 8011546:	429a      	cmp	r2, r3
 8011548:	d00d      	beq.n	8011566 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801154a:	687b      	ldr	r3, [r7, #4]
 801154c:	685a      	ldr	r2, [r3, #4]
 801154e:	68fb      	ldr	r3, [r7, #12]
 8011550:	681b      	ldr	r3, [r3, #0]
 8011552:	685b      	ldr	r3, [r3, #4]
 8011554:	441a      	add	r2, r3
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801155a:	68fb      	ldr	r3, [r7, #12]
 801155c:	681b      	ldr	r3, [r3, #0]
 801155e:	681a      	ldr	r2, [r3, #0]
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	601a      	str	r2, [r3, #0]
 8011564:	e008      	b.n	8011578 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8011566:	4b0c      	ldr	r3, [pc, #48]	; (8011598 <prvInsertBlockIntoFreeList+0xb0>)
 8011568:	681a      	ldr	r2, [r3, #0]
 801156a:	687b      	ldr	r3, [r7, #4]
 801156c:	601a      	str	r2, [r3, #0]
 801156e:	e003      	b.n	8011578 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011570:	68fb      	ldr	r3, [r7, #12]
 8011572:	681a      	ldr	r2, [r3, #0]
 8011574:	687b      	ldr	r3, [r7, #4]
 8011576:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8011578:	68fa      	ldr	r2, [r7, #12]
 801157a:	687b      	ldr	r3, [r7, #4]
 801157c:	429a      	cmp	r2, r3
 801157e:	d002      	beq.n	8011586 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011580:	68fb      	ldr	r3, [r7, #12]
 8011582:	687a      	ldr	r2, [r7, #4]
 8011584:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8011586:	bf00      	nop
 8011588:	3714      	adds	r7, #20
 801158a:	46bd      	mov	sp, r7
 801158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011590:	4770      	bx	lr
 8011592:	bf00      	nop
 8011594:	2001f264 	.word	0x2001f264
 8011598:	2001f26c 	.word	0x2001f26c

0801159c <_ZNSaIcEC1Ev>:
 801159c:	4770      	bx	lr

0801159e <_ZNSaIcED1Ev>:
 801159e:	4770      	bx	lr

080115a0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>:
 80115a0:	b10a      	cbz	r2, 80115a6 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0+0x6>
 80115a2:	f003 bec3 	b.w	801532c <memcpy>
 80115a6:	4770      	bx	lr

080115a8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>:
 80115a8:	b10a      	cbz	r2, 80115ae <_ZNSt11char_traitsIcE7compareEPKcS2_j+0x6>
 80115aa:	f003 be05 	b.w	80151b8 <memcmp>
 80115ae:	4610      	mov	r0, r2
 80115b0:	4770      	bx	lr
	...

080115b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>:
 80115b4:	b508      	push	{r3, lr}
 80115b6:	680b      	ldr	r3, [r1, #0]
 80115b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80115bc:	d302      	bcc.n	80115c4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x10>
 80115be:	480d      	ldr	r0, [pc, #52]	; (80115f4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x40>)
 80115c0:	f000 f9dc 	bl	801197c <_ZSt20__throw_length_errorPKc>
 80115c4:	4293      	cmp	r3, r2
 80115c6:	d90b      	bls.n	80115e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80115c8:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
 80115cc:	ea4f 0042 	mov.w	r0, r2, lsl #1
 80115d0:	d206      	bcs.n	80115e0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x2c>
 80115d2:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80115d6:	bf2a      	itet	cs
 80115d8:	f06f 4340 	mvncs.w	r3, #3221225472	; 0xc0000000
 80115dc:	6008      	strcc	r0, [r1, #0]
 80115de:	600b      	strcs	r3, [r1, #0]
 80115e0:	6808      	ldr	r0, [r1, #0]
 80115e2:	3001      	adds	r0, #1
 80115e4:	d501      	bpl.n	80115ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj+0x36>
 80115e6:	f000 f9c3 	bl	8011970 <_ZSt17__throw_bad_allocv>
 80115ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80115ee:	f000 b9ae 	b.w	801194e <_Znwj>
 80115f2:	bf00      	nop
 80115f4:	08016c2c 	.word	0x08016c2c

080115f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>:
 80115f8:	f850 3b08 	ldr.w	r3, [r0], #8
 80115fc:	4283      	cmp	r3, r0
 80115fe:	d002      	beq.n	8011606 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv+0xe>
 8011600:	4618      	mov	r0, r3
 8011602:	f000 b9a2 	b.w	801194a <_ZdlPv>
 8011606:	4770      	bx	lr

08011608 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>:
 8011608:	6840      	ldr	r0, [r0, #4]
 801160a:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 801160e:	3901      	subs	r1, #1
 8011610:	1a09      	subs	r1, r1, r0
 8011612:	4291      	cmp	r1, r2
 8011614:	b508      	push	{r3, lr}
 8011616:	d202      	bcs.n	801161e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc+0x16>
 8011618:	4618      	mov	r0, r3
 801161a:	f000 f9af 	bl	801197c <_ZSt20__throw_length_errorPKc>
 801161e:	bd08      	pop	{r3, pc}

08011620 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>:
 8011620:	6803      	ldr	r3, [r0, #0]
 8011622:	428b      	cmp	r3, r1
 8011624:	d806      	bhi.n	8011634 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc+0x14>
 8011626:	6842      	ldr	r2, [r0, #4]
 8011628:	4413      	add	r3, r2
 801162a:	4299      	cmp	r1, r3
 801162c:	bf94      	ite	ls
 801162e:	2000      	movls	r0, #0
 8011630:	2001      	movhi	r0, #1
 8011632:	4770      	bx	lr
 8011634:	2001      	movs	r0, #1
 8011636:	4770      	bx	lr

08011638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>:
 8011638:	2a01      	cmp	r2, #1
 801163a:	b410      	push	{r4}
 801163c:	d104      	bne.n	8011648 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj+0x10>
 801163e:	780a      	ldrb	r2, [r1, #0]
 8011640:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011644:	7002      	strb	r2, [r0, #0]
 8011646:	4770      	bx	lr
 8011648:	f85d 4b04 	ldr.w	r4, [sp], #4
 801164c:	f7ff bfa8 	b.w	80115a0 <_ZNSt11char_traitsIcE4copyEPcPKcj.isra.0>

08011650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>:
 8011650:	2a01      	cmp	r2, #1
 8011652:	b430      	push	{r4, r5}
 8011654:	d103      	bne.n	801165e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xe>
 8011656:	780b      	ldrb	r3, [r1, #0]
 8011658:	7003      	strb	r3, [r0, #0]
 801165a:	bc30      	pop	{r4, r5}
 801165c:	4770      	bx	lr
 801165e:	2a00      	cmp	r2, #0
 8011660:	d0fb      	beq.n	801165a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj+0xa>
 8011662:	bc30      	pop	{r4, r5}
 8011664:	f003 bdb8 	b.w	80151d8 <memmove>

08011668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>:
 8011668:	b508      	push	{r3, lr}
 801166a:	1a52      	subs	r2, r2, r1
 801166c:	f7ff ffe4 	bl	8011638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 8011670:	bd08      	pop	{r3, pc}

08011672 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>:
 8011672:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8011676:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8011678:	461f      	mov	r7, r3
 801167a:	6843      	ldr	r3, [r0, #4]
 801167c:	eb01 0802 	add.w	r8, r1, r2
 8011680:	1ab2      	subs	r2, r6, r2
 8011682:	441a      	add	r2, r3
 8011684:	eba3 0908 	sub.w	r9, r3, r8
 8011688:	4603      	mov	r3, r0
 801168a:	9201      	str	r2, [sp, #4]
 801168c:	f853 2b08 	ldr.w	r2, [r3], #8
 8011690:	429a      	cmp	r2, r3
 8011692:	bf18      	it	ne
 8011694:	6882      	ldrne	r2, [r0, #8]
 8011696:	460d      	mov	r5, r1
 8011698:	bf08      	it	eq
 801169a:	220f      	moveq	r2, #15
 801169c:	a901      	add	r1, sp, #4
 801169e:	4604      	mov	r4, r0
 80116a0:	f7ff ff88 	bl	80115b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80116a4:	4682      	mov	sl, r0
 80116a6:	b11d      	cbz	r5, 80116b0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x3e>
 80116a8:	6821      	ldr	r1, [r4, #0]
 80116aa:	462a      	mov	r2, r5
 80116ac:	f7ff ffc4 	bl	8011638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80116b0:	b137      	cbz	r7, 80116c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80116b2:	b12e      	cbz	r6, 80116c0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x4e>
 80116b4:	4632      	mov	r2, r6
 80116b6:	4639      	mov	r1, r7
 80116b8:	eb0a 0005 	add.w	r0, sl, r5
 80116bc:	f7ff ffbc 	bl	8011638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80116c0:	f1b9 0f00 	cmp.w	r9, #0
 80116c4:	d007      	beq.n	80116d6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj+0x64>
 80116c6:	6821      	ldr	r1, [r4, #0]
 80116c8:	4435      	add	r5, r6
 80116ca:	464a      	mov	r2, r9
 80116cc:	4441      	add	r1, r8
 80116ce:	eb0a 0005 	add.w	r0, sl, r5
 80116d2:	f7ff ffb1 	bl	8011638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80116d6:	4620      	mov	r0, r4
 80116d8:	f7ff ff8e 	bl	80115f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 80116dc:	9b01      	ldr	r3, [sp, #4]
 80116de:	f8c4 a000 	str.w	sl, [r4]
 80116e2:	60a3      	str	r3, [r4, #8]
 80116e4:	b002      	add	sp, #8
 80116e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080116ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>:
 80116ea:	b538      	push	{r3, r4, r5, lr}
 80116ec:	4604      	mov	r4, r0
 80116ee:	4615      	mov	r5, r2
 80116f0:	4608      	mov	r0, r1
 80116f2:	4411      	add	r1, r2
 80116f4:	6862      	ldr	r2, [r4, #4]
 80116f6:	1a52      	subs	r2, r2, r1
 80116f8:	d005      	beq.n	8011706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 80116fa:	b125      	cbz	r5, 8011706 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj+0x1c>
 80116fc:	6823      	ldr	r3, [r4, #0]
 80116fe:	4419      	add	r1, r3
 8011700:	4418      	add	r0, r3
 8011702:	f7ff ffa5 	bl	8011650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011706:	6863      	ldr	r3, [r4, #4]
 8011708:	6822      	ldr	r2, [r4, #0]
 801170a:	1b5b      	subs	r3, r3, r5
 801170c:	2100      	movs	r1, #0
 801170e:	6063      	str	r3, [r4, #4]
 8011710:	54d1      	strb	r1, [r2, r3]
 8011712:	bd38      	pop	{r3, r4, r5, pc}

08011714 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1Ev>:
 8011714:	f100 0208 	add.w	r2, r0, #8
 8011718:	6002      	str	r2, [r0, #0]
 801171a:	2200      	movs	r2, #0
 801171c:	6042      	str	r2, [r0, #4]
 801171e:	7202      	strb	r2, [r0, #8]
 8011720:	4770      	bx	lr

08011722 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEED1Ev>:
 8011722:	b510      	push	{r4, lr}
 8011724:	4604      	mov	r4, r0
 8011726:	f7ff ff67 	bl	80115f8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_disposeEv>
 801172a:	4620      	mov	r0, r4
 801172c:	bd10      	pop	{r4, pc}

0801172e <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6lengthEv>:
 801172e:	6840      	ldr	r0, [r0, #4]
 8011730:	4770      	bx	lr

08011732 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE4backEv>:
 8011732:	6843      	ldr	r3, [r0, #4]
 8011734:	6800      	ldr	r0, [r0, #0]
 8011736:	3b01      	subs	r3, #1
 8011738:	4418      	add	r0, r3
 801173a:	4770      	bx	lr

0801173c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc>:
 801173c:	4603      	mov	r3, r0
 801173e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8011740:	f853 2b08 	ldr.w	r2, [r3], #8
 8011744:	6846      	ldr	r6, [r0, #4]
 8011746:	429a      	cmp	r2, r3
 8011748:	bf18      	it	ne
 801174a:	6883      	ldrne	r3, [r0, #8]
 801174c:	f106 0501 	add.w	r5, r6, #1
 8011750:	bf08      	it	eq
 8011752:	230f      	moveq	r3, #15
 8011754:	429d      	cmp	r5, r3
 8011756:	4604      	mov	r4, r0
 8011758:	460f      	mov	r7, r1
 801175a:	d906      	bls.n	801176a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9push_backEc+0x2e>
 801175c:	2301      	movs	r3, #1
 801175e:	9300      	str	r3, [sp, #0]
 8011760:	2300      	movs	r3, #0
 8011762:	461a      	mov	r2, r3
 8011764:	4631      	mov	r1, r6
 8011766:	f7ff ff84 	bl	8011672 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 801176a:	6823      	ldr	r3, [r4, #0]
 801176c:	559f      	strb	r7, [r3, r6]
 801176e:	6823      	ldr	r3, [r4, #0]
 8011770:	6065      	str	r5, [r4, #4]
 8011772:	2200      	movs	r2, #0
 8011774:	555a      	strb	r2, [r3, r5]
 8011776:	b003      	add	sp, #12
 8011778:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801177a <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8pop_backEv>:
 801177a:	b508      	push	{r3, lr}
 801177c:	6841      	ldr	r1, [r0, #4]
 801177e:	2201      	movs	r2, #1
 8011780:	3901      	subs	r1, #1
 8011782:	f7ff ffb2 	bl	80116ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE8_M_eraseEjj>
 8011786:	bd08      	pop	{r3, pc}

08011788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>:
 8011788:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801178c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801178e:	4614      	mov	r4, r2
 8011790:	4680      	mov	r8, r0
 8011792:	462a      	mov	r2, r5
 8011794:	4689      	mov	r9, r1
 8011796:	461f      	mov	r7, r3
 8011798:	4621      	mov	r1, r4
 801179a:	4b39      	ldr	r3, [pc, #228]	; (8011880 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xf8>)
 801179c:	f7ff ff34 	bl	8011608 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE15_M_check_lengthEjjPKc>
 80117a0:	4642      	mov	r2, r8
 80117a2:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80117a6:	f852 6b08 	ldr.w	r6, [r2], #8
 80117aa:	4296      	cmp	r6, r2
 80117ac:	bf18      	it	ne
 80117ae:	f8d8 2008 	ldrne.w	r2, [r8, #8]
 80117b2:	eba5 0b04 	sub.w	fp, r5, r4
 80117b6:	eb03 0a0b 	add.w	sl, r3, fp
 80117ba:	bf08      	it	eq
 80117bc:	220f      	moveq	r2, #15
 80117be:	4552      	cmp	r2, sl
 80117c0:	d351      	bcc.n	8011866 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xde>
 80117c2:	444e      	add	r6, r9
 80117c4:	4639      	mov	r1, r7
 80117c6:	44a1      	add	r9, r4
 80117c8:	4640      	mov	r0, r8
 80117ca:	eba3 0909 	sub.w	r9, r3, r9
 80117ce:	f7ff ff27 	bl	8011620 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE11_M_disjunctEPKc>
 80117d2:	b180      	cbz	r0, 80117f6 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x6e>
 80117d4:	f1b9 0f00 	cmp.w	r9, #0
 80117d8:	d006      	beq.n	80117e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80117da:	42ac      	cmp	r4, r5
 80117dc:	d004      	beq.n	80117e8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x60>
 80117de:	464a      	mov	r2, r9
 80117e0:	1931      	adds	r1, r6, r4
 80117e2:	1970      	adds	r0, r6, r5
 80117e4:	f7ff ff34 	bl	8011650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 80117e8:	b315      	cbz	r5, 8011830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80117ea:	462a      	mov	r2, r5
 80117ec:	4639      	mov	r1, r7
 80117ee:	4630      	mov	r0, r6
 80117f0:	f7ff ff22 	bl	8011638 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_copyEPcPKcj>
 80117f4:	e01c      	b.n	8011830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 80117f6:	b135      	cbz	r5, 8011806 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x7e>
 80117f8:	42ac      	cmp	r4, r5
 80117fa:	d33c      	bcc.n	8011876 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xee>
 80117fc:	462a      	mov	r2, r5
 80117fe:	4639      	mov	r1, r7
 8011800:	4630      	mov	r0, r6
 8011802:	f7ff ff25 	bl	8011650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011806:	f1b9 0f00 	cmp.w	r9, #0
 801180a:	d011      	beq.n	8011830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801180c:	42ac      	cmp	r4, r5
 801180e:	d00f      	beq.n	8011830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8011810:	464a      	mov	r2, r9
 8011812:	1931      	adds	r1, r6, r4
 8011814:	1970      	adds	r0, r6, r5
 8011816:	f7ff ff1b 	bl	8011650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801181a:	42ac      	cmp	r4, r5
 801181c:	d208      	bcs.n	8011830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 801181e:	4434      	add	r4, r6
 8011820:	197b      	adds	r3, r7, r5
 8011822:	429c      	cmp	r4, r3
 8011824:	d30f      	bcc.n	8011846 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xbe>
 8011826:	462a      	mov	r2, r5
 8011828:	4639      	mov	r1, r7
 801182a:	4630      	mov	r0, r6
 801182c:	f7ff ff10 	bl	8011650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 8011830:	f8d8 3000 	ldr.w	r3, [r8]
 8011834:	f8c8 a004 	str.w	sl, [r8, #4]
 8011838:	2200      	movs	r2, #0
 801183a:	4640      	mov	r0, r8
 801183c:	f803 200a 	strb.w	r2, [r3, sl]
 8011840:	b003      	add	sp, #12
 8011842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011846:	42bc      	cmp	r4, r7
 8011848:	d803      	bhi.n	8011852 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xca>
 801184a:	462a      	mov	r2, r5
 801184c:	eb07 010b 	add.w	r1, r7, fp
 8011850:	e7cd      	b.n	80117ee <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x66>
 8011852:	1be4      	subs	r4, r4, r7
 8011854:	4622      	mov	r2, r4
 8011856:	4639      	mov	r1, r7
 8011858:	4630      	mov	r0, r6
 801185a:	f7ff fef9 	bl	8011650 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7_S_moveEPcPKcj>
 801185e:	1b2a      	subs	r2, r5, r4
 8011860:	1971      	adds	r1, r6, r5
 8011862:	1930      	adds	r0, r6, r4
 8011864:	e7c4      	b.n	80117f0 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x68>
 8011866:	9500      	str	r5, [sp, #0]
 8011868:	463b      	mov	r3, r7
 801186a:	4622      	mov	r2, r4
 801186c:	4649      	mov	r1, r9
 801186e:	4640      	mov	r0, r8
 8011870:	f7ff feff 	bl	8011672 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_mutateEjjPKcj>
 8011874:	e7dc      	b.n	8011830 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0xa8>
 8011876:	f1b9 0f00 	cmp.w	r9, #0
 801187a:	d0d0      	beq.n	801181e <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x96>
 801187c:	e7c8      	b.n	8011810 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj+0x88>
 801187e:	bf00      	nop
 8011880:	08016c44 	.word	0x08016c44

08011884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>:
 8011884:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011886:	4604      	mov	r4, r0
 8011888:	4608      	mov	r0, r1
 801188a:	9103      	str	r1, [sp, #12]
 801188c:	f7ee fd10 	bl	80002b0 <strlen>
 8011890:	9b03      	ldr	r3, [sp, #12]
 8011892:	9000      	str	r0, [sp, #0]
 8011894:	6862      	ldr	r2, [r4, #4]
 8011896:	2100      	movs	r1, #0
 8011898:	4620      	mov	r0, r4
 801189a:	f7ff ff75 	bl	8011788 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE10_M_replaceEjjPKcj>
 801189e:	b004      	add	sp, #16
 80118a0:	bd10      	pop	{r4, pc}

080118a2 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEaSEPKc>:
 80118a2:	b508      	push	{r3, lr}
 80118a4:	f7ff ffee 	bl	8011884 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE6assignEPKc>
 80118a8:	bd08      	pop	{r3, pc}

080118aa <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE5c_strEv>:
 80118aa:	6800      	ldr	r0, [r0, #0]
 80118ac:	4770      	bx	lr

080118ae <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc>:
 80118ae:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80118b0:	6846      	ldr	r6, [r0, #4]
 80118b2:	9101      	str	r1, [sp, #4]
 80118b4:	4605      	mov	r5, r0
 80118b6:	4608      	mov	r0, r1
 80118b8:	f7ee fcfa 	bl	80002b0 <strlen>
 80118bc:	4286      	cmp	r6, r0
 80118be:	4604      	mov	r4, r0
 80118c0:	4632      	mov	r2, r6
 80118c2:	9901      	ldr	r1, [sp, #4]
 80118c4:	bf28      	it	cs
 80118c6:	4602      	movcs	r2, r0
 80118c8:	6828      	ldr	r0, [r5, #0]
 80118ca:	f7ff fe6d 	bl	80115a8 <_ZNSt11char_traitsIcE7compareEPKcS2_j>
 80118ce:	b900      	cbnz	r0, 80118d2 <_ZNKSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE7compareEPKc+0x24>
 80118d0:	1b30      	subs	r0, r6, r4
 80118d2:	b002      	add	sp, #8
 80118d4:	bd70      	pop	{r4, r5, r6, pc}
	...

080118d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>:
 80118d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80118da:	4604      	mov	r4, r0
 80118dc:	4616      	mov	r6, r2
 80118de:	460d      	mov	r5, r1
 80118e0:	b919      	cbnz	r1, 80118ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80118e2:	b112      	cbz	r2, 80118ea <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x12>
 80118e4:	480d      	ldr	r0, [pc, #52]	; (801191c <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x44>)
 80118e6:	f000 f846 	bl	8011976 <_ZSt19__throw_logic_errorPKc>
 80118ea:	1b73      	subs	r3, r6, r5
 80118ec:	2b0f      	cmp	r3, #15
 80118ee:	9301      	str	r3, [sp, #4]
 80118f0:	d907      	bls.n	8011902 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag+0x2a>
 80118f2:	2200      	movs	r2, #0
 80118f4:	a901      	add	r1, sp, #4
 80118f6:	4620      	mov	r0, r4
 80118f8:	f7ff fe5c 	bl	80115b4 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE9_M_createERjj>
 80118fc:	9b01      	ldr	r3, [sp, #4]
 80118fe:	6020      	str	r0, [r4, #0]
 8011900:	60a3      	str	r3, [r4, #8]
 8011902:	4632      	mov	r2, r6
 8011904:	4629      	mov	r1, r5
 8011906:	6820      	ldr	r0, [r4, #0]
 8011908:	f7ff feae 	bl	8011668 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE13_S_copy_charsEPcPKcS7_>
 801190c:	9b01      	ldr	r3, [sp, #4]
 801190e:	6822      	ldr	r2, [r4, #0]
 8011910:	6063      	str	r3, [r4, #4]
 8011912:	2100      	movs	r1, #0
 8011914:	54d1      	strb	r1, [r2, r3]
 8011916:	b002      	add	sp, #8
 8011918:	bd70      	pop	{r4, r5, r6, pc}
 801191a:	bf00      	nop
 801191c:	08016c5d 	.word	0x08016c5d

08011920 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_>:
 8011920:	b538      	push	{r3, r4, r5, lr}
 8011922:	f100 0308 	add.w	r3, r0, #8
 8011926:	4604      	mov	r4, r0
 8011928:	6003      	str	r3, [r0, #0]
 801192a:	460d      	mov	r5, r1
 801192c:	b159      	cbz	r1, 8011946 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x26>
 801192e:	4608      	mov	r0, r1
 8011930:	f7ee fcbe 	bl	80002b0 <strlen>
 8011934:	182a      	adds	r2, r5, r0
 8011936:	4620      	mov	r0, r4
 8011938:	f04f 0300 	mov.w	r3, #0
 801193c:	4629      	mov	r1, r5
 801193e:	f7ff ffcb 	bl	80118d8 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEE12_M_constructIPKcEEvT_S8_St20forward_iterator_tag>
 8011942:	4620      	mov	r0, r4
 8011944:	bd38      	pop	{r3, r4, r5, pc}
 8011946:	2201      	movs	r2, #1
 8011948:	e7f5      	b.n	8011936 <_ZNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEC1EPKcRKS3_+0x16>

0801194a <_ZdlPv>:
 801194a:	f003 bb1f 	b.w	8014f8c <free>

0801194e <_Znwj>:
 801194e:	2801      	cmp	r0, #1
 8011950:	bf38      	it	cc
 8011952:	2001      	movcc	r0, #1
 8011954:	b510      	push	{r4, lr}
 8011956:	4604      	mov	r4, r0
 8011958:	4620      	mov	r0, r4
 801195a:	f003 fb0f 	bl	8014f7c <malloc>
 801195e:	b100      	cbz	r0, 8011962 <_Znwj+0x14>
 8011960:	bd10      	pop	{r4, pc}
 8011962:	f000 f80f 	bl	8011984 <_ZSt15get_new_handlerv>
 8011966:	b908      	cbnz	r0, 801196c <_Znwj+0x1e>
 8011968:	f003 fae6 	bl	8014f38 <abort>
 801196c:	4780      	blx	r0
 801196e:	e7f3      	b.n	8011958 <_Znwj+0xa>

08011970 <_ZSt17__throw_bad_allocv>:
 8011970:	b508      	push	{r3, lr}
 8011972:	f003 fae1 	bl	8014f38 <abort>

08011976 <_ZSt19__throw_logic_errorPKc>:
 8011976:	b508      	push	{r3, lr}
 8011978:	f003 fade 	bl	8014f38 <abort>

0801197c <_ZSt20__throw_length_errorPKc>:
 801197c:	b508      	push	{r3, lr}
 801197e:	f003 fadb 	bl	8014f38 <abort>
	...

08011984 <_ZSt15get_new_handlerv>:
 8011984:	4b02      	ldr	r3, [pc, #8]	; (8011990 <_ZSt15get_new_handlerv+0xc>)
 8011986:	6818      	ldr	r0, [r3, #0]
 8011988:	f3bf 8f5b 	dmb	ish
 801198c:	4770      	bx	lr
 801198e:	bf00      	nop
 8011990:	2001f284 	.word	0x2001f284

08011994 <pow>:
 8011994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011996:	ed2d 8b02 	vpush	{d8}
 801199a:	eeb0 8a40 	vmov.f32	s16, s0
 801199e:	eef0 8a60 	vmov.f32	s17, s1
 80119a2:	ec55 4b11 	vmov	r4, r5, d1
 80119a6:	f000 fdc7 	bl	8012538 <__ieee754_pow>
 80119aa:	4622      	mov	r2, r4
 80119ac:	462b      	mov	r3, r5
 80119ae:	4620      	mov	r0, r4
 80119b0:	4629      	mov	r1, r5
 80119b2:	ec57 6b10 	vmov	r6, r7, d0
 80119b6:	f7ef f8d9 	bl	8000b6c <__aeabi_dcmpun>
 80119ba:	2800      	cmp	r0, #0
 80119bc:	d13b      	bne.n	8011a36 <pow+0xa2>
 80119be:	ec51 0b18 	vmov	r0, r1, d8
 80119c2:	2200      	movs	r2, #0
 80119c4:	2300      	movs	r3, #0
 80119c6:	f7ef f89f 	bl	8000b08 <__aeabi_dcmpeq>
 80119ca:	b1b8      	cbz	r0, 80119fc <pow+0x68>
 80119cc:	2200      	movs	r2, #0
 80119ce:	2300      	movs	r3, #0
 80119d0:	4620      	mov	r0, r4
 80119d2:	4629      	mov	r1, r5
 80119d4:	f7ef f898 	bl	8000b08 <__aeabi_dcmpeq>
 80119d8:	2800      	cmp	r0, #0
 80119da:	d146      	bne.n	8011a6a <pow+0xd6>
 80119dc:	ec45 4b10 	vmov	d0, r4, r5
 80119e0:	f000 fac6 	bl	8011f70 <finite>
 80119e4:	b338      	cbz	r0, 8011a36 <pow+0xa2>
 80119e6:	2200      	movs	r2, #0
 80119e8:	2300      	movs	r3, #0
 80119ea:	4620      	mov	r0, r4
 80119ec:	4629      	mov	r1, r5
 80119ee:	f7ef f895 	bl	8000b1c <__aeabi_dcmplt>
 80119f2:	b300      	cbz	r0, 8011a36 <pow+0xa2>
 80119f4:	f003 fc66 	bl	80152c4 <__errno>
 80119f8:	2322      	movs	r3, #34	; 0x22
 80119fa:	e01b      	b.n	8011a34 <pow+0xa0>
 80119fc:	ec47 6b10 	vmov	d0, r6, r7
 8011a00:	f000 fab6 	bl	8011f70 <finite>
 8011a04:	b9e0      	cbnz	r0, 8011a40 <pow+0xac>
 8011a06:	eeb0 0a48 	vmov.f32	s0, s16
 8011a0a:	eef0 0a68 	vmov.f32	s1, s17
 8011a0e:	f000 faaf 	bl	8011f70 <finite>
 8011a12:	b1a8      	cbz	r0, 8011a40 <pow+0xac>
 8011a14:	ec45 4b10 	vmov	d0, r4, r5
 8011a18:	f000 faaa 	bl	8011f70 <finite>
 8011a1c:	b180      	cbz	r0, 8011a40 <pow+0xac>
 8011a1e:	4632      	mov	r2, r6
 8011a20:	463b      	mov	r3, r7
 8011a22:	4630      	mov	r0, r6
 8011a24:	4639      	mov	r1, r7
 8011a26:	f7ef f8a1 	bl	8000b6c <__aeabi_dcmpun>
 8011a2a:	2800      	cmp	r0, #0
 8011a2c:	d0e2      	beq.n	80119f4 <pow+0x60>
 8011a2e:	f003 fc49 	bl	80152c4 <__errno>
 8011a32:	2321      	movs	r3, #33	; 0x21
 8011a34:	6003      	str	r3, [r0, #0]
 8011a36:	ecbd 8b02 	vpop	{d8}
 8011a3a:	ec47 6b10 	vmov	d0, r6, r7
 8011a3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011a40:	2200      	movs	r2, #0
 8011a42:	2300      	movs	r3, #0
 8011a44:	4630      	mov	r0, r6
 8011a46:	4639      	mov	r1, r7
 8011a48:	f7ef f85e 	bl	8000b08 <__aeabi_dcmpeq>
 8011a4c:	2800      	cmp	r0, #0
 8011a4e:	d0f2      	beq.n	8011a36 <pow+0xa2>
 8011a50:	eeb0 0a48 	vmov.f32	s0, s16
 8011a54:	eef0 0a68 	vmov.f32	s1, s17
 8011a58:	f000 fa8a 	bl	8011f70 <finite>
 8011a5c:	2800      	cmp	r0, #0
 8011a5e:	d0ea      	beq.n	8011a36 <pow+0xa2>
 8011a60:	ec45 4b10 	vmov	d0, r4, r5
 8011a64:	f000 fa84 	bl	8011f70 <finite>
 8011a68:	e7c3      	b.n	80119f2 <pow+0x5e>
 8011a6a:	4f01      	ldr	r7, [pc, #4]	; (8011a70 <pow+0xdc>)
 8011a6c:	2600      	movs	r6, #0
 8011a6e:	e7e2      	b.n	8011a36 <pow+0xa2>
 8011a70:	3ff00000 	.word	0x3ff00000

08011a74 <sqrt>:
 8011a74:	b538      	push	{r3, r4, r5, lr}
 8011a76:	ed2d 8b02 	vpush	{d8}
 8011a7a:	ec55 4b10 	vmov	r4, r5, d0
 8011a7e:	f000 fa8f 	bl	8011fa0 <__ieee754_sqrt>
 8011a82:	4622      	mov	r2, r4
 8011a84:	462b      	mov	r3, r5
 8011a86:	4620      	mov	r0, r4
 8011a88:	4629      	mov	r1, r5
 8011a8a:	eeb0 8a40 	vmov.f32	s16, s0
 8011a8e:	eef0 8a60 	vmov.f32	s17, s1
 8011a92:	f7ef f86b 	bl	8000b6c <__aeabi_dcmpun>
 8011a96:	b990      	cbnz	r0, 8011abe <sqrt+0x4a>
 8011a98:	2200      	movs	r2, #0
 8011a9a:	2300      	movs	r3, #0
 8011a9c:	4620      	mov	r0, r4
 8011a9e:	4629      	mov	r1, r5
 8011aa0:	f7ef f83c 	bl	8000b1c <__aeabi_dcmplt>
 8011aa4:	b158      	cbz	r0, 8011abe <sqrt+0x4a>
 8011aa6:	f003 fc0d 	bl	80152c4 <__errno>
 8011aaa:	2321      	movs	r3, #33	; 0x21
 8011aac:	6003      	str	r3, [r0, #0]
 8011aae:	2200      	movs	r2, #0
 8011ab0:	2300      	movs	r3, #0
 8011ab2:	4610      	mov	r0, r2
 8011ab4:	4619      	mov	r1, r3
 8011ab6:	f7ee fee9 	bl	800088c <__aeabi_ddiv>
 8011aba:	ec41 0b18 	vmov	d8, r0, r1
 8011abe:	eeb0 0a48 	vmov.f32	s0, s16
 8011ac2:	eef0 0a68 	vmov.f32	s1, s17
 8011ac6:	ecbd 8b02 	vpop	{d8}
 8011aca:	bd38      	pop	{r3, r4, r5, pc}
 8011acc:	0000      	movs	r0, r0
	...

08011ad0 <sin>:
 8011ad0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8011ad2:	ec53 2b10 	vmov	r2, r3, d0
 8011ad6:	4828      	ldr	r0, [pc, #160]	; (8011b78 <sin+0xa8>)
 8011ad8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8011adc:	4281      	cmp	r1, r0
 8011ade:	dc07      	bgt.n	8011af0 <sin+0x20>
 8011ae0:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8011b70 <sin+0xa0>
 8011ae4:	2000      	movs	r0, #0
 8011ae6:	b005      	add	sp, #20
 8011ae8:	f85d eb04 	ldr.w	lr, [sp], #4
 8011aec:	f000 bc64 	b.w	80123b8 <__kernel_sin>
 8011af0:	4822      	ldr	r0, [pc, #136]	; (8011b7c <sin+0xac>)
 8011af2:	4281      	cmp	r1, r0
 8011af4:	dd09      	ble.n	8011b0a <sin+0x3a>
 8011af6:	ee10 0a10 	vmov	r0, s0
 8011afa:	4619      	mov	r1, r3
 8011afc:	f7ee fbe4 	bl	80002c8 <__aeabi_dsub>
 8011b00:	ec41 0b10 	vmov	d0, r0, r1
 8011b04:	b005      	add	sp, #20
 8011b06:	f85d fb04 	ldr.w	pc, [sp], #4
 8011b0a:	4668      	mov	r0, sp
 8011b0c:	f001 fa40 	bl	8012f90 <__ieee754_rem_pio2>
 8011b10:	f000 0003 	and.w	r0, r0, #3
 8011b14:	2801      	cmp	r0, #1
 8011b16:	d00c      	beq.n	8011b32 <sin+0x62>
 8011b18:	2802      	cmp	r0, #2
 8011b1a:	d011      	beq.n	8011b40 <sin+0x70>
 8011b1c:	b9f0      	cbnz	r0, 8011b5c <sin+0x8c>
 8011b1e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b22:	ed9d 0b00 	vldr	d0, [sp]
 8011b26:	2001      	movs	r0, #1
 8011b28:	f000 fc46 	bl	80123b8 <__kernel_sin>
 8011b2c:	ec51 0b10 	vmov	r0, r1, d0
 8011b30:	e7e6      	b.n	8011b00 <sin+0x30>
 8011b32:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b36:	ed9d 0b00 	vldr	d0, [sp]
 8011b3a:	f000 fb75 	bl	8012228 <__kernel_cos>
 8011b3e:	e7f5      	b.n	8011b2c <sin+0x5c>
 8011b40:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b44:	ed9d 0b00 	vldr	d0, [sp]
 8011b48:	2001      	movs	r0, #1
 8011b4a:	f000 fc35 	bl	80123b8 <__kernel_sin>
 8011b4e:	ec53 2b10 	vmov	r2, r3, d0
 8011b52:	ee10 0a10 	vmov	r0, s0
 8011b56:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8011b5a:	e7d1      	b.n	8011b00 <sin+0x30>
 8011b5c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8011b60:	ed9d 0b00 	vldr	d0, [sp]
 8011b64:	f000 fb60 	bl	8012228 <__kernel_cos>
 8011b68:	e7f1      	b.n	8011b4e <sin+0x7e>
 8011b6a:	bf00      	nop
 8011b6c:	f3af 8000 	nop.w
	...
 8011b78:	3fe921fb 	.word	0x3fe921fb
 8011b7c:	7fefffff 	.word	0x7fefffff

08011b80 <expf>:
 8011b80:	b508      	push	{r3, lr}
 8011b82:	ed2d 8b02 	vpush	{d8}
 8011b86:	eef0 8a40 	vmov.f32	s17, s0
 8011b8a:	f001 fd97 	bl	80136bc <__ieee754_expf>
 8011b8e:	eeb0 8a40 	vmov.f32	s16, s0
 8011b92:	eeb0 0a68 	vmov.f32	s0, s17
 8011b96:	f000 f9f6 	bl	8011f86 <finitef>
 8011b9a:	b160      	cbz	r0, 8011bb6 <expf+0x36>
 8011b9c:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8011bdc <expf+0x5c>
 8011ba0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011ba4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011ba8:	dd0a      	ble.n	8011bc0 <expf+0x40>
 8011baa:	f003 fb8b 	bl	80152c4 <__errno>
 8011bae:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8011be0 <expf+0x60>
 8011bb2:	2322      	movs	r3, #34	; 0x22
 8011bb4:	6003      	str	r3, [r0, #0]
 8011bb6:	eeb0 0a48 	vmov.f32	s0, s16
 8011bba:	ecbd 8b02 	vpop	{d8}
 8011bbe:	bd08      	pop	{r3, pc}
 8011bc0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8011be4 <expf+0x64>
 8011bc4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8011bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011bcc:	d5f3      	bpl.n	8011bb6 <expf+0x36>
 8011bce:	f003 fb79 	bl	80152c4 <__errno>
 8011bd2:	2322      	movs	r3, #34	; 0x22
 8011bd4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8011be8 <expf+0x68>
 8011bd8:	6003      	str	r3, [r0, #0]
 8011bda:	e7ec      	b.n	8011bb6 <expf+0x36>
 8011bdc:	42b17217 	.word	0x42b17217
 8011be0:	7f800000 	.word	0x7f800000
 8011be4:	c2cff1b5 	.word	0xc2cff1b5
 8011be8:	00000000 	.word	0x00000000

08011bec <powf>:
 8011bec:	b508      	push	{r3, lr}
 8011bee:	ed2d 8b04 	vpush	{d8-d9}
 8011bf2:	eeb0 8a60 	vmov.f32	s16, s1
 8011bf6:	eeb0 9a40 	vmov.f32	s18, s0
 8011bfa:	f001 fe2d 	bl	8013858 <__ieee754_powf>
 8011bfe:	eeb4 8a48 	vcmp.f32	s16, s16
 8011c02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c06:	eef0 8a40 	vmov.f32	s17, s0
 8011c0a:	d63e      	bvs.n	8011c8a <powf+0x9e>
 8011c0c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8011c10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c14:	d112      	bne.n	8011c3c <powf+0x50>
 8011c16:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8011c1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c1e:	d039      	beq.n	8011c94 <powf+0xa8>
 8011c20:	eeb0 0a48 	vmov.f32	s0, s16
 8011c24:	f000 f9af 	bl	8011f86 <finitef>
 8011c28:	b378      	cbz	r0, 8011c8a <powf+0x9e>
 8011c2a:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c32:	d52a      	bpl.n	8011c8a <powf+0x9e>
 8011c34:	f003 fb46 	bl	80152c4 <__errno>
 8011c38:	2322      	movs	r3, #34	; 0x22
 8011c3a:	e014      	b.n	8011c66 <powf+0x7a>
 8011c3c:	f000 f9a3 	bl	8011f86 <finitef>
 8011c40:	b998      	cbnz	r0, 8011c6a <powf+0x7e>
 8011c42:	eeb0 0a49 	vmov.f32	s0, s18
 8011c46:	f000 f99e 	bl	8011f86 <finitef>
 8011c4a:	b170      	cbz	r0, 8011c6a <powf+0x7e>
 8011c4c:	eeb0 0a48 	vmov.f32	s0, s16
 8011c50:	f000 f999 	bl	8011f86 <finitef>
 8011c54:	b148      	cbz	r0, 8011c6a <powf+0x7e>
 8011c56:	eef4 8a68 	vcmp.f32	s17, s17
 8011c5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c5e:	d7e9      	bvc.n	8011c34 <powf+0x48>
 8011c60:	f003 fb30 	bl	80152c4 <__errno>
 8011c64:	2321      	movs	r3, #33	; 0x21
 8011c66:	6003      	str	r3, [r0, #0]
 8011c68:	e00f      	b.n	8011c8a <powf+0x9e>
 8011c6a:	eef5 8a40 	vcmp.f32	s17, #0.0
 8011c6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011c72:	d10a      	bne.n	8011c8a <powf+0x9e>
 8011c74:	eeb0 0a49 	vmov.f32	s0, s18
 8011c78:	f000 f985 	bl	8011f86 <finitef>
 8011c7c:	b128      	cbz	r0, 8011c8a <powf+0x9e>
 8011c7e:	eeb0 0a48 	vmov.f32	s0, s16
 8011c82:	f000 f980 	bl	8011f86 <finitef>
 8011c86:	2800      	cmp	r0, #0
 8011c88:	d1d4      	bne.n	8011c34 <powf+0x48>
 8011c8a:	eeb0 0a68 	vmov.f32	s0, s17
 8011c8e:	ecbd 8b04 	vpop	{d8-d9}
 8011c92:	bd08      	pop	{r3, pc}
 8011c94:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 8011c98:	e7f7      	b.n	8011c8a <powf+0x9e>
	...

08011c9c <sqrtf>:
 8011c9c:	b508      	push	{r3, lr}
 8011c9e:	ed2d 8b02 	vpush	{d8}
 8011ca2:	eeb0 8a40 	vmov.f32	s16, s0
 8011ca6:	f000 fa55 	bl	8012154 <__ieee754_sqrtf>
 8011caa:	eeb4 8a48 	vcmp.f32	s16, s16
 8011cae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cb2:	d60c      	bvs.n	8011cce <sqrtf+0x32>
 8011cb4:	eddf 8a07 	vldr	s17, [pc, #28]	; 8011cd4 <sqrtf+0x38>
 8011cb8:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8011cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011cc0:	d505      	bpl.n	8011cce <sqrtf+0x32>
 8011cc2:	f003 faff 	bl	80152c4 <__errno>
 8011cc6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8011cca:	2321      	movs	r3, #33	; 0x21
 8011ccc:	6003      	str	r3, [r0, #0]
 8011cce:	ecbd 8b02 	vpop	{d8}
 8011cd2:	bd08      	pop	{r3, pc}
 8011cd4:	00000000 	.word	0x00000000

08011cd8 <atanf>:
 8011cd8:	b538      	push	{r3, r4, r5, lr}
 8011cda:	ee10 5a10 	vmov	r5, s0
 8011cde:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 8011ce2:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 8011ce6:	eef0 7a40 	vmov.f32	s15, s0
 8011cea:	db10      	blt.n	8011d0e <atanf+0x36>
 8011cec:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 8011cf0:	dd04      	ble.n	8011cfc <atanf+0x24>
 8011cf2:	ee70 7a00 	vadd.f32	s15, s0, s0
 8011cf6:	eeb0 0a67 	vmov.f32	s0, s15
 8011cfa:	bd38      	pop	{r3, r4, r5, pc}
 8011cfc:	eddf 7a4d 	vldr	s15, [pc, #308]	; 8011e34 <atanf+0x15c>
 8011d00:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 8011e38 <atanf+0x160>
 8011d04:	2d00      	cmp	r5, #0
 8011d06:	bfd8      	it	le
 8011d08:	eef0 7a47 	vmovle.f32	s15, s14
 8011d0c:	e7f3      	b.n	8011cf6 <atanf+0x1e>
 8011d0e:	4b4b      	ldr	r3, [pc, #300]	; (8011e3c <atanf+0x164>)
 8011d10:	429c      	cmp	r4, r3
 8011d12:	dc10      	bgt.n	8011d36 <atanf+0x5e>
 8011d14:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 8011d18:	da0a      	bge.n	8011d30 <atanf+0x58>
 8011d1a:	ed9f 7a49 	vldr	s14, [pc, #292]	; 8011e40 <atanf+0x168>
 8011d1e:	ee30 7a07 	vadd.f32	s14, s0, s14
 8011d22:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8011d26:	eeb4 7ae6 	vcmpe.f32	s14, s13
 8011d2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011d2e:	dce2      	bgt.n	8011cf6 <atanf+0x1e>
 8011d30:	f04f 33ff 	mov.w	r3, #4294967295
 8011d34:	e013      	b.n	8011d5e <atanf+0x86>
 8011d36:	f000 f8e7 	bl	8011f08 <fabsf>
 8011d3a:	4b42      	ldr	r3, [pc, #264]	; (8011e44 <atanf+0x16c>)
 8011d3c:	429c      	cmp	r4, r3
 8011d3e:	dc4f      	bgt.n	8011de0 <atanf+0x108>
 8011d40:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 8011d44:	429c      	cmp	r4, r3
 8011d46:	dc41      	bgt.n	8011dcc <atanf+0xf4>
 8011d48:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 8011d4c:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011d50:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011d54:	2300      	movs	r3, #0
 8011d56:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011d5a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011d5e:	1c5a      	adds	r2, r3, #1
 8011d60:	ee27 6aa7 	vmul.f32	s12, s15, s15
 8011d64:	ed9f 7a38 	vldr	s14, [pc, #224]	; 8011e48 <atanf+0x170>
 8011d68:	eddf 5a38 	vldr	s11, [pc, #224]	; 8011e4c <atanf+0x174>
 8011d6c:	ed9f 5a38 	vldr	s10, [pc, #224]	; 8011e50 <atanf+0x178>
 8011d70:	ee66 6a06 	vmul.f32	s13, s12, s12
 8011d74:	eee6 5a87 	vfma.f32	s11, s13, s14
 8011d78:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8011e54 <atanf+0x17c>
 8011d7c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011d80:	eddf 5a35 	vldr	s11, [pc, #212]	; 8011e58 <atanf+0x180>
 8011d84:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011d88:	ed9f 7a34 	vldr	s14, [pc, #208]	; 8011e5c <atanf+0x184>
 8011d8c:	eea5 7aa6 	vfma.f32	s14, s11, s13
 8011d90:	eddf 5a33 	vldr	s11, [pc, #204]	; 8011e60 <atanf+0x188>
 8011d94:	eee7 5a26 	vfma.f32	s11, s14, s13
 8011d98:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8011e64 <atanf+0x18c>
 8011d9c:	eea6 5a87 	vfma.f32	s10, s13, s14
 8011da0:	ed9f 7a31 	vldr	s14, [pc, #196]	; 8011e68 <atanf+0x190>
 8011da4:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011da8:	ed9f 5a30 	vldr	s10, [pc, #192]	; 8011e6c <atanf+0x194>
 8011dac:	eea7 5a26 	vfma.f32	s10, s14, s13
 8011db0:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8011e70 <atanf+0x198>
 8011db4:	eea5 7a26 	vfma.f32	s14, s10, s13
 8011db8:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011dbc:	eea5 7a86 	vfma.f32	s14, s11, s12
 8011dc0:	ee27 7a87 	vmul.f32	s14, s15, s14
 8011dc4:	d121      	bne.n	8011e0a <atanf+0x132>
 8011dc6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011dca:	e794      	b.n	8011cf6 <atanf+0x1e>
 8011dcc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8011dd0:	ee30 7a67 	vsub.f32	s14, s0, s15
 8011dd4:	ee30 0a27 	vadd.f32	s0, s0, s15
 8011dd8:	2301      	movs	r3, #1
 8011dda:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011dde:	e7be      	b.n	8011d5e <atanf+0x86>
 8011de0:	4b24      	ldr	r3, [pc, #144]	; (8011e74 <atanf+0x19c>)
 8011de2:	429c      	cmp	r4, r3
 8011de4:	dc0b      	bgt.n	8011dfe <atanf+0x126>
 8011de6:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 8011dea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8011dee:	eea0 7a27 	vfma.f32	s14, s0, s15
 8011df2:	2302      	movs	r3, #2
 8011df4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8011df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011dfc:	e7af      	b.n	8011d5e <atanf+0x86>
 8011dfe:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8011e02:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8011e06:	2303      	movs	r3, #3
 8011e08:	e7a9      	b.n	8011d5e <atanf+0x86>
 8011e0a:	4a1b      	ldr	r2, [pc, #108]	; (8011e78 <atanf+0x1a0>)
 8011e0c:	491b      	ldr	r1, [pc, #108]	; (8011e7c <atanf+0x1a4>)
 8011e0e:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8011e12:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8011e16:	edd3 6a00 	vldr	s13, [r3]
 8011e1a:	ee37 7a66 	vsub.f32	s14, s14, s13
 8011e1e:	2d00      	cmp	r5, #0
 8011e20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8011e24:	edd2 7a00 	vldr	s15, [r2]
 8011e28:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011e2c:	bfb8      	it	lt
 8011e2e:	eef1 7a67 	vneglt.f32	s15, s15
 8011e32:	e760      	b.n	8011cf6 <atanf+0x1e>
 8011e34:	3fc90fdb 	.word	0x3fc90fdb
 8011e38:	bfc90fdb 	.word	0xbfc90fdb
 8011e3c:	3edfffff 	.word	0x3edfffff
 8011e40:	7149f2ca 	.word	0x7149f2ca
 8011e44:	3f97ffff 	.word	0x3f97ffff
 8011e48:	3c8569d7 	.word	0x3c8569d7
 8011e4c:	3d4bda59 	.word	0x3d4bda59
 8011e50:	bd6ef16b 	.word	0xbd6ef16b
 8011e54:	3d886b35 	.word	0x3d886b35
 8011e58:	3dba2e6e 	.word	0x3dba2e6e
 8011e5c:	3e124925 	.word	0x3e124925
 8011e60:	3eaaaaab 	.word	0x3eaaaaab
 8011e64:	bd15a221 	.word	0xbd15a221
 8011e68:	bd9d8795 	.word	0xbd9d8795
 8011e6c:	bde38e38 	.word	0xbde38e38
 8011e70:	be4ccccd 	.word	0xbe4ccccd
 8011e74:	401bffff 	.word	0x401bffff
 8011e78:	08016c88 	.word	0x08016c88
 8011e7c:	08016c98 	.word	0x08016c98

08011e80 <cosf>:
 8011e80:	ee10 3a10 	vmov	r3, s0
 8011e84:	b507      	push	{r0, r1, r2, lr}
 8011e86:	4a1e      	ldr	r2, [pc, #120]	; (8011f00 <cosf+0x80>)
 8011e88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011e8c:	4293      	cmp	r3, r2
 8011e8e:	dc06      	bgt.n	8011e9e <cosf+0x1e>
 8011e90:	eddf 0a1c 	vldr	s1, [pc, #112]	; 8011f04 <cosf+0x84>
 8011e94:	b003      	add	sp, #12
 8011e96:	f85d eb04 	ldr.w	lr, [sp], #4
 8011e9a:	f001 ba89 	b.w	80133b0 <__kernel_cosf>
 8011e9e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011ea2:	db04      	blt.n	8011eae <cosf+0x2e>
 8011ea4:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011ea8:	b003      	add	sp, #12
 8011eaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8011eae:	4668      	mov	r0, sp
 8011eb0:	f001 ff9c 	bl	8013dec <__ieee754_rem_pio2f>
 8011eb4:	f000 0003 	and.w	r0, r0, #3
 8011eb8:	2801      	cmp	r0, #1
 8011eba:	d009      	beq.n	8011ed0 <cosf+0x50>
 8011ebc:	2802      	cmp	r0, #2
 8011ebe:	d010      	beq.n	8011ee2 <cosf+0x62>
 8011ec0:	b9b0      	cbnz	r0, 8011ef0 <cosf+0x70>
 8011ec2:	eddd 0a01 	vldr	s1, [sp, #4]
 8011ec6:	ed9d 0a00 	vldr	s0, [sp]
 8011eca:	f001 fa71 	bl	80133b0 <__kernel_cosf>
 8011ece:	e7eb      	b.n	8011ea8 <cosf+0x28>
 8011ed0:	eddd 0a01 	vldr	s1, [sp, #4]
 8011ed4:	ed9d 0a00 	vldr	s0, [sp]
 8011ed8:	f001 fac8 	bl	801346c <__kernel_sinf>
 8011edc:	eeb1 0a40 	vneg.f32	s0, s0
 8011ee0:	e7e2      	b.n	8011ea8 <cosf+0x28>
 8011ee2:	eddd 0a01 	vldr	s1, [sp, #4]
 8011ee6:	ed9d 0a00 	vldr	s0, [sp]
 8011eea:	f001 fa61 	bl	80133b0 <__kernel_cosf>
 8011eee:	e7f5      	b.n	8011edc <cosf+0x5c>
 8011ef0:	eddd 0a01 	vldr	s1, [sp, #4]
 8011ef4:	ed9d 0a00 	vldr	s0, [sp]
 8011ef8:	2001      	movs	r0, #1
 8011efa:	f001 fab7 	bl	801346c <__kernel_sinf>
 8011efe:	e7d3      	b.n	8011ea8 <cosf+0x28>
 8011f00:	3f490fd8 	.word	0x3f490fd8
 8011f04:	00000000 	.word	0x00000000

08011f08 <fabsf>:
 8011f08:	ee10 3a10 	vmov	r3, s0
 8011f0c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f10:	ee00 3a10 	vmov	s0, r3
 8011f14:	4770      	bx	lr
	...

08011f18 <tanf>:
 8011f18:	ee10 3a10 	vmov	r3, s0
 8011f1c:	b507      	push	{r0, r1, r2, lr}
 8011f1e:	4a12      	ldr	r2, [pc, #72]	; (8011f68 <tanf+0x50>)
 8011f20:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8011f24:	4293      	cmp	r3, r2
 8011f26:	dc07      	bgt.n	8011f38 <tanf+0x20>
 8011f28:	eddf 0a10 	vldr	s1, [pc, #64]	; 8011f6c <tanf+0x54>
 8011f2c:	2001      	movs	r0, #1
 8011f2e:	b003      	add	sp, #12
 8011f30:	f85d eb04 	ldr.w	lr, [sp], #4
 8011f34:	f001 bae2 	b.w	80134fc <__kernel_tanf>
 8011f38:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8011f3c:	db04      	blt.n	8011f48 <tanf+0x30>
 8011f3e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8011f42:	b003      	add	sp, #12
 8011f44:	f85d fb04 	ldr.w	pc, [sp], #4
 8011f48:	4668      	mov	r0, sp
 8011f4a:	f001 ff4f 	bl	8013dec <__ieee754_rem_pio2f>
 8011f4e:	0040      	lsls	r0, r0, #1
 8011f50:	f000 0002 	and.w	r0, r0, #2
 8011f54:	eddd 0a01 	vldr	s1, [sp, #4]
 8011f58:	ed9d 0a00 	vldr	s0, [sp]
 8011f5c:	f1c0 0001 	rsb	r0, r0, #1
 8011f60:	f001 facc 	bl	80134fc <__kernel_tanf>
 8011f64:	e7ed      	b.n	8011f42 <tanf+0x2a>
 8011f66:	bf00      	nop
 8011f68:	3f490fda 	.word	0x3f490fda
 8011f6c:	00000000 	.word	0x00000000

08011f70 <finite>:
 8011f70:	b082      	sub	sp, #8
 8011f72:	ed8d 0b00 	vstr	d0, [sp]
 8011f76:	9801      	ldr	r0, [sp, #4]
 8011f78:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8011f7c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8011f80:	0fc0      	lsrs	r0, r0, #31
 8011f82:	b002      	add	sp, #8
 8011f84:	4770      	bx	lr

08011f86 <finitef>:
 8011f86:	b082      	sub	sp, #8
 8011f88:	ed8d 0a01 	vstr	s0, [sp, #4]
 8011f8c:	9801      	ldr	r0, [sp, #4]
 8011f8e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8011f92:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8011f96:	bfac      	ite	ge
 8011f98:	2000      	movge	r0, #0
 8011f9a:	2001      	movlt	r0, #1
 8011f9c:	b002      	add	sp, #8
 8011f9e:	4770      	bx	lr

08011fa0 <__ieee754_sqrt>:
 8011fa0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011fa4:	ec55 4b10 	vmov	r4, r5, d0
 8011fa8:	4e67      	ldr	r6, [pc, #412]	; (8012148 <__ieee754_sqrt+0x1a8>)
 8011faa:	43ae      	bics	r6, r5
 8011fac:	ee10 0a10 	vmov	r0, s0
 8011fb0:	ee10 2a10 	vmov	r2, s0
 8011fb4:	4629      	mov	r1, r5
 8011fb6:	462b      	mov	r3, r5
 8011fb8:	d10d      	bne.n	8011fd6 <__ieee754_sqrt+0x36>
 8011fba:	f7ee fb3d 	bl	8000638 <__aeabi_dmul>
 8011fbe:	4602      	mov	r2, r0
 8011fc0:	460b      	mov	r3, r1
 8011fc2:	4620      	mov	r0, r4
 8011fc4:	4629      	mov	r1, r5
 8011fc6:	f7ee f981 	bl	80002cc <__adddf3>
 8011fca:	4604      	mov	r4, r0
 8011fcc:	460d      	mov	r5, r1
 8011fce:	ec45 4b10 	vmov	d0, r4, r5
 8011fd2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011fd6:	2d00      	cmp	r5, #0
 8011fd8:	dc0b      	bgt.n	8011ff2 <__ieee754_sqrt+0x52>
 8011fda:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011fde:	4326      	orrs	r6, r4
 8011fe0:	d0f5      	beq.n	8011fce <__ieee754_sqrt+0x2e>
 8011fe2:	b135      	cbz	r5, 8011ff2 <__ieee754_sqrt+0x52>
 8011fe4:	f7ee f970 	bl	80002c8 <__aeabi_dsub>
 8011fe8:	4602      	mov	r2, r0
 8011fea:	460b      	mov	r3, r1
 8011fec:	f7ee fc4e 	bl	800088c <__aeabi_ddiv>
 8011ff0:	e7eb      	b.n	8011fca <__ieee754_sqrt+0x2a>
 8011ff2:	1509      	asrs	r1, r1, #20
 8011ff4:	f000 808d 	beq.w	8012112 <__ieee754_sqrt+0x172>
 8011ff8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8011ffc:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 8012000:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8012004:	07c9      	lsls	r1, r1, #31
 8012006:	bf5c      	itt	pl
 8012008:	005b      	lslpl	r3, r3, #1
 801200a:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 801200e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8012012:	bf58      	it	pl
 8012014:	0052      	lslpl	r2, r2, #1
 8012016:	2500      	movs	r5, #0
 8012018:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 801201c:	1076      	asrs	r6, r6, #1
 801201e:	0052      	lsls	r2, r2, #1
 8012020:	f04f 0e16 	mov.w	lr, #22
 8012024:	46ac      	mov	ip, r5
 8012026:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 801202a:	eb0c 0001 	add.w	r0, ip, r1
 801202e:	4298      	cmp	r0, r3
 8012030:	bfde      	ittt	le
 8012032:	1a1b      	suble	r3, r3, r0
 8012034:	eb00 0c01 	addle.w	ip, r0, r1
 8012038:	186d      	addle	r5, r5, r1
 801203a:	005b      	lsls	r3, r3, #1
 801203c:	f1be 0e01 	subs.w	lr, lr, #1
 8012040:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012044:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012048:	ea4f 0242 	mov.w	r2, r2, lsl #1
 801204c:	d1ed      	bne.n	801202a <__ieee754_sqrt+0x8a>
 801204e:	4674      	mov	r4, lr
 8012050:	2720      	movs	r7, #32
 8012052:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8012056:	4563      	cmp	r3, ip
 8012058:	eb01 000e 	add.w	r0, r1, lr
 801205c:	dc02      	bgt.n	8012064 <__ieee754_sqrt+0xc4>
 801205e:	d113      	bne.n	8012088 <__ieee754_sqrt+0xe8>
 8012060:	4290      	cmp	r0, r2
 8012062:	d811      	bhi.n	8012088 <__ieee754_sqrt+0xe8>
 8012064:	2800      	cmp	r0, #0
 8012066:	eb00 0e01 	add.w	lr, r0, r1
 801206a:	da57      	bge.n	801211c <__ieee754_sqrt+0x17c>
 801206c:	f1be 0f00 	cmp.w	lr, #0
 8012070:	db54      	blt.n	801211c <__ieee754_sqrt+0x17c>
 8012072:	f10c 0801 	add.w	r8, ip, #1
 8012076:	eba3 030c 	sub.w	r3, r3, ip
 801207a:	4290      	cmp	r0, r2
 801207c:	bf88      	it	hi
 801207e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8012082:	1a12      	subs	r2, r2, r0
 8012084:	440c      	add	r4, r1
 8012086:	46c4      	mov	ip, r8
 8012088:	005b      	lsls	r3, r3, #1
 801208a:	3f01      	subs	r7, #1
 801208c:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 8012090:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8012094:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8012098:	d1dd      	bne.n	8012056 <__ieee754_sqrt+0xb6>
 801209a:	4313      	orrs	r3, r2
 801209c:	d01b      	beq.n	80120d6 <__ieee754_sqrt+0x136>
 801209e:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 801214c <__ieee754_sqrt+0x1ac>
 80120a2:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 8012150 <__ieee754_sqrt+0x1b0>
 80120a6:	e9da 0100 	ldrd	r0, r1, [sl]
 80120aa:	e9db 2300 	ldrd	r2, r3, [fp]
 80120ae:	f7ee f90b 	bl	80002c8 <__aeabi_dsub>
 80120b2:	e9da 8900 	ldrd	r8, r9, [sl]
 80120b6:	4602      	mov	r2, r0
 80120b8:	460b      	mov	r3, r1
 80120ba:	4640      	mov	r0, r8
 80120bc:	4649      	mov	r1, r9
 80120be:	f7ee fd37 	bl	8000b30 <__aeabi_dcmple>
 80120c2:	b140      	cbz	r0, 80120d6 <__ieee754_sqrt+0x136>
 80120c4:	f1b4 3fff 	cmp.w	r4, #4294967295
 80120c8:	e9da 0100 	ldrd	r0, r1, [sl]
 80120cc:	e9db 2300 	ldrd	r2, r3, [fp]
 80120d0:	d126      	bne.n	8012120 <__ieee754_sqrt+0x180>
 80120d2:	3501      	adds	r5, #1
 80120d4:	463c      	mov	r4, r7
 80120d6:	106a      	asrs	r2, r5, #1
 80120d8:	0863      	lsrs	r3, r4, #1
 80120da:	07e9      	lsls	r1, r5, #31
 80120dc:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 80120e0:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 80120e4:	bf48      	it	mi
 80120e6:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 80120ea:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 80120ee:	461c      	mov	r4, r3
 80120f0:	e76d      	b.n	8011fce <__ieee754_sqrt+0x2e>
 80120f2:	0ad3      	lsrs	r3, r2, #11
 80120f4:	3815      	subs	r0, #21
 80120f6:	0552      	lsls	r2, r2, #21
 80120f8:	2b00      	cmp	r3, #0
 80120fa:	d0fa      	beq.n	80120f2 <__ieee754_sqrt+0x152>
 80120fc:	02dc      	lsls	r4, r3, #11
 80120fe:	d50a      	bpl.n	8012116 <__ieee754_sqrt+0x176>
 8012100:	f1c1 0420 	rsb	r4, r1, #32
 8012104:	fa22 f404 	lsr.w	r4, r2, r4
 8012108:	1e4d      	subs	r5, r1, #1
 801210a:	408a      	lsls	r2, r1
 801210c:	4323      	orrs	r3, r4
 801210e:	1b41      	subs	r1, r0, r5
 8012110:	e772      	b.n	8011ff8 <__ieee754_sqrt+0x58>
 8012112:	4608      	mov	r0, r1
 8012114:	e7f0      	b.n	80120f8 <__ieee754_sqrt+0x158>
 8012116:	005b      	lsls	r3, r3, #1
 8012118:	3101      	adds	r1, #1
 801211a:	e7ef      	b.n	80120fc <__ieee754_sqrt+0x15c>
 801211c:	46e0      	mov	r8, ip
 801211e:	e7aa      	b.n	8012076 <__ieee754_sqrt+0xd6>
 8012120:	f7ee f8d4 	bl	80002cc <__adddf3>
 8012124:	e9da 8900 	ldrd	r8, r9, [sl]
 8012128:	4602      	mov	r2, r0
 801212a:	460b      	mov	r3, r1
 801212c:	4640      	mov	r0, r8
 801212e:	4649      	mov	r1, r9
 8012130:	f7ee fcf4 	bl	8000b1c <__aeabi_dcmplt>
 8012134:	b120      	cbz	r0, 8012140 <__ieee754_sqrt+0x1a0>
 8012136:	1ca0      	adds	r0, r4, #2
 8012138:	bf08      	it	eq
 801213a:	3501      	addeq	r5, #1
 801213c:	3402      	adds	r4, #2
 801213e:	e7ca      	b.n	80120d6 <__ieee754_sqrt+0x136>
 8012140:	3401      	adds	r4, #1
 8012142:	f024 0401 	bic.w	r4, r4, #1
 8012146:	e7c6      	b.n	80120d6 <__ieee754_sqrt+0x136>
 8012148:	7ff00000 	.word	0x7ff00000
 801214c:	200001b0 	.word	0x200001b0
 8012150:	200001b8 	.word	0x200001b8

08012154 <__ieee754_sqrtf>:
 8012154:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8012158:	4770      	bx	lr
	...

0801215c <floorf>:
 801215c:	ee10 3a10 	vmov	r3, s0
 8012160:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8012164:	3a7f      	subs	r2, #127	; 0x7f
 8012166:	2a16      	cmp	r2, #22
 8012168:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801216c:	dc2a      	bgt.n	80121c4 <floorf+0x68>
 801216e:	2a00      	cmp	r2, #0
 8012170:	da11      	bge.n	8012196 <floorf+0x3a>
 8012172:	eddf 7a18 	vldr	s15, [pc, #96]	; 80121d4 <floorf+0x78>
 8012176:	ee30 0a27 	vadd.f32	s0, s0, s15
 801217a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801217e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012182:	dd05      	ble.n	8012190 <floorf+0x34>
 8012184:	2b00      	cmp	r3, #0
 8012186:	da23      	bge.n	80121d0 <floorf+0x74>
 8012188:	4a13      	ldr	r2, [pc, #76]	; (80121d8 <floorf+0x7c>)
 801218a:	2900      	cmp	r1, #0
 801218c:	bf18      	it	ne
 801218e:	4613      	movne	r3, r2
 8012190:	ee00 3a10 	vmov	s0, r3
 8012194:	4770      	bx	lr
 8012196:	4911      	ldr	r1, [pc, #68]	; (80121dc <floorf+0x80>)
 8012198:	4111      	asrs	r1, r2
 801219a:	420b      	tst	r3, r1
 801219c:	d0fa      	beq.n	8012194 <floorf+0x38>
 801219e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80121d4 <floorf+0x78>
 80121a2:	ee30 0a27 	vadd.f32	s0, s0, s15
 80121a6:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80121aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121ae:	ddef      	ble.n	8012190 <floorf+0x34>
 80121b0:	2b00      	cmp	r3, #0
 80121b2:	bfbe      	ittt	lt
 80121b4:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80121b8:	fa40 f202 	asrlt.w	r2, r0, r2
 80121bc:	189b      	addlt	r3, r3, r2
 80121be:	ea23 0301 	bic.w	r3, r3, r1
 80121c2:	e7e5      	b.n	8012190 <floorf+0x34>
 80121c4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80121c8:	d3e4      	bcc.n	8012194 <floorf+0x38>
 80121ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80121ce:	4770      	bx	lr
 80121d0:	2300      	movs	r3, #0
 80121d2:	e7dd      	b.n	8012190 <floorf+0x34>
 80121d4:	7149f2ca 	.word	0x7149f2ca
 80121d8:	bf800000 	.word	0xbf800000
 80121dc:	007fffff 	.word	0x007fffff

080121e0 <roundf>:
 80121e0:	ee10 0a10 	vmov	r0, s0
 80121e4:	f3c0 52c7 	ubfx	r2, r0, #23, #8
 80121e8:	3a7f      	subs	r2, #127	; 0x7f
 80121ea:	2a16      	cmp	r2, #22
 80121ec:	dc15      	bgt.n	801221a <roundf+0x3a>
 80121ee:	2a00      	cmp	r2, #0
 80121f0:	da08      	bge.n	8012204 <roundf+0x24>
 80121f2:	3201      	adds	r2, #1
 80121f4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 80121f8:	d101      	bne.n	80121fe <roundf+0x1e>
 80121fa:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 80121fe:	ee00 3a10 	vmov	s0, r3
 8012202:	4770      	bx	lr
 8012204:	4907      	ldr	r1, [pc, #28]	; (8012224 <roundf+0x44>)
 8012206:	4111      	asrs	r1, r2
 8012208:	4208      	tst	r0, r1
 801220a:	d0fa      	beq.n	8012202 <roundf+0x22>
 801220c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8012210:	4113      	asrs	r3, r2
 8012212:	4403      	add	r3, r0
 8012214:	ea23 0301 	bic.w	r3, r3, r1
 8012218:	e7f1      	b.n	80121fe <roundf+0x1e>
 801221a:	2a80      	cmp	r2, #128	; 0x80
 801221c:	d1f1      	bne.n	8012202 <roundf+0x22>
 801221e:	ee30 0a00 	vadd.f32	s0, s0, s0
 8012222:	4770      	bx	lr
 8012224:	007fffff 	.word	0x007fffff

08012228 <__kernel_cos>:
 8012228:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801222c:	ec57 6b10 	vmov	r6, r7, d0
 8012230:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8012234:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8012238:	ed8d 1b00 	vstr	d1, [sp]
 801223c:	da07      	bge.n	801224e <__kernel_cos+0x26>
 801223e:	ee10 0a10 	vmov	r0, s0
 8012242:	4639      	mov	r1, r7
 8012244:	f7ee fca8 	bl	8000b98 <__aeabi_d2iz>
 8012248:	2800      	cmp	r0, #0
 801224a:	f000 8088 	beq.w	801235e <__kernel_cos+0x136>
 801224e:	4632      	mov	r2, r6
 8012250:	463b      	mov	r3, r7
 8012252:	4630      	mov	r0, r6
 8012254:	4639      	mov	r1, r7
 8012256:	f7ee f9ef 	bl	8000638 <__aeabi_dmul>
 801225a:	4b51      	ldr	r3, [pc, #324]	; (80123a0 <__kernel_cos+0x178>)
 801225c:	2200      	movs	r2, #0
 801225e:	4604      	mov	r4, r0
 8012260:	460d      	mov	r5, r1
 8012262:	f7ee f9e9 	bl	8000638 <__aeabi_dmul>
 8012266:	a340      	add	r3, pc, #256	; (adr r3, 8012368 <__kernel_cos+0x140>)
 8012268:	e9d3 2300 	ldrd	r2, r3, [r3]
 801226c:	4682      	mov	sl, r0
 801226e:	468b      	mov	fp, r1
 8012270:	4620      	mov	r0, r4
 8012272:	4629      	mov	r1, r5
 8012274:	f7ee f9e0 	bl	8000638 <__aeabi_dmul>
 8012278:	a33d      	add	r3, pc, #244	; (adr r3, 8012370 <__kernel_cos+0x148>)
 801227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801227e:	f7ee f825 	bl	80002cc <__adddf3>
 8012282:	4622      	mov	r2, r4
 8012284:	462b      	mov	r3, r5
 8012286:	f7ee f9d7 	bl	8000638 <__aeabi_dmul>
 801228a:	a33b      	add	r3, pc, #236	; (adr r3, 8012378 <__kernel_cos+0x150>)
 801228c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012290:	f7ee f81a 	bl	80002c8 <__aeabi_dsub>
 8012294:	4622      	mov	r2, r4
 8012296:	462b      	mov	r3, r5
 8012298:	f7ee f9ce 	bl	8000638 <__aeabi_dmul>
 801229c:	a338      	add	r3, pc, #224	; (adr r3, 8012380 <__kernel_cos+0x158>)
 801229e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122a2:	f7ee f813 	bl	80002cc <__adddf3>
 80122a6:	4622      	mov	r2, r4
 80122a8:	462b      	mov	r3, r5
 80122aa:	f7ee f9c5 	bl	8000638 <__aeabi_dmul>
 80122ae:	a336      	add	r3, pc, #216	; (adr r3, 8012388 <__kernel_cos+0x160>)
 80122b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122b4:	f7ee f808 	bl	80002c8 <__aeabi_dsub>
 80122b8:	4622      	mov	r2, r4
 80122ba:	462b      	mov	r3, r5
 80122bc:	f7ee f9bc 	bl	8000638 <__aeabi_dmul>
 80122c0:	a333      	add	r3, pc, #204	; (adr r3, 8012390 <__kernel_cos+0x168>)
 80122c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80122c6:	f7ee f801 	bl	80002cc <__adddf3>
 80122ca:	4622      	mov	r2, r4
 80122cc:	462b      	mov	r3, r5
 80122ce:	f7ee f9b3 	bl	8000638 <__aeabi_dmul>
 80122d2:	4622      	mov	r2, r4
 80122d4:	462b      	mov	r3, r5
 80122d6:	f7ee f9af 	bl	8000638 <__aeabi_dmul>
 80122da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80122de:	4604      	mov	r4, r0
 80122e0:	460d      	mov	r5, r1
 80122e2:	4630      	mov	r0, r6
 80122e4:	4639      	mov	r1, r7
 80122e6:	f7ee f9a7 	bl	8000638 <__aeabi_dmul>
 80122ea:	460b      	mov	r3, r1
 80122ec:	4602      	mov	r2, r0
 80122ee:	4629      	mov	r1, r5
 80122f0:	4620      	mov	r0, r4
 80122f2:	f7ed ffe9 	bl	80002c8 <__aeabi_dsub>
 80122f6:	4b2b      	ldr	r3, [pc, #172]	; (80123a4 <__kernel_cos+0x17c>)
 80122f8:	4598      	cmp	r8, r3
 80122fa:	4606      	mov	r6, r0
 80122fc:	460f      	mov	r7, r1
 80122fe:	dc10      	bgt.n	8012322 <__kernel_cos+0xfa>
 8012300:	4602      	mov	r2, r0
 8012302:	460b      	mov	r3, r1
 8012304:	4650      	mov	r0, sl
 8012306:	4659      	mov	r1, fp
 8012308:	f7ed ffde 	bl	80002c8 <__aeabi_dsub>
 801230c:	460b      	mov	r3, r1
 801230e:	4926      	ldr	r1, [pc, #152]	; (80123a8 <__kernel_cos+0x180>)
 8012310:	4602      	mov	r2, r0
 8012312:	2000      	movs	r0, #0
 8012314:	f7ed ffd8 	bl	80002c8 <__aeabi_dsub>
 8012318:	ec41 0b10 	vmov	d0, r0, r1
 801231c:	b003      	add	sp, #12
 801231e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012322:	4b22      	ldr	r3, [pc, #136]	; (80123ac <__kernel_cos+0x184>)
 8012324:	4920      	ldr	r1, [pc, #128]	; (80123a8 <__kernel_cos+0x180>)
 8012326:	4598      	cmp	r8, r3
 8012328:	bfcc      	ite	gt
 801232a:	4d21      	ldrgt	r5, [pc, #132]	; (80123b0 <__kernel_cos+0x188>)
 801232c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8012330:	2400      	movs	r4, #0
 8012332:	4622      	mov	r2, r4
 8012334:	462b      	mov	r3, r5
 8012336:	2000      	movs	r0, #0
 8012338:	f7ed ffc6 	bl	80002c8 <__aeabi_dsub>
 801233c:	4622      	mov	r2, r4
 801233e:	4680      	mov	r8, r0
 8012340:	4689      	mov	r9, r1
 8012342:	462b      	mov	r3, r5
 8012344:	4650      	mov	r0, sl
 8012346:	4659      	mov	r1, fp
 8012348:	f7ed ffbe 	bl	80002c8 <__aeabi_dsub>
 801234c:	4632      	mov	r2, r6
 801234e:	463b      	mov	r3, r7
 8012350:	f7ed ffba 	bl	80002c8 <__aeabi_dsub>
 8012354:	4602      	mov	r2, r0
 8012356:	460b      	mov	r3, r1
 8012358:	4640      	mov	r0, r8
 801235a:	4649      	mov	r1, r9
 801235c:	e7da      	b.n	8012314 <__kernel_cos+0xec>
 801235e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8012398 <__kernel_cos+0x170>
 8012362:	e7db      	b.n	801231c <__kernel_cos+0xf4>
 8012364:	f3af 8000 	nop.w
 8012368:	be8838d4 	.word	0xbe8838d4
 801236c:	bda8fae9 	.word	0xbda8fae9
 8012370:	bdb4b1c4 	.word	0xbdb4b1c4
 8012374:	3e21ee9e 	.word	0x3e21ee9e
 8012378:	809c52ad 	.word	0x809c52ad
 801237c:	3e927e4f 	.word	0x3e927e4f
 8012380:	19cb1590 	.word	0x19cb1590
 8012384:	3efa01a0 	.word	0x3efa01a0
 8012388:	16c15177 	.word	0x16c15177
 801238c:	3f56c16c 	.word	0x3f56c16c
 8012390:	5555554c 	.word	0x5555554c
 8012394:	3fa55555 	.word	0x3fa55555
 8012398:	00000000 	.word	0x00000000
 801239c:	3ff00000 	.word	0x3ff00000
 80123a0:	3fe00000 	.word	0x3fe00000
 80123a4:	3fd33332 	.word	0x3fd33332
 80123a8:	3ff00000 	.word	0x3ff00000
 80123ac:	3fe90000 	.word	0x3fe90000
 80123b0:	3fd20000 	.word	0x3fd20000
 80123b4:	00000000 	.word	0x00000000

080123b8 <__kernel_sin>:
 80123b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123bc:	ed2d 8b04 	vpush	{d8-d9}
 80123c0:	eeb0 8a41 	vmov.f32	s16, s2
 80123c4:	eef0 8a61 	vmov.f32	s17, s3
 80123c8:	ec55 4b10 	vmov	r4, r5, d0
 80123cc:	b083      	sub	sp, #12
 80123ce:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80123d2:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80123d6:	9001      	str	r0, [sp, #4]
 80123d8:	da06      	bge.n	80123e8 <__kernel_sin+0x30>
 80123da:	ee10 0a10 	vmov	r0, s0
 80123de:	4629      	mov	r1, r5
 80123e0:	f7ee fbda 	bl	8000b98 <__aeabi_d2iz>
 80123e4:	2800      	cmp	r0, #0
 80123e6:	d051      	beq.n	801248c <__kernel_sin+0xd4>
 80123e8:	4622      	mov	r2, r4
 80123ea:	462b      	mov	r3, r5
 80123ec:	4620      	mov	r0, r4
 80123ee:	4629      	mov	r1, r5
 80123f0:	f7ee f922 	bl	8000638 <__aeabi_dmul>
 80123f4:	4682      	mov	sl, r0
 80123f6:	468b      	mov	fp, r1
 80123f8:	4602      	mov	r2, r0
 80123fa:	460b      	mov	r3, r1
 80123fc:	4620      	mov	r0, r4
 80123fe:	4629      	mov	r1, r5
 8012400:	f7ee f91a 	bl	8000638 <__aeabi_dmul>
 8012404:	a341      	add	r3, pc, #260	; (adr r3, 801250c <__kernel_sin+0x154>)
 8012406:	e9d3 2300 	ldrd	r2, r3, [r3]
 801240a:	4680      	mov	r8, r0
 801240c:	4689      	mov	r9, r1
 801240e:	4650      	mov	r0, sl
 8012410:	4659      	mov	r1, fp
 8012412:	f7ee f911 	bl	8000638 <__aeabi_dmul>
 8012416:	a33f      	add	r3, pc, #252	; (adr r3, 8012514 <__kernel_sin+0x15c>)
 8012418:	e9d3 2300 	ldrd	r2, r3, [r3]
 801241c:	f7ed ff54 	bl	80002c8 <__aeabi_dsub>
 8012420:	4652      	mov	r2, sl
 8012422:	465b      	mov	r3, fp
 8012424:	f7ee f908 	bl	8000638 <__aeabi_dmul>
 8012428:	a33c      	add	r3, pc, #240	; (adr r3, 801251c <__kernel_sin+0x164>)
 801242a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801242e:	f7ed ff4d 	bl	80002cc <__adddf3>
 8012432:	4652      	mov	r2, sl
 8012434:	465b      	mov	r3, fp
 8012436:	f7ee f8ff 	bl	8000638 <__aeabi_dmul>
 801243a:	a33a      	add	r3, pc, #232	; (adr r3, 8012524 <__kernel_sin+0x16c>)
 801243c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012440:	f7ed ff42 	bl	80002c8 <__aeabi_dsub>
 8012444:	4652      	mov	r2, sl
 8012446:	465b      	mov	r3, fp
 8012448:	f7ee f8f6 	bl	8000638 <__aeabi_dmul>
 801244c:	a337      	add	r3, pc, #220	; (adr r3, 801252c <__kernel_sin+0x174>)
 801244e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012452:	f7ed ff3b 	bl	80002cc <__adddf3>
 8012456:	9b01      	ldr	r3, [sp, #4]
 8012458:	4606      	mov	r6, r0
 801245a:	460f      	mov	r7, r1
 801245c:	b9eb      	cbnz	r3, 801249a <__kernel_sin+0xe2>
 801245e:	4602      	mov	r2, r0
 8012460:	460b      	mov	r3, r1
 8012462:	4650      	mov	r0, sl
 8012464:	4659      	mov	r1, fp
 8012466:	f7ee f8e7 	bl	8000638 <__aeabi_dmul>
 801246a:	a325      	add	r3, pc, #148	; (adr r3, 8012500 <__kernel_sin+0x148>)
 801246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012470:	f7ed ff2a 	bl	80002c8 <__aeabi_dsub>
 8012474:	4642      	mov	r2, r8
 8012476:	464b      	mov	r3, r9
 8012478:	f7ee f8de 	bl	8000638 <__aeabi_dmul>
 801247c:	4602      	mov	r2, r0
 801247e:	460b      	mov	r3, r1
 8012480:	4620      	mov	r0, r4
 8012482:	4629      	mov	r1, r5
 8012484:	f7ed ff22 	bl	80002cc <__adddf3>
 8012488:	4604      	mov	r4, r0
 801248a:	460d      	mov	r5, r1
 801248c:	ec45 4b10 	vmov	d0, r4, r5
 8012490:	b003      	add	sp, #12
 8012492:	ecbd 8b04 	vpop	{d8-d9}
 8012496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801249a:	4b1b      	ldr	r3, [pc, #108]	; (8012508 <__kernel_sin+0x150>)
 801249c:	ec51 0b18 	vmov	r0, r1, d8
 80124a0:	2200      	movs	r2, #0
 80124a2:	f7ee f8c9 	bl	8000638 <__aeabi_dmul>
 80124a6:	4632      	mov	r2, r6
 80124a8:	ec41 0b19 	vmov	d9, r0, r1
 80124ac:	463b      	mov	r3, r7
 80124ae:	4640      	mov	r0, r8
 80124b0:	4649      	mov	r1, r9
 80124b2:	f7ee f8c1 	bl	8000638 <__aeabi_dmul>
 80124b6:	4602      	mov	r2, r0
 80124b8:	460b      	mov	r3, r1
 80124ba:	ec51 0b19 	vmov	r0, r1, d9
 80124be:	f7ed ff03 	bl	80002c8 <__aeabi_dsub>
 80124c2:	4652      	mov	r2, sl
 80124c4:	465b      	mov	r3, fp
 80124c6:	f7ee f8b7 	bl	8000638 <__aeabi_dmul>
 80124ca:	ec53 2b18 	vmov	r2, r3, d8
 80124ce:	f7ed fefb 	bl	80002c8 <__aeabi_dsub>
 80124d2:	a30b      	add	r3, pc, #44	; (adr r3, 8012500 <__kernel_sin+0x148>)
 80124d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124d8:	4606      	mov	r6, r0
 80124da:	460f      	mov	r7, r1
 80124dc:	4640      	mov	r0, r8
 80124de:	4649      	mov	r1, r9
 80124e0:	f7ee f8aa 	bl	8000638 <__aeabi_dmul>
 80124e4:	4602      	mov	r2, r0
 80124e6:	460b      	mov	r3, r1
 80124e8:	4630      	mov	r0, r6
 80124ea:	4639      	mov	r1, r7
 80124ec:	f7ed feee 	bl	80002cc <__adddf3>
 80124f0:	4602      	mov	r2, r0
 80124f2:	460b      	mov	r3, r1
 80124f4:	4620      	mov	r0, r4
 80124f6:	4629      	mov	r1, r5
 80124f8:	f7ed fee6 	bl	80002c8 <__aeabi_dsub>
 80124fc:	e7c4      	b.n	8012488 <__kernel_sin+0xd0>
 80124fe:	bf00      	nop
 8012500:	55555549 	.word	0x55555549
 8012504:	3fc55555 	.word	0x3fc55555
 8012508:	3fe00000 	.word	0x3fe00000
 801250c:	5acfd57c 	.word	0x5acfd57c
 8012510:	3de5d93a 	.word	0x3de5d93a
 8012514:	8a2b9ceb 	.word	0x8a2b9ceb
 8012518:	3e5ae5e6 	.word	0x3e5ae5e6
 801251c:	57b1fe7d 	.word	0x57b1fe7d
 8012520:	3ec71de3 	.word	0x3ec71de3
 8012524:	19c161d5 	.word	0x19c161d5
 8012528:	3f2a01a0 	.word	0x3f2a01a0
 801252c:	1110f8a6 	.word	0x1110f8a6
 8012530:	3f811111 	.word	0x3f811111
 8012534:	00000000 	.word	0x00000000

08012538 <__ieee754_pow>:
 8012538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801253c:	ed2d 8b06 	vpush	{d8-d10}
 8012540:	b089      	sub	sp, #36	; 0x24
 8012542:	ed8d 1b00 	vstr	d1, [sp]
 8012546:	e9dd 2900 	ldrd	r2, r9, [sp]
 801254a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 801254e:	ea58 0102 	orrs.w	r1, r8, r2
 8012552:	ec57 6b10 	vmov	r6, r7, d0
 8012556:	d115      	bne.n	8012584 <__ieee754_pow+0x4c>
 8012558:	19b3      	adds	r3, r6, r6
 801255a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 801255e:	4152      	adcs	r2, r2
 8012560:	4299      	cmp	r1, r3
 8012562:	4b89      	ldr	r3, [pc, #548]	; (8012788 <__ieee754_pow+0x250>)
 8012564:	4193      	sbcs	r3, r2
 8012566:	f080 84d1 	bcs.w	8012f0c <__ieee754_pow+0x9d4>
 801256a:	e9dd 2300 	ldrd	r2, r3, [sp]
 801256e:	4630      	mov	r0, r6
 8012570:	4639      	mov	r1, r7
 8012572:	f7ed feab 	bl	80002cc <__adddf3>
 8012576:	ec41 0b10 	vmov	d0, r0, r1
 801257a:	b009      	add	sp, #36	; 0x24
 801257c:	ecbd 8b06 	vpop	{d8-d10}
 8012580:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012584:	4b81      	ldr	r3, [pc, #516]	; (801278c <__ieee754_pow+0x254>)
 8012586:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 801258a:	429c      	cmp	r4, r3
 801258c:	ee10 aa10 	vmov	sl, s0
 8012590:	463d      	mov	r5, r7
 8012592:	dc06      	bgt.n	80125a2 <__ieee754_pow+0x6a>
 8012594:	d101      	bne.n	801259a <__ieee754_pow+0x62>
 8012596:	2e00      	cmp	r6, #0
 8012598:	d1e7      	bne.n	801256a <__ieee754_pow+0x32>
 801259a:	4598      	cmp	r8, r3
 801259c:	dc01      	bgt.n	80125a2 <__ieee754_pow+0x6a>
 801259e:	d10f      	bne.n	80125c0 <__ieee754_pow+0x88>
 80125a0:	b172      	cbz	r2, 80125c0 <__ieee754_pow+0x88>
 80125a2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 80125a6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 80125aa:	ea55 050a 	orrs.w	r5, r5, sl
 80125ae:	d1dc      	bne.n	801256a <__ieee754_pow+0x32>
 80125b0:	e9dd 3200 	ldrd	r3, r2, [sp]
 80125b4:	18db      	adds	r3, r3, r3
 80125b6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 80125ba:	4152      	adcs	r2, r2
 80125bc:	429d      	cmp	r5, r3
 80125be:	e7d0      	b.n	8012562 <__ieee754_pow+0x2a>
 80125c0:	2d00      	cmp	r5, #0
 80125c2:	da3b      	bge.n	801263c <__ieee754_pow+0x104>
 80125c4:	4b72      	ldr	r3, [pc, #456]	; (8012790 <__ieee754_pow+0x258>)
 80125c6:	4598      	cmp	r8, r3
 80125c8:	dc51      	bgt.n	801266e <__ieee754_pow+0x136>
 80125ca:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80125ce:	4598      	cmp	r8, r3
 80125d0:	f340 84ab 	ble.w	8012f2a <__ieee754_pow+0x9f2>
 80125d4:	ea4f 5328 	mov.w	r3, r8, asr #20
 80125d8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80125dc:	2b14      	cmp	r3, #20
 80125de:	dd0f      	ble.n	8012600 <__ieee754_pow+0xc8>
 80125e0:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80125e4:	fa22 f103 	lsr.w	r1, r2, r3
 80125e8:	fa01 f303 	lsl.w	r3, r1, r3
 80125ec:	4293      	cmp	r3, r2
 80125ee:	f040 849c 	bne.w	8012f2a <__ieee754_pow+0x9f2>
 80125f2:	f001 0101 	and.w	r1, r1, #1
 80125f6:	f1c1 0302 	rsb	r3, r1, #2
 80125fa:	9304      	str	r3, [sp, #16]
 80125fc:	b182      	cbz	r2, 8012620 <__ieee754_pow+0xe8>
 80125fe:	e05f      	b.n	80126c0 <__ieee754_pow+0x188>
 8012600:	2a00      	cmp	r2, #0
 8012602:	d15b      	bne.n	80126bc <__ieee754_pow+0x184>
 8012604:	f1c3 0314 	rsb	r3, r3, #20
 8012608:	fa48 f103 	asr.w	r1, r8, r3
 801260c:	fa01 f303 	lsl.w	r3, r1, r3
 8012610:	4543      	cmp	r3, r8
 8012612:	f040 8487 	bne.w	8012f24 <__ieee754_pow+0x9ec>
 8012616:	f001 0101 	and.w	r1, r1, #1
 801261a:	f1c1 0302 	rsb	r3, r1, #2
 801261e:	9304      	str	r3, [sp, #16]
 8012620:	4b5c      	ldr	r3, [pc, #368]	; (8012794 <__ieee754_pow+0x25c>)
 8012622:	4598      	cmp	r8, r3
 8012624:	d132      	bne.n	801268c <__ieee754_pow+0x154>
 8012626:	f1b9 0f00 	cmp.w	r9, #0
 801262a:	f280 8477 	bge.w	8012f1c <__ieee754_pow+0x9e4>
 801262e:	4959      	ldr	r1, [pc, #356]	; (8012794 <__ieee754_pow+0x25c>)
 8012630:	4632      	mov	r2, r6
 8012632:	463b      	mov	r3, r7
 8012634:	2000      	movs	r0, #0
 8012636:	f7ee f929 	bl	800088c <__aeabi_ddiv>
 801263a:	e79c      	b.n	8012576 <__ieee754_pow+0x3e>
 801263c:	2300      	movs	r3, #0
 801263e:	9304      	str	r3, [sp, #16]
 8012640:	2a00      	cmp	r2, #0
 8012642:	d13d      	bne.n	80126c0 <__ieee754_pow+0x188>
 8012644:	4b51      	ldr	r3, [pc, #324]	; (801278c <__ieee754_pow+0x254>)
 8012646:	4598      	cmp	r8, r3
 8012648:	d1ea      	bne.n	8012620 <__ieee754_pow+0xe8>
 801264a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801264e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8012652:	ea53 030a 	orrs.w	r3, r3, sl
 8012656:	f000 8459 	beq.w	8012f0c <__ieee754_pow+0x9d4>
 801265a:	4b4f      	ldr	r3, [pc, #316]	; (8012798 <__ieee754_pow+0x260>)
 801265c:	429c      	cmp	r4, r3
 801265e:	dd08      	ble.n	8012672 <__ieee754_pow+0x13a>
 8012660:	f1b9 0f00 	cmp.w	r9, #0
 8012664:	f2c0 8456 	blt.w	8012f14 <__ieee754_pow+0x9dc>
 8012668:	e9dd 0100 	ldrd	r0, r1, [sp]
 801266c:	e783      	b.n	8012576 <__ieee754_pow+0x3e>
 801266e:	2302      	movs	r3, #2
 8012670:	e7e5      	b.n	801263e <__ieee754_pow+0x106>
 8012672:	f1b9 0f00 	cmp.w	r9, #0
 8012676:	f04f 0000 	mov.w	r0, #0
 801267a:	f04f 0100 	mov.w	r1, #0
 801267e:	f6bf af7a 	bge.w	8012576 <__ieee754_pow+0x3e>
 8012682:	e9dd 0300 	ldrd	r0, r3, [sp]
 8012686:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801268a:	e774      	b.n	8012576 <__ieee754_pow+0x3e>
 801268c:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8012690:	d106      	bne.n	80126a0 <__ieee754_pow+0x168>
 8012692:	4632      	mov	r2, r6
 8012694:	463b      	mov	r3, r7
 8012696:	4630      	mov	r0, r6
 8012698:	4639      	mov	r1, r7
 801269a:	f7ed ffcd 	bl	8000638 <__aeabi_dmul>
 801269e:	e76a      	b.n	8012576 <__ieee754_pow+0x3e>
 80126a0:	4b3e      	ldr	r3, [pc, #248]	; (801279c <__ieee754_pow+0x264>)
 80126a2:	4599      	cmp	r9, r3
 80126a4:	d10c      	bne.n	80126c0 <__ieee754_pow+0x188>
 80126a6:	2d00      	cmp	r5, #0
 80126a8:	db0a      	blt.n	80126c0 <__ieee754_pow+0x188>
 80126aa:	ec47 6b10 	vmov	d0, r6, r7
 80126ae:	b009      	add	sp, #36	; 0x24
 80126b0:	ecbd 8b06 	vpop	{d8-d10}
 80126b4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b8:	f7ff bc72 	b.w	8011fa0 <__ieee754_sqrt>
 80126bc:	2300      	movs	r3, #0
 80126be:	9304      	str	r3, [sp, #16]
 80126c0:	ec47 6b10 	vmov	d0, r6, r7
 80126c4:	f000 fe6a 	bl	801339c <fabs>
 80126c8:	ec51 0b10 	vmov	r0, r1, d0
 80126cc:	f1ba 0f00 	cmp.w	sl, #0
 80126d0:	d129      	bne.n	8012726 <__ieee754_pow+0x1ee>
 80126d2:	b124      	cbz	r4, 80126de <__ieee754_pow+0x1a6>
 80126d4:	4b2f      	ldr	r3, [pc, #188]	; (8012794 <__ieee754_pow+0x25c>)
 80126d6:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80126da:	429a      	cmp	r2, r3
 80126dc:	d123      	bne.n	8012726 <__ieee754_pow+0x1ee>
 80126de:	f1b9 0f00 	cmp.w	r9, #0
 80126e2:	da05      	bge.n	80126f0 <__ieee754_pow+0x1b8>
 80126e4:	4602      	mov	r2, r0
 80126e6:	460b      	mov	r3, r1
 80126e8:	2000      	movs	r0, #0
 80126ea:	492a      	ldr	r1, [pc, #168]	; (8012794 <__ieee754_pow+0x25c>)
 80126ec:	f7ee f8ce 	bl	800088c <__aeabi_ddiv>
 80126f0:	2d00      	cmp	r5, #0
 80126f2:	f6bf af40 	bge.w	8012576 <__ieee754_pow+0x3e>
 80126f6:	9b04      	ldr	r3, [sp, #16]
 80126f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80126fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8012700:	431c      	orrs	r4, r3
 8012702:	d108      	bne.n	8012716 <__ieee754_pow+0x1de>
 8012704:	4602      	mov	r2, r0
 8012706:	460b      	mov	r3, r1
 8012708:	4610      	mov	r0, r2
 801270a:	4619      	mov	r1, r3
 801270c:	f7ed fddc 	bl	80002c8 <__aeabi_dsub>
 8012710:	4602      	mov	r2, r0
 8012712:	460b      	mov	r3, r1
 8012714:	e78f      	b.n	8012636 <__ieee754_pow+0xfe>
 8012716:	9b04      	ldr	r3, [sp, #16]
 8012718:	2b01      	cmp	r3, #1
 801271a:	f47f af2c 	bne.w	8012576 <__ieee754_pow+0x3e>
 801271e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8012722:	4619      	mov	r1, r3
 8012724:	e727      	b.n	8012576 <__ieee754_pow+0x3e>
 8012726:	0feb      	lsrs	r3, r5, #31
 8012728:	3b01      	subs	r3, #1
 801272a:	9306      	str	r3, [sp, #24]
 801272c:	9a06      	ldr	r2, [sp, #24]
 801272e:	9b04      	ldr	r3, [sp, #16]
 8012730:	4313      	orrs	r3, r2
 8012732:	d102      	bne.n	801273a <__ieee754_pow+0x202>
 8012734:	4632      	mov	r2, r6
 8012736:	463b      	mov	r3, r7
 8012738:	e7e6      	b.n	8012708 <__ieee754_pow+0x1d0>
 801273a:	4b19      	ldr	r3, [pc, #100]	; (80127a0 <__ieee754_pow+0x268>)
 801273c:	4598      	cmp	r8, r3
 801273e:	f340 80fb 	ble.w	8012938 <__ieee754_pow+0x400>
 8012742:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8012746:	4598      	cmp	r8, r3
 8012748:	4b13      	ldr	r3, [pc, #76]	; (8012798 <__ieee754_pow+0x260>)
 801274a:	dd0c      	ble.n	8012766 <__ieee754_pow+0x22e>
 801274c:	429c      	cmp	r4, r3
 801274e:	dc0f      	bgt.n	8012770 <__ieee754_pow+0x238>
 8012750:	f1b9 0f00 	cmp.w	r9, #0
 8012754:	da0f      	bge.n	8012776 <__ieee754_pow+0x23e>
 8012756:	2000      	movs	r0, #0
 8012758:	b009      	add	sp, #36	; 0x24
 801275a:	ecbd 8b06 	vpop	{d8-d10}
 801275e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012762:	f001 bd16 	b.w	8014192 <__math_oflow>
 8012766:	429c      	cmp	r4, r3
 8012768:	dbf2      	blt.n	8012750 <__ieee754_pow+0x218>
 801276a:	4b0a      	ldr	r3, [pc, #40]	; (8012794 <__ieee754_pow+0x25c>)
 801276c:	429c      	cmp	r4, r3
 801276e:	dd19      	ble.n	80127a4 <__ieee754_pow+0x26c>
 8012770:	f1b9 0f00 	cmp.w	r9, #0
 8012774:	dcef      	bgt.n	8012756 <__ieee754_pow+0x21e>
 8012776:	2000      	movs	r0, #0
 8012778:	b009      	add	sp, #36	; 0x24
 801277a:	ecbd 8b06 	vpop	{d8-d10}
 801277e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012782:	f001 bcfd 	b.w	8014180 <__math_uflow>
 8012786:	bf00      	nop
 8012788:	fff00000 	.word	0xfff00000
 801278c:	7ff00000 	.word	0x7ff00000
 8012790:	433fffff 	.word	0x433fffff
 8012794:	3ff00000 	.word	0x3ff00000
 8012798:	3fefffff 	.word	0x3fefffff
 801279c:	3fe00000 	.word	0x3fe00000
 80127a0:	41e00000 	.word	0x41e00000
 80127a4:	4b60      	ldr	r3, [pc, #384]	; (8012928 <__ieee754_pow+0x3f0>)
 80127a6:	2200      	movs	r2, #0
 80127a8:	f7ed fd8e 	bl	80002c8 <__aeabi_dsub>
 80127ac:	a354      	add	r3, pc, #336	; (adr r3, 8012900 <__ieee754_pow+0x3c8>)
 80127ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127b2:	4604      	mov	r4, r0
 80127b4:	460d      	mov	r5, r1
 80127b6:	f7ed ff3f 	bl	8000638 <__aeabi_dmul>
 80127ba:	a353      	add	r3, pc, #332	; (adr r3, 8012908 <__ieee754_pow+0x3d0>)
 80127bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80127c0:	4606      	mov	r6, r0
 80127c2:	460f      	mov	r7, r1
 80127c4:	4620      	mov	r0, r4
 80127c6:	4629      	mov	r1, r5
 80127c8:	f7ed ff36 	bl	8000638 <__aeabi_dmul>
 80127cc:	4b57      	ldr	r3, [pc, #348]	; (801292c <__ieee754_pow+0x3f4>)
 80127ce:	4682      	mov	sl, r0
 80127d0:	468b      	mov	fp, r1
 80127d2:	2200      	movs	r2, #0
 80127d4:	4620      	mov	r0, r4
 80127d6:	4629      	mov	r1, r5
 80127d8:	f7ed ff2e 	bl	8000638 <__aeabi_dmul>
 80127dc:	4602      	mov	r2, r0
 80127de:	460b      	mov	r3, r1
 80127e0:	a14b      	add	r1, pc, #300	; (adr r1, 8012910 <__ieee754_pow+0x3d8>)
 80127e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 80127e6:	f7ed fd6f 	bl	80002c8 <__aeabi_dsub>
 80127ea:	4622      	mov	r2, r4
 80127ec:	462b      	mov	r3, r5
 80127ee:	f7ed ff23 	bl	8000638 <__aeabi_dmul>
 80127f2:	4602      	mov	r2, r0
 80127f4:	460b      	mov	r3, r1
 80127f6:	2000      	movs	r0, #0
 80127f8:	494d      	ldr	r1, [pc, #308]	; (8012930 <__ieee754_pow+0x3f8>)
 80127fa:	f7ed fd65 	bl	80002c8 <__aeabi_dsub>
 80127fe:	4622      	mov	r2, r4
 8012800:	4680      	mov	r8, r0
 8012802:	4689      	mov	r9, r1
 8012804:	462b      	mov	r3, r5
 8012806:	4620      	mov	r0, r4
 8012808:	4629      	mov	r1, r5
 801280a:	f7ed ff15 	bl	8000638 <__aeabi_dmul>
 801280e:	4602      	mov	r2, r0
 8012810:	460b      	mov	r3, r1
 8012812:	4640      	mov	r0, r8
 8012814:	4649      	mov	r1, r9
 8012816:	f7ed ff0f 	bl	8000638 <__aeabi_dmul>
 801281a:	a33f      	add	r3, pc, #252	; (adr r3, 8012918 <__ieee754_pow+0x3e0>)
 801281c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012820:	f7ed ff0a 	bl	8000638 <__aeabi_dmul>
 8012824:	4602      	mov	r2, r0
 8012826:	460b      	mov	r3, r1
 8012828:	4650      	mov	r0, sl
 801282a:	4659      	mov	r1, fp
 801282c:	f7ed fd4c 	bl	80002c8 <__aeabi_dsub>
 8012830:	4602      	mov	r2, r0
 8012832:	460b      	mov	r3, r1
 8012834:	4680      	mov	r8, r0
 8012836:	4689      	mov	r9, r1
 8012838:	4630      	mov	r0, r6
 801283a:	4639      	mov	r1, r7
 801283c:	f7ed fd46 	bl	80002cc <__adddf3>
 8012840:	2000      	movs	r0, #0
 8012842:	4632      	mov	r2, r6
 8012844:	463b      	mov	r3, r7
 8012846:	4604      	mov	r4, r0
 8012848:	460d      	mov	r5, r1
 801284a:	f7ed fd3d 	bl	80002c8 <__aeabi_dsub>
 801284e:	4602      	mov	r2, r0
 8012850:	460b      	mov	r3, r1
 8012852:	4640      	mov	r0, r8
 8012854:	4649      	mov	r1, r9
 8012856:	f7ed fd37 	bl	80002c8 <__aeabi_dsub>
 801285a:	9b04      	ldr	r3, [sp, #16]
 801285c:	9a06      	ldr	r2, [sp, #24]
 801285e:	3b01      	subs	r3, #1
 8012860:	4313      	orrs	r3, r2
 8012862:	4682      	mov	sl, r0
 8012864:	468b      	mov	fp, r1
 8012866:	f040 81e7 	bne.w	8012c38 <__ieee754_pow+0x700>
 801286a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8012920 <__ieee754_pow+0x3e8>
 801286e:	eeb0 8a47 	vmov.f32	s16, s14
 8012872:	eef0 8a67 	vmov.f32	s17, s15
 8012876:	e9dd 6700 	ldrd	r6, r7, [sp]
 801287a:	2600      	movs	r6, #0
 801287c:	4632      	mov	r2, r6
 801287e:	463b      	mov	r3, r7
 8012880:	e9dd 0100 	ldrd	r0, r1, [sp]
 8012884:	f7ed fd20 	bl	80002c8 <__aeabi_dsub>
 8012888:	4622      	mov	r2, r4
 801288a:	462b      	mov	r3, r5
 801288c:	f7ed fed4 	bl	8000638 <__aeabi_dmul>
 8012890:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012894:	4680      	mov	r8, r0
 8012896:	4689      	mov	r9, r1
 8012898:	4650      	mov	r0, sl
 801289a:	4659      	mov	r1, fp
 801289c:	f7ed fecc 	bl	8000638 <__aeabi_dmul>
 80128a0:	4602      	mov	r2, r0
 80128a2:	460b      	mov	r3, r1
 80128a4:	4640      	mov	r0, r8
 80128a6:	4649      	mov	r1, r9
 80128a8:	f7ed fd10 	bl	80002cc <__adddf3>
 80128ac:	4632      	mov	r2, r6
 80128ae:	463b      	mov	r3, r7
 80128b0:	4680      	mov	r8, r0
 80128b2:	4689      	mov	r9, r1
 80128b4:	4620      	mov	r0, r4
 80128b6:	4629      	mov	r1, r5
 80128b8:	f7ed febe 	bl	8000638 <__aeabi_dmul>
 80128bc:	460b      	mov	r3, r1
 80128be:	4604      	mov	r4, r0
 80128c0:	460d      	mov	r5, r1
 80128c2:	4602      	mov	r2, r0
 80128c4:	4649      	mov	r1, r9
 80128c6:	4640      	mov	r0, r8
 80128c8:	f7ed fd00 	bl	80002cc <__adddf3>
 80128cc:	4b19      	ldr	r3, [pc, #100]	; (8012934 <__ieee754_pow+0x3fc>)
 80128ce:	4299      	cmp	r1, r3
 80128d0:	ec45 4b19 	vmov	d9, r4, r5
 80128d4:	4606      	mov	r6, r0
 80128d6:	460f      	mov	r7, r1
 80128d8:	468b      	mov	fp, r1
 80128da:	f340 82f0 	ble.w	8012ebe <__ieee754_pow+0x986>
 80128de:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80128e2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80128e6:	4303      	orrs	r3, r0
 80128e8:	f000 81e4 	beq.w	8012cb4 <__ieee754_pow+0x77c>
 80128ec:	ec51 0b18 	vmov	r0, r1, d8
 80128f0:	2200      	movs	r2, #0
 80128f2:	2300      	movs	r3, #0
 80128f4:	f7ee f912 	bl	8000b1c <__aeabi_dcmplt>
 80128f8:	3800      	subs	r0, #0
 80128fa:	bf18      	it	ne
 80128fc:	2001      	movne	r0, #1
 80128fe:	e72b      	b.n	8012758 <__ieee754_pow+0x220>
 8012900:	60000000 	.word	0x60000000
 8012904:	3ff71547 	.word	0x3ff71547
 8012908:	f85ddf44 	.word	0xf85ddf44
 801290c:	3e54ae0b 	.word	0x3e54ae0b
 8012910:	55555555 	.word	0x55555555
 8012914:	3fd55555 	.word	0x3fd55555
 8012918:	652b82fe 	.word	0x652b82fe
 801291c:	3ff71547 	.word	0x3ff71547
 8012920:	00000000 	.word	0x00000000
 8012924:	bff00000 	.word	0xbff00000
 8012928:	3ff00000 	.word	0x3ff00000
 801292c:	3fd00000 	.word	0x3fd00000
 8012930:	3fe00000 	.word	0x3fe00000
 8012934:	408fffff 	.word	0x408fffff
 8012938:	4bd5      	ldr	r3, [pc, #852]	; (8012c90 <__ieee754_pow+0x758>)
 801293a:	402b      	ands	r3, r5
 801293c:	2200      	movs	r2, #0
 801293e:	b92b      	cbnz	r3, 801294c <__ieee754_pow+0x414>
 8012940:	4bd4      	ldr	r3, [pc, #848]	; (8012c94 <__ieee754_pow+0x75c>)
 8012942:	f7ed fe79 	bl	8000638 <__aeabi_dmul>
 8012946:	f06f 0234 	mvn.w	r2, #52	; 0x34
 801294a:	460c      	mov	r4, r1
 801294c:	1523      	asrs	r3, r4, #20
 801294e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8012952:	4413      	add	r3, r2
 8012954:	9305      	str	r3, [sp, #20]
 8012956:	4bd0      	ldr	r3, [pc, #832]	; (8012c98 <__ieee754_pow+0x760>)
 8012958:	f3c4 0413 	ubfx	r4, r4, #0, #20
 801295c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8012960:	429c      	cmp	r4, r3
 8012962:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8012966:	dd08      	ble.n	801297a <__ieee754_pow+0x442>
 8012968:	4bcc      	ldr	r3, [pc, #816]	; (8012c9c <__ieee754_pow+0x764>)
 801296a:	429c      	cmp	r4, r3
 801296c:	f340 8162 	ble.w	8012c34 <__ieee754_pow+0x6fc>
 8012970:	9b05      	ldr	r3, [sp, #20]
 8012972:	3301      	adds	r3, #1
 8012974:	9305      	str	r3, [sp, #20]
 8012976:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 801297a:	2400      	movs	r4, #0
 801297c:	00e3      	lsls	r3, r4, #3
 801297e:	9307      	str	r3, [sp, #28]
 8012980:	4bc7      	ldr	r3, [pc, #796]	; (8012ca0 <__ieee754_pow+0x768>)
 8012982:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8012986:	ed93 7b00 	vldr	d7, [r3]
 801298a:	4629      	mov	r1, r5
 801298c:	ec53 2b17 	vmov	r2, r3, d7
 8012990:	eeb0 9a47 	vmov.f32	s18, s14
 8012994:	eef0 9a67 	vmov.f32	s19, s15
 8012998:	4682      	mov	sl, r0
 801299a:	f7ed fc95 	bl	80002c8 <__aeabi_dsub>
 801299e:	4652      	mov	r2, sl
 80129a0:	4606      	mov	r6, r0
 80129a2:	460f      	mov	r7, r1
 80129a4:	462b      	mov	r3, r5
 80129a6:	ec51 0b19 	vmov	r0, r1, d9
 80129aa:	f7ed fc8f 	bl	80002cc <__adddf3>
 80129ae:	4602      	mov	r2, r0
 80129b0:	460b      	mov	r3, r1
 80129b2:	2000      	movs	r0, #0
 80129b4:	49bb      	ldr	r1, [pc, #748]	; (8012ca4 <__ieee754_pow+0x76c>)
 80129b6:	f7ed ff69 	bl	800088c <__aeabi_ddiv>
 80129ba:	ec41 0b1a 	vmov	d10, r0, r1
 80129be:	4602      	mov	r2, r0
 80129c0:	460b      	mov	r3, r1
 80129c2:	4630      	mov	r0, r6
 80129c4:	4639      	mov	r1, r7
 80129c6:	f7ed fe37 	bl	8000638 <__aeabi_dmul>
 80129ca:	2300      	movs	r3, #0
 80129cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80129d0:	9302      	str	r3, [sp, #8]
 80129d2:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80129d6:	46ab      	mov	fp, r5
 80129d8:	106d      	asrs	r5, r5, #1
 80129da:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80129de:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80129e2:	ec41 0b18 	vmov	d8, r0, r1
 80129e6:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80129ea:	2200      	movs	r2, #0
 80129ec:	4640      	mov	r0, r8
 80129ee:	4649      	mov	r1, r9
 80129f0:	4614      	mov	r4, r2
 80129f2:	461d      	mov	r5, r3
 80129f4:	f7ed fe20 	bl	8000638 <__aeabi_dmul>
 80129f8:	4602      	mov	r2, r0
 80129fa:	460b      	mov	r3, r1
 80129fc:	4630      	mov	r0, r6
 80129fe:	4639      	mov	r1, r7
 8012a00:	f7ed fc62 	bl	80002c8 <__aeabi_dsub>
 8012a04:	ec53 2b19 	vmov	r2, r3, d9
 8012a08:	4606      	mov	r6, r0
 8012a0a:	460f      	mov	r7, r1
 8012a0c:	4620      	mov	r0, r4
 8012a0e:	4629      	mov	r1, r5
 8012a10:	f7ed fc5a 	bl	80002c8 <__aeabi_dsub>
 8012a14:	4602      	mov	r2, r0
 8012a16:	460b      	mov	r3, r1
 8012a18:	4650      	mov	r0, sl
 8012a1a:	4659      	mov	r1, fp
 8012a1c:	f7ed fc54 	bl	80002c8 <__aeabi_dsub>
 8012a20:	4642      	mov	r2, r8
 8012a22:	464b      	mov	r3, r9
 8012a24:	f7ed fe08 	bl	8000638 <__aeabi_dmul>
 8012a28:	4602      	mov	r2, r0
 8012a2a:	460b      	mov	r3, r1
 8012a2c:	4630      	mov	r0, r6
 8012a2e:	4639      	mov	r1, r7
 8012a30:	f7ed fc4a 	bl	80002c8 <__aeabi_dsub>
 8012a34:	ec53 2b1a 	vmov	r2, r3, d10
 8012a38:	f7ed fdfe 	bl	8000638 <__aeabi_dmul>
 8012a3c:	ec53 2b18 	vmov	r2, r3, d8
 8012a40:	ec41 0b19 	vmov	d9, r0, r1
 8012a44:	ec51 0b18 	vmov	r0, r1, d8
 8012a48:	f7ed fdf6 	bl	8000638 <__aeabi_dmul>
 8012a4c:	a37c      	add	r3, pc, #496	; (adr r3, 8012c40 <__ieee754_pow+0x708>)
 8012a4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a52:	4604      	mov	r4, r0
 8012a54:	460d      	mov	r5, r1
 8012a56:	f7ed fdef 	bl	8000638 <__aeabi_dmul>
 8012a5a:	a37b      	add	r3, pc, #492	; (adr r3, 8012c48 <__ieee754_pow+0x710>)
 8012a5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a60:	f7ed fc34 	bl	80002cc <__adddf3>
 8012a64:	4622      	mov	r2, r4
 8012a66:	462b      	mov	r3, r5
 8012a68:	f7ed fde6 	bl	8000638 <__aeabi_dmul>
 8012a6c:	a378      	add	r3, pc, #480	; (adr r3, 8012c50 <__ieee754_pow+0x718>)
 8012a6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a72:	f7ed fc2b 	bl	80002cc <__adddf3>
 8012a76:	4622      	mov	r2, r4
 8012a78:	462b      	mov	r3, r5
 8012a7a:	f7ed fddd 	bl	8000638 <__aeabi_dmul>
 8012a7e:	a376      	add	r3, pc, #472	; (adr r3, 8012c58 <__ieee754_pow+0x720>)
 8012a80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a84:	f7ed fc22 	bl	80002cc <__adddf3>
 8012a88:	4622      	mov	r2, r4
 8012a8a:	462b      	mov	r3, r5
 8012a8c:	f7ed fdd4 	bl	8000638 <__aeabi_dmul>
 8012a90:	a373      	add	r3, pc, #460	; (adr r3, 8012c60 <__ieee754_pow+0x728>)
 8012a92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012a96:	f7ed fc19 	bl	80002cc <__adddf3>
 8012a9a:	4622      	mov	r2, r4
 8012a9c:	462b      	mov	r3, r5
 8012a9e:	f7ed fdcb 	bl	8000638 <__aeabi_dmul>
 8012aa2:	a371      	add	r3, pc, #452	; (adr r3, 8012c68 <__ieee754_pow+0x730>)
 8012aa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012aa8:	f7ed fc10 	bl	80002cc <__adddf3>
 8012aac:	4622      	mov	r2, r4
 8012aae:	4606      	mov	r6, r0
 8012ab0:	460f      	mov	r7, r1
 8012ab2:	462b      	mov	r3, r5
 8012ab4:	4620      	mov	r0, r4
 8012ab6:	4629      	mov	r1, r5
 8012ab8:	f7ed fdbe 	bl	8000638 <__aeabi_dmul>
 8012abc:	4602      	mov	r2, r0
 8012abe:	460b      	mov	r3, r1
 8012ac0:	4630      	mov	r0, r6
 8012ac2:	4639      	mov	r1, r7
 8012ac4:	f7ed fdb8 	bl	8000638 <__aeabi_dmul>
 8012ac8:	4642      	mov	r2, r8
 8012aca:	4604      	mov	r4, r0
 8012acc:	460d      	mov	r5, r1
 8012ace:	464b      	mov	r3, r9
 8012ad0:	ec51 0b18 	vmov	r0, r1, d8
 8012ad4:	f7ed fbfa 	bl	80002cc <__adddf3>
 8012ad8:	ec53 2b19 	vmov	r2, r3, d9
 8012adc:	f7ed fdac 	bl	8000638 <__aeabi_dmul>
 8012ae0:	4622      	mov	r2, r4
 8012ae2:	462b      	mov	r3, r5
 8012ae4:	f7ed fbf2 	bl	80002cc <__adddf3>
 8012ae8:	4642      	mov	r2, r8
 8012aea:	4682      	mov	sl, r0
 8012aec:	468b      	mov	fp, r1
 8012aee:	464b      	mov	r3, r9
 8012af0:	4640      	mov	r0, r8
 8012af2:	4649      	mov	r1, r9
 8012af4:	f7ed fda0 	bl	8000638 <__aeabi_dmul>
 8012af8:	4b6b      	ldr	r3, [pc, #428]	; (8012ca8 <__ieee754_pow+0x770>)
 8012afa:	2200      	movs	r2, #0
 8012afc:	4606      	mov	r6, r0
 8012afe:	460f      	mov	r7, r1
 8012b00:	f7ed fbe4 	bl	80002cc <__adddf3>
 8012b04:	4652      	mov	r2, sl
 8012b06:	465b      	mov	r3, fp
 8012b08:	f7ed fbe0 	bl	80002cc <__adddf3>
 8012b0c:	2000      	movs	r0, #0
 8012b0e:	4604      	mov	r4, r0
 8012b10:	460d      	mov	r5, r1
 8012b12:	4602      	mov	r2, r0
 8012b14:	460b      	mov	r3, r1
 8012b16:	4640      	mov	r0, r8
 8012b18:	4649      	mov	r1, r9
 8012b1a:	f7ed fd8d 	bl	8000638 <__aeabi_dmul>
 8012b1e:	4b62      	ldr	r3, [pc, #392]	; (8012ca8 <__ieee754_pow+0x770>)
 8012b20:	4680      	mov	r8, r0
 8012b22:	4689      	mov	r9, r1
 8012b24:	2200      	movs	r2, #0
 8012b26:	4620      	mov	r0, r4
 8012b28:	4629      	mov	r1, r5
 8012b2a:	f7ed fbcd 	bl	80002c8 <__aeabi_dsub>
 8012b2e:	4632      	mov	r2, r6
 8012b30:	463b      	mov	r3, r7
 8012b32:	f7ed fbc9 	bl	80002c8 <__aeabi_dsub>
 8012b36:	4602      	mov	r2, r0
 8012b38:	460b      	mov	r3, r1
 8012b3a:	4650      	mov	r0, sl
 8012b3c:	4659      	mov	r1, fp
 8012b3e:	f7ed fbc3 	bl	80002c8 <__aeabi_dsub>
 8012b42:	ec53 2b18 	vmov	r2, r3, d8
 8012b46:	f7ed fd77 	bl	8000638 <__aeabi_dmul>
 8012b4a:	4622      	mov	r2, r4
 8012b4c:	4606      	mov	r6, r0
 8012b4e:	460f      	mov	r7, r1
 8012b50:	462b      	mov	r3, r5
 8012b52:	ec51 0b19 	vmov	r0, r1, d9
 8012b56:	f7ed fd6f 	bl	8000638 <__aeabi_dmul>
 8012b5a:	4602      	mov	r2, r0
 8012b5c:	460b      	mov	r3, r1
 8012b5e:	4630      	mov	r0, r6
 8012b60:	4639      	mov	r1, r7
 8012b62:	f7ed fbb3 	bl	80002cc <__adddf3>
 8012b66:	4606      	mov	r6, r0
 8012b68:	460f      	mov	r7, r1
 8012b6a:	4602      	mov	r2, r0
 8012b6c:	460b      	mov	r3, r1
 8012b6e:	4640      	mov	r0, r8
 8012b70:	4649      	mov	r1, r9
 8012b72:	f7ed fbab 	bl	80002cc <__adddf3>
 8012b76:	a33e      	add	r3, pc, #248	; (adr r3, 8012c70 <__ieee754_pow+0x738>)
 8012b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012b7c:	2000      	movs	r0, #0
 8012b7e:	4604      	mov	r4, r0
 8012b80:	460d      	mov	r5, r1
 8012b82:	f7ed fd59 	bl	8000638 <__aeabi_dmul>
 8012b86:	4642      	mov	r2, r8
 8012b88:	ec41 0b18 	vmov	d8, r0, r1
 8012b8c:	464b      	mov	r3, r9
 8012b8e:	4620      	mov	r0, r4
 8012b90:	4629      	mov	r1, r5
 8012b92:	f7ed fb99 	bl	80002c8 <__aeabi_dsub>
 8012b96:	4602      	mov	r2, r0
 8012b98:	460b      	mov	r3, r1
 8012b9a:	4630      	mov	r0, r6
 8012b9c:	4639      	mov	r1, r7
 8012b9e:	f7ed fb93 	bl	80002c8 <__aeabi_dsub>
 8012ba2:	a335      	add	r3, pc, #212	; (adr r3, 8012c78 <__ieee754_pow+0x740>)
 8012ba4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012ba8:	f7ed fd46 	bl	8000638 <__aeabi_dmul>
 8012bac:	a334      	add	r3, pc, #208	; (adr r3, 8012c80 <__ieee754_pow+0x748>)
 8012bae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bb2:	4606      	mov	r6, r0
 8012bb4:	460f      	mov	r7, r1
 8012bb6:	4620      	mov	r0, r4
 8012bb8:	4629      	mov	r1, r5
 8012bba:	f7ed fd3d 	bl	8000638 <__aeabi_dmul>
 8012bbe:	4602      	mov	r2, r0
 8012bc0:	460b      	mov	r3, r1
 8012bc2:	4630      	mov	r0, r6
 8012bc4:	4639      	mov	r1, r7
 8012bc6:	f7ed fb81 	bl	80002cc <__adddf3>
 8012bca:	9a07      	ldr	r2, [sp, #28]
 8012bcc:	4b37      	ldr	r3, [pc, #220]	; (8012cac <__ieee754_pow+0x774>)
 8012bce:	4413      	add	r3, r2
 8012bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012bd4:	f7ed fb7a 	bl	80002cc <__adddf3>
 8012bd8:	4682      	mov	sl, r0
 8012bda:	9805      	ldr	r0, [sp, #20]
 8012bdc:	468b      	mov	fp, r1
 8012bde:	f7ed fcc1 	bl	8000564 <__aeabi_i2d>
 8012be2:	9a07      	ldr	r2, [sp, #28]
 8012be4:	4b32      	ldr	r3, [pc, #200]	; (8012cb0 <__ieee754_pow+0x778>)
 8012be6:	4413      	add	r3, r2
 8012be8:	e9d3 8900 	ldrd	r8, r9, [r3]
 8012bec:	4606      	mov	r6, r0
 8012bee:	460f      	mov	r7, r1
 8012bf0:	4652      	mov	r2, sl
 8012bf2:	465b      	mov	r3, fp
 8012bf4:	ec51 0b18 	vmov	r0, r1, d8
 8012bf8:	f7ed fb68 	bl	80002cc <__adddf3>
 8012bfc:	4642      	mov	r2, r8
 8012bfe:	464b      	mov	r3, r9
 8012c00:	f7ed fb64 	bl	80002cc <__adddf3>
 8012c04:	4632      	mov	r2, r6
 8012c06:	463b      	mov	r3, r7
 8012c08:	f7ed fb60 	bl	80002cc <__adddf3>
 8012c0c:	2000      	movs	r0, #0
 8012c0e:	4632      	mov	r2, r6
 8012c10:	463b      	mov	r3, r7
 8012c12:	4604      	mov	r4, r0
 8012c14:	460d      	mov	r5, r1
 8012c16:	f7ed fb57 	bl	80002c8 <__aeabi_dsub>
 8012c1a:	4642      	mov	r2, r8
 8012c1c:	464b      	mov	r3, r9
 8012c1e:	f7ed fb53 	bl	80002c8 <__aeabi_dsub>
 8012c22:	ec53 2b18 	vmov	r2, r3, d8
 8012c26:	f7ed fb4f 	bl	80002c8 <__aeabi_dsub>
 8012c2a:	4602      	mov	r2, r0
 8012c2c:	460b      	mov	r3, r1
 8012c2e:	4650      	mov	r0, sl
 8012c30:	4659      	mov	r1, fp
 8012c32:	e610      	b.n	8012856 <__ieee754_pow+0x31e>
 8012c34:	2401      	movs	r4, #1
 8012c36:	e6a1      	b.n	801297c <__ieee754_pow+0x444>
 8012c38:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8012c88 <__ieee754_pow+0x750>
 8012c3c:	e617      	b.n	801286e <__ieee754_pow+0x336>
 8012c3e:	bf00      	nop
 8012c40:	4a454eef 	.word	0x4a454eef
 8012c44:	3fca7e28 	.word	0x3fca7e28
 8012c48:	93c9db65 	.word	0x93c9db65
 8012c4c:	3fcd864a 	.word	0x3fcd864a
 8012c50:	a91d4101 	.word	0xa91d4101
 8012c54:	3fd17460 	.word	0x3fd17460
 8012c58:	518f264d 	.word	0x518f264d
 8012c5c:	3fd55555 	.word	0x3fd55555
 8012c60:	db6fabff 	.word	0xdb6fabff
 8012c64:	3fdb6db6 	.word	0x3fdb6db6
 8012c68:	33333303 	.word	0x33333303
 8012c6c:	3fe33333 	.word	0x3fe33333
 8012c70:	e0000000 	.word	0xe0000000
 8012c74:	3feec709 	.word	0x3feec709
 8012c78:	dc3a03fd 	.word	0xdc3a03fd
 8012c7c:	3feec709 	.word	0x3feec709
 8012c80:	145b01f5 	.word	0x145b01f5
 8012c84:	be3e2fe0 	.word	0xbe3e2fe0
 8012c88:	00000000 	.word	0x00000000
 8012c8c:	3ff00000 	.word	0x3ff00000
 8012c90:	7ff00000 	.word	0x7ff00000
 8012c94:	43400000 	.word	0x43400000
 8012c98:	0003988e 	.word	0x0003988e
 8012c9c:	000bb679 	.word	0x000bb679
 8012ca0:	08016ca8 	.word	0x08016ca8
 8012ca4:	3ff00000 	.word	0x3ff00000
 8012ca8:	40080000 	.word	0x40080000
 8012cac:	08016cc8 	.word	0x08016cc8
 8012cb0:	08016cb8 	.word	0x08016cb8
 8012cb4:	a3b3      	add	r3, pc, #716	; (adr r3, 8012f84 <__ieee754_pow+0xa4c>)
 8012cb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012cba:	4640      	mov	r0, r8
 8012cbc:	4649      	mov	r1, r9
 8012cbe:	f7ed fb05 	bl	80002cc <__adddf3>
 8012cc2:	4622      	mov	r2, r4
 8012cc4:	ec41 0b1a 	vmov	d10, r0, r1
 8012cc8:	462b      	mov	r3, r5
 8012cca:	4630      	mov	r0, r6
 8012ccc:	4639      	mov	r1, r7
 8012cce:	f7ed fafb 	bl	80002c8 <__aeabi_dsub>
 8012cd2:	4602      	mov	r2, r0
 8012cd4:	460b      	mov	r3, r1
 8012cd6:	ec51 0b1a 	vmov	r0, r1, d10
 8012cda:	f7ed ff3d 	bl	8000b58 <__aeabi_dcmpgt>
 8012cde:	2800      	cmp	r0, #0
 8012ce0:	f47f ae04 	bne.w	80128ec <__ieee754_pow+0x3b4>
 8012ce4:	4aa2      	ldr	r2, [pc, #648]	; (8012f70 <__ieee754_pow+0xa38>)
 8012ce6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8012cea:	4293      	cmp	r3, r2
 8012cec:	f340 8107 	ble.w	8012efe <__ieee754_pow+0x9c6>
 8012cf0:	151b      	asrs	r3, r3, #20
 8012cf2:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8012cf6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8012cfa:	fa4a fa03 	asr.w	sl, sl, r3
 8012cfe:	44da      	add	sl, fp
 8012d00:	f3ca 510a 	ubfx	r1, sl, #20, #11
 8012d04:	489b      	ldr	r0, [pc, #620]	; (8012f74 <__ieee754_pow+0xa3c>)
 8012d06:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8012d0a:	4108      	asrs	r0, r1
 8012d0c:	ea00 030a 	and.w	r3, r0, sl
 8012d10:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 8012d14:	f1c1 0114 	rsb	r1, r1, #20
 8012d18:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8012d1c:	fa4a fa01 	asr.w	sl, sl, r1
 8012d20:	f1bb 0f00 	cmp.w	fp, #0
 8012d24:	f04f 0200 	mov.w	r2, #0
 8012d28:	4620      	mov	r0, r4
 8012d2a:	4629      	mov	r1, r5
 8012d2c:	bfb8      	it	lt
 8012d2e:	f1ca 0a00 	rsblt	sl, sl, #0
 8012d32:	f7ed fac9 	bl	80002c8 <__aeabi_dsub>
 8012d36:	ec41 0b19 	vmov	d9, r0, r1
 8012d3a:	4642      	mov	r2, r8
 8012d3c:	464b      	mov	r3, r9
 8012d3e:	ec51 0b19 	vmov	r0, r1, d9
 8012d42:	f7ed fac3 	bl	80002cc <__adddf3>
 8012d46:	a37a      	add	r3, pc, #488	; (adr r3, 8012f30 <__ieee754_pow+0x9f8>)
 8012d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d4c:	2000      	movs	r0, #0
 8012d4e:	4604      	mov	r4, r0
 8012d50:	460d      	mov	r5, r1
 8012d52:	f7ed fc71 	bl	8000638 <__aeabi_dmul>
 8012d56:	ec53 2b19 	vmov	r2, r3, d9
 8012d5a:	4606      	mov	r6, r0
 8012d5c:	460f      	mov	r7, r1
 8012d5e:	4620      	mov	r0, r4
 8012d60:	4629      	mov	r1, r5
 8012d62:	f7ed fab1 	bl	80002c8 <__aeabi_dsub>
 8012d66:	4602      	mov	r2, r0
 8012d68:	460b      	mov	r3, r1
 8012d6a:	4640      	mov	r0, r8
 8012d6c:	4649      	mov	r1, r9
 8012d6e:	f7ed faab 	bl	80002c8 <__aeabi_dsub>
 8012d72:	a371      	add	r3, pc, #452	; (adr r3, 8012f38 <__ieee754_pow+0xa00>)
 8012d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d78:	f7ed fc5e 	bl	8000638 <__aeabi_dmul>
 8012d7c:	a370      	add	r3, pc, #448	; (adr r3, 8012f40 <__ieee754_pow+0xa08>)
 8012d7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012d82:	4680      	mov	r8, r0
 8012d84:	4689      	mov	r9, r1
 8012d86:	4620      	mov	r0, r4
 8012d88:	4629      	mov	r1, r5
 8012d8a:	f7ed fc55 	bl	8000638 <__aeabi_dmul>
 8012d8e:	4602      	mov	r2, r0
 8012d90:	460b      	mov	r3, r1
 8012d92:	4640      	mov	r0, r8
 8012d94:	4649      	mov	r1, r9
 8012d96:	f7ed fa99 	bl	80002cc <__adddf3>
 8012d9a:	4604      	mov	r4, r0
 8012d9c:	460d      	mov	r5, r1
 8012d9e:	4602      	mov	r2, r0
 8012da0:	460b      	mov	r3, r1
 8012da2:	4630      	mov	r0, r6
 8012da4:	4639      	mov	r1, r7
 8012da6:	f7ed fa91 	bl	80002cc <__adddf3>
 8012daa:	4632      	mov	r2, r6
 8012dac:	463b      	mov	r3, r7
 8012dae:	4680      	mov	r8, r0
 8012db0:	4689      	mov	r9, r1
 8012db2:	f7ed fa89 	bl	80002c8 <__aeabi_dsub>
 8012db6:	4602      	mov	r2, r0
 8012db8:	460b      	mov	r3, r1
 8012dba:	4620      	mov	r0, r4
 8012dbc:	4629      	mov	r1, r5
 8012dbe:	f7ed fa83 	bl	80002c8 <__aeabi_dsub>
 8012dc2:	4642      	mov	r2, r8
 8012dc4:	4606      	mov	r6, r0
 8012dc6:	460f      	mov	r7, r1
 8012dc8:	464b      	mov	r3, r9
 8012dca:	4640      	mov	r0, r8
 8012dcc:	4649      	mov	r1, r9
 8012dce:	f7ed fc33 	bl	8000638 <__aeabi_dmul>
 8012dd2:	a35d      	add	r3, pc, #372	; (adr r3, 8012f48 <__ieee754_pow+0xa10>)
 8012dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012dd8:	4604      	mov	r4, r0
 8012dda:	460d      	mov	r5, r1
 8012ddc:	f7ed fc2c 	bl	8000638 <__aeabi_dmul>
 8012de0:	a35b      	add	r3, pc, #364	; (adr r3, 8012f50 <__ieee754_pow+0xa18>)
 8012de2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012de6:	f7ed fa6f 	bl	80002c8 <__aeabi_dsub>
 8012dea:	4622      	mov	r2, r4
 8012dec:	462b      	mov	r3, r5
 8012dee:	f7ed fc23 	bl	8000638 <__aeabi_dmul>
 8012df2:	a359      	add	r3, pc, #356	; (adr r3, 8012f58 <__ieee754_pow+0xa20>)
 8012df4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012df8:	f7ed fa68 	bl	80002cc <__adddf3>
 8012dfc:	4622      	mov	r2, r4
 8012dfe:	462b      	mov	r3, r5
 8012e00:	f7ed fc1a 	bl	8000638 <__aeabi_dmul>
 8012e04:	a356      	add	r3, pc, #344	; (adr r3, 8012f60 <__ieee754_pow+0xa28>)
 8012e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e0a:	f7ed fa5d 	bl	80002c8 <__aeabi_dsub>
 8012e0e:	4622      	mov	r2, r4
 8012e10:	462b      	mov	r3, r5
 8012e12:	f7ed fc11 	bl	8000638 <__aeabi_dmul>
 8012e16:	a354      	add	r3, pc, #336	; (adr r3, 8012f68 <__ieee754_pow+0xa30>)
 8012e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012e1c:	f7ed fa56 	bl	80002cc <__adddf3>
 8012e20:	4622      	mov	r2, r4
 8012e22:	462b      	mov	r3, r5
 8012e24:	f7ed fc08 	bl	8000638 <__aeabi_dmul>
 8012e28:	4602      	mov	r2, r0
 8012e2a:	460b      	mov	r3, r1
 8012e2c:	4640      	mov	r0, r8
 8012e2e:	4649      	mov	r1, r9
 8012e30:	f7ed fa4a 	bl	80002c8 <__aeabi_dsub>
 8012e34:	4604      	mov	r4, r0
 8012e36:	460d      	mov	r5, r1
 8012e38:	4602      	mov	r2, r0
 8012e3a:	460b      	mov	r3, r1
 8012e3c:	4640      	mov	r0, r8
 8012e3e:	4649      	mov	r1, r9
 8012e40:	f7ed fbfa 	bl	8000638 <__aeabi_dmul>
 8012e44:	2200      	movs	r2, #0
 8012e46:	ec41 0b19 	vmov	d9, r0, r1
 8012e4a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8012e4e:	4620      	mov	r0, r4
 8012e50:	4629      	mov	r1, r5
 8012e52:	f7ed fa39 	bl	80002c8 <__aeabi_dsub>
 8012e56:	4602      	mov	r2, r0
 8012e58:	460b      	mov	r3, r1
 8012e5a:	ec51 0b19 	vmov	r0, r1, d9
 8012e5e:	f7ed fd15 	bl	800088c <__aeabi_ddiv>
 8012e62:	4632      	mov	r2, r6
 8012e64:	4604      	mov	r4, r0
 8012e66:	460d      	mov	r5, r1
 8012e68:	463b      	mov	r3, r7
 8012e6a:	4640      	mov	r0, r8
 8012e6c:	4649      	mov	r1, r9
 8012e6e:	f7ed fbe3 	bl	8000638 <__aeabi_dmul>
 8012e72:	4632      	mov	r2, r6
 8012e74:	463b      	mov	r3, r7
 8012e76:	f7ed fa29 	bl	80002cc <__adddf3>
 8012e7a:	4602      	mov	r2, r0
 8012e7c:	460b      	mov	r3, r1
 8012e7e:	4620      	mov	r0, r4
 8012e80:	4629      	mov	r1, r5
 8012e82:	f7ed fa21 	bl	80002c8 <__aeabi_dsub>
 8012e86:	4642      	mov	r2, r8
 8012e88:	464b      	mov	r3, r9
 8012e8a:	f7ed fa1d 	bl	80002c8 <__aeabi_dsub>
 8012e8e:	460b      	mov	r3, r1
 8012e90:	4602      	mov	r2, r0
 8012e92:	4939      	ldr	r1, [pc, #228]	; (8012f78 <__ieee754_pow+0xa40>)
 8012e94:	2000      	movs	r0, #0
 8012e96:	f7ed fa17 	bl	80002c8 <__aeabi_dsub>
 8012e9a:	ec41 0b10 	vmov	d0, r0, r1
 8012e9e:	ee10 3a90 	vmov	r3, s1
 8012ea2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8012ea6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8012eaa:	da2b      	bge.n	8012f04 <__ieee754_pow+0x9cc>
 8012eac:	4650      	mov	r0, sl
 8012eae:	f001 f8cb 	bl	8014048 <scalbn>
 8012eb2:	ec51 0b10 	vmov	r0, r1, d0
 8012eb6:	ec53 2b18 	vmov	r2, r3, d8
 8012eba:	f7ff bbee 	b.w	801269a <__ieee754_pow+0x162>
 8012ebe:	4b2f      	ldr	r3, [pc, #188]	; (8012f7c <__ieee754_pow+0xa44>)
 8012ec0:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8012ec4:	429e      	cmp	r6, r3
 8012ec6:	f77f af0d 	ble.w	8012ce4 <__ieee754_pow+0x7ac>
 8012eca:	4b2d      	ldr	r3, [pc, #180]	; (8012f80 <__ieee754_pow+0xa48>)
 8012ecc:	440b      	add	r3, r1
 8012ece:	4303      	orrs	r3, r0
 8012ed0:	d009      	beq.n	8012ee6 <__ieee754_pow+0x9ae>
 8012ed2:	ec51 0b18 	vmov	r0, r1, d8
 8012ed6:	2200      	movs	r2, #0
 8012ed8:	2300      	movs	r3, #0
 8012eda:	f7ed fe1f 	bl	8000b1c <__aeabi_dcmplt>
 8012ede:	3800      	subs	r0, #0
 8012ee0:	bf18      	it	ne
 8012ee2:	2001      	movne	r0, #1
 8012ee4:	e448      	b.n	8012778 <__ieee754_pow+0x240>
 8012ee6:	4622      	mov	r2, r4
 8012ee8:	462b      	mov	r3, r5
 8012eea:	f7ed f9ed 	bl	80002c8 <__aeabi_dsub>
 8012eee:	4642      	mov	r2, r8
 8012ef0:	464b      	mov	r3, r9
 8012ef2:	f7ed fe27 	bl	8000b44 <__aeabi_dcmpge>
 8012ef6:	2800      	cmp	r0, #0
 8012ef8:	f43f aef4 	beq.w	8012ce4 <__ieee754_pow+0x7ac>
 8012efc:	e7e9      	b.n	8012ed2 <__ieee754_pow+0x99a>
 8012efe:	f04f 0a00 	mov.w	sl, #0
 8012f02:	e71a      	b.n	8012d3a <__ieee754_pow+0x802>
 8012f04:	ec51 0b10 	vmov	r0, r1, d0
 8012f08:	4619      	mov	r1, r3
 8012f0a:	e7d4      	b.n	8012eb6 <__ieee754_pow+0x97e>
 8012f0c:	491a      	ldr	r1, [pc, #104]	; (8012f78 <__ieee754_pow+0xa40>)
 8012f0e:	2000      	movs	r0, #0
 8012f10:	f7ff bb31 	b.w	8012576 <__ieee754_pow+0x3e>
 8012f14:	2000      	movs	r0, #0
 8012f16:	2100      	movs	r1, #0
 8012f18:	f7ff bb2d 	b.w	8012576 <__ieee754_pow+0x3e>
 8012f1c:	4630      	mov	r0, r6
 8012f1e:	4639      	mov	r1, r7
 8012f20:	f7ff bb29 	b.w	8012576 <__ieee754_pow+0x3e>
 8012f24:	9204      	str	r2, [sp, #16]
 8012f26:	f7ff bb7b 	b.w	8012620 <__ieee754_pow+0xe8>
 8012f2a:	2300      	movs	r3, #0
 8012f2c:	f7ff bb65 	b.w	80125fa <__ieee754_pow+0xc2>
 8012f30:	00000000 	.word	0x00000000
 8012f34:	3fe62e43 	.word	0x3fe62e43
 8012f38:	fefa39ef 	.word	0xfefa39ef
 8012f3c:	3fe62e42 	.word	0x3fe62e42
 8012f40:	0ca86c39 	.word	0x0ca86c39
 8012f44:	be205c61 	.word	0xbe205c61
 8012f48:	72bea4d0 	.word	0x72bea4d0
 8012f4c:	3e663769 	.word	0x3e663769
 8012f50:	c5d26bf1 	.word	0xc5d26bf1
 8012f54:	3ebbbd41 	.word	0x3ebbbd41
 8012f58:	af25de2c 	.word	0xaf25de2c
 8012f5c:	3f11566a 	.word	0x3f11566a
 8012f60:	16bebd93 	.word	0x16bebd93
 8012f64:	3f66c16c 	.word	0x3f66c16c
 8012f68:	5555553e 	.word	0x5555553e
 8012f6c:	3fc55555 	.word	0x3fc55555
 8012f70:	3fe00000 	.word	0x3fe00000
 8012f74:	fff00000 	.word	0xfff00000
 8012f78:	3ff00000 	.word	0x3ff00000
 8012f7c:	4090cbff 	.word	0x4090cbff
 8012f80:	3f6f3400 	.word	0x3f6f3400
 8012f84:	652b82fe 	.word	0x652b82fe
 8012f88:	3c971547 	.word	0x3c971547
 8012f8c:	00000000 	.word	0x00000000

08012f90 <__ieee754_rem_pio2>:
 8012f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012f94:	ed2d 8b02 	vpush	{d8}
 8012f98:	ec55 4b10 	vmov	r4, r5, d0
 8012f9c:	4bca      	ldr	r3, [pc, #808]	; (80132c8 <__ieee754_rem_pio2+0x338>)
 8012f9e:	b08b      	sub	sp, #44	; 0x2c
 8012fa0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8012fa4:	4598      	cmp	r8, r3
 8012fa6:	4682      	mov	sl, r0
 8012fa8:	9502      	str	r5, [sp, #8]
 8012faa:	dc08      	bgt.n	8012fbe <__ieee754_rem_pio2+0x2e>
 8012fac:	2200      	movs	r2, #0
 8012fae:	2300      	movs	r3, #0
 8012fb0:	ed80 0b00 	vstr	d0, [r0]
 8012fb4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8012fb8:	f04f 0b00 	mov.w	fp, #0
 8012fbc:	e028      	b.n	8013010 <__ieee754_rem_pio2+0x80>
 8012fbe:	4bc3      	ldr	r3, [pc, #780]	; (80132cc <__ieee754_rem_pio2+0x33c>)
 8012fc0:	4598      	cmp	r8, r3
 8012fc2:	dc78      	bgt.n	80130b6 <__ieee754_rem_pio2+0x126>
 8012fc4:	9b02      	ldr	r3, [sp, #8]
 8012fc6:	4ec2      	ldr	r6, [pc, #776]	; (80132d0 <__ieee754_rem_pio2+0x340>)
 8012fc8:	2b00      	cmp	r3, #0
 8012fca:	ee10 0a10 	vmov	r0, s0
 8012fce:	a3b0      	add	r3, pc, #704	; (adr r3, 8013290 <__ieee754_rem_pio2+0x300>)
 8012fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fd4:	4629      	mov	r1, r5
 8012fd6:	dd39      	ble.n	801304c <__ieee754_rem_pio2+0xbc>
 8012fd8:	f7ed f976 	bl	80002c8 <__aeabi_dsub>
 8012fdc:	45b0      	cmp	r8, r6
 8012fde:	4604      	mov	r4, r0
 8012fe0:	460d      	mov	r5, r1
 8012fe2:	d01b      	beq.n	801301c <__ieee754_rem_pio2+0x8c>
 8012fe4:	a3ac      	add	r3, pc, #688	; (adr r3, 8013298 <__ieee754_rem_pio2+0x308>)
 8012fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012fea:	f7ed f96d 	bl	80002c8 <__aeabi_dsub>
 8012fee:	4602      	mov	r2, r0
 8012ff0:	460b      	mov	r3, r1
 8012ff2:	e9ca 2300 	strd	r2, r3, [sl]
 8012ff6:	4620      	mov	r0, r4
 8012ff8:	4629      	mov	r1, r5
 8012ffa:	f7ed f965 	bl	80002c8 <__aeabi_dsub>
 8012ffe:	a3a6      	add	r3, pc, #664	; (adr r3, 8013298 <__ieee754_rem_pio2+0x308>)
 8013000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013004:	f7ed f960 	bl	80002c8 <__aeabi_dsub>
 8013008:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801300c:	f04f 0b01 	mov.w	fp, #1
 8013010:	4658      	mov	r0, fp
 8013012:	b00b      	add	sp, #44	; 0x2c
 8013014:	ecbd 8b02 	vpop	{d8}
 8013018:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801301c:	a3a0      	add	r3, pc, #640	; (adr r3, 80132a0 <__ieee754_rem_pio2+0x310>)
 801301e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013022:	f7ed f951 	bl	80002c8 <__aeabi_dsub>
 8013026:	a3a0      	add	r3, pc, #640	; (adr r3, 80132a8 <__ieee754_rem_pio2+0x318>)
 8013028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801302c:	4604      	mov	r4, r0
 801302e:	460d      	mov	r5, r1
 8013030:	f7ed f94a 	bl	80002c8 <__aeabi_dsub>
 8013034:	4602      	mov	r2, r0
 8013036:	460b      	mov	r3, r1
 8013038:	e9ca 2300 	strd	r2, r3, [sl]
 801303c:	4620      	mov	r0, r4
 801303e:	4629      	mov	r1, r5
 8013040:	f7ed f942 	bl	80002c8 <__aeabi_dsub>
 8013044:	a398      	add	r3, pc, #608	; (adr r3, 80132a8 <__ieee754_rem_pio2+0x318>)
 8013046:	e9d3 2300 	ldrd	r2, r3, [r3]
 801304a:	e7db      	b.n	8013004 <__ieee754_rem_pio2+0x74>
 801304c:	f7ed f93e 	bl	80002cc <__adddf3>
 8013050:	45b0      	cmp	r8, r6
 8013052:	4604      	mov	r4, r0
 8013054:	460d      	mov	r5, r1
 8013056:	d016      	beq.n	8013086 <__ieee754_rem_pio2+0xf6>
 8013058:	a38f      	add	r3, pc, #572	; (adr r3, 8013298 <__ieee754_rem_pio2+0x308>)
 801305a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801305e:	f7ed f935 	bl	80002cc <__adddf3>
 8013062:	4602      	mov	r2, r0
 8013064:	460b      	mov	r3, r1
 8013066:	e9ca 2300 	strd	r2, r3, [sl]
 801306a:	4620      	mov	r0, r4
 801306c:	4629      	mov	r1, r5
 801306e:	f7ed f92b 	bl	80002c8 <__aeabi_dsub>
 8013072:	a389      	add	r3, pc, #548	; (adr r3, 8013298 <__ieee754_rem_pio2+0x308>)
 8013074:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013078:	f7ed f928 	bl	80002cc <__adddf3>
 801307c:	f04f 3bff 	mov.w	fp, #4294967295
 8013080:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013084:	e7c4      	b.n	8013010 <__ieee754_rem_pio2+0x80>
 8013086:	a386      	add	r3, pc, #536	; (adr r3, 80132a0 <__ieee754_rem_pio2+0x310>)
 8013088:	e9d3 2300 	ldrd	r2, r3, [r3]
 801308c:	f7ed f91e 	bl	80002cc <__adddf3>
 8013090:	a385      	add	r3, pc, #532	; (adr r3, 80132a8 <__ieee754_rem_pio2+0x318>)
 8013092:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013096:	4604      	mov	r4, r0
 8013098:	460d      	mov	r5, r1
 801309a:	f7ed f917 	bl	80002cc <__adddf3>
 801309e:	4602      	mov	r2, r0
 80130a0:	460b      	mov	r3, r1
 80130a2:	e9ca 2300 	strd	r2, r3, [sl]
 80130a6:	4620      	mov	r0, r4
 80130a8:	4629      	mov	r1, r5
 80130aa:	f7ed f90d 	bl	80002c8 <__aeabi_dsub>
 80130ae:	a37e      	add	r3, pc, #504	; (adr r3, 80132a8 <__ieee754_rem_pio2+0x318>)
 80130b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130b4:	e7e0      	b.n	8013078 <__ieee754_rem_pio2+0xe8>
 80130b6:	4b87      	ldr	r3, [pc, #540]	; (80132d4 <__ieee754_rem_pio2+0x344>)
 80130b8:	4598      	cmp	r8, r3
 80130ba:	f300 80d8 	bgt.w	801326e <__ieee754_rem_pio2+0x2de>
 80130be:	f000 f96d 	bl	801339c <fabs>
 80130c2:	ec55 4b10 	vmov	r4, r5, d0
 80130c6:	ee10 0a10 	vmov	r0, s0
 80130ca:	a379      	add	r3, pc, #484	; (adr r3, 80132b0 <__ieee754_rem_pio2+0x320>)
 80130cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130d0:	4629      	mov	r1, r5
 80130d2:	f7ed fab1 	bl	8000638 <__aeabi_dmul>
 80130d6:	4b80      	ldr	r3, [pc, #512]	; (80132d8 <__ieee754_rem_pio2+0x348>)
 80130d8:	2200      	movs	r2, #0
 80130da:	f7ed f8f7 	bl	80002cc <__adddf3>
 80130de:	f7ed fd5b 	bl	8000b98 <__aeabi_d2iz>
 80130e2:	4683      	mov	fp, r0
 80130e4:	f7ed fa3e 	bl	8000564 <__aeabi_i2d>
 80130e8:	4602      	mov	r2, r0
 80130ea:	460b      	mov	r3, r1
 80130ec:	ec43 2b18 	vmov	d8, r2, r3
 80130f0:	a367      	add	r3, pc, #412	; (adr r3, 8013290 <__ieee754_rem_pio2+0x300>)
 80130f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80130f6:	f7ed fa9f 	bl	8000638 <__aeabi_dmul>
 80130fa:	4602      	mov	r2, r0
 80130fc:	460b      	mov	r3, r1
 80130fe:	4620      	mov	r0, r4
 8013100:	4629      	mov	r1, r5
 8013102:	f7ed f8e1 	bl	80002c8 <__aeabi_dsub>
 8013106:	a364      	add	r3, pc, #400	; (adr r3, 8013298 <__ieee754_rem_pio2+0x308>)
 8013108:	e9d3 2300 	ldrd	r2, r3, [r3]
 801310c:	4606      	mov	r6, r0
 801310e:	460f      	mov	r7, r1
 8013110:	ec51 0b18 	vmov	r0, r1, d8
 8013114:	f7ed fa90 	bl	8000638 <__aeabi_dmul>
 8013118:	f1bb 0f1f 	cmp.w	fp, #31
 801311c:	4604      	mov	r4, r0
 801311e:	460d      	mov	r5, r1
 8013120:	dc0d      	bgt.n	801313e <__ieee754_rem_pio2+0x1ae>
 8013122:	4b6e      	ldr	r3, [pc, #440]	; (80132dc <__ieee754_rem_pio2+0x34c>)
 8013124:	f10b 32ff 	add.w	r2, fp, #4294967295
 8013128:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801312c:	4543      	cmp	r3, r8
 801312e:	d006      	beq.n	801313e <__ieee754_rem_pio2+0x1ae>
 8013130:	4622      	mov	r2, r4
 8013132:	462b      	mov	r3, r5
 8013134:	4630      	mov	r0, r6
 8013136:	4639      	mov	r1, r7
 8013138:	f7ed f8c6 	bl	80002c8 <__aeabi_dsub>
 801313c:	e00e      	b.n	801315c <__ieee754_rem_pio2+0x1cc>
 801313e:	462b      	mov	r3, r5
 8013140:	4622      	mov	r2, r4
 8013142:	4630      	mov	r0, r6
 8013144:	4639      	mov	r1, r7
 8013146:	f7ed f8bf 	bl	80002c8 <__aeabi_dsub>
 801314a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801314e:	9303      	str	r3, [sp, #12]
 8013150:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8013154:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8013158:	2b10      	cmp	r3, #16
 801315a:	dc02      	bgt.n	8013162 <__ieee754_rem_pio2+0x1d2>
 801315c:	e9ca 0100 	strd	r0, r1, [sl]
 8013160:	e039      	b.n	80131d6 <__ieee754_rem_pio2+0x246>
 8013162:	a34f      	add	r3, pc, #316	; (adr r3, 80132a0 <__ieee754_rem_pio2+0x310>)
 8013164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013168:	ec51 0b18 	vmov	r0, r1, d8
 801316c:	f7ed fa64 	bl	8000638 <__aeabi_dmul>
 8013170:	4604      	mov	r4, r0
 8013172:	460d      	mov	r5, r1
 8013174:	4602      	mov	r2, r0
 8013176:	460b      	mov	r3, r1
 8013178:	4630      	mov	r0, r6
 801317a:	4639      	mov	r1, r7
 801317c:	f7ed f8a4 	bl	80002c8 <__aeabi_dsub>
 8013180:	4602      	mov	r2, r0
 8013182:	460b      	mov	r3, r1
 8013184:	4680      	mov	r8, r0
 8013186:	4689      	mov	r9, r1
 8013188:	4630      	mov	r0, r6
 801318a:	4639      	mov	r1, r7
 801318c:	f7ed f89c 	bl	80002c8 <__aeabi_dsub>
 8013190:	4622      	mov	r2, r4
 8013192:	462b      	mov	r3, r5
 8013194:	f7ed f898 	bl	80002c8 <__aeabi_dsub>
 8013198:	a343      	add	r3, pc, #268	; (adr r3, 80132a8 <__ieee754_rem_pio2+0x318>)
 801319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801319e:	4604      	mov	r4, r0
 80131a0:	460d      	mov	r5, r1
 80131a2:	ec51 0b18 	vmov	r0, r1, d8
 80131a6:	f7ed fa47 	bl	8000638 <__aeabi_dmul>
 80131aa:	4622      	mov	r2, r4
 80131ac:	462b      	mov	r3, r5
 80131ae:	f7ed f88b 	bl	80002c8 <__aeabi_dsub>
 80131b2:	4602      	mov	r2, r0
 80131b4:	460b      	mov	r3, r1
 80131b6:	4604      	mov	r4, r0
 80131b8:	460d      	mov	r5, r1
 80131ba:	4640      	mov	r0, r8
 80131bc:	4649      	mov	r1, r9
 80131be:	f7ed f883 	bl	80002c8 <__aeabi_dsub>
 80131c2:	9a03      	ldr	r2, [sp, #12]
 80131c4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80131c8:	1ad3      	subs	r3, r2, r3
 80131ca:	2b31      	cmp	r3, #49	; 0x31
 80131cc:	dc24      	bgt.n	8013218 <__ieee754_rem_pio2+0x288>
 80131ce:	e9ca 0100 	strd	r0, r1, [sl]
 80131d2:	4646      	mov	r6, r8
 80131d4:	464f      	mov	r7, r9
 80131d6:	e9da 8900 	ldrd	r8, r9, [sl]
 80131da:	4630      	mov	r0, r6
 80131dc:	4642      	mov	r2, r8
 80131de:	464b      	mov	r3, r9
 80131e0:	4639      	mov	r1, r7
 80131e2:	f7ed f871 	bl	80002c8 <__aeabi_dsub>
 80131e6:	462b      	mov	r3, r5
 80131e8:	4622      	mov	r2, r4
 80131ea:	f7ed f86d 	bl	80002c8 <__aeabi_dsub>
 80131ee:	9b02      	ldr	r3, [sp, #8]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80131f6:	f6bf af0b 	bge.w	8013010 <__ieee754_rem_pio2+0x80>
 80131fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80131fe:	f8ca 3004 	str.w	r3, [sl, #4]
 8013202:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013206:	f8ca 8000 	str.w	r8, [sl]
 801320a:	f8ca 0008 	str.w	r0, [sl, #8]
 801320e:	f8ca 300c 	str.w	r3, [sl, #12]
 8013212:	f1cb 0b00 	rsb	fp, fp, #0
 8013216:	e6fb      	b.n	8013010 <__ieee754_rem_pio2+0x80>
 8013218:	a327      	add	r3, pc, #156	; (adr r3, 80132b8 <__ieee754_rem_pio2+0x328>)
 801321a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801321e:	ec51 0b18 	vmov	r0, r1, d8
 8013222:	f7ed fa09 	bl	8000638 <__aeabi_dmul>
 8013226:	4604      	mov	r4, r0
 8013228:	460d      	mov	r5, r1
 801322a:	4602      	mov	r2, r0
 801322c:	460b      	mov	r3, r1
 801322e:	4640      	mov	r0, r8
 8013230:	4649      	mov	r1, r9
 8013232:	f7ed f849 	bl	80002c8 <__aeabi_dsub>
 8013236:	4602      	mov	r2, r0
 8013238:	460b      	mov	r3, r1
 801323a:	4606      	mov	r6, r0
 801323c:	460f      	mov	r7, r1
 801323e:	4640      	mov	r0, r8
 8013240:	4649      	mov	r1, r9
 8013242:	f7ed f841 	bl	80002c8 <__aeabi_dsub>
 8013246:	4622      	mov	r2, r4
 8013248:	462b      	mov	r3, r5
 801324a:	f7ed f83d 	bl	80002c8 <__aeabi_dsub>
 801324e:	a31c      	add	r3, pc, #112	; (adr r3, 80132c0 <__ieee754_rem_pio2+0x330>)
 8013250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8013254:	4604      	mov	r4, r0
 8013256:	460d      	mov	r5, r1
 8013258:	ec51 0b18 	vmov	r0, r1, d8
 801325c:	f7ed f9ec 	bl	8000638 <__aeabi_dmul>
 8013260:	4622      	mov	r2, r4
 8013262:	462b      	mov	r3, r5
 8013264:	f7ed f830 	bl	80002c8 <__aeabi_dsub>
 8013268:	4604      	mov	r4, r0
 801326a:	460d      	mov	r5, r1
 801326c:	e760      	b.n	8013130 <__ieee754_rem_pio2+0x1a0>
 801326e:	4b1c      	ldr	r3, [pc, #112]	; (80132e0 <__ieee754_rem_pio2+0x350>)
 8013270:	4598      	cmp	r8, r3
 8013272:	dd37      	ble.n	80132e4 <__ieee754_rem_pio2+0x354>
 8013274:	ee10 2a10 	vmov	r2, s0
 8013278:	462b      	mov	r3, r5
 801327a:	4620      	mov	r0, r4
 801327c:	4629      	mov	r1, r5
 801327e:	f7ed f823 	bl	80002c8 <__aeabi_dsub>
 8013282:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8013286:	e9ca 0100 	strd	r0, r1, [sl]
 801328a:	e695      	b.n	8012fb8 <__ieee754_rem_pio2+0x28>
 801328c:	f3af 8000 	nop.w
 8013290:	54400000 	.word	0x54400000
 8013294:	3ff921fb 	.word	0x3ff921fb
 8013298:	1a626331 	.word	0x1a626331
 801329c:	3dd0b461 	.word	0x3dd0b461
 80132a0:	1a600000 	.word	0x1a600000
 80132a4:	3dd0b461 	.word	0x3dd0b461
 80132a8:	2e037073 	.word	0x2e037073
 80132ac:	3ba3198a 	.word	0x3ba3198a
 80132b0:	6dc9c883 	.word	0x6dc9c883
 80132b4:	3fe45f30 	.word	0x3fe45f30
 80132b8:	2e000000 	.word	0x2e000000
 80132bc:	3ba3198a 	.word	0x3ba3198a
 80132c0:	252049c1 	.word	0x252049c1
 80132c4:	397b839a 	.word	0x397b839a
 80132c8:	3fe921fb 	.word	0x3fe921fb
 80132cc:	4002d97b 	.word	0x4002d97b
 80132d0:	3ff921fb 	.word	0x3ff921fb
 80132d4:	413921fb 	.word	0x413921fb
 80132d8:	3fe00000 	.word	0x3fe00000
 80132dc:	08016cd8 	.word	0x08016cd8
 80132e0:	7fefffff 	.word	0x7fefffff
 80132e4:	ea4f 5628 	mov.w	r6, r8, asr #20
 80132e8:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 80132ec:	eba8 5106 	sub.w	r1, r8, r6, lsl #20
 80132f0:	4620      	mov	r0, r4
 80132f2:	460d      	mov	r5, r1
 80132f4:	f7ed fc50 	bl	8000b98 <__aeabi_d2iz>
 80132f8:	f7ed f934 	bl	8000564 <__aeabi_i2d>
 80132fc:	4602      	mov	r2, r0
 80132fe:	460b      	mov	r3, r1
 8013300:	4620      	mov	r0, r4
 8013302:	4629      	mov	r1, r5
 8013304:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8013308:	f7ec ffde 	bl	80002c8 <__aeabi_dsub>
 801330c:	4b21      	ldr	r3, [pc, #132]	; (8013394 <__ieee754_rem_pio2+0x404>)
 801330e:	2200      	movs	r2, #0
 8013310:	f7ed f992 	bl	8000638 <__aeabi_dmul>
 8013314:	460d      	mov	r5, r1
 8013316:	4604      	mov	r4, r0
 8013318:	f7ed fc3e 	bl	8000b98 <__aeabi_d2iz>
 801331c:	f7ed f922 	bl	8000564 <__aeabi_i2d>
 8013320:	4602      	mov	r2, r0
 8013322:	460b      	mov	r3, r1
 8013324:	4620      	mov	r0, r4
 8013326:	4629      	mov	r1, r5
 8013328:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801332c:	f7ec ffcc 	bl	80002c8 <__aeabi_dsub>
 8013330:	4b18      	ldr	r3, [pc, #96]	; (8013394 <__ieee754_rem_pio2+0x404>)
 8013332:	2200      	movs	r2, #0
 8013334:	f7ed f980 	bl	8000638 <__aeabi_dmul>
 8013338:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801333c:	f10d 0828 	add.w	r8, sp, #40	; 0x28
 8013340:	2703      	movs	r7, #3
 8013342:	2400      	movs	r4, #0
 8013344:	2500      	movs	r5, #0
 8013346:	e978 0102 	ldrd	r0, r1, [r8, #-8]!
 801334a:	4622      	mov	r2, r4
 801334c:	462b      	mov	r3, r5
 801334e:	46b9      	mov	r9, r7
 8013350:	3f01      	subs	r7, #1
 8013352:	f7ed fbd9 	bl	8000b08 <__aeabi_dcmpeq>
 8013356:	2800      	cmp	r0, #0
 8013358:	d1f5      	bne.n	8013346 <__ieee754_rem_pio2+0x3b6>
 801335a:	4b0f      	ldr	r3, [pc, #60]	; (8013398 <__ieee754_rem_pio2+0x408>)
 801335c:	9301      	str	r3, [sp, #4]
 801335e:	2302      	movs	r3, #2
 8013360:	9300      	str	r3, [sp, #0]
 8013362:	4632      	mov	r2, r6
 8013364:	464b      	mov	r3, r9
 8013366:	4651      	mov	r1, sl
 8013368:	a804      	add	r0, sp, #16
 801336a:	f000 ffa5 	bl	80142b8 <__kernel_rem_pio2>
 801336e:	9b02      	ldr	r3, [sp, #8]
 8013370:	2b00      	cmp	r3, #0
 8013372:	4683      	mov	fp, r0
 8013374:	f6bf ae4c 	bge.w	8013010 <__ieee754_rem_pio2+0x80>
 8013378:	e9da 2100 	ldrd	r2, r1, [sl]
 801337c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8013380:	e9ca 2300 	strd	r2, r3, [sl]
 8013384:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8013388:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801338c:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8013390:	e73f      	b.n	8013212 <__ieee754_rem_pio2+0x282>
 8013392:	bf00      	nop
 8013394:	41700000 	.word	0x41700000
 8013398:	08016d58 	.word	0x08016d58

0801339c <fabs>:
 801339c:	ec51 0b10 	vmov	r0, r1, d0
 80133a0:	ee10 2a10 	vmov	r2, s0
 80133a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80133a8:	ec43 2b10 	vmov	d0, r2, r3
 80133ac:	4770      	bx	lr
	...

080133b0 <__kernel_cosf>:
 80133b0:	ee10 3a10 	vmov	r3, s0
 80133b4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80133b8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 80133bc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80133c0:	da05      	bge.n	80133ce <__kernel_cosf+0x1e>
 80133c2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 80133c6:	ee17 2a90 	vmov	r2, s15
 80133ca:	2a00      	cmp	r2, #0
 80133cc:	d03b      	beq.n	8013446 <__kernel_cosf+0x96>
 80133ce:	ee20 7a00 	vmul.f32	s14, s0, s0
 80133d2:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801344c <__kernel_cosf+0x9c>
 80133d6:	ed9f 6a1e 	vldr	s12, [pc, #120]	; 8013450 <__kernel_cosf+0xa0>
 80133da:	4a1e      	ldr	r2, [pc, #120]	; (8013454 <__kernel_cosf+0xa4>)
 80133dc:	eea7 6a27 	vfma.f32	s12, s14, s15
 80133e0:	4293      	cmp	r3, r2
 80133e2:	eddf 7a1d 	vldr	s15, [pc, #116]	; 8013458 <__kernel_cosf+0xa8>
 80133e6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80133ea:	ed9f 6a1c 	vldr	s12, [pc, #112]	; 801345c <__kernel_cosf+0xac>
 80133ee:	eea7 6a87 	vfma.f32	s12, s15, s14
 80133f2:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8013460 <__kernel_cosf+0xb0>
 80133f6:	eee6 7a07 	vfma.f32	s15, s12, s14
 80133fa:	ed9f 6a1a 	vldr	s12, [pc, #104]	; 8013464 <__kernel_cosf+0xb4>
 80133fe:	eea7 6a87 	vfma.f32	s12, s15, s14
 8013402:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 8013406:	ee26 6a07 	vmul.f32	s12, s12, s14
 801340a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801340e:	eee7 0a06 	vfma.f32	s1, s14, s12
 8013412:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013416:	dc04      	bgt.n	8013422 <__kernel_cosf+0x72>
 8013418:	ee77 7ae0 	vsub.f32	s15, s15, s1
 801341c:	ee36 0ae7 	vsub.f32	s0, s13, s15
 8013420:	4770      	bx	lr
 8013422:	4a11      	ldr	r2, [pc, #68]	; (8013468 <__kernel_cosf+0xb8>)
 8013424:	4293      	cmp	r3, r2
 8013426:	bfda      	itte	le
 8013428:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801342c:	ee07 3a10 	vmovle	s14, r3
 8013430:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 8013434:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013438:	ee36 0ac7 	vsub.f32	s0, s13, s14
 801343c:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013440:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013444:	4770      	bx	lr
 8013446:	eeb0 0a66 	vmov.f32	s0, s13
 801344a:	4770      	bx	lr
 801344c:	ad47d74e 	.word	0xad47d74e
 8013450:	310f74f6 	.word	0x310f74f6
 8013454:	3e999999 	.word	0x3e999999
 8013458:	b493f27c 	.word	0xb493f27c
 801345c:	37d00d01 	.word	0x37d00d01
 8013460:	bab60b61 	.word	0xbab60b61
 8013464:	3d2aaaab 	.word	0x3d2aaaab
 8013468:	3f480000 	.word	0x3f480000

0801346c <__kernel_sinf>:
 801346c:	ee10 3a10 	vmov	r3, s0
 8013470:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8013474:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 8013478:	da04      	bge.n	8013484 <__kernel_sinf+0x18>
 801347a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801347e:	ee17 3a90 	vmov	r3, s15
 8013482:	b35b      	cbz	r3, 80134dc <__kernel_sinf+0x70>
 8013484:	ee20 7a00 	vmul.f32	s14, s0, s0
 8013488:	eddf 7a15 	vldr	s15, [pc, #84]	; 80134e0 <__kernel_sinf+0x74>
 801348c:	ed9f 6a15 	vldr	s12, [pc, #84]	; 80134e4 <__kernel_sinf+0x78>
 8013490:	eea7 6a27 	vfma.f32	s12, s14, s15
 8013494:	eddf 7a14 	vldr	s15, [pc, #80]	; 80134e8 <__kernel_sinf+0x7c>
 8013498:	eee6 7a07 	vfma.f32	s15, s12, s14
 801349c:	ed9f 6a13 	vldr	s12, [pc, #76]	; 80134ec <__kernel_sinf+0x80>
 80134a0:	eea7 6a87 	vfma.f32	s12, s15, s14
 80134a4:	eddf 7a12 	vldr	s15, [pc, #72]	; 80134f0 <__kernel_sinf+0x84>
 80134a8:	ee60 6a07 	vmul.f32	s13, s0, s14
 80134ac:	eee6 7a07 	vfma.f32	s15, s12, s14
 80134b0:	b930      	cbnz	r0, 80134c0 <__kernel_sinf+0x54>
 80134b2:	ed9f 6a10 	vldr	s12, [pc, #64]	; 80134f4 <__kernel_sinf+0x88>
 80134b6:	eea7 6a27 	vfma.f32	s12, s14, s15
 80134ba:	eea6 0a26 	vfma.f32	s0, s12, s13
 80134be:	4770      	bx	lr
 80134c0:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 80134c4:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 80134c8:	eee0 7a86 	vfma.f32	s15, s1, s12
 80134cc:	eed7 0a87 	vfnms.f32	s1, s15, s14
 80134d0:	eddf 7a09 	vldr	s15, [pc, #36]	; 80134f8 <__kernel_sinf+0x8c>
 80134d4:	eee6 0aa7 	vfma.f32	s1, s13, s15
 80134d8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80134dc:	4770      	bx	lr
 80134de:	bf00      	nop
 80134e0:	2f2ec9d3 	.word	0x2f2ec9d3
 80134e4:	b2d72f34 	.word	0xb2d72f34
 80134e8:	3638ef1b 	.word	0x3638ef1b
 80134ec:	b9500d01 	.word	0xb9500d01
 80134f0:	3c088889 	.word	0x3c088889
 80134f4:	be2aaaab 	.word	0xbe2aaaab
 80134f8:	3e2aaaab 	.word	0x3e2aaaab

080134fc <__kernel_tanf>:
 80134fc:	b508      	push	{r3, lr}
 80134fe:	ee10 3a10 	vmov	r3, s0
 8013502:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8013506:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 801350a:	eef0 7a40 	vmov.f32	s15, s0
 801350e:	da17      	bge.n	8013540 <__kernel_tanf+0x44>
 8013510:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 8013514:	ee17 1a10 	vmov	r1, s14
 8013518:	bb41      	cbnz	r1, 801356c <__kernel_tanf+0x70>
 801351a:	1c43      	adds	r3, r0, #1
 801351c:	4313      	orrs	r3, r2
 801351e:	d108      	bne.n	8013532 <__kernel_tanf+0x36>
 8013520:	f7fe fcf2 	bl	8011f08 <fabsf>
 8013524:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8013528:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801352c:	eeb0 0a67 	vmov.f32	s0, s15
 8013530:	bd08      	pop	{r3, pc}
 8013532:	2801      	cmp	r0, #1
 8013534:	d0fa      	beq.n	801352c <__kernel_tanf+0x30>
 8013536:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 801353a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801353e:	e7f5      	b.n	801352c <__kernel_tanf+0x30>
 8013540:	494c      	ldr	r1, [pc, #304]	; (8013674 <__kernel_tanf+0x178>)
 8013542:	428a      	cmp	r2, r1
 8013544:	db12      	blt.n	801356c <__kernel_tanf+0x70>
 8013546:	2b00      	cmp	r3, #0
 8013548:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 8013678 <__kernel_tanf+0x17c>
 801354c:	bfb8      	it	lt
 801354e:	eef1 7a40 	vneglt.f32	s15, s0
 8013552:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013556:	eddf 7a49 	vldr	s15, [pc, #292]	; 801367c <__kernel_tanf+0x180>
 801355a:	bfb8      	it	lt
 801355c:	eef1 0a60 	vneglt.f32	s1, s1
 8013560:	ee77 7ae0 	vsub.f32	s15, s15, s1
 8013564:	eddf 0a46 	vldr	s1, [pc, #280]	; 8013680 <__kernel_tanf+0x184>
 8013568:	ee77 7a87 	vadd.f32	s15, s15, s14
 801356c:	ee67 6aa7 	vmul.f32	s13, s15, s15
 8013570:	eddf 5a44 	vldr	s11, [pc, #272]	; 8013684 <__kernel_tanf+0x188>
 8013574:	ed9f 6a44 	vldr	s12, [pc, #272]	; 8013688 <__kernel_tanf+0x18c>
 8013578:	ed9f 5a44 	vldr	s10, [pc, #272]	; 801368c <__kernel_tanf+0x190>
 801357c:	493d      	ldr	r1, [pc, #244]	; (8013674 <__kernel_tanf+0x178>)
 801357e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013582:	428a      	cmp	r2, r1
 8013584:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013588:	eddf 5a41 	vldr	s11, [pc, #260]	; 8013690 <__kernel_tanf+0x194>
 801358c:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013590:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8013694 <__kernel_tanf+0x198>
 8013594:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013598:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8013698 <__kernel_tanf+0x19c>
 801359c:	eee6 5a07 	vfma.f32	s11, s12, s14
 80135a0:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 801369c <__kernel_tanf+0x1a0>
 80135a4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80135a8:	eddf 5a3d 	vldr	s11, [pc, #244]	; 80136a0 <__kernel_tanf+0x1a4>
 80135ac:	eee7 5a05 	vfma.f32	s11, s14, s10
 80135b0:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 80136a4 <__kernel_tanf+0x1a8>
 80135b4:	eea5 5a87 	vfma.f32	s10, s11, s14
 80135b8:	eddf 5a3b 	vldr	s11, [pc, #236]	; 80136a8 <__kernel_tanf+0x1ac>
 80135bc:	eee5 5a07 	vfma.f32	s11, s10, s14
 80135c0:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 80136ac <__kernel_tanf+0x1b0>
 80135c4:	eea5 5a87 	vfma.f32	s10, s11, s14
 80135c8:	eddf 5a39 	vldr	s11, [pc, #228]	; 80136b0 <__kernel_tanf+0x1b4>
 80135cc:	eee5 5a07 	vfma.f32	s11, s10, s14
 80135d0:	eeb0 7a46 	vmov.f32	s14, s12
 80135d4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80135d8:	ee27 5aa6 	vmul.f32	s10, s15, s13
 80135dc:	eeb0 6a60 	vmov.f32	s12, s1
 80135e0:	eea7 6a05 	vfma.f32	s12, s14, s10
 80135e4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80136b4 <__kernel_tanf+0x1b8>
 80135e8:	eee6 0a26 	vfma.f32	s1, s12, s13
 80135ec:	eee5 0a07 	vfma.f32	s1, s10, s14
 80135f0:	ee77 6aa0 	vadd.f32	s13, s15, s1
 80135f4:	db1d      	blt.n	8013632 <__kernel_tanf+0x136>
 80135f6:	ee07 0a10 	vmov	s14, r0
 80135fa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80135fe:	ee66 5aa6 	vmul.f32	s11, s13, s13
 8013602:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013606:	179b      	asrs	r3, r3, #30
 8013608:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 801360c:	f003 0302 	and.w	r3, r3, #2
 8013610:	f1c3 0301 	rsb	r3, r3, #1
 8013614:	ee76 6a60 	vsub.f32	s13, s12, s1
 8013618:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801361c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8013620:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8013624:	ee07 3a90 	vmov	s15, r3
 8013628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801362c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013630:	e77c      	b.n	801352c <__kernel_tanf+0x30>
 8013632:	2801      	cmp	r0, #1
 8013634:	d01b      	beq.n	801366e <__kernel_tanf+0x172>
 8013636:	4b20      	ldr	r3, [pc, #128]	; (80136b8 <__kernel_tanf+0x1bc>)
 8013638:	ee16 2a90 	vmov	r2, s13
 801363c:	401a      	ands	r2, r3
 801363e:	ee05 2a90 	vmov	s11, r2
 8013642:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8013646:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 801364a:	ee70 0ae7 	vsub.f32	s1, s1, s15
 801364e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 8013652:	ee87 6aa6 	vdiv.f32	s12, s15, s13
 8013656:	ee16 2a10 	vmov	r2, s12
 801365a:	4013      	ands	r3, r2
 801365c:	ee07 3a90 	vmov	s15, r3
 8013660:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013664:	eea0 7aa7 	vfma.f32	s14, s1, s15
 8013668:	eee7 7a06 	vfma.f32	s15, s14, s12
 801366c:	e75e      	b.n	801352c <__kernel_tanf+0x30>
 801366e:	eef0 7a66 	vmov.f32	s15, s13
 8013672:	e75b      	b.n	801352c <__kernel_tanf+0x30>
 8013674:	3f2ca140 	.word	0x3f2ca140
 8013678:	3f490fda 	.word	0x3f490fda
 801367c:	33222168 	.word	0x33222168
 8013680:	00000000 	.word	0x00000000
 8013684:	b79bae5f 	.word	0xb79bae5f
 8013688:	38a3f445 	.word	0x38a3f445
 801368c:	37d95384 	.word	0x37d95384
 8013690:	3a1a26c8 	.word	0x3a1a26c8
 8013694:	3b6b6916 	.word	0x3b6b6916
 8013698:	3cb327a4 	.word	0x3cb327a4
 801369c:	3e088889 	.word	0x3e088889
 80136a0:	3895c07a 	.word	0x3895c07a
 80136a4:	398137b9 	.word	0x398137b9
 80136a8:	3abede48 	.word	0x3abede48
 80136ac:	3c11371f 	.word	0x3c11371f
 80136b0:	3d5d0dd1 	.word	0x3d5d0dd1
 80136b4:	3eaaaaab 	.word	0x3eaaaaab
 80136b8:	fffff000 	.word	0xfffff000

080136bc <__ieee754_expf>:
 80136bc:	ee10 2a10 	vmov	r2, s0
 80136c0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80136c4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80136c8:	d902      	bls.n	80136d0 <__ieee754_expf+0x14>
 80136ca:	ee30 0a00 	vadd.f32	s0, s0, s0
 80136ce:	4770      	bx	lr
 80136d0:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 80136d4:	d106      	bne.n	80136e4 <__ieee754_expf+0x28>
 80136d6:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8013810 <__ieee754_expf+0x154>
 80136da:	2900      	cmp	r1, #0
 80136dc:	bf18      	it	ne
 80136de:	eeb0 0a67 	vmovne.f32	s0, s15
 80136e2:	4770      	bx	lr
 80136e4:	484b      	ldr	r0, [pc, #300]	; (8013814 <__ieee754_expf+0x158>)
 80136e6:	4282      	cmp	r2, r0
 80136e8:	dd02      	ble.n	80136f0 <__ieee754_expf+0x34>
 80136ea:	2000      	movs	r0, #0
 80136ec:	f000 bddc 	b.w	80142a8 <__math_oflowf>
 80136f0:	2a00      	cmp	r2, #0
 80136f2:	da05      	bge.n	8013700 <__ieee754_expf+0x44>
 80136f4:	4a48      	ldr	r2, [pc, #288]	; (8013818 <__ieee754_expf+0x15c>)
 80136f6:	4293      	cmp	r3, r2
 80136f8:	d902      	bls.n	8013700 <__ieee754_expf+0x44>
 80136fa:	2000      	movs	r0, #0
 80136fc:	f000 bdce 	b.w	801429c <__math_uflowf>
 8013700:	4a46      	ldr	r2, [pc, #280]	; (801381c <__ieee754_expf+0x160>)
 8013702:	4293      	cmp	r3, r2
 8013704:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8013708:	d952      	bls.n	80137b0 <__ieee754_expf+0xf4>
 801370a:	4a45      	ldr	r2, [pc, #276]	; (8013820 <__ieee754_expf+0x164>)
 801370c:	4293      	cmp	r3, r2
 801370e:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8013712:	d834      	bhi.n	801377e <__ieee754_expf+0xc2>
 8013714:	4b43      	ldr	r3, [pc, #268]	; (8013824 <__ieee754_expf+0x168>)
 8013716:	4413      	add	r3, r2
 8013718:	ed93 7a00 	vldr	s14, [r3]
 801371c:	4b42      	ldr	r3, [pc, #264]	; (8013828 <__ieee754_expf+0x16c>)
 801371e:	4413      	add	r3, r2
 8013720:	ee30 7a47 	vsub.f32	s14, s0, s14
 8013724:	f1c1 0201 	rsb	r2, r1, #1
 8013728:	edd3 7a00 	vldr	s15, [r3]
 801372c:	1a52      	subs	r2, r2, r1
 801372e:	ee37 0a67 	vsub.f32	s0, s14, s15
 8013732:	ee20 6a00 	vmul.f32	s12, s0, s0
 8013736:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 801382c <__ieee754_expf+0x170>
 801373a:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8013830 <__ieee754_expf+0x174>
 801373e:	eee6 6a05 	vfma.f32	s13, s12, s10
 8013742:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8013834 <__ieee754_expf+0x178>
 8013746:	eea6 5a86 	vfma.f32	s10, s13, s12
 801374a:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8013838 <__ieee754_expf+0x17c>
 801374e:	eee5 6a06 	vfma.f32	s13, s10, s12
 8013752:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 801383c <__ieee754_expf+0x180>
 8013756:	eea6 5a86 	vfma.f32	s10, s13, s12
 801375a:	eef0 6a40 	vmov.f32	s13, s0
 801375e:	eee5 6a46 	vfms.f32	s13, s10, s12
 8013762:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8013766:	ee20 5a26 	vmul.f32	s10, s0, s13
 801376a:	bb92      	cbnz	r2, 80137d2 <__ieee754_expf+0x116>
 801376c:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8013770:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8013774:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8013778:	ee35 0ac0 	vsub.f32	s0, s11, s0
 801377c:	4770      	bx	lr
 801377e:	4b30      	ldr	r3, [pc, #192]	; (8013840 <__ieee754_expf+0x184>)
 8013780:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8013844 <__ieee754_expf+0x188>
 8013784:	eddf 6a30 	vldr	s13, [pc, #192]	; 8013848 <__ieee754_expf+0x18c>
 8013788:	4413      	add	r3, r2
 801378a:	edd3 7a00 	vldr	s15, [r3]
 801378e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013792:	eeb0 7a40 	vmov.f32	s14, s0
 8013796:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801379a:	ee17 2a90 	vmov	r2, s15
 801379e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80137a2:	eea7 7ae6 	vfms.f32	s14, s15, s13
 80137a6:	eddf 6a29 	vldr	s13, [pc, #164]	; 801384c <__ieee754_expf+0x190>
 80137aa:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80137ae:	e7be      	b.n	801372e <__ieee754_expf+0x72>
 80137b0:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 80137b4:	d20b      	bcs.n	80137ce <__ieee754_expf+0x112>
 80137b6:	eddf 6a26 	vldr	s13, [pc, #152]	; 8013850 <__ieee754_expf+0x194>
 80137ba:	ee70 6a26 	vadd.f32	s13, s0, s13
 80137be:	eef4 6ae5 	vcmpe.f32	s13, s11
 80137c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137c6:	dd02      	ble.n	80137ce <__ieee754_expf+0x112>
 80137c8:	ee30 0a25 	vadd.f32	s0, s0, s11
 80137cc:	4770      	bx	lr
 80137ce:	2200      	movs	r2, #0
 80137d0:	e7af      	b.n	8013732 <__ieee754_expf+0x76>
 80137d2:	ee36 6a66 	vsub.f32	s12, s12, s13
 80137d6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 80137da:	eec5 6a06 	vdiv.f32	s13, s10, s12
 80137de:	bfb8      	it	lt
 80137e0:	3264      	addlt	r2, #100	; 0x64
 80137e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80137e6:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80137ea:	ee75 7ae7 	vsub.f32	s15, s11, s15
 80137ee:	ee17 3a90 	vmov	r3, s15
 80137f2:	bfab      	itete	ge
 80137f4:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 80137f8:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 80137fc:	ee00 3a10 	vmovge	s0, r3
 8013800:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8013854 <__ieee754_expf+0x198>
 8013804:	bfbc      	itt	lt
 8013806:	ee00 3a10 	vmovlt	s0, r3
 801380a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801380e:	4770      	bx	lr
 8013810:	00000000 	.word	0x00000000
 8013814:	42b17217 	.word	0x42b17217
 8013818:	42cff1b5 	.word	0x42cff1b5
 801381c:	3eb17218 	.word	0x3eb17218
 8013820:	3f851591 	.word	0x3f851591
 8013824:	08016e68 	.word	0x08016e68
 8013828:	08016e70 	.word	0x08016e70
 801382c:	3331bb4c 	.word	0x3331bb4c
 8013830:	b5ddea0e 	.word	0xb5ddea0e
 8013834:	388ab355 	.word	0x388ab355
 8013838:	bb360b61 	.word	0xbb360b61
 801383c:	3e2aaaab 	.word	0x3e2aaaab
 8013840:	08016e60 	.word	0x08016e60
 8013844:	3fb8aa3b 	.word	0x3fb8aa3b
 8013848:	3f317180 	.word	0x3f317180
 801384c:	3717f7d1 	.word	0x3717f7d1
 8013850:	7149f2ca 	.word	0x7149f2ca
 8013854:	0d800000 	.word	0x0d800000

08013858 <__ieee754_powf>:
 8013858:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801385c:	ee10 4a90 	vmov	r4, s1
 8013860:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8013864:	ed2d 8b02 	vpush	{d8}
 8013868:	ee10 7a10 	vmov	r7, s0
 801386c:	eeb0 8a40 	vmov.f32	s16, s0
 8013870:	eef0 8a60 	vmov.f32	s17, s1
 8013874:	d10c      	bne.n	8013890 <__ieee754_powf+0x38>
 8013876:	f487 0780 	eor.w	r7, r7, #4194304	; 0x400000
 801387a:	007f      	lsls	r7, r7, #1
 801387c:	f517 0f00 	cmn.w	r7, #8388608	; 0x800000
 8013880:	f240 8292 	bls.w	8013da8 <__ieee754_powf+0x550>
 8013884:	ee38 0a28 	vadd.f32	s0, s16, s17
 8013888:	ecbd 8b02 	vpop	{d8}
 801388c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013890:	f027 4500 	bic.w	r5, r7, #2147483648	; 0x80000000
 8013894:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013898:	dcf4      	bgt.n	8013884 <__ieee754_powf+0x2c>
 801389a:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 801389e:	dd08      	ble.n	80138b2 <__ieee754_powf+0x5a>
 80138a0:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80138a4:	d1ee      	bne.n	8013884 <__ieee754_powf+0x2c>
 80138a6:	f484 0480 	eor.w	r4, r4, #4194304	; 0x400000
 80138aa:	0064      	lsls	r4, r4, #1
 80138ac:	f514 0f00 	cmn.w	r4, #8388608	; 0x800000
 80138b0:	e7e6      	b.n	8013880 <__ieee754_powf+0x28>
 80138b2:	2f00      	cmp	r7, #0
 80138b4:	da20      	bge.n	80138f8 <__ieee754_powf+0xa0>
 80138b6:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80138ba:	da2d      	bge.n	8013918 <__ieee754_powf+0xc0>
 80138bc:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80138c0:	f2c0 827b 	blt.w	8013dba <__ieee754_powf+0x562>
 80138c4:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80138c8:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80138cc:	fa48 f603 	asr.w	r6, r8, r3
 80138d0:	fa06 f303 	lsl.w	r3, r6, r3
 80138d4:	4543      	cmp	r3, r8
 80138d6:	f040 8270 	bne.w	8013dba <__ieee754_powf+0x562>
 80138da:	f006 0601 	and.w	r6, r6, #1
 80138de:	f1c6 0602 	rsb	r6, r6, #2
 80138e2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80138e6:	d11f      	bne.n	8013928 <__ieee754_powf+0xd0>
 80138e8:	2c00      	cmp	r4, #0
 80138ea:	f280 8263 	bge.w	8013db4 <__ieee754_powf+0x55c>
 80138ee:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80138f2:	ee87 0a88 	vdiv.f32	s0, s15, s16
 80138f6:	e7c7      	b.n	8013888 <__ieee754_powf+0x30>
 80138f8:	2600      	movs	r6, #0
 80138fa:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80138fe:	d1f0      	bne.n	80138e2 <__ieee754_powf+0x8a>
 8013900:	f1b5 5f7e 	cmp.w	r5, #1065353216	; 0x3f800000
 8013904:	f000 8250 	beq.w	8013da8 <__ieee754_powf+0x550>
 8013908:	dd08      	ble.n	801391c <__ieee754_powf+0xc4>
 801390a:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 8013c10 <__ieee754_powf+0x3b8>
 801390e:	2c00      	cmp	r4, #0
 8013910:	bfa8      	it	ge
 8013912:	eeb0 0a68 	vmovge.f32	s0, s17
 8013916:	e7b7      	b.n	8013888 <__ieee754_powf+0x30>
 8013918:	2602      	movs	r6, #2
 801391a:	e7ee      	b.n	80138fa <__ieee754_powf+0xa2>
 801391c:	2c00      	cmp	r4, #0
 801391e:	f280 8246 	bge.w	8013dae <__ieee754_powf+0x556>
 8013922:	eeb1 0a68 	vneg.f32	s0, s17
 8013926:	e7af      	b.n	8013888 <__ieee754_powf+0x30>
 8013928:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
 801392c:	d102      	bne.n	8013934 <__ieee754_powf+0xdc>
 801392e:	ee28 0a08 	vmul.f32	s0, s16, s16
 8013932:	e7a9      	b.n	8013888 <__ieee754_powf+0x30>
 8013934:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 8013938:	eeb0 0a48 	vmov.f32	s0, s16
 801393c:	d107      	bne.n	801394e <__ieee754_powf+0xf6>
 801393e:	2f00      	cmp	r7, #0
 8013940:	db05      	blt.n	801394e <__ieee754_powf+0xf6>
 8013942:	ecbd 8b02 	vpop	{d8}
 8013946:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801394a:	f7fe bc03 	b.w	8012154 <__ieee754_sqrtf>
 801394e:	f7fe fadb 	bl	8011f08 <fabsf>
 8013952:	b125      	cbz	r5, 801395e <__ieee754_powf+0x106>
 8013954:	f027 4340 	bic.w	r3, r7, #3221225472	; 0xc0000000
 8013958:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 801395c:	d115      	bne.n	801398a <__ieee754_powf+0x132>
 801395e:	2c00      	cmp	r4, #0
 8013960:	bfbc      	itt	lt
 8013962:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8013966:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 801396a:	2f00      	cmp	r7, #0
 801396c:	da8c      	bge.n	8013888 <__ieee754_powf+0x30>
 801396e:	f1a5 557e 	sub.w	r5, r5, #1065353216	; 0x3f800000
 8013972:	4335      	orrs	r5, r6
 8013974:	d104      	bne.n	8013980 <__ieee754_powf+0x128>
 8013976:	ee70 7a40 	vsub.f32	s15, s0, s0
 801397a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 801397e:	e783      	b.n	8013888 <__ieee754_powf+0x30>
 8013980:	2e01      	cmp	r6, #1
 8013982:	d181      	bne.n	8013888 <__ieee754_powf+0x30>
 8013984:	eeb1 0a40 	vneg.f32	s0, s0
 8013988:	e77e      	b.n	8013888 <__ieee754_powf+0x30>
 801398a:	0ff8      	lsrs	r0, r7, #31
 801398c:	3801      	subs	r0, #1
 801398e:	ea56 0300 	orrs.w	r3, r6, r0
 8013992:	d104      	bne.n	801399e <__ieee754_powf+0x146>
 8013994:	ee38 8a48 	vsub.f32	s16, s16, s16
 8013998:	ee88 0a08 	vdiv.f32	s0, s16, s16
 801399c:	e774      	b.n	8013888 <__ieee754_powf+0x30>
 801399e:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 80139a2:	dd73      	ble.n	8013a8c <__ieee754_powf+0x234>
 80139a4:	4b9b      	ldr	r3, [pc, #620]	; (8013c14 <__ieee754_powf+0x3bc>)
 80139a6:	429d      	cmp	r5, r3
 80139a8:	dc08      	bgt.n	80139bc <__ieee754_powf+0x164>
 80139aa:	2c00      	cmp	r4, #0
 80139ac:	da0b      	bge.n	80139c6 <__ieee754_powf+0x16e>
 80139ae:	2000      	movs	r0, #0
 80139b0:	ecbd 8b02 	vpop	{d8}
 80139b4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139b8:	f000 bc76 	b.w	80142a8 <__math_oflowf>
 80139bc:	4b96      	ldr	r3, [pc, #600]	; (8013c18 <__ieee754_powf+0x3c0>)
 80139be:	429d      	cmp	r5, r3
 80139c0:	dd08      	ble.n	80139d4 <__ieee754_powf+0x17c>
 80139c2:	2c00      	cmp	r4, #0
 80139c4:	dcf3      	bgt.n	80139ae <__ieee754_powf+0x156>
 80139c6:	2000      	movs	r0, #0
 80139c8:	ecbd 8b02 	vpop	{d8}
 80139cc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80139d0:	f000 bc64 	b.w	801429c <__math_uflowf>
 80139d4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80139d8:	ee30 0a67 	vsub.f32	s0, s0, s15
 80139dc:	eddf 6a8f 	vldr	s13, [pc, #572]	; 8013c1c <__ieee754_powf+0x3c4>
 80139e0:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 80139e4:	eee0 6a67 	vfms.f32	s13, s0, s15
 80139e8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 80139ec:	eee6 7ac0 	vfms.f32	s15, s13, s0
 80139f0:	ee20 7a00 	vmul.f32	s14, s0, s0
 80139f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80139f8:	eddf 7a89 	vldr	s15, [pc, #548]	; 8013c20 <__ieee754_powf+0x3c8>
 80139fc:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8013a00:	ed9f 7a88 	vldr	s14, [pc, #544]	; 8013c24 <__ieee754_powf+0x3cc>
 8013a04:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013a08:	ed9f 7a87 	vldr	s14, [pc, #540]	; 8013c28 <__ieee754_powf+0x3d0>
 8013a0c:	eef0 6a67 	vmov.f32	s13, s15
 8013a10:	eee0 6a07 	vfma.f32	s13, s0, s14
 8013a14:	ee16 3a90 	vmov	r3, s13
 8013a18:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013a1c:	f023 030f 	bic.w	r3, r3, #15
 8013a20:	ee06 3a90 	vmov	s13, r3
 8013a24:	eee0 6a47 	vfms.f32	s13, s0, s14
 8013a28:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013a2c:	3e01      	subs	r6, #1
 8013a2e:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
 8013a32:	4306      	orrs	r6, r0
 8013a34:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8013a38:	f024 040f 	bic.w	r4, r4, #15
 8013a3c:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 8013a40:	bf08      	it	eq
 8013a42:	eeb0 8a47 	vmoveq.f32	s16, s14
 8013a46:	ee07 4a10 	vmov	s14, r4
 8013a4a:	ee67 0aa8 	vmul.f32	s1, s15, s17
 8013a4e:	ee38 7ac7 	vsub.f32	s14, s17, s14
 8013a52:	ee07 3a90 	vmov	s15, r3
 8013a56:	eee7 0a27 	vfma.f32	s1, s14, s15
 8013a5a:	ee07 4a10 	vmov	s14, r4
 8013a5e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013a62:	ee30 7aa7 	vadd.f32	s14, s1, s15
 8013a66:	ee17 1a10 	vmov	r1, s14
 8013a6a:	2900      	cmp	r1, #0
 8013a6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8013a70:	f340 817c 	ble.w	8013d6c <__ieee754_powf+0x514>
 8013a74:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 8013a78:	f340 80f8 	ble.w	8013c6c <__ieee754_powf+0x414>
 8013a7c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013a80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013a84:	bf4c      	ite	mi
 8013a86:	2001      	movmi	r0, #1
 8013a88:	2000      	movpl	r0, #0
 8013a8a:	e791      	b.n	80139b0 <__ieee754_powf+0x158>
 8013a8c:	f017 4fff 	tst.w	r7, #2139095040	; 0x7f800000
 8013a90:	bf01      	itttt	eq
 8013a92:	eddf 7a66 	vldreq	s15, [pc, #408]	; 8013c2c <__ieee754_powf+0x3d4>
 8013a96:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 8013a9a:	f06f 0317 	mvneq.w	r3, #23
 8013a9e:	ee17 5a90 	vmoveq	r5, s15
 8013aa2:	ea4f 52e5 	mov.w	r2, r5, asr #23
 8013aa6:	bf18      	it	ne
 8013aa8:	2300      	movne	r3, #0
 8013aaa:	3a7f      	subs	r2, #127	; 0x7f
 8013aac:	441a      	add	r2, r3
 8013aae:	4b60      	ldr	r3, [pc, #384]	; (8013c30 <__ieee754_powf+0x3d8>)
 8013ab0:	f3c5 0516 	ubfx	r5, r5, #0, #23
 8013ab4:	429d      	cmp	r5, r3
 8013ab6:	f045 517e 	orr.w	r1, r5, #1065353216	; 0x3f800000
 8013aba:	dd06      	ble.n	8013aca <__ieee754_powf+0x272>
 8013abc:	4b5d      	ldr	r3, [pc, #372]	; (8013c34 <__ieee754_powf+0x3dc>)
 8013abe:	429d      	cmp	r5, r3
 8013ac0:	f340 80a4 	ble.w	8013c0c <__ieee754_powf+0x3b4>
 8013ac4:	3201      	adds	r2, #1
 8013ac6:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8013aca:	2500      	movs	r5, #0
 8013acc:	4b5a      	ldr	r3, [pc, #360]	; (8013c38 <__ieee754_powf+0x3e0>)
 8013ace:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8013ad2:	ee07 1a10 	vmov	s14, r1
 8013ad6:	edd3 5a00 	vldr	s11, [r3]
 8013ada:	4b58      	ldr	r3, [pc, #352]	; (8013c3c <__ieee754_powf+0x3e4>)
 8013adc:	ee75 7a87 	vadd.f32	s15, s11, s14
 8013ae0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8013ae4:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 8013ae8:	1049      	asrs	r1, r1, #1
 8013aea:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8013aee:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8013af2:	eb01 5145 	add.w	r1, r1, r5, lsl #21
 8013af6:	ee37 6a65 	vsub.f32	s12, s14, s11
 8013afa:	ee07 1a90 	vmov	s15, r1
 8013afe:	ee26 5a24 	vmul.f32	s10, s12, s9
 8013b02:	ee77 5ae5 	vsub.f32	s11, s15, s11
 8013b06:	ee15 7a10 	vmov	r7, s10
 8013b0a:	401f      	ands	r7, r3
 8013b0c:	ee06 7a90 	vmov	s13, r7
 8013b10:	eea6 6ae7 	vfms.f32	s12, s13, s15
 8013b14:	ee37 7a65 	vsub.f32	s14, s14, s11
 8013b18:	ee65 7a05 	vmul.f32	s15, s10, s10
 8013b1c:	eea6 6ac7 	vfms.f32	s12, s13, s14
 8013b20:	eddf 5a47 	vldr	s11, [pc, #284]	; 8013c40 <__ieee754_powf+0x3e8>
 8013b24:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8013c44 <__ieee754_powf+0x3ec>
 8013b28:	eee7 5a87 	vfma.f32	s11, s15, s14
 8013b2c:	ed9f 7a46 	vldr	s14, [pc, #280]	; 8013c48 <__ieee754_powf+0x3f0>
 8013b30:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013b34:	eddf 5a39 	vldr	s11, [pc, #228]	; 8013c1c <__ieee754_powf+0x3c4>
 8013b38:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013b3c:	ed9f 7a43 	vldr	s14, [pc, #268]	; 8013c4c <__ieee754_powf+0x3f4>
 8013b40:	eea5 7aa7 	vfma.f32	s14, s11, s15
 8013b44:	eddf 5a42 	vldr	s11, [pc, #264]	; 8013c50 <__ieee754_powf+0x3f8>
 8013b48:	ee26 6a24 	vmul.f32	s12, s12, s9
 8013b4c:	eee7 5a27 	vfma.f32	s11, s14, s15
 8013b50:	ee35 7a26 	vadd.f32	s14, s10, s13
 8013b54:	ee67 4aa7 	vmul.f32	s9, s15, s15
 8013b58:	ee27 7a06 	vmul.f32	s14, s14, s12
 8013b5c:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
 8013b60:	eea4 7aa5 	vfma.f32	s14, s9, s11
 8013b64:	eef0 5a67 	vmov.f32	s11, s15
 8013b68:	eee6 5aa6 	vfma.f32	s11, s13, s13
 8013b6c:	ee75 5a87 	vadd.f32	s11, s11, s14
 8013b70:	ee15 1a90 	vmov	r1, s11
 8013b74:	4019      	ands	r1, r3
 8013b76:	ee05 1a90 	vmov	s11, r1
 8013b7a:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8013b7e:	eee6 7ae6 	vfms.f32	s15, s13, s13
 8013b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013b86:	ee67 7a85 	vmul.f32	s15, s15, s10
 8013b8a:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013b8e:	eeb0 6a67 	vmov.f32	s12, s15
 8013b92:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8013b96:	ee16 1a10 	vmov	r1, s12
 8013b9a:	4019      	ands	r1, r3
 8013b9c:	ee07 1a10 	vmov	s14, r1
 8013ba0:	eea6 7ae5 	vfms.f32	s14, s13, s11
 8013ba4:	ee06 1a10 	vmov	s12, r1
 8013ba8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013bac:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8013c54 <__ieee754_powf+0x3fc>
 8013bb0:	4929      	ldr	r1, [pc, #164]	; (8013c58 <__ieee754_powf+0x400>)
 8013bb2:	eddf 5a2a 	vldr	s11, [pc, #168]	; 8013c5c <__ieee754_powf+0x404>
 8013bb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8013bba:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8013c60 <__ieee754_powf+0x408>
 8013bbe:	eee6 7a07 	vfma.f32	s15, s12, s14
 8013bc2:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8013bc6:	ed91 7a00 	vldr	s14, [r1]
 8013bca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013bce:	ee07 2a10 	vmov	s14, r2
 8013bd2:	eef0 6a67 	vmov.f32	s13, s15
 8013bd6:	4a23      	ldr	r2, [pc, #140]	; (8013c64 <__ieee754_powf+0x40c>)
 8013bd8:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013bdc:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8013be0:	ed92 5a00 	vldr	s10, [r2]
 8013be4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013be8:	ee76 6a85 	vadd.f32	s13, s13, s10
 8013bec:	ee76 6a87 	vadd.f32	s13, s13, s14
 8013bf0:	ee16 2a90 	vmov	r2, s13
 8013bf4:	4013      	ands	r3, r2
 8013bf6:	ee06 3a90 	vmov	s13, r3
 8013bfa:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8013bfe:	ee37 7a45 	vsub.f32	s14, s14, s10
 8013c02:	eea6 7a65 	vfms.f32	s14, s12, s11
 8013c06:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013c0a:	e70f      	b.n	8013a2c <__ieee754_powf+0x1d4>
 8013c0c:	2501      	movs	r5, #1
 8013c0e:	e75d      	b.n	8013acc <__ieee754_powf+0x274>
 8013c10:	00000000 	.word	0x00000000
 8013c14:	3f7ffff3 	.word	0x3f7ffff3
 8013c18:	3f800007 	.word	0x3f800007
 8013c1c:	3eaaaaab 	.word	0x3eaaaaab
 8013c20:	3fb8aa3b 	.word	0x3fb8aa3b
 8013c24:	36eca570 	.word	0x36eca570
 8013c28:	3fb8aa00 	.word	0x3fb8aa00
 8013c2c:	4b800000 	.word	0x4b800000
 8013c30:	001cc471 	.word	0x001cc471
 8013c34:	005db3d6 	.word	0x005db3d6
 8013c38:	08016e78 	.word	0x08016e78
 8013c3c:	fffff000 	.word	0xfffff000
 8013c40:	3e6c3255 	.word	0x3e6c3255
 8013c44:	3e53f142 	.word	0x3e53f142
 8013c48:	3e8ba305 	.word	0x3e8ba305
 8013c4c:	3edb6db7 	.word	0x3edb6db7
 8013c50:	3f19999a 	.word	0x3f19999a
 8013c54:	3f76384f 	.word	0x3f76384f
 8013c58:	08016e88 	.word	0x08016e88
 8013c5c:	3f763800 	.word	0x3f763800
 8013c60:	369dc3a0 	.word	0x369dc3a0
 8013c64:	08016e80 	.word	0x08016e80
 8013c68:	3338aa3c 	.word	0x3338aa3c
 8013c6c:	f040 8093 	bne.w	8013d96 <__ieee754_powf+0x53e>
 8013c70:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 8013c68 <__ieee754_powf+0x410>
 8013c74:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013c78:	ee70 6aa6 	vadd.f32	s13, s1, s13
 8013c7c:	eef4 6ac7 	vcmpe.f32	s13, s14
 8013c80:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013c84:	f73f aefa 	bgt.w	8013a7c <__ieee754_powf+0x224>
 8013c88:	15db      	asrs	r3, r3, #23
 8013c8a:	3b7e      	subs	r3, #126	; 0x7e
 8013c8c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 8013c90:	4118      	asrs	r0, r3
 8013c92:	4408      	add	r0, r1
 8013c94:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8013c98:	4a49      	ldr	r2, [pc, #292]	; (8013dc0 <__ieee754_powf+0x568>)
 8013c9a:	3b7f      	subs	r3, #127	; 0x7f
 8013c9c:	411a      	asrs	r2, r3
 8013c9e:	4002      	ands	r2, r0
 8013ca0:	ee07 2a10 	vmov	s14, r2
 8013ca4:	f3c0 0016 	ubfx	r0, r0, #0, #23
 8013ca8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8013cac:	f1c3 0317 	rsb	r3, r3, #23
 8013cb0:	4118      	asrs	r0, r3
 8013cb2:	2900      	cmp	r1, #0
 8013cb4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013cb8:	bfb8      	it	lt
 8013cba:	4240      	neglt	r0, r0
 8013cbc:	ee37 7aa0 	vadd.f32	s14, s15, s1
 8013cc0:	eddf 6a40 	vldr	s13, [pc, #256]	; 8013dc4 <__ieee754_powf+0x56c>
 8013cc4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 8013dc8 <__ieee754_powf+0x570>
 8013cc8:	ee17 3a10 	vmov	r3, s14
 8013ccc:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8013cd0:	f023 030f 	bic.w	r3, r3, #15
 8013cd4:	ee07 3a10 	vmov	s14, r3
 8013cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013cdc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013ce0:	ee70 0ae7 	vsub.f32	s1, s1, s15
 8013ce4:	eddf 7a39 	vldr	s15, [pc, #228]	; 8013dcc <__ieee754_powf+0x574>
 8013ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013cec:	eee0 7aa6 	vfma.f32	s15, s1, s13
 8013cf0:	eef0 6a67 	vmov.f32	s13, s15
 8013cf4:	eee7 6a06 	vfma.f32	s13, s14, s12
 8013cf8:	eef0 5a66 	vmov.f32	s11, s13
 8013cfc:	eee7 5a46 	vfms.f32	s11, s14, s12
 8013d00:	ee26 7aa6 	vmul.f32	s14, s13, s13
 8013d04:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8013d08:	ed9f 6a31 	vldr	s12, [pc, #196]	; 8013dd0 <__ieee754_powf+0x578>
 8013d0c:	eddf 5a31 	vldr	s11, [pc, #196]	; 8013dd4 <__ieee754_powf+0x57c>
 8013d10:	eea7 6a25 	vfma.f32	s12, s14, s11
 8013d14:	eddf 5a30 	vldr	s11, [pc, #192]	; 8013dd8 <__ieee754_powf+0x580>
 8013d18:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013d1c:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 8013ddc <__ieee754_powf+0x584>
 8013d20:	eea5 6a87 	vfma.f32	s12, s11, s14
 8013d24:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8013de0 <__ieee754_powf+0x588>
 8013d28:	eee6 5a07 	vfma.f32	s11, s12, s14
 8013d2c:	eeb0 6a66 	vmov.f32	s12, s13
 8013d30:	eea5 6ac7 	vfms.f32	s12, s11, s14
 8013d34:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8013d38:	ee66 5a86 	vmul.f32	s11, s13, s12
 8013d3c:	ee36 6a47 	vsub.f32	s12, s12, s14
 8013d40:	eee6 7aa7 	vfma.f32	s15, s13, s15
 8013d44:	ee85 7a86 	vdiv.f32	s14, s11, s12
 8013d48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8013d4c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013d50:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013d54:	ee10 3a10 	vmov	r3, s0
 8013d58:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 8013d5c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8013d60:	da1f      	bge.n	8013da2 <__ieee754_powf+0x54a>
 8013d62:	f000 fa1f 	bl	80141a4 <scalbnf>
 8013d66:	ee20 0a08 	vmul.f32	s0, s0, s16
 8013d6a:	e58d      	b.n	8013888 <__ieee754_powf+0x30>
 8013d6c:	4a1d      	ldr	r2, [pc, #116]	; (8013de4 <__ieee754_powf+0x58c>)
 8013d6e:	4293      	cmp	r3, r2
 8013d70:	dd07      	ble.n	8013d82 <__ieee754_powf+0x52a>
 8013d72:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8013d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d7a:	bf4c      	ite	mi
 8013d7c:	2001      	movmi	r0, #1
 8013d7e:	2000      	movpl	r0, #0
 8013d80:	e622      	b.n	80139c8 <__ieee754_powf+0x170>
 8013d82:	d108      	bne.n	8013d96 <__ieee754_powf+0x53e>
 8013d84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8013d88:	eeb4 7ae0 	vcmpe.f32	s14, s1
 8013d8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013d90:	f6ff af7a 	blt.w	8013c88 <__ieee754_powf+0x430>
 8013d94:	e7ed      	b.n	8013d72 <__ieee754_powf+0x51a>
 8013d96:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 8013d9a:	f73f af75 	bgt.w	8013c88 <__ieee754_powf+0x430>
 8013d9e:	2000      	movs	r0, #0
 8013da0:	e78c      	b.n	8013cbc <__ieee754_powf+0x464>
 8013da2:	ee00 3a10 	vmov	s0, r3
 8013da6:	e7de      	b.n	8013d66 <__ieee754_powf+0x50e>
 8013da8:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8013dac:	e56c      	b.n	8013888 <__ieee754_powf+0x30>
 8013dae:	ed9f 0a0e 	vldr	s0, [pc, #56]	; 8013de8 <__ieee754_powf+0x590>
 8013db2:	e569      	b.n	8013888 <__ieee754_powf+0x30>
 8013db4:	eeb0 0a48 	vmov.f32	s0, s16
 8013db8:	e566      	b.n	8013888 <__ieee754_powf+0x30>
 8013dba:	2600      	movs	r6, #0
 8013dbc:	e591      	b.n	80138e2 <__ieee754_powf+0x8a>
 8013dbe:	bf00      	nop
 8013dc0:	ff800000 	.word	0xff800000
 8013dc4:	3f317218 	.word	0x3f317218
 8013dc8:	3f317200 	.word	0x3f317200
 8013dcc:	35bfbe8c 	.word	0x35bfbe8c
 8013dd0:	b5ddea0e 	.word	0xb5ddea0e
 8013dd4:	3331bb4c 	.word	0x3331bb4c
 8013dd8:	388ab355 	.word	0x388ab355
 8013ddc:	bb360b61 	.word	0xbb360b61
 8013de0:	3e2aaaab 	.word	0x3e2aaaab
 8013de4:	43160000 	.word	0x43160000
 8013de8:	00000000 	.word	0x00000000

08013dec <__ieee754_rem_pio2f>:
 8013dec:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013dee:	ee10 6a10 	vmov	r6, s0
 8013df2:	4b86      	ldr	r3, [pc, #536]	; (801400c <__ieee754_rem_pio2f+0x220>)
 8013df4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 8013df8:	429d      	cmp	r5, r3
 8013dfa:	b087      	sub	sp, #28
 8013dfc:	4604      	mov	r4, r0
 8013dfe:	dc05      	bgt.n	8013e0c <__ieee754_rem_pio2f+0x20>
 8013e00:	2300      	movs	r3, #0
 8013e02:	ed80 0a00 	vstr	s0, [r0]
 8013e06:	6043      	str	r3, [r0, #4]
 8013e08:	2000      	movs	r0, #0
 8013e0a:	e020      	b.n	8013e4e <__ieee754_rem_pio2f+0x62>
 8013e0c:	4b80      	ldr	r3, [pc, #512]	; (8014010 <__ieee754_rem_pio2f+0x224>)
 8013e0e:	429d      	cmp	r5, r3
 8013e10:	dc38      	bgt.n	8013e84 <__ieee754_rem_pio2f+0x98>
 8013e12:	2e00      	cmp	r6, #0
 8013e14:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 8014014 <__ieee754_rem_pio2f+0x228>
 8013e18:	4b7f      	ldr	r3, [pc, #508]	; (8014018 <__ieee754_rem_pio2f+0x22c>)
 8013e1a:	f025 050f 	bic.w	r5, r5, #15
 8013e1e:	dd18      	ble.n	8013e52 <__ieee754_rem_pio2f+0x66>
 8013e20:	429d      	cmp	r5, r3
 8013e22:	ee70 7a47 	vsub.f32	s15, s0, s14
 8013e26:	bf09      	itett	eq
 8013e28:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 801401c <__ieee754_rem_pio2f+0x230>
 8013e2c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 8014020 <__ieee754_rem_pio2f+0x234>
 8013e30:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 8013e34:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 8014024 <__ieee754_rem_pio2f+0x238>
 8013e38:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8013e3c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013e40:	edc0 6a00 	vstr	s13, [r0]
 8013e44:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013e48:	edc0 7a01 	vstr	s15, [r0, #4]
 8013e4c:	2001      	movs	r0, #1
 8013e4e:	b007      	add	sp, #28
 8013e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8013e52:	429d      	cmp	r5, r3
 8013e54:	ee70 7a07 	vadd.f32	s15, s0, s14
 8013e58:	bf09      	itett	eq
 8013e5a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 801401c <__ieee754_rem_pio2f+0x230>
 8013e5e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 8014020 <__ieee754_rem_pio2f+0x234>
 8013e62:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 8013e66:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 8014024 <__ieee754_rem_pio2f+0x238>
 8013e6a:	ee77 6a87 	vadd.f32	s13, s15, s14
 8013e6e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8013e72:	edc0 6a00 	vstr	s13, [r0]
 8013e76:	ee77 7a87 	vadd.f32	s15, s15, s14
 8013e7a:	edc0 7a01 	vstr	s15, [r0, #4]
 8013e7e:	f04f 30ff 	mov.w	r0, #4294967295
 8013e82:	e7e4      	b.n	8013e4e <__ieee754_rem_pio2f+0x62>
 8013e84:	4b68      	ldr	r3, [pc, #416]	; (8014028 <__ieee754_rem_pio2f+0x23c>)
 8013e86:	429d      	cmp	r5, r3
 8013e88:	dc71      	bgt.n	8013f6e <__ieee754_rem_pio2f+0x182>
 8013e8a:	f7fe f83d 	bl	8011f08 <fabsf>
 8013e8e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 801402c <__ieee754_rem_pio2f+0x240>
 8013e92:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8013e96:	eee0 7a07 	vfma.f32	s15, s0, s14
 8013e9a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8013e9e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8013ea2:	ee17 0a90 	vmov	r0, s15
 8013ea6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8014014 <__ieee754_rem_pio2f+0x228>
 8013eaa:	eea7 0a67 	vfms.f32	s0, s14, s15
 8013eae:	281f      	cmp	r0, #31
 8013eb0:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8014020 <__ieee754_rem_pio2f+0x234>
 8013eb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013eb8:	eeb1 6a47 	vneg.f32	s12, s14
 8013ebc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8013ec0:	ee16 2a90 	vmov	r2, s13
 8013ec4:	dc1c      	bgt.n	8013f00 <__ieee754_rem_pio2f+0x114>
 8013ec6:	495a      	ldr	r1, [pc, #360]	; (8014030 <__ieee754_rem_pio2f+0x244>)
 8013ec8:	1e47      	subs	r7, r0, #1
 8013eca:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8013ece:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8013ed2:	428b      	cmp	r3, r1
 8013ed4:	d014      	beq.n	8013f00 <__ieee754_rem_pio2f+0x114>
 8013ed6:	6022      	str	r2, [r4, #0]
 8013ed8:	ed94 7a00 	vldr	s14, [r4]
 8013edc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8013ee0:	2e00      	cmp	r6, #0
 8013ee2:	ee30 0a67 	vsub.f32	s0, s0, s15
 8013ee6:	ed84 0a01 	vstr	s0, [r4, #4]
 8013eea:	dab0      	bge.n	8013e4e <__ieee754_rem_pio2f+0x62>
 8013eec:	eeb1 7a47 	vneg.f32	s14, s14
 8013ef0:	eeb1 0a40 	vneg.f32	s0, s0
 8013ef4:	ed84 7a00 	vstr	s14, [r4]
 8013ef8:	ed84 0a01 	vstr	s0, [r4, #4]
 8013efc:	4240      	negs	r0, r0
 8013efe:	e7a6      	b.n	8013e4e <__ieee754_rem_pio2f+0x62>
 8013f00:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013f04:	ebc1 51d5 	rsb	r1, r1, r5, lsr #23
 8013f08:	2908      	cmp	r1, #8
 8013f0a:	ea4f 53e5 	mov.w	r3, r5, asr #23
 8013f0e:	dde2      	ble.n	8013ed6 <__ieee754_rem_pio2f+0xea>
 8013f10:	eddf 5a42 	vldr	s11, [pc, #264]	; 801401c <__ieee754_rem_pio2f+0x230>
 8013f14:	eef0 6a40 	vmov.f32	s13, s0
 8013f18:	eee6 6a25 	vfma.f32	s13, s12, s11
 8013f1c:	ee70 7a66 	vsub.f32	s15, s0, s13
 8013f20:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013f24:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8014024 <__ieee754_rem_pio2f+0x238>
 8013f28:	eed7 7a25 	vfnms.f32	s15, s14, s11
 8013f2c:	ee76 5ae7 	vsub.f32	s11, s13, s15
 8013f30:	ee15 2a90 	vmov	r2, s11
 8013f34:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8013f38:	1a5b      	subs	r3, r3, r1
 8013f3a:	2b19      	cmp	r3, #25
 8013f3c:	dc04      	bgt.n	8013f48 <__ieee754_rem_pio2f+0x15c>
 8013f3e:	edc4 5a00 	vstr	s11, [r4]
 8013f42:	eeb0 0a66 	vmov.f32	s0, s13
 8013f46:	e7c7      	b.n	8013ed8 <__ieee754_rem_pio2f+0xec>
 8013f48:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8014034 <__ieee754_rem_pio2f+0x248>
 8013f4c:	eeb0 0a66 	vmov.f32	s0, s13
 8013f50:	eea6 0a25 	vfma.f32	s0, s12, s11
 8013f54:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8013f58:	eddf 6a37 	vldr	s13, [pc, #220]	; 8014038 <__ieee754_rem_pio2f+0x24c>
 8013f5c:	eee6 7a25 	vfma.f32	s15, s12, s11
 8013f60:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8013f64:	ee30 7a67 	vsub.f32	s14, s0, s15
 8013f68:	ed84 7a00 	vstr	s14, [r4]
 8013f6c:	e7b4      	b.n	8013ed8 <__ieee754_rem_pio2f+0xec>
 8013f6e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8013f72:	db06      	blt.n	8013f82 <__ieee754_rem_pio2f+0x196>
 8013f74:	ee70 7a40 	vsub.f32	s15, s0, s0
 8013f78:	edc0 7a01 	vstr	s15, [r0, #4]
 8013f7c:	edc0 7a00 	vstr	s15, [r0]
 8013f80:	e742      	b.n	8013e08 <__ieee754_rem_pio2f+0x1c>
 8013f82:	15ea      	asrs	r2, r5, #23
 8013f84:	3a86      	subs	r2, #134	; 0x86
 8013f86:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8013f8a:	ee07 3a90 	vmov	s15, r3
 8013f8e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013f92:	eddf 6a2a 	vldr	s13, [pc, #168]	; 801403c <__ieee754_rem_pio2f+0x250>
 8013f96:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013f9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013f9e:	ed8d 7a03 	vstr	s14, [sp, #12]
 8013fa2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013fa6:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8013faa:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8013fae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8013fb2:	ed8d 7a04 	vstr	s14, [sp, #16]
 8013fb6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8013fba:	eef5 7a40 	vcmp.f32	s15, #0.0
 8013fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fc2:	edcd 7a05 	vstr	s15, [sp, #20]
 8013fc6:	d11e      	bne.n	8014006 <__ieee754_rem_pio2f+0x21a>
 8013fc8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8013fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013fd0:	bf14      	ite	ne
 8013fd2:	2302      	movne	r3, #2
 8013fd4:	2301      	moveq	r3, #1
 8013fd6:	491a      	ldr	r1, [pc, #104]	; (8014040 <__ieee754_rem_pio2f+0x254>)
 8013fd8:	9101      	str	r1, [sp, #4]
 8013fda:	2102      	movs	r1, #2
 8013fdc:	9100      	str	r1, [sp, #0]
 8013fde:	a803      	add	r0, sp, #12
 8013fe0:	4621      	mov	r1, r4
 8013fe2:	f000 fcb7 	bl	8014954 <__kernel_rem_pio2f>
 8013fe6:	2e00      	cmp	r6, #0
 8013fe8:	f6bf af31 	bge.w	8013e4e <__ieee754_rem_pio2f+0x62>
 8013fec:	edd4 7a00 	vldr	s15, [r4]
 8013ff0:	eef1 7a67 	vneg.f32	s15, s15
 8013ff4:	edc4 7a00 	vstr	s15, [r4]
 8013ff8:	edd4 7a01 	vldr	s15, [r4, #4]
 8013ffc:	eef1 7a67 	vneg.f32	s15, s15
 8014000:	edc4 7a01 	vstr	s15, [r4, #4]
 8014004:	e77a      	b.n	8013efc <__ieee754_rem_pio2f+0x110>
 8014006:	2303      	movs	r3, #3
 8014008:	e7e5      	b.n	8013fd6 <__ieee754_rem_pio2f+0x1ea>
 801400a:	bf00      	nop
 801400c:	3f490fd8 	.word	0x3f490fd8
 8014010:	4016cbe3 	.word	0x4016cbe3
 8014014:	3fc90f80 	.word	0x3fc90f80
 8014018:	3fc90fd0 	.word	0x3fc90fd0
 801401c:	37354400 	.word	0x37354400
 8014020:	37354443 	.word	0x37354443
 8014024:	2e85a308 	.word	0x2e85a308
 8014028:	43490f80 	.word	0x43490f80
 801402c:	3f22f984 	.word	0x3f22f984
 8014030:	08016e90 	.word	0x08016e90
 8014034:	2e85a300 	.word	0x2e85a300
 8014038:	248d3132 	.word	0x248d3132
 801403c:	43800000 	.word	0x43800000
 8014040:	08016f10 	.word	0x08016f10
 8014044:	00000000 	.word	0x00000000

08014048 <scalbn>:
 8014048:	b570      	push	{r4, r5, r6, lr}
 801404a:	ec55 4b10 	vmov	r4, r5, d0
 801404e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 8014052:	4606      	mov	r6, r0
 8014054:	462b      	mov	r3, r5
 8014056:	b999      	cbnz	r1, 8014080 <scalbn+0x38>
 8014058:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801405c:	4323      	orrs	r3, r4
 801405e:	d03f      	beq.n	80140e0 <scalbn+0x98>
 8014060:	4b35      	ldr	r3, [pc, #212]	; (8014138 <scalbn+0xf0>)
 8014062:	4629      	mov	r1, r5
 8014064:	ee10 0a10 	vmov	r0, s0
 8014068:	2200      	movs	r2, #0
 801406a:	f7ec fae5 	bl	8000638 <__aeabi_dmul>
 801406e:	4b33      	ldr	r3, [pc, #204]	; (801413c <scalbn+0xf4>)
 8014070:	429e      	cmp	r6, r3
 8014072:	4604      	mov	r4, r0
 8014074:	460d      	mov	r5, r1
 8014076:	da10      	bge.n	801409a <scalbn+0x52>
 8014078:	a327      	add	r3, pc, #156	; (adr r3, 8014118 <scalbn+0xd0>)
 801407a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801407e:	e01f      	b.n	80140c0 <scalbn+0x78>
 8014080:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8014084:	4291      	cmp	r1, r2
 8014086:	d10c      	bne.n	80140a2 <scalbn+0x5a>
 8014088:	ee10 2a10 	vmov	r2, s0
 801408c:	4620      	mov	r0, r4
 801408e:	4629      	mov	r1, r5
 8014090:	f7ec f91c 	bl	80002cc <__adddf3>
 8014094:	4604      	mov	r4, r0
 8014096:	460d      	mov	r5, r1
 8014098:	e022      	b.n	80140e0 <scalbn+0x98>
 801409a:	460b      	mov	r3, r1
 801409c:	f3c1 510a 	ubfx	r1, r1, #20, #11
 80140a0:	3936      	subs	r1, #54	; 0x36
 80140a2:	f24c 3250 	movw	r2, #50000	; 0xc350
 80140a6:	4296      	cmp	r6, r2
 80140a8:	dd0d      	ble.n	80140c6 <scalbn+0x7e>
 80140aa:	2d00      	cmp	r5, #0
 80140ac:	a11c      	add	r1, pc, #112	; (adr r1, 8014120 <scalbn+0xd8>)
 80140ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140b2:	da02      	bge.n	80140ba <scalbn+0x72>
 80140b4:	a11c      	add	r1, pc, #112	; (adr r1, 8014128 <scalbn+0xe0>)
 80140b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140ba:	a319      	add	r3, pc, #100	; (adr r3, 8014120 <scalbn+0xd8>)
 80140bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80140c0:	f7ec faba 	bl	8000638 <__aeabi_dmul>
 80140c4:	e7e6      	b.n	8014094 <scalbn+0x4c>
 80140c6:	1872      	adds	r2, r6, r1
 80140c8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80140cc:	428a      	cmp	r2, r1
 80140ce:	dcec      	bgt.n	80140aa <scalbn+0x62>
 80140d0:	2a00      	cmp	r2, #0
 80140d2:	dd08      	ble.n	80140e6 <scalbn+0x9e>
 80140d4:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80140d8:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80140dc:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80140e0:	ec45 4b10 	vmov	d0, r4, r5
 80140e4:	bd70      	pop	{r4, r5, r6, pc}
 80140e6:	f112 0f35 	cmn.w	r2, #53	; 0x35
 80140ea:	da08      	bge.n	80140fe <scalbn+0xb6>
 80140ec:	2d00      	cmp	r5, #0
 80140ee:	a10a      	add	r1, pc, #40	; (adr r1, 8014118 <scalbn+0xd0>)
 80140f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140f4:	dac0      	bge.n	8014078 <scalbn+0x30>
 80140f6:	a10e      	add	r1, pc, #56	; (adr r1, 8014130 <scalbn+0xe8>)
 80140f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80140fc:	e7bc      	b.n	8014078 <scalbn+0x30>
 80140fe:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014102:	3236      	adds	r2, #54	; 0x36
 8014104:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8014108:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801410c:	4620      	mov	r0, r4
 801410e:	4b0c      	ldr	r3, [pc, #48]	; (8014140 <scalbn+0xf8>)
 8014110:	2200      	movs	r2, #0
 8014112:	e7d5      	b.n	80140c0 <scalbn+0x78>
 8014114:	f3af 8000 	nop.w
 8014118:	c2f8f359 	.word	0xc2f8f359
 801411c:	01a56e1f 	.word	0x01a56e1f
 8014120:	8800759c 	.word	0x8800759c
 8014124:	7e37e43c 	.word	0x7e37e43c
 8014128:	8800759c 	.word	0x8800759c
 801412c:	fe37e43c 	.word	0xfe37e43c
 8014130:	c2f8f359 	.word	0xc2f8f359
 8014134:	81a56e1f 	.word	0x81a56e1f
 8014138:	43500000 	.word	0x43500000
 801413c:	ffff3cb0 	.word	0xffff3cb0
 8014140:	3c900000 	.word	0x3c900000

08014144 <with_errno>:
 8014144:	b570      	push	{r4, r5, r6, lr}
 8014146:	4604      	mov	r4, r0
 8014148:	460d      	mov	r5, r1
 801414a:	4616      	mov	r6, r2
 801414c:	f001 f8ba 	bl	80152c4 <__errno>
 8014150:	4629      	mov	r1, r5
 8014152:	6006      	str	r6, [r0, #0]
 8014154:	4620      	mov	r0, r4
 8014156:	bd70      	pop	{r4, r5, r6, pc}

08014158 <xflow>:
 8014158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801415a:	4614      	mov	r4, r2
 801415c:	461d      	mov	r5, r3
 801415e:	b108      	cbz	r0, 8014164 <xflow+0xc>
 8014160:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8014164:	e9cd 2300 	strd	r2, r3, [sp]
 8014168:	e9dd 2300 	ldrd	r2, r3, [sp]
 801416c:	4620      	mov	r0, r4
 801416e:	4629      	mov	r1, r5
 8014170:	f7ec fa62 	bl	8000638 <__aeabi_dmul>
 8014174:	2222      	movs	r2, #34	; 0x22
 8014176:	b003      	add	sp, #12
 8014178:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801417c:	f7ff bfe2 	b.w	8014144 <with_errno>

08014180 <__math_uflow>:
 8014180:	b508      	push	{r3, lr}
 8014182:	2200      	movs	r2, #0
 8014184:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8014188:	f7ff ffe6 	bl	8014158 <xflow>
 801418c:	ec41 0b10 	vmov	d0, r0, r1
 8014190:	bd08      	pop	{r3, pc}

08014192 <__math_oflow>:
 8014192:	b508      	push	{r3, lr}
 8014194:	2200      	movs	r2, #0
 8014196:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 801419a:	f7ff ffdd 	bl	8014158 <xflow>
 801419e:	ec41 0b10 	vmov	d0, r0, r1
 80141a2:	bd08      	pop	{r3, pc}

080141a4 <scalbnf>:
 80141a4:	ee10 3a10 	vmov	r3, s0
 80141a8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 80141ac:	d02b      	beq.n	8014206 <scalbnf+0x62>
 80141ae:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 80141b2:	d302      	bcc.n	80141ba <scalbnf+0x16>
 80141b4:	ee30 0a00 	vadd.f32	s0, s0, s0
 80141b8:	4770      	bx	lr
 80141ba:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 80141be:	d123      	bne.n	8014208 <scalbnf+0x64>
 80141c0:	4b24      	ldr	r3, [pc, #144]	; (8014254 <scalbnf+0xb0>)
 80141c2:	eddf 7a25 	vldr	s15, [pc, #148]	; 8014258 <scalbnf+0xb4>
 80141c6:	4298      	cmp	r0, r3
 80141c8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80141cc:	db17      	blt.n	80141fe <scalbnf+0x5a>
 80141ce:	ee10 3a10 	vmov	r3, s0
 80141d2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 80141d6:	3a19      	subs	r2, #25
 80141d8:	f24c 3150 	movw	r1, #50000	; 0xc350
 80141dc:	4288      	cmp	r0, r1
 80141de:	dd15      	ble.n	801420c <scalbnf+0x68>
 80141e0:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801425c <scalbnf+0xb8>
 80141e4:	eddf 6a1e 	vldr	s13, [pc, #120]	; 8014260 <scalbnf+0xbc>
 80141e8:	ee10 3a10 	vmov	r3, s0
 80141ec:	eeb0 7a67 	vmov.f32	s14, s15
 80141f0:	2b00      	cmp	r3, #0
 80141f2:	bfb8      	it	lt
 80141f4:	eef0 7a66 	vmovlt.f32	s15, s13
 80141f8:	ee27 0a87 	vmul.f32	s0, s15, s14
 80141fc:	4770      	bx	lr
 80141fe:	eddf 7a19 	vldr	s15, [pc, #100]	; 8014264 <scalbnf+0xc0>
 8014202:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014206:	4770      	bx	lr
 8014208:	0dd2      	lsrs	r2, r2, #23
 801420a:	e7e5      	b.n	80141d8 <scalbnf+0x34>
 801420c:	4410      	add	r0, r2
 801420e:	28fe      	cmp	r0, #254	; 0xfe
 8014210:	dce6      	bgt.n	80141e0 <scalbnf+0x3c>
 8014212:	2800      	cmp	r0, #0
 8014214:	dd06      	ble.n	8014224 <scalbnf+0x80>
 8014216:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801421a:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 801421e:	ee00 3a10 	vmov	s0, r3
 8014222:	4770      	bx	lr
 8014224:	f110 0f16 	cmn.w	r0, #22
 8014228:	da09      	bge.n	801423e <scalbnf+0x9a>
 801422a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014264 <scalbnf+0xc0>
 801422e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8014268 <scalbnf+0xc4>
 8014232:	ee10 3a10 	vmov	r3, s0
 8014236:	eeb0 7a67 	vmov.f32	s14, s15
 801423a:	2b00      	cmp	r3, #0
 801423c:	e7d9      	b.n	80141f2 <scalbnf+0x4e>
 801423e:	3019      	adds	r0, #25
 8014240:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8014244:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 8014248:	ed9f 0a08 	vldr	s0, [pc, #32]	; 801426c <scalbnf+0xc8>
 801424c:	ee07 3a90 	vmov	s15, r3
 8014250:	e7d7      	b.n	8014202 <scalbnf+0x5e>
 8014252:	bf00      	nop
 8014254:	ffff3cb0 	.word	0xffff3cb0
 8014258:	4c000000 	.word	0x4c000000
 801425c:	7149f2ca 	.word	0x7149f2ca
 8014260:	f149f2ca 	.word	0xf149f2ca
 8014264:	0da24260 	.word	0x0da24260
 8014268:	8da24260 	.word	0x8da24260
 801426c:	33000000 	.word	0x33000000

08014270 <with_errnof>:
 8014270:	b513      	push	{r0, r1, r4, lr}
 8014272:	4604      	mov	r4, r0
 8014274:	ed8d 0a01 	vstr	s0, [sp, #4]
 8014278:	f001 f824 	bl	80152c4 <__errno>
 801427c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8014280:	6004      	str	r4, [r0, #0]
 8014282:	b002      	add	sp, #8
 8014284:	bd10      	pop	{r4, pc}

08014286 <xflowf>:
 8014286:	b130      	cbz	r0, 8014296 <xflowf+0x10>
 8014288:	eef1 7a40 	vneg.f32	s15, s0
 801428c:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014290:	2022      	movs	r0, #34	; 0x22
 8014292:	f7ff bfed 	b.w	8014270 <with_errnof>
 8014296:	eef0 7a40 	vmov.f32	s15, s0
 801429a:	e7f7      	b.n	801428c <xflowf+0x6>

0801429c <__math_uflowf>:
 801429c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80142a4 <__math_uflowf+0x8>
 80142a0:	f7ff bff1 	b.w	8014286 <xflowf>
 80142a4:	10000000 	.word	0x10000000

080142a8 <__math_oflowf>:
 80142a8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80142b0 <__math_oflowf+0x8>
 80142ac:	f7ff bfeb 	b.w	8014286 <xflowf>
 80142b0:	70000000 	.word	0x70000000
 80142b4:	00000000 	.word	0x00000000

080142b8 <__kernel_rem_pio2>:
 80142b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142bc:	ed2d 8b02 	vpush	{d8}
 80142c0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80142c4:	f112 0f14 	cmn.w	r2, #20
 80142c8:	9306      	str	r3, [sp, #24]
 80142ca:	9104      	str	r1, [sp, #16]
 80142cc:	4bc2      	ldr	r3, [pc, #776]	; (80145d8 <__kernel_rem_pio2+0x320>)
 80142ce:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80142d0:	9009      	str	r0, [sp, #36]	; 0x24
 80142d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80142d6:	9300      	str	r3, [sp, #0]
 80142d8:	9b06      	ldr	r3, [sp, #24]
 80142da:	f103 33ff 	add.w	r3, r3, #4294967295
 80142de:	bfa8      	it	ge
 80142e0:	1ed4      	subge	r4, r2, #3
 80142e2:	9305      	str	r3, [sp, #20]
 80142e4:	bfb2      	itee	lt
 80142e6:	2400      	movlt	r4, #0
 80142e8:	2318      	movge	r3, #24
 80142ea:	fb94 f4f3 	sdivge	r4, r4, r3
 80142ee:	f06f 0317 	mvn.w	r3, #23
 80142f2:	fb04 3303 	mla	r3, r4, r3, r3
 80142f6:	eb03 0a02 	add.w	sl, r3, r2
 80142fa:	9b00      	ldr	r3, [sp, #0]
 80142fc:	9a05      	ldr	r2, [sp, #20]
 80142fe:	ed9f 8bb2 	vldr	d8, [pc, #712]	; 80145c8 <__kernel_rem_pio2+0x310>
 8014302:	eb03 0802 	add.w	r8, r3, r2
 8014306:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8014308:	1aa7      	subs	r7, r4, r2
 801430a:	ae20      	add	r6, sp, #128	; 0x80
 801430c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8014310:	2500      	movs	r5, #0
 8014312:	4545      	cmp	r5, r8
 8014314:	dd13      	ble.n	801433e <__kernel_rem_pio2+0x86>
 8014316:	9b06      	ldr	r3, [sp, #24]
 8014318:	aa20      	add	r2, sp, #128	; 0x80
 801431a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 801431e:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8014322:	f04f 0800 	mov.w	r8, #0
 8014326:	9b00      	ldr	r3, [sp, #0]
 8014328:	4598      	cmp	r8, r3
 801432a:	dc31      	bgt.n	8014390 <__kernel_rem_pio2+0xd8>
 801432c:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 80145c8 <__kernel_rem_pio2+0x310>
 8014330:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8014334:	ed8d 7b02 	vstr	d7, [sp, #8]
 8014338:	462f      	mov	r7, r5
 801433a:	2600      	movs	r6, #0
 801433c:	e01b      	b.n	8014376 <__kernel_rem_pio2+0xbe>
 801433e:	42ef      	cmn	r7, r5
 8014340:	d407      	bmi.n	8014352 <__kernel_rem_pio2+0x9a>
 8014342:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8014346:	f7ec f90d 	bl	8000564 <__aeabi_i2d>
 801434a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801434e:	3501      	adds	r5, #1
 8014350:	e7df      	b.n	8014312 <__kernel_rem_pio2+0x5a>
 8014352:	ec51 0b18 	vmov	r0, r1, d8
 8014356:	e7f8      	b.n	801434a <__kernel_rem_pio2+0x92>
 8014358:	e9d7 2300 	ldrd	r2, r3, [r7]
 801435c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8014360:	f7ec f96a 	bl	8000638 <__aeabi_dmul>
 8014364:	4602      	mov	r2, r0
 8014366:	460b      	mov	r3, r1
 8014368:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 801436c:	f7eb ffae 	bl	80002cc <__adddf3>
 8014370:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8014374:	3601      	adds	r6, #1
 8014376:	9b05      	ldr	r3, [sp, #20]
 8014378:	429e      	cmp	r6, r3
 801437a:	f1a7 0708 	sub.w	r7, r7, #8
 801437e:	ddeb      	ble.n	8014358 <__kernel_rem_pio2+0xa0>
 8014380:	ed9d 7b02 	vldr	d7, [sp, #8]
 8014384:	f108 0801 	add.w	r8, r8, #1
 8014388:	ecab 7b02 	vstmia	fp!, {d7}
 801438c:	3508      	adds	r5, #8
 801438e:	e7ca      	b.n	8014326 <__kernel_rem_pio2+0x6e>
 8014390:	9b00      	ldr	r3, [sp, #0]
 8014392:	aa0c      	add	r2, sp, #48	; 0x30
 8014394:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8014398:	930b      	str	r3, [sp, #44]	; 0x2c
 801439a:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 801439c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80143a0:	9c00      	ldr	r4, [sp, #0]
 80143a2:	930a      	str	r3, [sp, #40]	; 0x28
 80143a4:	00e3      	lsls	r3, r4, #3
 80143a6:	9308      	str	r3, [sp, #32]
 80143a8:	ab98      	add	r3, sp, #608	; 0x260
 80143aa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80143ae:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 80143b2:	f10d 0830 	add.w	r8, sp, #48	; 0x30
 80143b6:	ab70      	add	r3, sp, #448	; 0x1c0
 80143b8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 80143bc:	46c3      	mov	fp, r8
 80143be:	46a1      	mov	r9, r4
 80143c0:	f1b9 0f00 	cmp.w	r9, #0
 80143c4:	f1a5 0508 	sub.w	r5, r5, #8
 80143c8:	dc77      	bgt.n	80144ba <__kernel_rem_pio2+0x202>
 80143ca:	ec47 6b10 	vmov	d0, r6, r7
 80143ce:	4650      	mov	r0, sl
 80143d0:	f7ff fe3a 	bl	8014048 <scalbn>
 80143d4:	ec57 6b10 	vmov	r6, r7, d0
 80143d8:	2200      	movs	r2, #0
 80143da:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 80143de:	ee10 0a10 	vmov	r0, s0
 80143e2:	4639      	mov	r1, r7
 80143e4:	f7ec f928 	bl	8000638 <__aeabi_dmul>
 80143e8:	ec41 0b10 	vmov	d0, r0, r1
 80143ec:	f000 fd24 	bl	8014e38 <floor>
 80143f0:	4b7a      	ldr	r3, [pc, #488]	; (80145dc <__kernel_rem_pio2+0x324>)
 80143f2:	ec51 0b10 	vmov	r0, r1, d0
 80143f6:	2200      	movs	r2, #0
 80143f8:	f7ec f91e 	bl	8000638 <__aeabi_dmul>
 80143fc:	4602      	mov	r2, r0
 80143fe:	460b      	mov	r3, r1
 8014400:	4630      	mov	r0, r6
 8014402:	4639      	mov	r1, r7
 8014404:	f7eb ff60 	bl	80002c8 <__aeabi_dsub>
 8014408:	460f      	mov	r7, r1
 801440a:	4606      	mov	r6, r0
 801440c:	f7ec fbc4 	bl	8000b98 <__aeabi_d2iz>
 8014410:	9002      	str	r0, [sp, #8]
 8014412:	f7ec f8a7 	bl	8000564 <__aeabi_i2d>
 8014416:	4602      	mov	r2, r0
 8014418:	460b      	mov	r3, r1
 801441a:	4630      	mov	r0, r6
 801441c:	4639      	mov	r1, r7
 801441e:	f7eb ff53 	bl	80002c8 <__aeabi_dsub>
 8014422:	f1ba 0f00 	cmp.w	sl, #0
 8014426:	4606      	mov	r6, r0
 8014428:	460f      	mov	r7, r1
 801442a:	dd6d      	ble.n	8014508 <__kernel_rem_pio2+0x250>
 801442c:	1e61      	subs	r1, r4, #1
 801442e:	ab0c      	add	r3, sp, #48	; 0x30
 8014430:	9d02      	ldr	r5, [sp, #8]
 8014432:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8014436:	f1ca 0018 	rsb	r0, sl, #24
 801443a:	fa43 f200 	asr.w	r2, r3, r0
 801443e:	4415      	add	r5, r2
 8014440:	4082      	lsls	r2, r0
 8014442:	1a9b      	subs	r3, r3, r2
 8014444:	aa0c      	add	r2, sp, #48	; 0x30
 8014446:	9502      	str	r5, [sp, #8]
 8014448:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 801444c:	f1ca 0217 	rsb	r2, sl, #23
 8014450:	fa43 fb02 	asr.w	fp, r3, r2
 8014454:	f1bb 0f00 	cmp.w	fp, #0
 8014458:	dd65      	ble.n	8014526 <__kernel_rem_pio2+0x26e>
 801445a:	9b02      	ldr	r3, [sp, #8]
 801445c:	2200      	movs	r2, #0
 801445e:	3301      	adds	r3, #1
 8014460:	9302      	str	r3, [sp, #8]
 8014462:	4615      	mov	r5, r2
 8014464:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8014468:	4294      	cmp	r4, r2
 801446a:	f300 809f 	bgt.w	80145ac <__kernel_rem_pio2+0x2f4>
 801446e:	f1ba 0f00 	cmp.w	sl, #0
 8014472:	dd07      	ble.n	8014484 <__kernel_rem_pio2+0x1cc>
 8014474:	f1ba 0f01 	cmp.w	sl, #1
 8014478:	f000 80c1 	beq.w	80145fe <__kernel_rem_pio2+0x346>
 801447c:	f1ba 0f02 	cmp.w	sl, #2
 8014480:	f000 80c7 	beq.w	8014612 <__kernel_rem_pio2+0x35a>
 8014484:	f1bb 0f02 	cmp.w	fp, #2
 8014488:	d14d      	bne.n	8014526 <__kernel_rem_pio2+0x26e>
 801448a:	4632      	mov	r2, r6
 801448c:	463b      	mov	r3, r7
 801448e:	4954      	ldr	r1, [pc, #336]	; (80145e0 <__kernel_rem_pio2+0x328>)
 8014490:	2000      	movs	r0, #0
 8014492:	f7eb ff19 	bl	80002c8 <__aeabi_dsub>
 8014496:	4606      	mov	r6, r0
 8014498:	460f      	mov	r7, r1
 801449a:	2d00      	cmp	r5, #0
 801449c:	d043      	beq.n	8014526 <__kernel_rem_pio2+0x26e>
 801449e:	4650      	mov	r0, sl
 80144a0:	ed9f 0b4b 	vldr	d0, [pc, #300]	; 80145d0 <__kernel_rem_pio2+0x318>
 80144a4:	f7ff fdd0 	bl	8014048 <scalbn>
 80144a8:	4630      	mov	r0, r6
 80144aa:	4639      	mov	r1, r7
 80144ac:	ec53 2b10 	vmov	r2, r3, d0
 80144b0:	f7eb ff0a 	bl	80002c8 <__aeabi_dsub>
 80144b4:	4606      	mov	r6, r0
 80144b6:	460f      	mov	r7, r1
 80144b8:	e035      	b.n	8014526 <__kernel_rem_pio2+0x26e>
 80144ba:	4b4a      	ldr	r3, [pc, #296]	; (80145e4 <__kernel_rem_pio2+0x32c>)
 80144bc:	2200      	movs	r2, #0
 80144be:	4630      	mov	r0, r6
 80144c0:	4639      	mov	r1, r7
 80144c2:	f7ec f8b9 	bl	8000638 <__aeabi_dmul>
 80144c6:	f7ec fb67 	bl	8000b98 <__aeabi_d2iz>
 80144ca:	f7ec f84b 	bl	8000564 <__aeabi_i2d>
 80144ce:	4602      	mov	r2, r0
 80144d0:	460b      	mov	r3, r1
 80144d2:	ec43 2b18 	vmov	d8, r2, r3
 80144d6:	4b44      	ldr	r3, [pc, #272]	; (80145e8 <__kernel_rem_pio2+0x330>)
 80144d8:	2200      	movs	r2, #0
 80144da:	f7ec f8ad 	bl	8000638 <__aeabi_dmul>
 80144de:	4602      	mov	r2, r0
 80144e0:	460b      	mov	r3, r1
 80144e2:	4630      	mov	r0, r6
 80144e4:	4639      	mov	r1, r7
 80144e6:	f7eb feef 	bl	80002c8 <__aeabi_dsub>
 80144ea:	f7ec fb55 	bl	8000b98 <__aeabi_d2iz>
 80144ee:	e9d5 2300 	ldrd	r2, r3, [r5]
 80144f2:	f84b 0b04 	str.w	r0, [fp], #4
 80144f6:	ec51 0b18 	vmov	r0, r1, d8
 80144fa:	f7eb fee7 	bl	80002cc <__adddf3>
 80144fe:	f109 39ff 	add.w	r9, r9, #4294967295
 8014502:	4606      	mov	r6, r0
 8014504:	460f      	mov	r7, r1
 8014506:	e75b      	b.n	80143c0 <__kernel_rem_pio2+0x108>
 8014508:	d106      	bne.n	8014518 <__kernel_rem_pio2+0x260>
 801450a:	1e63      	subs	r3, r4, #1
 801450c:	aa0c      	add	r2, sp, #48	; 0x30
 801450e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014512:	ea4f 5be3 	mov.w	fp, r3, asr #23
 8014516:	e79d      	b.n	8014454 <__kernel_rem_pio2+0x19c>
 8014518:	4b34      	ldr	r3, [pc, #208]	; (80145ec <__kernel_rem_pio2+0x334>)
 801451a:	2200      	movs	r2, #0
 801451c:	f7ec fb12 	bl	8000b44 <__aeabi_dcmpge>
 8014520:	2800      	cmp	r0, #0
 8014522:	d140      	bne.n	80145a6 <__kernel_rem_pio2+0x2ee>
 8014524:	4683      	mov	fp, r0
 8014526:	2200      	movs	r2, #0
 8014528:	2300      	movs	r3, #0
 801452a:	4630      	mov	r0, r6
 801452c:	4639      	mov	r1, r7
 801452e:	f7ec faeb 	bl	8000b08 <__aeabi_dcmpeq>
 8014532:	2800      	cmp	r0, #0
 8014534:	f000 80c1 	beq.w	80146ba <__kernel_rem_pio2+0x402>
 8014538:	1e65      	subs	r5, r4, #1
 801453a:	462b      	mov	r3, r5
 801453c:	2200      	movs	r2, #0
 801453e:	9900      	ldr	r1, [sp, #0]
 8014540:	428b      	cmp	r3, r1
 8014542:	da6d      	bge.n	8014620 <__kernel_rem_pio2+0x368>
 8014544:	2a00      	cmp	r2, #0
 8014546:	f000 808a 	beq.w	801465e <__kernel_rem_pio2+0x3a6>
 801454a:	ab0c      	add	r3, sp, #48	; 0x30
 801454c:	f1aa 0a18 	sub.w	sl, sl, #24
 8014550:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8014554:	2b00      	cmp	r3, #0
 8014556:	f000 80ae 	beq.w	80146b6 <__kernel_rem_pio2+0x3fe>
 801455a:	4650      	mov	r0, sl
 801455c:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80145d0 <__kernel_rem_pio2+0x318>
 8014560:	f7ff fd72 	bl	8014048 <scalbn>
 8014564:	1c6b      	adds	r3, r5, #1
 8014566:	00da      	lsls	r2, r3, #3
 8014568:	9205      	str	r2, [sp, #20]
 801456a:	ec57 6b10 	vmov	r6, r7, d0
 801456e:	aa70      	add	r2, sp, #448	; 0x1c0
 8014570:	f8df 9070 	ldr.w	r9, [pc, #112]	; 80145e4 <__kernel_rem_pio2+0x32c>
 8014574:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 8014578:	462c      	mov	r4, r5
 801457a:	f04f 0800 	mov.w	r8, #0
 801457e:	2c00      	cmp	r4, #0
 8014580:	f280 80d4 	bge.w	801472c <__kernel_rem_pio2+0x474>
 8014584:	462c      	mov	r4, r5
 8014586:	2c00      	cmp	r4, #0
 8014588:	f2c0 8102 	blt.w	8014790 <__kernel_rem_pio2+0x4d8>
 801458c:	4b18      	ldr	r3, [pc, #96]	; (80145f0 <__kernel_rem_pio2+0x338>)
 801458e:	461e      	mov	r6, r3
 8014590:	ab70      	add	r3, sp, #448	; 0x1c0
 8014592:	eb03 08c4 	add.w	r8, r3, r4, lsl #3
 8014596:	1b2b      	subs	r3, r5, r4
 8014598:	f04f 0900 	mov.w	r9, #0
 801459c:	f04f 0a00 	mov.w	sl, #0
 80145a0:	2700      	movs	r7, #0
 80145a2:	9306      	str	r3, [sp, #24]
 80145a4:	e0e6      	b.n	8014774 <__kernel_rem_pio2+0x4bc>
 80145a6:	f04f 0b02 	mov.w	fp, #2
 80145aa:	e756      	b.n	801445a <__kernel_rem_pio2+0x1a2>
 80145ac:	f8d8 3000 	ldr.w	r3, [r8]
 80145b0:	bb05      	cbnz	r5, 80145f4 <__kernel_rem_pio2+0x33c>
 80145b2:	b123      	cbz	r3, 80145be <__kernel_rem_pio2+0x306>
 80145b4:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 80145b8:	f8c8 3000 	str.w	r3, [r8]
 80145bc:	2301      	movs	r3, #1
 80145be:	3201      	adds	r2, #1
 80145c0:	f108 0804 	add.w	r8, r8, #4
 80145c4:	461d      	mov	r5, r3
 80145c6:	e74f      	b.n	8014468 <__kernel_rem_pio2+0x1b0>
	...
 80145d4:	3ff00000 	.word	0x3ff00000
 80145d8:	08017268 	.word	0x08017268
 80145dc:	40200000 	.word	0x40200000
 80145e0:	3ff00000 	.word	0x3ff00000
 80145e4:	3e700000 	.word	0x3e700000
 80145e8:	41700000 	.word	0x41700000
 80145ec:	3fe00000 	.word	0x3fe00000
 80145f0:	08017228 	.word	0x08017228
 80145f4:	1acb      	subs	r3, r1, r3
 80145f6:	f8c8 3000 	str.w	r3, [r8]
 80145fa:	462b      	mov	r3, r5
 80145fc:	e7df      	b.n	80145be <__kernel_rem_pio2+0x306>
 80145fe:	1e62      	subs	r2, r4, #1
 8014600:	ab0c      	add	r3, sp, #48	; 0x30
 8014602:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014606:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801460a:	a90c      	add	r1, sp, #48	; 0x30
 801460c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8014610:	e738      	b.n	8014484 <__kernel_rem_pio2+0x1cc>
 8014612:	1e62      	subs	r2, r4, #1
 8014614:	ab0c      	add	r3, sp, #48	; 0x30
 8014616:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801461a:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801461e:	e7f4      	b.n	801460a <__kernel_rem_pio2+0x352>
 8014620:	a90c      	add	r1, sp, #48	; 0x30
 8014622:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8014626:	3b01      	subs	r3, #1
 8014628:	430a      	orrs	r2, r1
 801462a:	e788      	b.n	801453e <__kernel_rem_pio2+0x286>
 801462c:	3301      	adds	r3, #1
 801462e:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8014632:	2900      	cmp	r1, #0
 8014634:	d0fa      	beq.n	801462c <__kernel_rem_pio2+0x374>
 8014636:	9a08      	ldr	r2, [sp, #32]
 8014638:	f502 7218 	add.w	r2, r2, #608	; 0x260
 801463c:	446a      	add	r2, sp
 801463e:	3a98      	subs	r2, #152	; 0x98
 8014640:	9208      	str	r2, [sp, #32]
 8014642:	9a06      	ldr	r2, [sp, #24]
 8014644:	a920      	add	r1, sp, #128	; 0x80
 8014646:	18a2      	adds	r2, r4, r2
 8014648:	18e3      	adds	r3, r4, r3
 801464a:	f104 0801 	add.w	r8, r4, #1
 801464e:	eb01 05c2 	add.w	r5, r1, r2, lsl #3
 8014652:	9302      	str	r3, [sp, #8]
 8014654:	9b02      	ldr	r3, [sp, #8]
 8014656:	4543      	cmp	r3, r8
 8014658:	da04      	bge.n	8014664 <__kernel_rem_pio2+0x3ac>
 801465a:	461c      	mov	r4, r3
 801465c:	e6a2      	b.n	80143a4 <__kernel_rem_pio2+0xec>
 801465e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8014660:	2301      	movs	r3, #1
 8014662:	e7e4      	b.n	801462e <__kernel_rem_pio2+0x376>
 8014664:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8014666:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801466a:	f7eb ff7b 	bl	8000564 <__aeabi_i2d>
 801466e:	e8e5 0102 	strd	r0, r1, [r5], #8
 8014672:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8014674:	46ab      	mov	fp, r5
 8014676:	461c      	mov	r4, r3
 8014678:	f04f 0900 	mov.w	r9, #0
 801467c:	2600      	movs	r6, #0
 801467e:	2700      	movs	r7, #0
 8014680:	9b05      	ldr	r3, [sp, #20]
 8014682:	4599      	cmp	r9, r3
 8014684:	dd06      	ble.n	8014694 <__kernel_rem_pio2+0x3dc>
 8014686:	9b08      	ldr	r3, [sp, #32]
 8014688:	e8e3 6702 	strd	r6, r7, [r3], #8
 801468c:	f108 0801 	add.w	r8, r8, #1
 8014690:	9308      	str	r3, [sp, #32]
 8014692:	e7df      	b.n	8014654 <__kernel_rem_pio2+0x39c>
 8014694:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8014698:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801469c:	f7eb ffcc 	bl	8000638 <__aeabi_dmul>
 80146a0:	4602      	mov	r2, r0
 80146a2:	460b      	mov	r3, r1
 80146a4:	4630      	mov	r0, r6
 80146a6:	4639      	mov	r1, r7
 80146a8:	f7eb fe10 	bl	80002cc <__adddf3>
 80146ac:	f109 0901 	add.w	r9, r9, #1
 80146b0:	4606      	mov	r6, r0
 80146b2:	460f      	mov	r7, r1
 80146b4:	e7e4      	b.n	8014680 <__kernel_rem_pio2+0x3c8>
 80146b6:	3d01      	subs	r5, #1
 80146b8:	e747      	b.n	801454a <__kernel_rem_pio2+0x292>
 80146ba:	ec47 6b10 	vmov	d0, r6, r7
 80146be:	f1ca 0000 	rsb	r0, sl, #0
 80146c2:	f7ff fcc1 	bl	8014048 <scalbn>
 80146c6:	ec57 6b10 	vmov	r6, r7, d0
 80146ca:	4ba0      	ldr	r3, [pc, #640]	; (801494c <__kernel_rem_pio2+0x694>)
 80146cc:	ee10 0a10 	vmov	r0, s0
 80146d0:	2200      	movs	r2, #0
 80146d2:	4639      	mov	r1, r7
 80146d4:	f7ec fa36 	bl	8000b44 <__aeabi_dcmpge>
 80146d8:	b1f8      	cbz	r0, 801471a <__kernel_rem_pio2+0x462>
 80146da:	4b9d      	ldr	r3, [pc, #628]	; (8014950 <__kernel_rem_pio2+0x698>)
 80146dc:	2200      	movs	r2, #0
 80146de:	4630      	mov	r0, r6
 80146e0:	4639      	mov	r1, r7
 80146e2:	f7eb ffa9 	bl	8000638 <__aeabi_dmul>
 80146e6:	f7ec fa57 	bl	8000b98 <__aeabi_d2iz>
 80146ea:	4680      	mov	r8, r0
 80146ec:	f7eb ff3a 	bl	8000564 <__aeabi_i2d>
 80146f0:	4b96      	ldr	r3, [pc, #600]	; (801494c <__kernel_rem_pio2+0x694>)
 80146f2:	2200      	movs	r2, #0
 80146f4:	f7eb ffa0 	bl	8000638 <__aeabi_dmul>
 80146f8:	460b      	mov	r3, r1
 80146fa:	4602      	mov	r2, r0
 80146fc:	4639      	mov	r1, r7
 80146fe:	4630      	mov	r0, r6
 8014700:	f7eb fde2 	bl	80002c8 <__aeabi_dsub>
 8014704:	f7ec fa48 	bl	8000b98 <__aeabi_d2iz>
 8014708:	1c65      	adds	r5, r4, #1
 801470a:	ab0c      	add	r3, sp, #48	; 0x30
 801470c:	f10a 0a18 	add.w	sl, sl, #24
 8014710:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014714:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8014718:	e71f      	b.n	801455a <__kernel_rem_pio2+0x2a2>
 801471a:	4630      	mov	r0, r6
 801471c:	4639      	mov	r1, r7
 801471e:	f7ec fa3b 	bl	8000b98 <__aeabi_d2iz>
 8014722:	ab0c      	add	r3, sp, #48	; 0x30
 8014724:	4625      	mov	r5, r4
 8014726:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801472a:	e716      	b.n	801455a <__kernel_rem_pio2+0x2a2>
 801472c:	ab0c      	add	r3, sp, #48	; 0x30
 801472e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014732:	f7eb ff17 	bl	8000564 <__aeabi_i2d>
 8014736:	4632      	mov	r2, r6
 8014738:	463b      	mov	r3, r7
 801473a:	f7eb ff7d 	bl	8000638 <__aeabi_dmul>
 801473e:	4642      	mov	r2, r8
 8014740:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8014744:	464b      	mov	r3, r9
 8014746:	4630      	mov	r0, r6
 8014748:	4639      	mov	r1, r7
 801474a:	f7eb ff75 	bl	8000638 <__aeabi_dmul>
 801474e:	3c01      	subs	r4, #1
 8014750:	4606      	mov	r6, r0
 8014752:	460f      	mov	r7, r1
 8014754:	e713      	b.n	801457e <__kernel_rem_pio2+0x2c6>
 8014756:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 801475a:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 801475e:	f7eb ff6b 	bl	8000638 <__aeabi_dmul>
 8014762:	4602      	mov	r2, r0
 8014764:	460b      	mov	r3, r1
 8014766:	4648      	mov	r0, r9
 8014768:	4651      	mov	r1, sl
 801476a:	f7eb fdaf 	bl	80002cc <__adddf3>
 801476e:	3701      	adds	r7, #1
 8014770:	4681      	mov	r9, r0
 8014772:	468a      	mov	sl, r1
 8014774:	9b00      	ldr	r3, [sp, #0]
 8014776:	429f      	cmp	r7, r3
 8014778:	dc02      	bgt.n	8014780 <__kernel_rem_pio2+0x4c8>
 801477a:	9b06      	ldr	r3, [sp, #24]
 801477c:	429f      	cmp	r7, r3
 801477e:	ddea      	ble.n	8014756 <__kernel_rem_pio2+0x49e>
 8014780:	9a06      	ldr	r2, [sp, #24]
 8014782:	ab48      	add	r3, sp, #288	; 0x120
 8014784:	eb03 06c2 	add.w	r6, r3, r2, lsl #3
 8014788:	e9c6 9a00 	strd	r9, sl, [r6]
 801478c:	3c01      	subs	r4, #1
 801478e:	e6fa      	b.n	8014586 <__kernel_rem_pio2+0x2ce>
 8014790:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8014792:	2b02      	cmp	r3, #2
 8014794:	dc0b      	bgt.n	80147ae <__kernel_rem_pio2+0x4f6>
 8014796:	2b00      	cmp	r3, #0
 8014798:	dc39      	bgt.n	801480e <__kernel_rem_pio2+0x556>
 801479a:	d05d      	beq.n	8014858 <__kernel_rem_pio2+0x5a0>
 801479c:	9b02      	ldr	r3, [sp, #8]
 801479e:	f003 0007 	and.w	r0, r3, #7
 80147a2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 80147a6:	ecbd 8b02 	vpop	{d8}
 80147aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80147ae:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 80147b0:	2b03      	cmp	r3, #3
 80147b2:	d1f3      	bne.n	801479c <__kernel_rem_pio2+0x4e4>
 80147b4:	9b05      	ldr	r3, [sp, #20]
 80147b6:	9500      	str	r5, [sp, #0]
 80147b8:	f503 7318 	add.w	r3, r3, #608	; 0x260
 80147bc:	eb0d 0403 	add.w	r4, sp, r3
 80147c0:	f5a4 74a4 	sub.w	r4, r4, #328	; 0x148
 80147c4:	46a2      	mov	sl, r4
 80147c6:	9b00      	ldr	r3, [sp, #0]
 80147c8:	2b00      	cmp	r3, #0
 80147ca:	f1aa 0a08 	sub.w	sl, sl, #8
 80147ce:	dc69      	bgt.n	80148a4 <__kernel_rem_pio2+0x5ec>
 80147d0:	46aa      	mov	sl, r5
 80147d2:	f1ba 0f01 	cmp.w	sl, #1
 80147d6:	f1a4 0408 	sub.w	r4, r4, #8
 80147da:	f300 8083 	bgt.w	80148e4 <__kernel_rem_pio2+0x62c>
 80147de:	9c05      	ldr	r4, [sp, #20]
 80147e0:	ab48      	add	r3, sp, #288	; 0x120
 80147e2:	441c      	add	r4, r3
 80147e4:	2000      	movs	r0, #0
 80147e6:	2100      	movs	r1, #0
 80147e8:	2d01      	cmp	r5, #1
 80147ea:	f300 809a 	bgt.w	8014922 <__kernel_rem_pio2+0x66a>
 80147ee:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	; 0x120
 80147f2:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 80147f6:	f1bb 0f00 	cmp.w	fp, #0
 80147fa:	f040 8098 	bne.w	801492e <__kernel_rem_pio2+0x676>
 80147fe:	9b04      	ldr	r3, [sp, #16]
 8014800:	e9c3 7800 	strd	r7, r8, [r3]
 8014804:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8014808:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801480c:	e7c6      	b.n	801479c <__kernel_rem_pio2+0x4e4>
 801480e:	9e05      	ldr	r6, [sp, #20]
 8014810:	ab48      	add	r3, sp, #288	; 0x120
 8014812:	441e      	add	r6, r3
 8014814:	462c      	mov	r4, r5
 8014816:	2000      	movs	r0, #0
 8014818:	2100      	movs	r1, #0
 801481a:	2c00      	cmp	r4, #0
 801481c:	da33      	bge.n	8014886 <__kernel_rem_pio2+0x5ce>
 801481e:	f1bb 0f00 	cmp.w	fp, #0
 8014822:	d036      	beq.n	8014892 <__kernel_rem_pio2+0x5da>
 8014824:	4602      	mov	r2, r0
 8014826:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801482a:	9c04      	ldr	r4, [sp, #16]
 801482c:	e9c4 2300 	strd	r2, r3, [r4]
 8014830:	4602      	mov	r2, r0
 8014832:	460b      	mov	r3, r1
 8014834:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8014838:	f7eb fd46 	bl	80002c8 <__aeabi_dsub>
 801483c:	ae4a      	add	r6, sp, #296	; 0x128
 801483e:	2401      	movs	r4, #1
 8014840:	42a5      	cmp	r5, r4
 8014842:	da29      	bge.n	8014898 <__kernel_rem_pio2+0x5e0>
 8014844:	f1bb 0f00 	cmp.w	fp, #0
 8014848:	d002      	beq.n	8014850 <__kernel_rem_pio2+0x598>
 801484a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801484e:	4619      	mov	r1, r3
 8014850:	9b04      	ldr	r3, [sp, #16]
 8014852:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8014856:	e7a1      	b.n	801479c <__kernel_rem_pio2+0x4e4>
 8014858:	9c05      	ldr	r4, [sp, #20]
 801485a:	ab48      	add	r3, sp, #288	; 0x120
 801485c:	441c      	add	r4, r3
 801485e:	2000      	movs	r0, #0
 8014860:	2100      	movs	r1, #0
 8014862:	2d00      	cmp	r5, #0
 8014864:	da09      	bge.n	801487a <__kernel_rem_pio2+0x5c2>
 8014866:	f1bb 0f00 	cmp.w	fp, #0
 801486a:	d002      	beq.n	8014872 <__kernel_rem_pio2+0x5ba>
 801486c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014870:	4619      	mov	r1, r3
 8014872:	9b04      	ldr	r3, [sp, #16]
 8014874:	e9c3 0100 	strd	r0, r1, [r3]
 8014878:	e790      	b.n	801479c <__kernel_rem_pio2+0x4e4>
 801487a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801487e:	f7eb fd25 	bl	80002cc <__adddf3>
 8014882:	3d01      	subs	r5, #1
 8014884:	e7ed      	b.n	8014862 <__kernel_rem_pio2+0x5aa>
 8014886:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 801488a:	f7eb fd1f 	bl	80002cc <__adddf3>
 801488e:	3c01      	subs	r4, #1
 8014890:	e7c3      	b.n	801481a <__kernel_rem_pio2+0x562>
 8014892:	4602      	mov	r2, r0
 8014894:	460b      	mov	r3, r1
 8014896:	e7c8      	b.n	801482a <__kernel_rem_pio2+0x572>
 8014898:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 801489c:	f7eb fd16 	bl	80002cc <__adddf3>
 80148a0:	3401      	adds	r4, #1
 80148a2:	e7cd      	b.n	8014840 <__kernel_rem_pio2+0x588>
 80148a4:	e9da 8900 	ldrd	r8, r9, [sl]
 80148a8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80148ac:	9b00      	ldr	r3, [sp, #0]
 80148ae:	3b01      	subs	r3, #1
 80148b0:	9300      	str	r3, [sp, #0]
 80148b2:	4632      	mov	r2, r6
 80148b4:	463b      	mov	r3, r7
 80148b6:	4640      	mov	r0, r8
 80148b8:	4649      	mov	r1, r9
 80148ba:	f7eb fd07 	bl	80002cc <__adddf3>
 80148be:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80148c2:	4602      	mov	r2, r0
 80148c4:	460b      	mov	r3, r1
 80148c6:	4640      	mov	r0, r8
 80148c8:	4649      	mov	r1, r9
 80148ca:	f7eb fcfd 	bl	80002c8 <__aeabi_dsub>
 80148ce:	4632      	mov	r2, r6
 80148d0:	463b      	mov	r3, r7
 80148d2:	f7eb fcfb 	bl	80002cc <__adddf3>
 80148d6:	ed9d 7b06 	vldr	d7, [sp, #24]
 80148da:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80148de:	ed8a 7b00 	vstr	d7, [sl]
 80148e2:	e770      	b.n	80147c6 <__kernel_rem_pio2+0x50e>
 80148e4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80148e8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80148ec:	4640      	mov	r0, r8
 80148ee:	4632      	mov	r2, r6
 80148f0:	463b      	mov	r3, r7
 80148f2:	4649      	mov	r1, r9
 80148f4:	f7eb fcea 	bl	80002cc <__adddf3>
 80148f8:	e9cd 0100 	strd	r0, r1, [sp]
 80148fc:	4602      	mov	r2, r0
 80148fe:	460b      	mov	r3, r1
 8014900:	4640      	mov	r0, r8
 8014902:	4649      	mov	r1, r9
 8014904:	f7eb fce0 	bl	80002c8 <__aeabi_dsub>
 8014908:	4632      	mov	r2, r6
 801490a:	463b      	mov	r3, r7
 801490c:	f7eb fcde 	bl	80002cc <__adddf3>
 8014910:	ed9d 7b00 	vldr	d7, [sp]
 8014914:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8014918:	ed84 7b00 	vstr	d7, [r4]
 801491c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8014920:	e757      	b.n	80147d2 <__kernel_rem_pio2+0x51a>
 8014922:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8014926:	f7eb fcd1 	bl	80002cc <__adddf3>
 801492a:	3d01      	subs	r5, #1
 801492c:	e75c      	b.n	80147e8 <__kernel_rem_pio2+0x530>
 801492e:	9b04      	ldr	r3, [sp, #16]
 8014930:	9a04      	ldr	r2, [sp, #16]
 8014932:	601f      	str	r7, [r3, #0]
 8014934:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8014938:	605c      	str	r4, [r3, #4]
 801493a:	609d      	str	r5, [r3, #8]
 801493c:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8014940:	60d3      	str	r3, [r2, #12]
 8014942:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8014946:	6110      	str	r0, [r2, #16]
 8014948:	6153      	str	r3, [r2, #20]
 801494a:	e727      	b.n	801479c <__kernel_rem_pio2+0x4e4>
 801494c:	41700000 	.word	0x41700000
 8014950:	3e700000 	.word	0x3e700000

08014954 <__kernel_rem_pio2f>:
 8014954:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014958:	ed2d 8b04 	vpush	{d8-d9}
 801495c:	b0d9      	sub	sp, #356	; 0x164
 801495e:	4688      	mov	r8, r1
 8014960:	9002      	str	r0, [sp, #8]
 8014962:	49b8      	ldr	r1, [pc, #736]	; (8014c44 <__kernel_rem_pio2f+0x2f0>)
 8014964:	9866      	ldr	r0, [sp, #408]	; 0x198
 8014966:	9301      	str	r3, [sp, #4]
 8014968:	f851 a020 	ldr.w	sl, [r1, r0, lsl #2]
 801496c:	9901      	ldr	r1, [sp, #4]
 801496e:	9b67      	ldr	r3, [sp, #412]	; 0x19c
 8014970:	f101 3bff 	add.w	fp, r1, #4294967295
 8014974:	1d11      	adds	r1, r2, #4
 8014976:	db25      	blt.n	80149c4 <__kernel_rem_pio2f+0x70>
 8014978:	1ed0      	subs	r0, r2, #3
 801497a:	bf48      	it	mi
 801497c:	1d10      	addmi	r0, r2, #4
 801497e:	10c0      	asrs	r0, r0, #3
 8014980:	1c45      	adds	r5, r0, #1
 8014982:	00e9      	lsls	r1, r5, #3
 8014984:	eba0 070b 	sub.w	r7, r0, fp
 8014988:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8014c54 <__kernel_rem_pio2f+0x300>
 801498c:	9103      	str	r1, [sp, #12]
 801498e:	eba2 05c5 	sub.w	r5, r2, r5, lsl #3
 8014992:	eb0a 0c0b 	add.w	ip, sl, fp
 8014996:	ae1c      	add	r6, sp, #112	; 0x70
 8014998:	eb03 0e87 	add.w	lr, r3, r7, lsl #2
 801499c:	2400      	movs	r4, #0
 801499e:	4564      	cmp	r4, ip
 80149a0:	dd12      	ble.n	80149c8 <__kernel_rem_pio2f+0x74>
 80149a2:	9901      	ldr	r1, [sp, #4]
 80149a4:	ac1c      	add	r4, sp, #112	; 0x70
 80149a6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 80149aa:	f50d 7988 	add.w	r9, sp, #272	; 0x110
 80149ae:	f04f 0c00 	mov.w	ip, #0
 80149b2:	45d4      	cmp	ip, sl
 80149b4:	dc27      	bgt.n	8014a06 <__kernel_rem_pio2f+0xb2>
 80149b6:	f8dd e008 	ldr.w	lr, [sp, #8]
 80149ba:	eddf 7aa6 	vldr	s15, [pc, #664]	; 8014c54 <__kernel_rem_pio2f+0x300>
 80149be:	4627      	mov	r7, r4
 80149c0:	2600      	movs	r6, #0
 80149c2:	e016      	b.n	80149f2 <__kernel_rem_pio2f+0x9e>
 80149c4:	2000      	movs	r0, #0
 80149c6:	e7db      	b.n	8014980 <__kernel_rem_pio2f+0x2c>
 80149c8:	42e7      	cmn	r7, r4
 80149ca:	bf5d      	ittte	pl
 80149cc:	f85e 1024 	ldrpl.w	r1, [lr, r4, lsl #2]
 80149d0:	ee07 1a90 	vmovpl	s15, r1
 80149d4:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 80149d8:	eef0 7a47 	vmovmi.f32	s15, s14
 80149dc:	ece6 7a01 	vstmia	r6!, {s15}
 80149e0:	3401      	adds	r4, #1
 80149e2:	e7dc      	b.n	801499e <__kernel_rem_pio2f+0x4a>
 80149e4:	ecfe 6a01 	vldmia	lr!, {s13}
 80149e8:	ed97 7a00 	vldr	s14, [r7]
 80149ec:	eee6 7a87 	vfma.f32	s15, s13, s14
 80149f0:	3601      	adds	r6, #1
 80149f2:	455e      	cmp	r6, fp
 80149f4:	f1a7 0704 	sub.w	r7, r7, #4
 80149f8:	ddf4      	ble.n	80149e4 <__kernel_rem_pio2f+0x90>
 80149fa:	ece9 7a01 	vstmia	r9!, {s15}
 80149fe:	f10c 0c01 	add.w	ip, ip, #1
 8014a02:	3404      	adds	r4, #4
 8014a04:	e7d5      	b.n	80149b2 <__kernel_rem_pio2f+0x5e>
 8014a06:	a908      	add	r1, sp, #32
 8014a08:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8014a0c:	eb03 0380 	add.w	r3, r3, r0, lsl #2
 8014a10:	eddf 8a8f 	vldr	s17, [pc, #572]	; 8014c50 <__kernel_rem_pio2f+0x2fc>
 8014a14:	ed9f 9a8d 	vldr	s18, [pc, #564]	; 8014c4c <__kernel_rem_pio2f+0x2f8>
 8014a18:	9105      	str	r1, [sp, #20]
 8014a1a:	9304      	str	r3, [sp, #16]
 8014a1c:	4656      	mov	r6, sl
 8014a1e:	00b3      	lsls	r3, r6, #2
 8014a20:	9306      	str	r3, [sp, #24]
 8014a22:	ab58      	add	r3, sp, #352	; 0x160
 8014a24:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8014a28:	ac08      	add	r4, sp, #32
 8014a2a:	ab44      	add	r3, sp, #272	; 0x110
 8014a2c:	ed10 0a14 	vldr	s0, [r0, #-80]	; 0xffffffb0
 8014a30:	46a4      	mov	ip, r4
 8014a32:	eb03 0086 	add.w	r0, r3, r6, lsl #2
 8014a36:	4637      	mov	r7, r6
 8014a38:	2f00      	cmp	r7, #0
 8014a3a:	f1a0 0004 	sub.w	r0, r0, #4
 8014a3e:	dc4a      	bgt.n	8014ad6 <__kernel_rem_pio2f+0x182>
 8014a40:	4628      	mov	r0, r5
 8014a42:	9207      	str	r2, [sp, #28]
 8014a44:	f7ff fbae 	bl	80141a4 <scalbnf>
 8014a48:	eeb0 8a40 	vmov.f32	s16, s0
 8014a4c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 8014a50:	ee28 0a00 	vmul.f32	s0, s16, s0
 8014a54:	f7fd fb82 	bl	801215c <floorf>
 8014a58:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 8014a5c:	eea0 8a67 	vfms.f32	s16, s0, s15
 8014a60:	2d00      	cmp	r5, #0
 8014a62:	9a07      	ldr	r2, [sp, #28]
 8014a64:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8014a68:	ee17 9a90 	vmov	r9, s15
 8014a6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014a70:	ee38 8a67 	vsub.f32	s16, s16, s15
 8014a74:	dd41      	ble.n	8014afa <__kernel_rem_pio2f+0x1a6>
 8014a76:	f106 3cff 	add.w	ip, r6, #4294967295
 8014a7a:	ab08      	add	r3, sp, #32
 8014a7c:	f1c5 0e08 	rsb	lr, r5, #8
 8014a80:	f853 702c 	ldr.w	r7, [r3, ip, lsl #2]
 8014a84:	fa47 f00e 	asr.w	r0, r7, lr
 8014a88:	4481      	add	r9, r0
 8014a8a:	fa00 f00e 	lsl.w	r0, r0, lr
 8014a8e:	1a3f      	subs	r7, r7, r0
 8014a90:	f1c5 0007 	rsb	r0, r5, #7
 8014a94:	f843 702c 	str.w	r7, [r3, ip, lsl #2]
 8014a98:	4107      	asrs	r7, r0
 8014a9a:	2f00      	cmp	r7, #0
 8014a9c:	dd3c      	ble.n	8014b18 <__kernel_rem_pio2f+0x1c4>
 8014a9e:	f04f 0e00 	mov.w	lr, #0
 8014aa2:	f109 0901 	add.w	r9, r9, #1
 8014aa6:	4671      	mov	r1, lr
 8014aa8:	4576      	cmp	r6, lr
 8014aaa:	dc67      	bgt.n	8014b7c <__kernel_rem_pio2f+0x228>
 8014aac:	2d00      	cmp	r5, #0
 8014aae:	dd03      	ble.n	8014ab8 <__kernel_rem_pio2f+0x164>
 8014ab0:	2d01      	cmp	r5, #1
 8014ab2:	d074      	beq.n	8014b9e <__kernel_rem_pio2f+0x24a>
 8014ab4:	2d02      	cmp	r5, #2
 8014ab6:	d07b      	beq.n	8014bb0 <__kernel_rem_pio2f+0x25c>
 8014ab8:	2f02      	cmp	r7, #2
 8014aba:	d12d      	bne.n	8014b18 <__kernel_rem_pio2f+0x1c4>
 8014abc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014ac0:	ee30 8a48 	vsub.f32	s16, s0, s16
 8014ac4:	b341      	cbz	r1, 8014b18 <__kernel_rem_pio2f+0x1c4>
 8014ac6:	4628      	mov	r0, r5
 8014ac8:	9207      	str	r2, [sp, #28]
 8014aca:	f7ff fb6b 	bl	80141a4 <scalbnf>
 8014ace:	9a07      	ldr	r2, [sp, #28]
 8014ad0:	ee38 8a40 	vsub.f32	s16, s16, s0
 8014ad4:	e020      	b.n	8014b18 <__kernel_rem_pio2f+0x1c4>
 8014ad6:	ee60 7a28 	vmul.f32	s15, s0, s17
 8014ada:	3f01      	subs	r7, #1
 8014adc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014ae0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014ae4:	eea7 0ac9 	vfms.f32	s0, s15, s18
 8014ae8:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014aec:	ecac 0a01 	vstmia	ip!, {s0}
 8014af0:	ed90 0a00 	vldr	s0, [r0]
 8014af4:	ee37 0a80 	vadd.f32	s0, s15, s0
 8014af8:	e79e      	b.n	8014a38 <__kernel_rem_pio2f+0xe4>
 8014afa:	d105      	bne.n	8014b08 <__kernel_rem_pio2f+0x1b4>
 8014afc:	1e70      	subs	r0, r6, #1
 8014afe:	ab08      	add	r3, sp, #32
 8014b00:	f853 7020 	ldr.w	r7, [r3, r0, lsl #2]
 8014b04:	11ff      	asrs	r7, r7, #7
 8014b06:	e7c8      	b.n	8014a9a <__kernel_rem_pio2f+0x146>
 8014b08:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8014b0c:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8014b10:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b14:	da30      	bge.n	8014b78 <__kernel_rem_pio2f+0x224>
 8014b16:	2700      	movs	r7, #0
 8014b18:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8014b1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014b20:	f040 809a 	bne.w	8014c58 <__kernel_rem_pio2f+0x304>
 8014b24:	1e74      	subs	r4, r6, #1
 8014b26:	46a4      	mov	ip, r4
 8014b28:	2100      	movs	r1, #0
 8014b2a:	45d4      	cmp	ip, sl
 8014b2c:	da47      	bge.n	8014bbe <__kernel_rem_pio2f+0x26a>
 8014b2e:	2900      	cmp	r1, #0
 8014b30:	d063      	beq.n	8014bfa <__kernel_rem_pio2f+0x2a6>
 8014b32:	ab08      	add	r3, sp, #32
 8014b34:	3d08      	subs	r5, #8
 8014b36:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8014b3a:	2b00      	cmp	r3, #0
 8014b3c:	d07f      	beq.n	8014c3e <__kernel_rem_pio2f+0x2ea>
 8014b3e:	4628      	mov	r0, r5
 8014b40:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8014b44:	f7ff fb2e 	bl	80141a4 <scalbnf>
 8014b48:	1c63      	adds	r3, r4, #1
 8014b4a:	aa44      	add	r2, sp, #272	; 0x110
 8014b4c:	ed9f 7a40 	vldr	s14, [pc, #256]	; 8014c50 <__kernel_rem_pio2f+0x2fc>
 8014b50:	0099      	lsls	r1, r3, #2
 8014b52:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8014b56:	4623      	mov	r3, r4
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	f280 80ad 	bge.w	8014cb8 <__kernel_rem_pio2f+0x364>
 8014b5e:	4623      	mov	r3, r4
 8014b60:	2b00      	cmp	r3, #0
 8014b62:	f2c0 80cb 	blt.w	8014cfc <__kernel_rem_pio2f+0x3a8>
 8014b66:	aa44      	add	r2, sp, #272	; 0x110
 8014b68:	eb02 0583 	add.w	r5, r2, r3, lsl #2
 8014b6c:	4e36      	ldr	r6, [pc, #216]	; (8014c48 <__kernel_rem_pio2f+0x2f4>)
 8014b6e:	eddf 7a39 	vldr	s15, [pc, #228]	; 8014c54 <__kernel_rem_pio2f+0x300>
 8014b72:	2000      	movs	r0, #0
 8014b74:	1ae2      	subs	r2, r4, r3
 8014b76:	e0b6      	b.n	8014ce6 <__kernel_rem_pio2f+0x392>
 8014b78:	2702      	movs	r7, #2
 8014b7a:	e790      	b.n	8014a9e <__kernel_rem_pio2f+0x14a>
 8014b7c:	6820      	ldr	r0, [r4, #0]
 8014b7e:	b949      	cbnz	r1, 8014b94 <__kernel_rem_pio2f+0x240>
 8014b80:	b118      	cbz	r0, 8014b8a <__kernel_rem_pio2f+0x236>
 8014b82:	f5c0 7080 	rsb	r0, r0, #256	; 0x100
 8014b86:	6020      	str	r0, [r4, #0]
 8014b88:	2001      	movs	r0, #1
 8014b8a:	f10e 0e01 	add.w	lr, lr, #1
 8014b8e:	3404      	adds	r4, #4
 8014b90:	4601      	mov	r1, r0
 8014b92:	e789      	b.n	8014aa8 <__kernel_rem_pio2f+0x154>
 8014b94:	f1c0 00ff 	rsb	r0, r0, #255	; 0xff
 8014b98:	6020      	str	r0, [r4, #0]
 8014b9a:	4608      	mov	r0, r1
 8014b9c:	e7f5      	b.n	8014b8a <__kernel_rem_pio2f+0x236>
 8014b9e:	1e74      	subs	r4, r6, #1
 8014ba0:	ab08      	add	r3, sp, #32
 8014ba2:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014ba6:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8014baa:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8014bae:	e783      	b.n	8014ab8 <__kernel_rem_pio2f+0x164>
 8014bb0:	1e74      	subs	r4, r6, #1
 8014bb2:	ab08      	add	r3, sp, #32
 8014bb4:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 8014bb8:	f000 003f 	and.w	r0, r0, #63	; 0x3f
 8014bbc:	e7f5      	b.n	8014baa <__kernel_rem_pio2f+0x256>
 8014bbe:	ab08      	add	r3, sp, #32
 8014bc0:	f853 002c 	ldr.w	r0, [r3, ip, lsl #2]
 8014bc4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014bc8:	4301      	orrs	r1, r0
 8014bca:	e7ae      	b.n	8014b2a <__kernel_rem_pio2f+0x1d6>
 8014bcc:	3001      	adds	r0, #1
 8014bce:	f854 7d04 	ldr.w	r7, [r4, #-4]!
 8014bd2:	2f00      	cmp	r7, #0
 8014bd4:	d0fa      	beq.n	8014bcc <__kernel_rem_pio2f+0x278>
 8014bd6:	9b06      	ldr	r3, [sp, #24]
 8014bd8:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8014bdc:	eb0d 0403 	add.w	r4, sp, r3
 8014be0:	9b01      	ldr	r3, [sp, #4]
 8014be2:	18f7      	adds	r7, r6, r3
 8014be4:	ab1c      	add	r3, sp, #112	; 0x70
 8014be6:	f106 0c01 	add.w	ip, r6, #1
 8014bea:	3c4c      	subs	r4, #76	; 0x4c
 8014bec:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8014bf0:	4430      	add	r0, r6
 8014bf2:	4560      	cmp	r0, ip
 8014bf4:	da04      	bge.n	8014c00 <__kernel_rem_pio2f+0x2ac>
 8014bf6:	4606      	mov	r6, r0
 8014bf8:	e711      	b.n	8014a1e <__kernel_rem_pio2f+0xca>
 8014bfa:	9c05      	ldr	r4, [sp, #20]
 8014bfc:	2001      	movs	r0, #1
 8014bfe:	e7e6      	b.n	8014bce <__kernel_rem_pio2f+0x27a>
 8014c00:	9b04      	ldr	r3, [sp, #16]
 8014c02:	f8dd e008 	ldr.w	lr, [sp, #8]
 8014c06:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8014c0a:	9306      	str	r3, [sp, #24]
 8014c0c:	ee07 3a90 	vmov	s15, r3
 8014c10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c14:	2600      	movs	r6, #0
 8014c16:	ece7 7a01 	vstmia	r7!, {s15}
 8014c1a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 8014c54 <__kernel_rem_pio2f+0x300>
 8014c1e:	46b9      	mov	r9, r7
 8014c20:	455e      	cmp	r6, fp
 8014c22:	dd04      	ble.n	8014c2e <__kernel_rem_pio2f+0x2da>
 8014c24:	ece4 7a01 	vstmia	r4!, {s15}
 8014c28:	f10c 0c01 	add.w	ip, ip, #1
 8014c2c:	e7e1      	b.n	8014bf2 <__kernel_rem_pio2f+0x29e>
 8014c2e:	ecfe 6a01 	vldmia	lr!, {s13}
 8014c32:	ed39 7a01 	vldmdb	r9!, {s14}
 8014c36:	3601      	adds	r6, #1
 8014c38:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014c3c:	e7f0      	b.n	8014c20 <__kernel_rem_pio2f+0x2cc>
 8014c3e:	3c01      	subs	r4, #1
 8014c40:	e777      	b.n	8014b32 <__kernel_rem_pio2f+0x1de>
 8014c42:	bf00      	nop
 8014c44:	080172a4 	.word	0x080172a4
 8014c48:	08017278 	.word	0x08017278
 8014c4c:	43800000 	.word	0x43800000
 8014c50:	3b800000 	.word	0x3b800000
 8014c54:	00000000 	.word	0x00000000
 8014c58:	9b03      	ldr	r3, [sp, #12]
 8014c5a:	eeb0 0a48 	vmov.f32	s0, s16
 8014c5e:	1a98      	subs	r0, r3, r2
 8014c60:	f7ff faa0 	bl	80141a4 <scalbnf>
 8014c64:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 8014c4c <__kernel_rem_pio2f+0x2f8>
 8014c68:	eeb4 0ac7 	vcmpe.f32	s0, s14
 8014c6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8014c70:	db19      	blt.n	8014ca6 <__kernel_rem_pio2f+0x352>
 8014c72:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 8014c50 <__kernel_rem_pio2f+0x2fc>
 8014c76:	ee60 7a27 	vmul.f32	s15, s0, s15
 8014c7a:	aa08      	add	r2, sp, #32
 8014c7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c80:	1c74      	adds	r4, r6, #1
 8014c82:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014c86:	3508      	adds	r5, #8
 8014c88:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8014c8c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8014c90:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014c94:	ee10 3a10 	vmov	r3, s0
 8014c98:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014c9c:	ee17 3a90 	vmov	r3, s15
 8014ca0:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
 8014ca4:	e74b      	b.n	8014b3e <__kernel_rem_pio2f+0x1ea>
 8014ca6:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 8014caa:	aa08      	add	r2, sp, #32
 8014cac:	ee10 3a10 	vmov	r3, s0
 8014cb0:	4634      	mov	r4, r6
 8014cb2:	f842 3026 	str.w	r3, [r2, r6, lsl #2]
 8014cb6:	e742      	b.n	8014b3e <__kernel_rem_pio2f+0x1ea>
 8014cb8:	a808      	add	r0, sp, #32
 8014cba:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 8014cbe:	9001      	str	r0, [sp, #4]
 8014cc0:	ee07 0a90 	vmov	s15, r0
 8014cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014cc8:	3b01      	subs	r3, #1
 8014cca:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014cce:	ee20 0a07 	vmul.f32	s0, s0, s14
 8014cd2:	ed62 7a01 	vstmdb	r2!, {s15}
 8014cd6:	e73f      	b.n	8014b58 <__kernel_rem_pio2f+0x204>
 8014cd8:	ecf6 6a01 	vldmia	r6!, {s13}
 8014cdc:	ecb5 7a01 	vldmia	r5!, {s14}
 8014ce0:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014ce4:	3001      	adds	r0, #1
 8014ce6:	4550      	cmp	r0, sl
 8014ce8:	dc01      	bgt.n	8014cee <__kernel_rem_pio2f+0x39a>
 8014cea:	4290      	cmp	r0, r2
 8014cec:	ddf4      	ble.n	8014cd8 <__kernel_rem_pio2f+0x384>
 8014cee:	a858      	add	r0, sp, #352	; 0x160
 8014cf0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8014cf4:	ed42 7a28 	vstr	s15, [r2, #-160]	; 0xffffff60
 8014cf8:	3b01      	subs	r3, #1
 8014cfa:	e731      	b.n	8014b60 <__kernel_rem_pio2f+0x20c>
 8014cfc:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8014cfe:	2b02      	cmp	r3, #2
 8014d00:	dc09      	bgt.n	8014d16 <__kernel_rem_pio2f+0x3c2>
 8014d02:	2b00      	cmp	r3, #0
 8014d04:	dc2b      	bgt.n	8014d5e <__kernel_rem_pio2f+0x40a>
 8014d06:	d044      	beq.n	8014d92 <__kernel_rem_pio2f+0x43e>
 8014d08:	f009 0007 	and.w	r0, r9, #7
 8014d0c:	b059      	add	sp, #356	; 0x164
 8014d0e:	ecbd 8b04 	vpop	{d8-d9}
 8014d12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014d16:	9b66      	ldr	r3, [sp, #408]	; 0x198
 8014d18:	2b03      	cmp	r3, #3
 8014d1a:	d1f5      	bne.n	8014d08 <__kernel_rem_pio2f+0x3b4>
 8014d1c:	aa30      	add	r2, sp, #192	; 0xc0
 8014d1e:	1f0b      	subs	r3, r1, #4
 8014d20:	4413      	add	r3, r2
 8014d22:	461a      	mov	r2, r3
 8014d24:	4620      	mov	r0, r4
 8014d26:	2800      	cmp	r0, #0
 8014d28:	f1a2 0204 	sub.w	r2, r2, #4
 8014d2c:	dc52      	bgt.n	8014dd4 <__kernel_rem_pio2f+0x480>
 8014d2e:	4622      	mov	r2, r4
 8014d30:	2a01      	cmp	r2, #1
 8014d32:	f1a3 0304 	sub.w	r3, r3, #4
 8014d36:	dc5d      	bgt.n	8014df4 <__kernel_rem_pio2f+0x4a0>
 8014d38:	ab30      	add	r3, sp, #192	; 0xc0
 8014d3a:	ed5f 7a3a 	vldr	s15, [pc, #-232]	; 8014c54 <__kernel_rem_pio2f+0x300>
 8014d3e:	440b      	add	r3, r1
 8014d40:	2c01      	cmp	r4, #1
 8014d42:	dc67      	bgt.n	8014e14 <__kernel_rem_pio2f+0x4c0>
 8014d44:	eddd 6a30 	vldr	s13, [sp, #192]	; 0xc0
 8014d48:	ed9d 7a31 	vldr	s14, [sp, #196]	; 0xc4
 8014d4c:	2f00      	cmp	r7, #0
 8014d4e:	d167      	bne.n	8014e20 <__kernel_rem_pio2f+0x4cc>
 8014d50:	edc8 6a00 	vstr	s13, [r8]
 8014d54:	ed88 7a01 	vstr	s14, [r8, #4]
 8014d58:	edc8 7a02 	vstr	s15, [r8, #8]
 8014d5c:	e7d4      	b.n	8014d08 <__kernel_rem_pio2f+0x3b4>
 8014d5e:	ab30      	add	r3, sp, #192	; 0xc0
 8014d60:	ed1f 7a44 	vldr	s14, [pc, #-272]	; 8014c54 <__kernel_rem_pio2f+0x300>
 8014d64:	440b      	add	r3, r1
 8014d66:	4622      	mov	r2, r4
 8014d68:	2a00      	cmp	r2, #0
 8014d6a:	da24      	bge.n	8014db6 <__kernel_rem_pio2f+0x462>
 8014d6c:	b34f      	cbz	r7, 8014dc2 <__kernel_rem_pio2f+0x46e>
 8014d6e:	eef1 7a47 	vneg.f32	s15, s14
 8014d72:	edc8 7a00 	vstr	s15, [r8]
 8014d76:	eddd 7a30 	vldr	s15, [sp, #192]	; 0xc0
 8014d7a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014d7e:	aa31      	add	r2, sp, #196	; 0xc4
 8014d80:	2301      	movs	r3, #1
 8014d82:	429c      	cmp	r4, r3
 8014d84:	da20      	bge.n	8014dc8 <__kernel_rem_pio2f+0x474>
 8014d86:	b10f      	cbz	r7, 8014d8c <__kernel_rem_pio2f+0x438>
 8014d88:	eef1 7a67 	vneg.f32	s15, s15
 8014d8c:	edc8 7a01 	vstr	s15, [r8, #4]
 8014d90:	e7ba      	b.n	8014d08 <__kernel_rem_pio2f+0x3b4>
 8014d92:	ab30      	add	r3, sp, #192	; 0xc0
 8014d94:	ed5f 7a51 	vldr	s15, [pc, #-324]	; 8014c54 <__kernel_rem_pio2f+0x300>
 8014d98:	440b      	add	r3, r1
 8014d9a:	2c00      	cmp	r4, #0
 8014d9c:	da05      	bge.n	8014daa <__kernel_rem_pio2f+0x456>
 8014d9e:	b10f      	cbz	r7, 8014da4 <__kernel_rem_pio2f+0x450>
 8014da0:	eef1 7a67 	vneg.f32	s15, s15
 8014da4:	edc8 7a00 	vstr	s15, [r8]
 8014da8:	e7ae      	b.n	8014d08 <__kernel_rem_pio2f+0x3b4>
 8014daa:	ed33 7a01 	vldmdb	r3!, {s14}
 8014dae:	3c01      	subs	r4, #1
 8014db0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014db4:	e7f1      	b.n	8014d9a <__kernel_rem_pio2f+0x446>
 8014db6:	ed73 7a01 	vldmdb	r3!, {s15}
 8014dba:	3a01      	subs	r2, #1
 8014dbc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8014dc0:	e7d2      	b.n	8014d68 <__kernel_rem_pio2f+0x414>
 8014dc2:	eef0 7a47 	vmov.f32	s15, s14
 8014dc6:	e7d4      	b.n	8014d72 <__kernel_rem_pio2f+0x41e>
 8014dc8:	ecb2 7a01 	vldmia	r2!, {s14}
 8014dcc:	3301      	adds	r3, #1
 8014dce:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014dd2:	e7d6      	b.n	8014d82 <__kernel_rem_pio2f+0x42e>
 8014dd4:	edd2 7a00 	vldr	s15, [r2]
 8014dd8:	edd2 6a01 	vldr	s13, [r2, #4]
 8014ddc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014de0:	3801      	subs	r0, #1
 8014de2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014de6:	ed82 7a00 	vstr	s14, [r2]
 8014dea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014dee:	edc2 7a01 	vstr	s15, [r2, #4]
 8014df2:	e798      	b.n	8014d26 <__kernel_rem_pio2f+0x3d2>
 8014df4:	edd3 7a00 	vldr	s15, [r3]
 8014df8:	edd3 6a01 	vldr	s13, [r3, #4]
 8014dfc:	ee37 7aa6 	vadd.f32	s14, s15, s13
 8014e00:	3a01      	subs	r2, #1
 8014e02:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8014e06:	ed83 7a00 	vstr	s14, [r3]
 8014e0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8014e0e:	edc3 7a01 	vstr	s15, [r3, #4]
 8014e12:	e78d      	b.n	8014d30 <__kernel_rem_pio2f+0x3dc>
 8014e14:	ed33 7a01 	vldmdb	r3!, {s14}
 8014e18:	3c01      	subs	r4, #1
 8014e1a:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014e1e:	e78f      	b.n	8014d40 <__kernel_rem_pio2f+0x3ec>
 8014e20:	eef1 6a66 	vneg.f32	s13, s13
 8014e24:	eeb1 7a47 	vneg.f32	s14, s14
 8014e28:	edc8 6a00 	vstr	s13, [r8]
 8014e2c:	ed88 7a01 	vstr	s14, [r8, #4]
 8014e30:	eef1 7a67 	vneg.f32	s15, s15
 8014e34:	e790      	b.n	8014d58 <__kernel_rem_pio2f+0x404>
 8014e36:	bf00      	nop

08014e38 <floor>:
 8014e38:	ec51 0b10 	vmov	r0, r1, d0
 8014e3c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8014e40:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e44:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
 8014e48:	2e13      	cmp	r6, #19
 8014e4a:	ee10 5a10 	vmov	r5, s0
 8014e4e:	ee10 8a10 	vmov	r8, s0
 8014e52:	460c      	mov	r4, r1
 8014e54:	dc31      	bgt.n	8014eba <floor+0x82>
 8014e56:	2e00      	cmp	r6, #0
 8014e58:	da14      	bge.n	8014e84 <floor+0x4c>
 8014e5a:	a333      	add	r3, pc, #204	; (adr r3, 8014f28 <floor+0xf0>)
 8014e5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e60:	f7eb fa34 	bl	80002cc <__adddf3>
 8014e64:	2200      	movs	r2, #0
 8014e66:	2300      	movs	r3, #0
 8014e68:	f7eb fe76 	bl	8000b58 <__aeabi_dcmpgt>
 8014e6c:	b138      	cbz	r0, 8014e7e <floor+0x46>
 8014e6e:	2c00      	cmp	r4, #0
 8014e70:	da53      	bge.n	8014f1a <floor+0xe2>
 8014e72:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8014e76:	4325      	orrs	r5, r4
 8014e78:	d052      	beq.n	8014f20 <floor+0xe8>
 8014e7a:	4c2d      	ldr	r4, [pc, #180]	; (8014f30 <floor+0xf8>)
 8014e7c:	2500      	movs	r5, #0
 8014e7e:	4621      	mov	r1, r4
 8014e80:	4628      	mov	r0, r5
 8014e82:	e024      	b.n	8014ece <floor+0x96>
 8014e84:	4f2b      	ldr	r7, [pc, #172]	; (8014f34 <floor+0xfc>)
 8014e86:	4137      	asrs	r7, r6
 8014e88:	ea01 0307 	and.w	r3, r1, r7
 8014e8c:	4303      	orrs	r3, r0
 8014e8e:	d01e      	beq.n	8014ece <floor+0x96>
 8014e90:	a325      	add	r3, pc, #148	; (adr r3, 8014f28 <floor+0xf0>)
 8014e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014e96:	f7eb fa19 	bl	80002cc <__adddf3>
 8014e9a:	2200      	movs	r2, #0
 8014e9c:	2300      	movs	r3, #0
 8014e9e:	f7eb fe5b 	bl	8000b58 <__aeabi_dcmpgt>
 8014ea2:	2800      	cmp	r0, #0
 8014ea4:	d0eb      	beq.n	8014e7e <floor+0x46>
 8014ea6:	2c00      	cmp	r4, #0
 8014ea8:	bfbe      	ittt	lt
 8014eaa:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8014eae:	4133      	asrlt	r3, r6
 8014eb0:	18e4      	addlt	r4, r4, r3
 8014eb2:	ea24 0407 	bic.w	r4, r4, r7
 8014eb6:	2500      	movs	r5, #0
 8014eb8:	e7e1      	b.n	8014e7e <floor+0x46>
 8014eba:	2e33      	cmp	r6, #51	; 0x33
 8014ebc:	dd0b      	ble.n	8014ed6 <floor+0x9e>
 8014ebe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8014ec2:	d104      	bne.n	8014ece <floor+0x96>
 8014ec4:	ee10 2a10 	vmov	r2, s0
 8014ec8:	460b      	mov	r3, r1
 8014eca:	f7eb f9ff 	bl	80002cc <__adddf3>
 8014ece:	ec41 0b10 	vmov	d0, r0, r1
 8014ed2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014ed6:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8014eda:	f04f 37ff 	mov.w	r7, #4294967295
 8014ede:	40df      	lsrs	r7, r3
 8014ee0:	4238      	tst	r0, r7
 8014ee2:	d0f4      	beq.n	8014ece <floor+0x96>
 8014ee4:	a310      	add	r3, pc, #64	; (adr r3, 8014f28 <floor+0xf0>)
 8014ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eea:	f7eb f9ef 	bl	80002cc <__adddf3>
 8014eee:	2200      	movs	r2, #0
 8014ef0:	2300      	movs	r3, #0
 8014ef2:	f7eb fe31 	bl	8000b58 <__aeabi_dcmpgt>
 8014ef6:	2800      	cmp	r0, #0
 8014ef8:	d0c1      	beq.n	8014e7e <floor+0x46>
 8014efa:	2c00      	cmp	r4, #0
 8014efc:	da0a      	bge.n	8014f14 <floor+0xdc>
 8014efe:	2e14      	cmp	r6, #20
 8014f00:	d101      	bne.n	8014f06 <floor+0xce>
 8014f02:	3401      	adds	r4, #1
 8014f04:	e006      	b.n	8014f14 <floor+0xdc>
 8014f06:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8014f0a:	2301      	movs	r3, #1
 8014f0c:	40b3      	lsls	r3, r6
 8014f0e:	441d      	add	r5, r3
 8014f10:	45a8      	cmp	r8, r5
 8014f12:	d8f6      	bhi.n	8014f02 <floor+0xca>
 8014f14:	ea25 0507 	bic.w	r5, r5, r7
 8014f18:	e7b1      	b.n	8014e7e <floor+0x46>
 8014f1a:	2500      	movs	r5, #0
 8014f1c:	462c      	mov	r4, r5
 8014f1e:	e7ae      	b.n	8014e7e <floor+0x46>
 8014f20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8014f24:	e7ab      	b.n	8014e7e <floor+0x46>
 8014f26:	bf00      	nop
 8014f28:	8800759c 	.word	0x8800759c
 8014f2c:	7e37e43c 	.word	0x7e37e43c
 8014f30:	bff00000 	.word	0xbff00000
 8014f34:	000fffff 	.word	0x000fffff

08014f38 <abort>:
 8014f38:	b508      	push	{r3, lr}
 8014f3a:	2006      	movs	r0, #6
 8014f3c:	f000 f996 	bl	801526c <raise>
 8014f40:	2001      	movs	r0, #1
 8014f42:	f7f2 f939 	bl	80071b8 <_exit>

08014f46 <__itoa>:
 8014f46:	1e93      	subs	r3, r2, #2
 8014f48:	2b22      	cmp	r3, #34	; 0x22
 8014f4a:	b510      	push	{r4, lr}
 8014f4c:	460c      	mov	r4, r1
 8014f4e:	d904      	bls.n	8014f5a <__itoa+0x14>
 8014f50:	2300      	movs	r3, #0
 8014f52:	700b      	strb	r3, [r1, #0]
 8014f54:	461c      	mov	r4, r3
 8014f56:	4620      	mov	r0, r4
 8014f58:	bd10      	pop	{r4, pc}
 8014f5a:	2a0a      	cmp	r2, #10
 8014f5c:	d109      	bne.n	8014f72 <__itoa+0x2c>
 8014f5e:	2800      	cmp	r0, #0
 8014f60:	da07      	bge.n	8014f72 <__itoa+0x2c>
 8014f62:	232d      	movs	r3, #45	; 0x2d
 8014f64:	700b      	strb	r3, [r1, #0]
 8014f66:	4240      	negs	r0, r0
 8014f68:	2101      	movs	r1, #1
 8014f6a:	4421      	add	r1, r4
 8014f6c:	f000 f8c2 	bl	80150f4 <__utoa>
 8014f70:	e7f1      	b.n	8014f56 <__itoa+0x10>
 8014f72:	2100      	movs	r1, #0
 8014f74:	e7f9      	b.n	8014f6a <__itoa+0x24>

08014f76 <itoa>:
 8014f76:	f7ff bfe6 	b.w	8014f46 <__itoa>
	...

08014f7c <malloc>:
 8014f7c:	4b02      	ldr	r3, [pc, #8]	; (8014f88 <malloc+0xc>)
 8014f7e:	4601      	mov	r1, r0
 8014f80:	6818      	ldr	r0, [r3, #0]
 8014f82:	f000 b82b 	b.w	8014fdc <_malloc_r>
 8014f86:	bf00      	nop
 8014f88:	2000020c 	.word	0x2000020c

08014f8c <free>:
 8014f8c:	4b02      	ldr	r3, [pc, #8]	; (8014f98 <free+0xc>)
 8014f8e:	4601      	mov	r1, r0
 8014f90:	6818      	ldr	r0, [r3, #0]
 8014f92:	f000 b9d9 	b.w	8015348 <_free_r>
 8014f96:	bf00      	nop
 8014f98:	2000020c 	.word	0x2000020c

08014f9c <sbrk_aligned>:
 8014f9c:	b570      	push	{r4, r5, r6, lr}
 8014f9e:	4e0e      	ldr	r6, [pc, #56]	; (8014fd8 <sbrk_aligned+0x3c>)
 8014fa0:	460c      	mov	r4, r1
 8014fa2:	6831      	ldr	r1, [r6, #0]
 8014fa4:	4605      	mov	r5, r0
 8014fa6:	b911      	cbnz	r1, 8014fae <sbrk_aligned+0x12>
 8014fa8:	f000 f97c 	bl	80152a4 <_sbrk_r>
 8014fac:	6030      	str	r0, [r6, #0]
 8014fae:	4621      	mov	r1, r4
 8014fb0:	4628      	mov	r0, r5
 8014fb2:	f000 f977 	bl	80152a4 <_sbrk_r>
 8014fb6:	1c43      	adds	r3, r0, #1
 8014fb8:	d00a      	beq.n	8014fd0 <sbrk_aligned+0x34>
 8014fba:	1cc4      	adds	r4, r0, #3
 8014fbc:	f024 0403 	bic.w	r4, r4, #3
 8014fc0:	42a0      	cmp	r0, r4
 8014fc2:	d007      	beq.n	8014fd4 <sbrk_aligned+0x38>
 8014fc4:	1a21      	subs	r1, r4, r0
 8014fc6:	4628      	mov	r0, r5
 8014fc8:	f000 f96c 	bl	80152a4 <_sbrk_r>
 8014fcc:	3001      	adds	r0, #1
 8014fce:	d101      	bne.n	8014fd4 <sbrk_aligned+0x38>
 8014fd0:	f04f 34ff 	mov.w	r4, #4294967295
 8014fd4:	4620      	mov	r0, r4
 8014fd6:	bd70      	pop	{r4, r5, r6, pc}
 8014fd8:	2001f28c 	.word	0x2001f28c

08014fdc <_malloc_r>:
 8014fdc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8014fe0:	1ccd      	adds	r5, r1, #3
 8014fe2:	f025 0503 	bic.w	r5, r5, #3
 8014fe6:	3508      	adds	r5, #8
 8014fe8:	2d0c      	cmp	r5, #12
 8014fea:	bf38      	it	cc
 8014fec:	250c      	movcc	r5, #12
 8014fee:	2d00      	cmp	r5, #0
 8014ff0:	4607      	mov	r7, r0
 8014ff2:	db01      	blt.n	8014ff8 <_malloc_r+0x1c>
 8014ff4:	42a9      	cmp	r1, r5
 8014ff6:	d905      	bls.n	8015004 <_malloc_r+0x28>
 8014ff8:	230c      	movs	r3, #12
 8014ffa:	603b      	str	r3, [r7, #0]
 8014ffc:	2600      	movs	r6, #0
 8014ffe:	4630      	mov	r0, r6
 8015000:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8015004:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 80150d8 <_malloc_r+0xfc>
 8015008:	f000 f868 	bl	80150dc <__malloc_lock>
 801500c:	f8d8 3000 	ldr.w	r3, [r8]
 8015010:	461c      	mov	r4, r3
 8015012:	bb5c      	cbnz	r4, 801506c <_malloc_r+0x90>
 8015014:	4629      	mov	r1, r5
 8015016:	4638      	mov	r0, r7
 8015018:	f7ff ffc0 	bl	8014f9c <sbrk_aligned>
 801501c:	1c43      	adds	r3, r0, #1
 801501e:	4604      	mov	r4, r0
 8015020:	d155      	bne.n	80150ce <_malloc_r+0xf2>
 8015022:	f8d8 4000 	ldr.w	r4, [r8]
 8015026:	4626      	mov	r6, r4
 8015028:	2e00      	cmp	r6, #0
 801502a:	d145      	bne.n	80150b8 <_malloc_r+0xdc>
 801502c:	2c00      	cmp	r4, #0
 801502e:	d048      	beq.n	80150c2 <_malloc_r+0xe6>
 8015030:	6823      	ldr	r3, [r4, #0]
 8015032:	4631      	mov	r1, r6
 8015034:	4638      	mov	r0, r7
 8015036:	eb04 0903 	add.w	r9, r4, r3
 801503a:	f000 f933 	bl	80152a4 <_sbrk_r>
 801503e:	4581      	cmp	r9, r0
 8015040:	d13f      	bne.n	80150c2 <_malloc_r+0xe6>
 8015042:	6821      	ldr	r1, [r4, #0]
 8015044:	1a6d      	subs	r5, r5, r1
 8015046:	4629      	mov	r1, r5
 8015048:	4638      	mov	r0, r7
 801504a:	f7ff ffa7 	bl	8014f9c <sbrk_aligned>
 801504e:	3001      	adds	r0, #1
 8015050:	d037      	beq.n	80150c2 <_malloc_r+0xe6>
 8015052:	6823      	ldr	r3, [r4, #0]
 8015054:	442b      	add	r3, r5
 8015056:	6023      	str	r3, [r4, #0]
 8015058:	f8d8 3000 	ldr.w	r3, [r8]
 801505c:	2b00      	cmp	r3, #0
 801505e:	d038      	beq.n	80150d2 <_malloc_r+0xf6>
 8015060:	685a      	ldr	r2, [r3, #4]
 8015062:	42a2      	cmp	r2, r4
 8015064:	d12b      	bne.n	80150be <_malloc_r+0xe2>
 8015066:	2200      	movs	r2, #0
 8015068:	605a      	str	r2, [r3, #4]
 801506a:	e00f      	b.n	801508c <_malloc_r+0xb0>
 801506c:	6822      	ldr	r2, [r4, #0]
 801506e:	1b52      	subs	r2, r2, r5
 8015070:	d41f      	bmi.n	80150b2 <_malloc_r+0xd6>
 8015072:	2a0b      	cmp	r2, #11
 8015074:	d917      	bls.n	80150a6 <_malloc_r+0xca>
 8015076:	1961      	adds	r1, r4, r5
 8015078:	42a3      	cmp	r3, r4
 801507a:	6025      	str	r5, [r4, #0]
 801507c:	bf18      	it	ne
 801507e:	6059      	strne	r1, [r3, #4]
 8015080:	6863      	ldr	r3, [r4, #4]
 8015082:	bf08      	it	eq
 8015084:	f8c8 1000 	streq.w	r1, [r8]
 8015088:	5162      	str	r2, [r4, r5]
 801508a:	604b      	str	r3, [r1, #4]
 801508c:	4638      	mov	r0, r7
 801508e:	f104 060b 	add.w	r6, r4, #11
 8015092:	f000 f829 	bl	80150e8 <__malloc_unlock>
 8015096:	f026 0607 	bic.w	r6, r6, #7
 801509a:	1d23      	adds	r3, r4, #4
 801509c:	1af2      	subs	r2, r6, r3
 801509e:	d0ae      	beq.n	8014ffe <_malloc_r+0x22>
 80150a0:	1b9b      	subs	r3, r3, r6
 80150a2:	50a3      	str	r3, [r4, r2]
 80150a4:	e7ab      	b.n	8014ffe <_malloc_r+0x22>
 80150a6:	42a3      	cmp	r3, r4
 80150a8:	6862      	ldr	r2, [r4, #4]
 80150aa:	d1dd      	bne.n	8015068 <_malloc_r+0x8c>
 80150ac:	f8c8 2000 	str.w	r2, [r8]
 80150b0:	e7ec      	b.n	801508c <_malloc_r+0xb0>
 80150b2:	4623      	mov	r3, r4
 80150b4:	6864      	ldr	r4, [r4, #4]
 80150b6:	e7ac      	b.n	8015012 <_malloc_r+0x36>
 80150b8:	4634      	mov	r4, r6
 80150ba:	6876      	ldr	r6, [r6, #4]
 80150bc:	e7b4      	b.n	8015028 <_malloc_r+0x4c>
 80150be:	4613      	mov	r3, r2
 80150c0:	e7cc      	b.n	801505c <_malloc_r+0x80>
 80150c2:	230c      	movs	r3, #12
 80150c4:	603b      	str	r3, [r7, #0]
 80150c6:	4638      	mov	r0, r7
 80150c8:	f000 f80e 	bl	80150e8 <__malloc_unlock>
 80150cc:	e797      	b.n	8014ffe <_malloc_r+0x22>
 80150ce:	6025      	str	r5, [r4, #0]
 80150d0:	e7dc      	b.n	801508c <_malloc_r+0xb0>
 80150d2:	605b      	str	r3, [r3, #4]
 80150d4:	deff      	udf	#255	; 0xff
 80150d6:	bf00      	nop
 80150d8:	2001f288 	.word	0x2001f288

080150dc <__malloc_lock>:
 80150dc:	4801      	ldr	r0, [pc, #4]	; (80150e4 <__malloc_lock+0x8>)
 80150de:	f000 b91b 	b.w	8015318 <__retarget_lock_acquire_recursive>
 80150e2:	bf00      	nop
 80150e4:	2001f3cc 	.word	0x2001f3cc

080150e8 <__malloc_unlock>:
 80150e8:	4801      	ldr	r0, [pc, #4]	; (80150f0 <__malloc_unlock+0x8>)
 80150ea:	f000 b916 	b.w	801531a <__retarget_lock_release_recursive>
 80150ee:	bf00      	nop
 80150f0:	2001f3cc 	.word	0x2001f3cc

080150f4 <__utoa>:
 80150f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80150f6:	4c1f      	ldr	r4, [pc, #124]	; (8015174 <__utoa+0x80>)
 80150f8:	b08b      	sub	sp, #44	; 0x2c
 80150fa:	4605      	mov	r5, r0
 80150fc:	460b      	mov	r3, r1
 80150fe:	466e      	mov	r6, sp
 8015100:	f104 0c20 	add.w	ip, r4, #32
 8015104:	6820      	ldr	r0, [r4, #0]
 8015106:	6861      	ldr	r1, [r4, #4]
 8015108:	4637      	mov	r7, r6
 801510a:	c703      	stmia	r7!, {r0, r1}
 801510c:	3408      	adds	r4, #8
 801510e:	4564      	cmp	r4, ip
 8015110:	463e      	mov	r6, r7
 8015112:	d1f7      	bne.n	8015104 <__utoa+0x10>
 8015114:	7921      	ldrb	r1, [r4, #4]
 8015116:	7139      	strb	r1, [r7, #4]
 8015118:	1e91      	subs	r1, r2, #2
 801511a:	6820      	ldr	r0, [r4, #0]
 801511c:	6038      	str	r0, [r7, #0]
 801511e:	2922      	cmp	r1, #34	; 0x22
 8015120:	f04f 0100 	mov.w	r1, #0
 8015124:	d904      	bls.n	8015130 <__utoa+0x3c>
 8015126:	7019      	strb	r1, [r3, #0]
 8015128:	460b      	mov	r3, r1
 801512a:	4618      	mov	r0, r3
 801512c:	b00b      	add	sp, #44	; 0x2c
 801512e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8015130:	1e58      	subs	r0, r3, #1
 8015132:	4684      	mov	ip, r0
 8015134:	fbb5 f7f2 	udiv	r7, r5, r2
 8015138:	fb02 5617 	mls	r6, r2, r7, r5
 801513c:	3628      	adds	r6, #40	; 0x28
 801513e:	446e      	add	r6, sp
 8015140:	460c      	mov	r4, r1
 8015142:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8015146:	f80c 6f01 	strb.w	r6, [ip, #1]!
 801514a:	462e      	mov	r6, r5
 801514c:	42b2      	cmp	r2, r6
 801514e:	f101 0101 	add.w	r1, r1, #1
 8015152:	463d      	mov	r5, r7
 8015154:	d9ee      	bls.n	8015134 <__utoa+0x40>
 8015156:	2200      	movs	r2, #0
 8015158:	545a      	strb	r2, [r3, r1]
 801515a:	1919      	adds	r1, r3, r4
 801515c:	1aa5      	subs	r5, r4, r2
 801515e:	42aa      	cmp	r2, r5
 8015160:	dae3      	bge.n	801512a <__utoa+0x36>
 8015162:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8015166:	780e      	ldrb	r6, [r1, #0]
 8015168:	7006      	strb	r6, [r0, #0]
 801516a:	3201      	adds	r2, #1
 801516c:	f801 5901 	strb.w	r5, [r1], #-1
 8015170:	e7f4      	b.n	801515c <__utoa+0x68>
 8015172:	bf00      	nop
 8015174:	080172b0 	.word	0x080172b0

08015178 <siprintf>:
 8015178:	b40e      	push	{r1, r2, r3}
 801517a:	b500      	push	{lr}
 801517c:	b09c      	sub	sp, #112	; 0x70
 801517e:	ab1d      	add	r3, sp, #116	; 0x74
 8015180:	9002      	str	r0, [sp, #8]
 8015182:	9006      	str	r0, [sp, #24]
 8015184:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8015188:	4809      	ldr	r0, [pc, #36]	; (80151b0 <siprintf+0x38>)
 801518a:	9107      	str	r1, [sp, #28]
 801518c:	9104      	str	r1, [sp, #16]
 801518e:	4909      	ldr	r1, [pc, #36]	; (80151b4 <siprintf+0x3c>)
 8015190:	f853 2b04 	ldr.w	r2, [r3], #4
 8015194:	9105      	str	r1, [sp, #20]
 8015196:	6800      	ldr	r0, [r0, #0]
 8015198:	9301      	str	r3, [sp, #4]
 801519a:	a902      	add	r1, sp, #8
 801519c:	f000 f97a 	bl	8015494 <_svfiprintf_r>
 80151a0:	9b02      	ldr	r3, [sp, #8]
 80151a2:	2200      	movs	r2, #0
 80151a4:	701a      	strb	r2, [r3, #0]
 80151a6:	b01c      	add	sp, #112	; 0x70
 80151a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80151ac:	b003      	add	sp, #12
 80151ae:	4770      	bx	lr
 80151b0:	2000020c 	.word	0x2000020c
 80151b4:	ffff0208 	.word	0xffff0208

080151b8 <memcmp>:
 80151b8:	b510      	push	{r4, lr}
 80151ba:	3901      	subs	r1, #1
 80151bc:	4402      	add	r2, r0
 80151be:	4290      	cmp	r0, r2
 80151c0:	d101      	bne.n	80151c6 <memcmp+0xe>
 80151c2:	2000      	movs	r0, #0
 80151c4:	e005      	b.n	80151d2 <memcmp+0x1a>
 80151c6:	7803      	ldrb	r3, [r0, #0]
 80151c8:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80151cc:	42a3      	cmp	r3, r4
 80151ce:	d001      	beq.n	80151d4 <memcmp+0x1c>
 80151d0:	1b18      	subs	r0, r3, r4
 80151d2:	bd10      	pop	{r4, pc}
 80151d4:	3001      	adds	r0, #1
 80151d6:	e7f2      	b.n	80151be <memcmp+0x6>

080151d8 <memmove>:
 80151d8:	4288      	cmp	r0, r1
 80151da:	b510      	push	{r4, lr}
 80151dc:	eb01 0402 	add.w	r4, r1, r2
 80151e0:	d902      	bls.n	80151e8 <memmove+0x10>
 80151e2:	4284      	cmp	r4, r0
 80151e4:	4623      	mov	r3, r4
 80151e6:	d807      	bhi.n	80151f8 <memmove+0x20>
 80151e8:	1e43      	subs	r3, r0, #1
 80151ea:	42a1      	cmp	r1, r4
 80151ec:	d008      	beq.n	8015200 <memmove+0x28>
 80151ee:	f811 2b01 	ldrb.w	r2, [r1], #1
 80151f2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80151f6:	e7f8      	b.n	80151ea <memmove+0x12>
 80151f8:	4402      	add	r2, r0
 80151fa:	4601      	mov	r1, r0
 80151fc:	428a      	cmp	r2, r1
 80151fe:	d100      	bne.n	8015202 <memmove+0x2a>
 8015200:	bd10      	pop	{r4, pc}
 8015202:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8015206:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801520a:	e7f7      	b.n	80151fc <memmove+0x24>

0801520c <memset>:
 801520c:	4402      	add	r2, r0
 801520e:	4603      	mov	r3, r0
 8015210:	4293      	cmp	r3, r2
 8015212:	d100      	bne.n	8015216 <memset+0xa>
 8015214:	4770      	bx	lr
 8015216:	f803 1b01 	strb.w	r1, [r3], #1
 801521a:	e7f9      	b.n	8015210 <memset+0x4>

0801521c <_raise_r>:
 801521c:	291f      	cmp	r1, #31
 801521e:	b538      	push	{r3, r4, r5, lr}
 8015220:	4604      	mov	r4, r0
 8015222:	460d      	mov	r5, r1
 8015224:	d904      	bls.n	8015230 <_raise_r+0x14>
 8015226:	2316      	movs	r3, #22
 8015228:	6003      	str	r3, [r0, #0]
 801522a:	f04f 30ff 	mov.w	r0, #4294967295
 801522e:	bd38      	pop	{r3, r4, r5, pc}
 8015230:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8015232:	b112      	cbz	r2, 801523a <_raise_r+0x1e>
 8015234:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8015238:	b94b      	cbnz	r3, 801524e <_raise_r+0x32>
 801523a:	4620      	mov	r0, r4
 801523c:	f000 f830 	bl	80152a0 <_getpid_r>
 8015240:	462a      	mov	r2, r5
 8015242:	4601      	mov	r1, r0
 8015244:	4620      	mov	r0, r4
 8015246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801524a:	f000 b817 	b.w	801527c <_kill_r>
 801524e:	2b01      	cmp	r3, #1
 8015250:	d00a      	beq.n	8015268 <_raise_r+0x4c>
 8015252:	1c59      	adds	r1, r3, #1
 8015254:	d103      	bne.n	801525e <_raise_r+0x42>
 8015256:	2316      	movs	r3, #22
 8015258:	6003      	str	r3, [r0, #0]
 801525a:	2001      	movs	r0, #1
 801525c:	e7e7      	b.n	801522e <_raise_r+0x12>
 801525e:	2400      	movs	r4, #0
 8015260:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8015264:	4628      	mov	r0, r5
 8015266:	4798      	blx	r3
 8015268:	2000      	movs	r0, #0
 801526a:	e7e0      	b.n	801522e <_raise_r+0x12>

0801526c <raise>:
 801526c:	4b02      	ldr	r3, [pc, #8]	; (8015278 <raise+0xc>)
 801526e:	4601      	mov	r1, r0
 8015270:	6818      	ldr	r0, [r3, #0]
 8015272:	f7ff bfd3 	b.w	801521c <_raise_r>
 8015276:	bf00      	nop
 8015278:	2000020c 	.word	0x2000020c

0801527c <_kill_r>:
 801527c:	b538      	push	{r3, r4, r5, lr}
 801527e:	4d07      	ldr	r5, [pc, #28]	; (801529c <_kill_r+0x20>)
 8015280:	2300      	movs	r3, #0
 8015282:	4604      	mov	r4, r0
 8015284:	4608      	mov	r0, r1
 8015286:	4611      	mov	r1, r2
 8015288:	602b      	str	r3, [r5, #0]
 801528a:	f7f1 ff85 	bl	8007198 <_kill>
 801528e:	1c43      	adds	r3, r0, #1
 8015290:	d102      	bne.n	8015298 <_kill_r+0x1c>
 8015292:	682b      	ldr	r3, [r5, #0]
 8015294:	b103      	cbz	r3, 8015298 <_kill_r+0x1c>
 8015296:	6023      	str	r3, [r4, #0]
 8015298:	bd38      	pop	{r3, r4, r5, pc}
 801529a:	bf00      	nop
 801529c:	2001f3c8 	.word	0x2001f3c8

080152a0 <_getpid_r>:
 80152a0:	f7f1 bf72 	b.w	8007188 <_getpid>

080152a4 <_sbrk_r>:
 80152a4:	b538      	push	{r3, r4, r5, lr}
 80152a6:	4d06      	ldr	r5, [pc, #24]	; (80152c0 <_sbrk_r+0x1c>)
 80152a8:	2300      	movs	r3, #0
 80152aa:	4604      	mov	r4, r0
 80152ac:	4608      	mov	r0, r1
 80152ae:	602b      	str	r3, [r5, #0]
 80152b0:	f7f1 ff8c 	bl	80071cc <_sbrk>
 80152b4:	1c43      	adds	r3, r0, #1
 80152b6:	d102      	bne.n	80152be <_sbrk_r+0x1a>
 80152b8:	682b      	ldr	r3, [r5, #0]
 80152ba:	b103      	cbz	r3, 80152be <_sbrk_r+0x1a>
 80152bc:	6023      	str	r3, [r4, #0]
 80152be:	bd38      	pop	{r3, r4, r5, pc}
 80152c0:	2001f3c8 	.word	0x2001f3c8

080152c4 <__errno>:
 80152c4:	4b01      	ldr	r3, [pc, #4]	; (80152cc <__errno+0x8>)
 80152c6:	6818      	ldr	r0, [r3, #0]
 80152c8:	4770      	bx	lr
 80152ca:	bf00      	nop
 80152cc:	2000020c 	.word	0x2000020c

080152d0 <__libc_init_array>:
 80152d0:	b570      	push	{r4, r5, r6, lr}
 80152d2:	4d0d      	ldr	r5, [pc, #52]	; (8015308 <__libc_init_array+0x38>)
 80152d4:	4c0d      	ldr	r4, [pc, #52]	; (801530c <__libc_init_array+0x3c>)
 80152d6:	1b64      	subs	r4, r4, r5
 80152d8:	10a4      	asrs	r4, r4, #2
 80152da:	2600      	movs	r6, #0
 80152dc:	42a6      	cmp	r6, r4
 80152de:	d109      	bne.n	80152f4 <__libc_init_array+0x24>
 80152e0:	4d0b      	ldr	r5, [pc, #44]	; (8015310 <__libc_init_array+0x40>)
 80152e2:	4c0c      	ldr	r4, [pc, #48]	; (8015314 <__libc_init_array+0x44>)
 80152e4:	f000 fb9c 	bl	8015a20 <_init>
 80152e8:	1b64      	subs	r4, r4, r5
 80152ea:	10a4      	asrs	r4, r4, #2
 80152ec:	2600      	movs	r6, #0
 80152ee:	42a6      	cmp	r6, r4
 80152f0:	d105      	bne.n	80152fe <__libc_init_array+0x2e>
 80152f2:	bd70      	pop	{r4, r5, r6, pc}
 80152f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80152f8:	4798      	blx	r3
 80152fa:	3601      	adds	r6, #1
 80152fc:	e7ee      	b.n	80152dc <__libc_init_array+0xc>
 80152fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8015302:	4798      	blx	r3
 8015304:	3601      	adds	r6, #1
 8015306:	e7f2      	b.n	80152ee <__libc_init_array+0x1e>
 8015308:	08017310 	.word	0x08017310
 801530c:	08017310 	.word	0x08017310
 8015310:	08017310 	.word	0x08017310
 8015314:	08017318 	.word	0x08017318

08015318 <__retarget_lock_acquire_recursive>:
 8015318:	4770      	bx	lr

0801531a <__retarget_lock_release_recursive>:
 801531a:	4770      	bx	lr

0801531c <strcpy>:
 801531c:	4603      	mov	r3, r0
 801531e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8015322:	f803 2b01 	strb.w	r2, [r3], #1
 8015326:	2a00      	cmp	r2, #0
 8015328:	d1f9      	bne.n	801531e <strcpy+0x2>
 801532a:	4770      	bx	lr

0801532c <memcpy>:
 801532c:	440a      	add	r2, r1
 801532e:	4291      	cmp	r1, r2
 8015330:	f100 33ff 	add.w	r3, r0, #4294967295
 8015334:	d100      	bne.n	8015338 <memcpy+0xc>
 8015336:	4770      	bx	lr
 8015338:	b510      	push	{r4, lr}
 801533a:	f811 4b01 	ldrb.w	r4, [r1], #1
 801533e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8015342:	4291      	cmp	r1, r2
 8015344:	d1f9      	bne.n	801533a <memcpy+0xe>
 8015346:	bd10      	pop	{r4, pc}

08015348 <_free_r>:
 8015348:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801534a:	2900      	cmp	r1, #0
 801534c:	d044      	beq.n	80153d8 <_free_r+0x90>
 801534e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015352:	9001      	str	r0, [sp, #4]
 8015354:	2b00      	cmp	r3, #0
 8015356:	f1a1 0404 	sub.w	r4, r1, #4
 801535a:	bfb8      	it	lt
 801535c:	18e4      	addlt	r4, r4, r3
 801535e:	f7ff febd 	bl	80150dc <__malloc_lock>
 8015362:	4a1e      	ldr	r2, [pc, #120]	; (80153dc <_free_r+0x94>)
 8015364:	9801      	ldr	r0, [sp, #4]
 8015366:	6813      	ldr	r3, [r2, #0]
 8015368:	b933      	cbnz	r3, 8015378 <_free_r+0x30>
 801536a:	6063      	str	r3, [r4, #4]
 801536c:	6014      	str	r4, [r2, #0]
 801536e:	b003      	add	sp, #12
 8015370:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8015374:	f7ff beb8 	b.w	80150e8 <__malloc_unlock>
 8015378:	42a3      	cmp	r3, r4
 801537a:	d908      	bls.n	801538e <_free_r+0x46>
 801537c:	6825      	ldr	r5, [r4, #0]
 801537e:	1961      	adds	r1, r4, r5
 8015380:	428b      	cmp	r3, r1
 8015382:	bf01      	itttt	eq
 8015384:	6819      	ldreq	r1, [r3, #0]
 8015386:	685b      	ldreq	r3, [r3, #4]
 8015388:	1949      	addeq	r1, r1, r5
 801538a:	6021      	streq	r1, [r4, #0]
 801538c:	e7ed      	b.n	801536a <_free_r+0x22>
 801538e:	461a      	mov	r2, r3
 8015390:	685b      	ldr	r3, [r3, #4]
 8015392:	b10b      	cbz	r3, 8015398 <_free_r+0x50>
 8015394:	42a3      	cmp	r3, r4
 8015396:	d9fa      	bls.n	801538e <_free_r+0x46>
 8015398:	6811      	ldr	r1, [r2, #0]
 801539a:	1855      	adds	r5, r2, r1
 801539c:	42a5      	cmp	r5, r4
 801539e:	d10b      	bne.n	80153b8 <_free_r+0x70>
 80153a0:	6824      	ldr	r4, [r4, #0]
 80153a2:	4421      	add	r1, r4
 80153a4:	1854      	adds	r4, r2, r1
 80153a6:	42a3      	cmp	r3, r4
 80153a8:	6011      	str	r1, [r2, #0]
 80153aa:	d1e0      	bne.n	801536e <_free_r+0x26>
 80153ac:	681c      	ldr	r4, [r3, #0]
 80153ae:	685b      	ldr	r3, [r3, #4]
 80153b0:	6053      	str	r3, [r2, #4]
 80153b2:	440c      	add	r4, r1
 80153b4:	6014      	str	r4, [r2, #0]
 80153b6:	e7da      	b.n	801536e <_free_r+0x26>
 80153b8:	d902      	bls.n	80153c0 <_free_r+0x78>
 80153ba:	230c      	movs	r3, #12
 80153bc:	6003      	str	r3, [r0, #0]
 80153be:	e7d6      	b.n	801536e <_free_r+0x26>
 80153c0:	6825      	ldr	r5, [r4, #0]
 80153c2:	1961      	adds	r1, r4, r5
 80153c4:	428b      	cmp	r3, r1
 80153c6:	bf04      	itt	eq
 80153c8:	6819      	ldreq	r1, [r3, #0]
 80153ca:	685b      	ldreq	r3, [r3, #4]
 80153cc:	6063      	str	r3, [r4, #4]
 80153ce:	bf04      	itt	eq
 80153d0:	1949      	addeq	r1, r1, r5
 80153d2:	6021      	streq	r1, [r4, #0]
 80153d4:	6054      	str	r4, [r2, #4]
 80153d6:	e7ca      	b.n	801536e <_free_r+0x26>
 80153d8:	b003      	add	sp, #12
 80153da:	bd30      	pop	{r4, r5, pc}
 80153dc:	2001f288 	.word	0x2001f288

080153e0 <__ssputs_r>:
 80153e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80153e4:	688e      	ldr	r6, [r1, #8]
 80153e6:	461f      	mov	r7, r3
 80153e8:	42be      	cmp	r6, r7
 80153ea:	680b      	ldr	r3, [r1, #0]
 80153ec:	4682      	mov	sl, r0
 80153ee:	460c      	mov	r4, r1
 80153f0:	4690      	mov	r8, r2
 80153f2:	d82c      	bhi.n	801544e <__ssputs_r+0x6e>
 80153f4:	898a      	ldrh	r2, [r1, #12]
 80153f6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80153fa:	d026      	beq.n	801544a <__ssputs_r+0x6a>
 80153fc:	6965      	ldr	r5, [r4, #20]
 80153fe:	6909      	ldr	r1, [r1, #16]
 8015400:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015404:	eba3 0901 	sub.w	r9, r3, r1
 8015408:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801540c:	1c7b      	adds	r3, r7, #1
 801540e:	444b      	add	r3, r9
 8015410:	106d      	asrs	r5, r5, #1
 8015412:	429d      	cmp	r5, r3
 8015414:	bf38      	it	cc
 8015416:	461d      	movcc	r5, r3
 8015418:	0553      	lsls	r3, r2, #21
 801541a:	d527      	bpl.n	801546c <__ssputs_r+0x8c>
 801541c:	4629      	mov	r1, r5
 801541e:	f7ff fddd 	bl	8014fdc <_malloc_r>
 8015422:	4606      	mov	r6, r0
 8015424:	b360      	cbz	r0, 8015480 <__ssputs_r+0xa0>
 8015426:	6921      	ldr	r1, [r4, #16]
 8015428:	464a      	mov	r2, r9
 801542a:	f7ff ff7f 	bl	801532c <memcpy>
 801542e:	89a3      	ldrh	r3, [r4, #12]
 8015430:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8015434:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8015438:	81a3      	strh	r3, [r4, #12]
 801543a:	6126      	str	r6, [r4, #16]
 801543c:	6165      	str	r5, [r4, #20]
 801543e:	444e      	add	r6, r9
 8015440:	eba5 0509 	sub.w	r5, r5, r9
 8015444:	6026      	str	r6, [r4, #0]
 8015446:	60a5      	str	r5, [r4, #8]
 8015448:	463e      	mov	r6, r7
 801544a:	42be      	cmp	r6, r7
 801544c:	d900      	bls.n	8015450 <__ssputs_r+0x70>
 801544e:	463e      	mov	r6, r7
 8015450:	6820      	ldr	r0, [r4, #0]
 8015452:	4632      	mov	r2, r6
 8015454:	4641      	mov	r1, r8
 8015456:	f7ff febf 	bl	80151d8 <memmove>
 801545a:	68a3      	ldr	r3, [r4, #8]
 801545c:	1b9b      	subs	r3, r3, r6
 801545e:	60a3      	str	r3, [r4, #8]
 8015460:	6823      	ldr	r3, [r4, #0]
 8015462:	4433      	add	r3, r6
 8015464:	6023      	str	r3, [r4, #0]
 8015466:	2000      	movs	r0, #0
 8015468:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801546c:	462a      	mov	r2, r5
 801546e:	f000 fa9f 	bl	80159b0 <_realloc_r>
 8015472:	4606      	mov	r6, r0
 8015474:	2800      	cmp	r0, #0
 8015476:	d1e0      	bne.n	801543a <__ssputs_r+0x5a>
 8015478:	6921      	ldr	r1, [r4, #16]
 801547a:	4650      	mov	r0, sl
 801547c:	f7ff ff64 	bl	8015348 <_free_r>
 8015480:	230c      	movs	r3, #12
 8015482:	f8ca 3000 	str.w	r3, [sl]
 8015486:	89a3      	ldrh	r3, [r4, #12]
 8015488:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801548c:	81a3      	strh	r3, [r4, #12]
 801548e:	f04f 30ff 	mov.w	r0, #4294967295
 8015492:	e7e9      	b.n	8015468 <__ssputs_r+0x88>

08015494 <_svfiprintf_r>:
 8015494:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015498:	4698      	mov	r8, r3
 801549a:	898b      	ldrh	r3, [r1, #12]
 801549c:	061b      	lsls	r3, r3, #24
 801549e:	b09d      	sub	sp, #116	; 0x74
 80154a0:	4607      	mov	r7, r0
 80154a2:	460d      	mov	r5, r1
 80154a4:	4614      	mov	r4, r2
 80154a6:	d50e      	bpl.n	80154c6 <_svfiprintf_r+0x32>
 80154a8:	690b      	ldr	r3, [r1, #16]
 80154aa:	b963      	cbnz	r3, 80154c6 <_svfiprintf_r+0x32>
 80154ac:	2140      	movs	r1, #64	; 0x40
 80154ae:	f7ff fd95 	bl	8014fdc <_malloc_r>
 80154b2:	6028      	str	r0, [r5, #0]
 80154b4:	6128      	str	r0, [r5, #16]
 80154b6:	b920      	cbnz	r0, 80154c2 <_svfiprintf_r+0x2e>
 80154b8:	230c      	movs	r3, #12
 80154ba:	603b      	str	r3, [r7, #0]
 80154bc:	f04f 30ff 	mov.w	r0, #4294967295
 80154c0:	e0d0      	b.n	8015664 <_svfiprintf_r+0x1d0>
 80154c2:	2340      	movs	r3, #64	; 0x40
 80154c4:	616b      	str	r3, [r5, #20]
 80154c6:	2300      	movs	r3, #0
 80154c8:	9309      	str	r3, [sp, #36]	; 0x24
 80154ca:	2320      	movs	r3, #32
 80154cc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80154d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80154d4:	2330      	movs	r3, #48	; 0x30
 80154d6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 801567c <_svfiprintf_r+0x1e8>
 80154da:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80154de:	f04f 0901 	mov.w	r9, #1
 80154e2:	4623      	mov	r3, r4
 80154e4:	469a      	mov	sl, r3
 80154e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80154ea:	b10a      	cbz	r2, 80154f0 <_svfiprintf_r+0x5c>
 80154ec:	2a25      	cmp	r2, #37	; 0x25
 80154ee:	d1f9      	bne.n	80154e4 <_svfiprintf_r+0x50>
 80154f0:	ebba 0b04 	subs.w	fp, sl, r4
 80154f4:	d00b      	beq.n	801550e <_svfiprintf_r+0x7a>
 80154f6:	465b      	mov	r3, fp
 80154f8:	4622      	mov	r2, r4
 80154fa:	4629      	mov	r1, r5
 80154fc:	4638      	mov	r0, r7
 80154fe:	f7ff ff6f 	bl	80153e0 <__ssputs_r>
 8015502:	3001      	adds	r0, #1
 8015504:	f000 80a9 	beq.w	801565a <_svfiprintf_r+0x1c6>
 8015508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801550a:	445a      	add	r2, fp
 801550c:	9209      	str	r2, [sp, #36]	; 0x24
 801550e:	f89a 3000 	ldrb.w	r3, [sl]
 8015512:	2b00      	cmp	r3, #0
 8015514:	f000 80a1 	beq.w	801565a <_svfiprintf_r+0x1c6>
 8015518:	2300      	movs	r3, #0
 801551a:	f04f 32ff 	mov.w	r2, #4294967295
 801551e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8015522:	f10a 0a01 	add.w	sl, sl, #1
 8015526:	9304      	str	r3, [sp, #16]
 8015528:	9307      	str	r3, [sp, #28]
 801552a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801552e:	931a      	str	r3, [sp, #104]	; 0x68
 8015530:	4654      	mov	r4, sl
 8015532:	2205      	movs	r2, #5
 8015534:	f814 1b01 	ldrb.w	r1, [r4], #1
 8015538:	4850      	ldr	r0, [pc, #320]	; (801567c <_svfiprintf_r+0x1e8>)
 801553a:	f7ea fe69 	bl	8000210 <memchr>
 801553e:	9a04      	ldr	r2, [sp, #16]
 8015540:	b9d8      	cbnz	r0, 801557a <_svfiprintf_r+0xe6>
 8015542:	06d0      	lsls	r0, r2, #27
 8015544:	bf44      	itt	mi
 8015546:	2320      	movmi	r3, #32
 8015548:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801554c:	0711      	lsls	r1, r2, #28
 801554e:	bf44      	itt	mi
 8015550:	232b      	movmi	r3, #43	; 0x2b
 8015552:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8015556:	f89a 3000 	ldrb.w	r3, [sl]
 801555a:	2b2a      	cmp	r3, #42	; 0x2a
 801555c:	d015      	beq.n	801558a <_svfiprintf_r+0xf6>
 801555e:	9a07      	ldr	r2, [sp, #28]
 8015560:	4654      	mov	r4, sl
 8015562:	2000      	movs	r0, #0
 8015564:	f04f 0c0a 	mov.w	ip, #10
 8015568:	4621      	mov	r1, r4
 801556a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801556e:	3b30      	subs	r3, #48	; 0x30
 8015570:	2b09      	cmp	r3, #9
 8015572:	d94d      	bls.n	8015610 <_svfiprintf_r+0x17c>
 8015574:	b1b0      	cbz	r0, 80155a4 <_svfiprintf_r+0x110>
 8015576:	9207      	str	r2, [sp, #28]
 8015578:	e014      	b.n	80155a4 <_svfiprintf_r+0x110>
 801557a:	eba0 0308 	sub.w	r3, r0, r8
 801557e:	fa09 f303 	lsl.w	r3, r9, r3
 8015582:	4313      	orrs	r3, r2
 8015584:	9304      	str	r3, [sp, #16]
 8015586:	46a2      	mov	sl, r4
 8015588:	e7d2      	b.n	8015530 <_svfiprintf_r+0x9c>
 801558a:	9b03      	ldr	r3, [sp, #12]
 801558c:	1d19      	adds	r1, r3, #4
 801558e:	681b      	ldr	r3, [r3, #0]
 8015590:	9103      	str	r1, [sp, #12]
 8015592:	2b00      	cmp	r3, #0
 8015594:	bfbb      	ittet	lt
 8015596:	425b      	neglt	r3, r3
 8015598:	f042 0202 	orrlt.w	r2, r2, #2
 801559c:	9307      	strge	r3, [sp, #28]
 801559e:	9307      	strlt	r3, [sp, #28]
 80155a0:	bfb8      	it	lt
 80155a2:	9204      	strlt	r2, [sp, #16]
 80155a4:	7823      	ldrb	r3, [r4, #0]
 80155a6:	2b2e      	cmp	r3, #46	; 0x2e
 80155a8:	d10c      	bne.n	80155c4 <_svfiprintf_r+0x130>
 80155aa:	7863      	ldrb	r3, [r4, #1]
 80155ac:	2b2a      	cmp	r3, #42	; 0x2a
 80155ae:	d134      	bne.n	801561a <_svfiprintf_r+0x186>
 80155b0:	9b03      	ldr	r3, [sp, #12]
 80155b2:	1d1a      	adds	r2, r3, #4
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	9203      	str	r2, [sp, #12]
 80155b8:	2b00      	cmp	r3, #0
 80155ba:	bfb8      	it	lt
 80155bc:	f04f 33ff 	movlt.w	r3, #4294967295
 80155c0:	3402      	adds	r4, #2
 80155c2:	9305      	str	r3, [sp, #20]
 80155c4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 801568c <_svfiprintf_r+0x1f8>
 80155c8:	7821      	ldrb	r1, [r4, #0]
 80155ca:	2203      	movs	r2, #3
 80155cc:	4650      	mov	r0, sl
 80155ce:	f7ea fe1f 	bl	8000210 <memchr>
 80155d2:	b138      	cbz	r0, 80155e4 <_svfiprintf_r+0x150>
 80155d4:	9b04      	ldr	r3, [sp, #16]
 80155d6:	eba0 000a 	sub.w	r0, r0, sl
 80155da:	2240      	movs	r2, #64	; 0x40
 80155dc:	4082      	lsls	r2, r0
 80155de:	4313      	orrs	r3, r2
 80155e0:	3401      	adds	r4, #1
 80155e2:	9304      	str	r3, [sp, #16]
 80155e4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80155e8:	4825      	ldr	r0, [pc, #148]	; (8015680 <_svfiprintf_r+0x1ec>)
 80155ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80155ee:	2206      	movs	r2, #6
 80155f0:	f7ea fe0e 	bl	8000210 <memchr>
 80155f4:	2800      	cmp	r0, #0
 80155f6:	d038      	beq.n	801566a <_svfiprintf_r+0x1d6>
 80155f8:	4b22      	ldr	r3, [pc, #136]	; (8015684 <_svfiprintf_r+0x1f0>)
 80155fa:	bb1b      	cbnz	r3, 8015644 <_svfiprintf_r+0x1b0>
 80155fc:	9b03      	ldr	r3, [sp, #12]
 80155fe:	3307      	adds	r3, #7
 8015600:	f023 0307 	bic.w	r3, r3, #7
 8015604:	3308      	adds	r3, #8
 8015606:	9303      	str	r3, [sp, #12]
 8015608:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801560a:	4433      	add	r3, r6
 801560c:	9309      	str	r3, [sp, #36]	; 0x24
 801560e:	e768      	b.n	80154e2 <_svfiprintf_r+0x4e>
 8015610:	fb0c 3202 	mla	r2, ip, r2, r3
 8015614:	460c      	mov	r4, r1
 8015616:	2001      	movs	r0, #1
 8015618:	e7a6      	b.n	8015568 <_svfiprintf_r+0xd4>
 801561a:	2300      	movs	r3, #0
 801561c:	3401      	adds	r4, #1
 801561e:	9305      	str	r3, [sp, #20]
 8015620:	4619      	mov	r1, r3
 8015622:	f04f 0c0a 	mov.w	ip, #10
 8015626:	4620      	mov	r0, r4
 8015628:	f810 2b01 	ldrb.w	r2, [r0], #1
 801562c:	3a30      	subs	r2, #48	; 0x30
 801562e:	2a09      	cmp	r2, #9
 8015630:	d903      	bls.n	801563a <_svfiprintf_r+0x1a6>
 8015632:	2b00      	cmp	r3, #0
 8015634:	d0c6      	beq.n	80155c4 <_svfiprintf_r+0x130>
 8015636:	9105      	str	r1, [sp, #20]
 8015638:	e7c4      	b.n	80155c4 <_svfiprintf_r+0x130>
 801563a:	fb0c 2101 	mla	r1, ip, r1, r2
 801563e:	4604      	mov	r4, r0
 8015640:	2301      	movs	r3, #1
 8015642:	e7f0      	b.n	8015626 <_svfiprintf_r+0x192>
 8015644:	ab03      	add	r3, sp, #12
 8015646:	9300      	str	r3, [sp, #0]
 8015648:	462a      	mov	r2, r5
 801564a:	4b0f      	ldr	r3, [pc, #60]	; (8015688 <_svfiprintf_r+0x1f4>)
 801564c:	a904      	add	r1, sp, #16
 801564e:	4638      	mov	r0, r7
 8015650:	f3af 8000 	nop.w
 8015654:	1c42      	adds	r2, r0, #1
 8015656:	4606      	mov	r6, r0
 8015658:	d1d6      	bne.n	8015608 <_svfiprintf_r+0x174>
 801565a:	89ab      	ldrh	r3, [r5, #12]
 801565c:	065b      	lsls	r3, r3, #25
 801565e:	f53f af2d 	bmi.w	80154bc <_svfiprintf_r+0x28>
 8015662:	9809      	ldr	r0, [sp, #36]	; 0x24
 8015664:	b01d      	add	sp, #116	; 0x74
 8015666:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801566a:	ab03      	add	r3, sp, #12
 801566c:	9300      	str	r3, [sp, #0]
 801566e:	462a      	mov	r2, r5
 8015670:	4b05      	ldr	r3, [pc, #20]	; (8015688 <_svfiprintf_r+0x1f4>)
 8015672:	a904      	add	r1, sp, #16
 8015674:	4638      	mov	r0, r7
 8015676:	f000 f879 	bl	801576c <_printf_i>
 801567a:	e7eb      	b.n	8015654 <_svfiprintf_r+0x1c0>
 801567c:	080172d5 	.word	0x080172d5
 8015680:	080172df 	.word	0x080172df
 8015684:	00000000 	.word	0x00000000
 8015688:	080153e1 	.word	0x080153e1
 801568c:	080172db 	.word	0x080172db

08015690 <_printf_common>:
 8015690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015694:	4616      	mov	r6, r2
 8015696:	4699      	mov	r9, r3
 8015698:	688a      	ldr	r2, [r1, #8]
 801569a:	690b      	ldr	r3, [r1, #16]
 801569c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80156a0:	4293      	cmp	r3, r2
 80156a2:	bfb8      	it	lt
 80156a4:	4613      	movlt	r3, r2
 80156a6:	6033      	str	r3, [r6, #0]
 80156a8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80156ac:	4607      	mov	r7, r0
 80156ae:	460c      	mov	r4, r1
 80156b0:	b10a      	cbz	r2, 80156b6 <_printf_common+0x26>
 80156b2:	3301      	adds	r3, #1
 80156b4:	6033      	str	r3, [r6, #0]
 80156b6:	6823      	ldr	r3, [r4, #0]
 80156b8:	0699      	lsls	r1, r3, #26
 80156ba:	bf42      	ittt	mi
 80156bc:	6833      	ldrmi	r3, [r6, #0]
 80156be:	3302      	addmi	r3, #2
 80156c0:	6033      	strmi	r3, [r6, #0]
 80156c2:	6825      	ldr	r5, [r4, #0]
 80156c4:	f015 0506 	ands.w	r5, r5, #6
 80156c8:	d106      	bne.n	80156d8 <_printf_common+0x48>
 80156ca:	f104 0a19 	add.w	sl, r4, #25
 80156ce:	68e3      	ldr	r3, [r4, #12]
 80156d0:	6832      	ldr	r2, [r6, #0]
 80156d2:	1a9b      	subs	r3, r3, r2
 80156d4:	42ab      	cmp	r3, r5
 80156d6:	dc26      	bgt.n	8015726 <_printf_common+0x96>
 80156d8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80156dc:	1e13      	subs	r3, r2, #0
 80156de:	6822      	ldr	r2, [r4, #0]
 80156e0:	bf18      	it	ne
 80156e2:	2301      	movne	r3, #1
 80156e4:	0692      	lsls	r2, r2, #26
 80156e6:	d42b      	bmi.n	8015740 <_printf_common+0xb0>
 80156e8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80156ec:	4649      	mov	r1, r9
 80156ee:	4638      	mov	r0, r7
 80156f0:	47c0      	blx	r8
 80156f2:	3001      	adds	r0, #1
 80156f4:	d01e      	beq.n	8015734 <_printf_common+0xa4>
 80156f6:	6823      	ldr	r3, [r4, #0]
 80156f8:	6922      	ldr	r2, [r4, #16]
 80156fa:	f003 0306 	and.w	r3, r3, #6
 80156fe:	2b04      	cmp	r3, #4
 8015700:	bf02      	ittt	eq
 8015702:	68e5      	ldreq	r5, [r4, #12]
 8015704:	6833      	ldreq	r3, [r6, #0]
 8015706:	1aed      	subeq	r5, r5, r3
 8015708:	68a3      	ldr	r3, [r4, #8]
 801570a:	bf0c      	ite	eq
 801570c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8015710:	2500      	movne	r5, #0
 8015712:	4293      	cmp	r3, r2
 8015714:	bfc4      	itt	gt
 8015716:	1a9b      	subgt	r3, r3, r2
 8015718:	18ed      	addgt	r5, r5, r3
 801571a:	2600      	movs	r6, #0
 801571c:	341a      	adds	r4, #26
 801571e:	42b5      	cmp	r5, r6
 8015720:	d11a      	bne.n	8015758 <_printf_common+0xc8>
 8015722:	2000      	movs	r0, #0
 8015724:	e008      	b.n	8015738 <_printf_common+0xa8>
 8015726:	2301      	movs	r3, #1
 8015728:	4652      	mov	r2, sl
 801572a:	4649      	mov	r1, r9
 801572c:	4638      	mov	r0, r7
 801572e:	47c0      	blx	r8
 8015730:	3001      	adds	r0, #1
 8015732:	d103      	bne.n	801573c <_printf_common+0xac>
 8015734:	f04f 30ff 	mov.w	r0, #4294967295
 8015738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801573c:	3501      	adds	r5, #1
 801573e:	e7c6      	b.n	80156ce <_printf_common+0x3e>
 8015740:	18e1      	adds	r1, r4, r3
 8015742:	1c5a      	adds	r2, r3, #1
 8015744:	2030      	movs	r0, #48	; 0x30
 8015746:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801574a:	4422      	add	r2, r4
 801574c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8015750:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8015754:	3302      	adds	r3, #2
 8015756:	e7c7      	b.n	80156e8 <_printf_common+0x58>
 8015758:	2301      	movs	r3, #1
 801575a:	4622      	mov	r2, r4
 801575c:	4649      	mov	r1, r9
 801575e:	4638      	mov	r0, r7
 8015760:	47c0      	blx	r8
 8015762:	3001      	adds	r0, #1
 8015764:	d0e6      	beq.n	8015734 <_printf_common+0xa4>
 8015766:	3601      	adds	r6, #1
 8015768:	e7d9      	b.n	801571e <_printf_common+0x8e>
	...

0801576c <_printf_i>:
 801576c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8015770:	7e0f      	ldrb	r7, [r1, #24]
 8015772:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8015774:	2f78      	cmp	r7, #120	; 0x78
 8015776:	4691      	mov	r9, r2
 8015778:	4680      	mov	r8, r0
 801577a:	460c      	mov	r4, r1
 801577c:	469a      	mov	sl, r3
 801577e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8015782:	d807      	bhi.n	8015794 <_printf_i+0x28>
 8015784:	2f62      	cmp	r7, #98	; 0x62
 8015786:	d80a      	bhi.n	801579e <_printf_i+0x32>
 8015788:	2f00      	cmp	r7, #0
 801578a:	f000 80d4 	beq.w	8015936 <_printf_i+0x1ca>
 801578e:	2f58      	cmp	r7, #88	; 0x58
 8015790:	f000 80c0 	beq.w	8015914 <_printf_i+0x1a8>
 8015794:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015798:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801579c:	e03a      	b.n	8015814 <_printf_i+0xa8>
 801579e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80157a2:	2b15      	cmp	r3, #21
 80157a4:	d8f6      	bhi.n	8015794 <_printf_i+0x28>
 80157a6:	a101      	add	r1, pc, #4	; (adr r1, 80157ac <_printf_i+0x40>)
 80157a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80157ac:	08015805 	.word	0x08015805
 80157b0:	08015819 	.word	0x08015819
 80157b4:	08015795 	.word	0x08015795
 80157b8:	08015795 	.word	0x08015795
 80157bc:	08015795 	.word	0x08015795
 80157c0:	08015795 	.word	0x08015795
 80157c4:	08015819 	.word	0x08015819
 80157c8:	08015795 	.word	0x08015795
 80157cc:	08015795 	.word	0x08015795
 80157d0:	08015795 	.word	0x08015795
 80157d4:	08015795 	.word	0x08015795
 80157d8:	0801591d 	.word	0x0801591d
 80157dc:	08015845 	.word	0x08015845
 80157e0:	080158d7 	.word	0x080158d7
 80157e4:	08015795 	.word	0x08015795
 80157e8:	08015795 	.word	0x08015795
 80157ec:	0801593f 	.word	0x0801593f
 80157f0:	08015795 	.word	0x08015795
 80157f4:	08015845 	.word	0x08015845
 80157f8:	08015795 	.word	0x08015795
 80157fc:	08015795 	.word	0x08015795
 8015800:	080158df 	.word	0x080158df
 8015804:	682b      	ldr	r3, [r5, #0]
 8015806:	1d1a      	adds	r2, r3, #4
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	602a      	str	r2, [r5, #0]
 801580c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8015810:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8015814:	2301      	movs	r3, #1
 8015816:	e09f      	b.n	8015958 <_printf_i+0x1ec>
 8015818:	6820      	ldr	r0, [r4, #0]
 801581a:	682b      	ldr	r3, [r5, #0]
 801581c:	0607      	lsls	r7, r0, #24
 801581e:	f103 0104 	add.w	r1, r3, #4
 8015822:	6029      	str	r1, [r5, #0]
 8015824:	d501      	bpl.n	801582a <_printf_i+0xbe>
 8015826:	681e      	ldr	r6, [r3, #0]
 8015828:	e003      	b.n	8015832 <_printf_i+0xc6>
 801582a:	0646      	lsls	r6, r0, #25
 801582c:	d5fb      	bpl.n	8015826 <_printf_i+0xba>
 801582e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8015832:	2e00      	cmp	r6, #0
 8015834:	da03      	bge.n	801583e <_printf_i+0xd2>
 8015836:	232d      	movs	r3, #45	; 0x2d
 8015838:	4276      	negs	r6, r6
 801583a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801583e:	485a      	ldr	r0, [pc, #360]	; (80159a8 <_printf_i+0x23c>)
 8015840:	230a      	movs	r3, #10
 8015842:	e012      	b.n	801586a <_printf_i+0xfe>
 8015844:	682b      	ldr	r3, [r5, #0]
 8015846:	6820      	ldr	r0, [r4, #0]
 8015848:	1d19      	adds	r1, r3, #4
 801584a:	6029      	str	r1, [r5, #0]
 801584c:	0605      	lsls	r5, r0, #24
 801584e:	d501      	bpl.n	8015854 <_printf_i+0xe8>
 8015850:	681e      	ldr	r6, [r3, #0]
 8015852:	e002      	b.n	801585a <_printf_i+0xee>
 8015854:	0641      	lsls	r1, r0, #25
 8015856:	d5fb      	bpl.n	8015850 <_printf_i+0xe4>
 8015858:	881e      	ldrh	r6, [r3, #0]
 801585a:	4853      	ldr	r0, [pc, #332]	; (80159a8 <_printf_i+0x23c>)
 801585c:	2f6f      	cmp	r7, #111	; 0x6f
 801585e:	bf0c      	ite	eq
 8015860:	2308      	moveq	r3, #8
 8015862:	230a      	movne	r3, #10
 8015864:	2100      	movs	r1, #0
 8015866:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801586a:	6865      	ldr	r5, [r4, #4]
 801586c:	60a5      	str	r5, [r4, #8]
 801586e:	2d00      	cmp	r5, #0
 8015870:	bfa2      	ittt	ge
 8015872:	6821      	ldrge	r1, [r4, #0]
 8015874:	f021 0104 	bicge.w	r1, r1, #4
 8015878:	6021      	strge	r1, [r4, #0]
 801587a:	b90e      	cbnz	r6, 8015880 <_printf_i+0x114>
 801587c:	2d00      	cmp	r5, #0
 801587e:	d04b      	beq.n	8015918 <_printf_i+0x1ac>
 8015880:	4615      	mov	r5, r2
 8015882:	fbb6 f1f3 	udiv	r1, r6, r3
 8015886:	fb03 6711 	mls	r7, r3, r1, r6
 801588a:	5dc7      	ldrb	r7, [r0, r7]
 801588c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8015890:	4637      	mov	r7, r6
 8015892:	42bb      	cmp	r3, r7
 8015894:	460e      	mov	r6, r1
 8015896:	d9f4      	bls.n	8015882 <_printf_i+0x116>
 8015898:	2b08      	cmp	r3, #8
 801589a:	d10b      	bne.n	80158b4 <_printf_i+0x148>
 801589c:	6823      	ldr	r3, [r4, #0]
 801589e:	07de      	lsls	r6, r3, #31
 80158a0:	d508      	bpl.n	80158b4 <_printf_i+0x148>
 80158a2:	6923      	ldr	r3, [r4, #16]
 80158a4:	6861      	ldr	r1, [r4, #4]
 80158a6:	4299      	cmp	r1, r3
 80158a8:	bfde      	ittt	le
 80158aa:	2330      	movle	r3, #48	; 0x30
 80158ac:	f805 3c01 	strble.w	r3, [r5, #-1]
 80158b0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80158b4:	1b52      	subs	r2, r2, r5
 80158b6:	6122      	str	r2, [r4, #16]
 80158b8:	f8cd a000 	str.w	sl, [sp]
 80158bc:	464b      	mov	r3, r9
 80158be:	aa03      	add	r2, sp, #12
 80158c0:	4621      	mov	r1, r4
 80158c2:	4640      	mov	r0, r8
 80158c4:	f7ff fee4 	bl	8015690 <_printf_common>
 80158c8:	3001      	adds	r0, #1
 80158ca:	d14a      	bne.n	8015962 <_printf_i+0x1f6>
 80158cc:	f04f 30ff 	mov.w	r0, #4294967295
 80158d0:	b004      	add	sp, #16
 80158d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80158d6:	6823      	ldr	r3, [r4, #0]
 80158d8:	f043 0320 	orr.w	r3, r3, #32
 80158dc:	6023      	str	r3, [r4, #0]
 80158de:	4833      	ldr	r0, [pc, #204]	; (80159ac <_printf_i+0x240>)
 80158e0:	2778      	movs	r7, #120	; 0x78
 80158e2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80158e6:	6823      	ldr	r3, [r4, #0]
 80158e8:	6829      	ldr	r1, [r5, #0]
 80158ea:	061f      	lsls	r7, r3, #24
 80158ec:	f851 6b04 	ldr.w	r6, [r1], #4
 80158f0:	d402      	bmi.n	80158f8 <_printf_i+0x18c>
 80158f2:	065f      	lsls	r7, r3, #25
 80158f4:	bf48      	it	mi
 80158f6:	b2b6      	uxthmi	r6, r6
 80158f8:	07df      	lsls	r7, r3, #31
 80158fa:	bf48      	it	mi
 80158fc:	f043 0320 	orrmi.w	r3, r3, #32
 8015900:	6029      	str	r1, [r5, #0]
 8015902:	bf48      	it	mi
 8015904:	6023      	strmi	r3, [r4, #0]
 8015906:	b91e      	cbnz	r6, 8015910 <_printf_i+0x1a4>
 8015908:	6823      	ldr	r3, [r4, #0]
 801590a:	f023 0320 	bic.w	r3, r3, #32
 801590e:	6023      	str	r3, [r4, #0]
 8015910:	2310      	movs	r3, #16
 8015912:	e7a7      	b.n	8015864 <_printf_i+0xf8>
 8015914:	4824      	ldr	r0, [pc, #144]	; (80159a8 <_printf_i+0x23c>)
 8015916:	e7e4      	b.n	80158e2 <_printf_i+0x176>
 8015918:	4615      	mov	r5, r2
 801591a:	e7bd      	b.n	8015898 <_printf_i+0x12c>
 801591c:	682b      	ldr	r3, [r5, #0]
 801591e:	6826      	ldr	r6, [r4, #0]
 8015920:	6961      	ldr	r1, [r4, #20]
 8015922:	1d18      	adds	r0, r3, #4
 8015924:	6028      	str	r0, [r5, #0]
 8015926:	0635      	lsls	r5, r6, #24
 8015928:	681b      	ldr	r3, [r3, #0]
 801592a:	d501      	bpl.n	8015930 <_printf_i+0x1c4>
 801592c:	6019      	str	r1, [r3, #0]
 801592e:	e002      	b.n	8015936 <_printf_i+0x1ca>
 8015930:	0670      	lsls	r0, r6, #25
 8015932:	d5fb      	bpl.n	801592c <_printf_i+0x1c0>
 8015934:	8019      	strh	r1, [r3, #0]
 8015936:	2300      	movs	r3, #0
 8015938:	6123      	str	r3, [r4, #16]
 801593a:	4615      	mov	r5, r2
 801593c:	e7bc      	b.n	80158b8 <_printf_i+0x14c>
 801593e:	682b      	ldr	r3, [r5, #0]
 8015940:	1d1a      	adds	r2, r3, #4
 8015942:	602a      	str	r2, [r5, #0]
 8015944:	681d      	ldr	r5, [r3, #0]
 8015946:	6862      	ldr	r2, [r4, #4]
 8015948:	2100      	movs	r1, #0
 801594a:	4628      	mov	r0, r5
 801594c:	f7ea fc60 	bl	8000210 <memchr>
 8015950:	b108      	cbz	r0, 8015956 <_printf_i+0x1ea>
 8015952:	1b40      	subs	r0, r0, r5
 8015954:	6060      	str	r0, [r4, #4]
 8015956:	6863      	ldr	r3, [r4, #4]
 8015958:	6123      	str	r3, [r4, #16]
 801595a:	2300      	movs	r3, #0
 801595c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8015960:	e7aa      	b.n	80158b8 <_printf_i+0x14c>
 8015962:	6923      	ldr	r3, [r4, #16]
 8015964:	462a      	mov	r2, r5
 8015966:	4649      	mov	r1, r9
 8015968:	4640      	mov	r0, r8
 801596a:	47d0      	blx	sl
 801596c:	3001      	adds	r0, #1
 801596e:	d0ad      	beq.n	80158cc <_printf_i+0x160>
 8015970:	6823      	ldr	r3, [r4, #0]
 8015972:	079b      	lsls	r3, r3, #30
 8015974:	d413      	bmi.n	801599e <_printf_i+0x232>
 8015976:	68e0      	ldr	r0, [r4, #12]
 8015978:	9b03      	ldr	r3, [sp, #12]
 801597a:	4298      	cmp	r0, r3
 801597c:	bfb8      	it	lt
 801597e:	4618      	movlt	r0, r3
 8015980:	e7a6      	b.n	80158d0 <_printf_i+0x164>
 8015982:	2301      	movs	r3, #1
 8015984:	4632      	mov	r2, r6
 8015986:	4649      	mov	r1, r9
 8015988:	4640      	mov	r0, r8
 801598a:	47d0      	blx	sl
 801598c:	3001      	adds	r0, #1
 801598e:	d09d      	beq.n	80158cc <_printf_i+0x160>
 8015990:	3501      	adds	r5, #1
 8015992:	68e3      	ldr	r3, [r4, #12]
 8015994:	9903      	ldr	r1, [sp, #12]
 8015996:	1a5b      	subs	r3, r3, r1
 8015998:	42ab      	cmp	r3, r5
 801599a:	dcf2      	bgt.n	8015982 <_printf_i+0x216>
 801599c:	e7eb      	b.n	8015976 <_printf_i+0x20a>
 801599e:	2500      	movs	r5, #0
 80159a0:	f104 0619 	add.w	r6, r4, #25
 80159a4:	e7f5      	b.n	8015992 <_printf_i+0x226>
 80159a6:	bf00      	nop
 80159a8:	080172e6 	.word	0x080172e6
 80159ac:	080172f7 	.word	0x080172f7

080159b0 <_realloc_r>:
 80159b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80159b4:	4680      	mov	r8, r0
 80159b6:	4614      	mov	r4, r2
 80159b8:	460e      	mov	r6, r1
 80159ba:	b921      	cbnz	r1, 80159c6 <_realloc_r+0x16>
 80159bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80159c0:	4611      	mov	r1, r2
 80159c2:	f7ff bb0b 	b.w	8014fdc <_malloc_r>
 80159c6:	b92a      	cbnz	r2, 80159d4 <_realloc_r+0x24>
 80159c8:	f7ff fcbe 	bl	8015348 <_free_r>
 80159cc:	4625      	mov	r5, r4
 80159ce:	4628      	mov	r0, r5
 80159d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80159d4:	f000 f81b 	bl	8015a0e <_malloc_usable_size_r>
 80159d8:	4284      	cmp	r4, r0
 80159da:	4607      	mov	r7, r0
 80159dc:	d802      	bhi.n	80159e4 <_realloc_r+0x34>
 80159de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80159e2:	d812      	bhi.n	8015a0a <_realloc_r+0x5a>
 80159e4:	4621      	mov	r1, r4
 80159e6:	4640      	mov	r0, r8
 80159e8:	f7ff faf8 	bl	8014fdc <_malloc_r>
 80159ec:	4605      	mov	r5, r0
 80159ee:	2800      	cmp	r0, #0
 80159f0:	d0ed      	beq.n	80159ce <_realloc_r+0x1e>
 80159f2:	42bc      	cmp	r4, r7
 80159f4:	4622      	mov	r2, r4
 80159f6:	4631      	mov	r1, r6
 80159f8:	bf28      	it	cs
 80159fa:	463a      	movcs	r2, r7
 80159fc:	f7ff fc96 	bl	801532c <memcpy>
 8015a00:	4631      	mov	r1, r6
 8015a02:	4640      	mov	r0, r8
 8015a04:	f7ff fca0 	bl	8015348 <_free_r>
 8015a08:	e7e1      	b.n	80159ce <_realloc_r+0x1e>
 8015a0a:	4635      	mov	r5, r6
 8015a0c:	e7df      	b.n	80159ce <_realloc_r+0x1e>

08015a0e <_malloc_usable_size_r>:
 8015a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8015a12:	1f18      	subs	r0, r3, #4
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	bfbc      	itt	lt
 8015a18:	580b      	ldrlt	r3, [r1, r0]
 8015a1a:	18c0      	addlt	r0, r0, r3
 8015a1c:	4770      	bx	lr
	...

08015a20 <_init>:
 8015a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a22:	bf00      	nop
 8015a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a26:	bc08      	pop	{r3}
 8015a28:	469e      	mov	lr, r3
 8015a2a:	4770      	bx	lr

08015a2c <_fini>:
 8015a2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8015a2e:	bf00      	nop
 8015a30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015a32:	bc08      	pop	{r3}
 8015a34:	469e      	mov	lr, r3
 8015a36:	4770      	bx	lr
