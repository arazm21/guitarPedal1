
guitarPedal2Threads.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000076a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000013fc  08007870  08007870  00017870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008c6c  08008c6c  0002001c  2**0
                  CONTENTS
  4 .ARM          00000008  08008c6c  08008c6c  00018c6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008c74  08008c74  0002001c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008c74  08008c74  00018c74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008c78  08008c78  00018c78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000001c  20000000  08008c7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eb4  2000001c  08008c98  0002001c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004ed0  08008c98  00024ed0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002001c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002004c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001befb  00000000  00000000  0002008f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ba9  00000000  00000000  0003bf8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  0003fb38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001316  00000000  00000000  000413a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000470d  00000000  00000000  000426b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cab8  00000000  00000000  00046dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000deb1e  00000000  00000000  0006387b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000685c  00000000  00000000  0014239c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00148bf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000001c 	.word	0x2000001c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007858 	.word	0x08007858

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000020 	.word	0x20000020
 800020c:	08007858 	.word	0x08007858

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HAL_GPIO_EXTI_Callback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int totalNum=10;
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b084      	sub	sp, #16
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(GPIO_Pin==interruptButton_Pin){
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	2b40      	cmp	r3, #64	; 0x40
 800051a:	d11d      	bne.n	8000558 <HAL_GPIO_EXTI_Callback+0x4c>
	  modeNum++;
 800051c:	4b30      	ldr	r3, [pc, #192]	; (80005e0 <HAL_GPIO_EXTI_Callback+0xd4>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b2e      	ldr	r3, [pc, #184]	; (80005e0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000526:	701a      	strb	r2, [r3, #0]
	  if(modeNum>1)modeNum=0;
 8000528:	4b2d      	ldr	r3, [pc, #180]	; (80005e0 <HAL_GPIO_EXTI_Callback+0xd4>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d902      	bls.n	8000536 <HAL_GPIO_EXTI_Callback+0x2a>
 8000530:	4b2b      	ldr	r3, [pc, #172]	; (80005e0 <HAL_GPIO_EXTI_Callback+0xd4>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_TogglePin(interruptLED_GPIO_Port, interruptLED_Pin);
 8000536:	f44f 7100 	mov.w	r1, #512	; 0x200
 800053a:	482a      	ldr	r0, [pc, #168]	; (80005e4 <HAL_GPIO_EXTI_Callback+0xd8>)
 800053c:	f001 fa3b 	bl	80019b6 <HAL_GPIO_TogglePin>
      xSemaphoreGiveFromISR(screenChangeSem, NULL); // Give semaphore from interrupt
 8000540:	4b29      	ldr	r3, [pc, #164]	; (80005e8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	2100      	movs	r1, #0
 8000546:	4618      	mov	r0, r3
 8000548:	f004 fd6f 	bl	800502a <xQueueGiveFromISR>
      totalNum++;
 800054c:	4b27      	ldr	r3, [pc, #156]	; (80005ec <HAL_GPIO_EXTI_Callback+0xe0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	3301      	adds	r3, #1
 8000552:	4a26      	ldr	r2, [pc, #152]	; (80005ec <HAL_GPIO_EXTI_Callback+0xe0>)
 8000554:	6013      	str	r3, [r2, #0]
	  xSemaphoreGiveFromISR(screenChangeSem, NULL);


  }

}
 8000556:	e03f      	b.n	80005d8 <HAL_GPIO_EXTI_Callback+0xcc>
  }else if(GPIO_Pin==interruptButton2_Pin){
 8000558:	88fb      	ldrh	r3, [r7, #6]
 800055a:	2b80      	cmp	r3, #128	; 0x80
 800055c:	d11d      	bne.n	800059a <HAL_GPIO_EXTI_Callback+0x8e>
	  modeNum2++;
 800055e:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	3301      	adds	r3, #1
 8000564:	b2da      	uxtb	r2, r3
 8000566:	4b22      	ldr	r3, [pc, #136]	; (80005f0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000568:	701a      	strb	r2, [r3, #0]
	  	  if(modeNum2>1)modeNum2=0;
 800056a:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <HAL_GPIO_EXTI_Callback+0xe4>)
 800056c:	781b      	ldrb	r3, [r3, #0]
 800056e:	2b01      	cmp	r3, #1
 8000570:	d902      	bls.n	8000578 <HAL_GPIO_EXTI_Callback+0x6c>
 8000572:	4b1f      	ldr	r3, [pc, #124]	; (80005f0 <HAL_GPIO_EXTI_Callback+0xe4>)
 8000574:	2200      	movs	r2, #0
 8000576:	701a      	strb	r2, [r3, #0]
	  	  HAL_GPIO_TogglePin(interruptButton2_GPIO_Port, interruptLED2_Pin);
 8000578:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800057c:	4819      	ldr	r0, [pc, #100]	; (80005e4 <HAL_GPIO_EXTI_Callback+0xd8>)
 800057e:	f001 fa1a 	bl	80019b6 <HAL_GPIO_TogglePin>
	        xSemaphoreGiveFromISR(screenChangeSem, NULL); // Give semaphore from interrupt
 8000582:	4b19      	ldr	r3, [pc, #100]	; (80005e8 <HAL_GPIO_EXTI_Callback+0xdc>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	2100      	movs	r1, #0
 8000588:	4618      	mov	r0, r3
 800058a:	f004 fd4e 	bl	800502a <xQueueGiveFromISR>
	        totalNum--;
 800058e:	4b17      	ldr	r3, [pc, #92]	; (80005ec <HAL_GPIO_EXTI_Callback+0xe0>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	3b01      	subs	r3, #1
 8000594:	4a15      	ldr	r2, [pc, #84]	; (80005ec <HAL_GPIO_EXTI_Callback+0xe0>)
 8000596:	6013      	str	r3, [r2, #0]
}
 8000598:	e01e      	b.n	80005d8 <HAL_GPIO_EXTI_Callback+0xcc>
  }else if(GPIO_Pin==rotation1_1_Pin){
 800059a:	88fb      	ldrh	r3, [r7, #6]
 800059c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80005a0:	d11a      	bne.n	80005d8 <HAL_GPIO_EXTI_Callback+0xcc>
	  int res = HAL_GPIO_ReadPin(rotation1_2_GPIO_Port,rotation1_2_Pin);
 80005a2:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005a6:	480f      	ldr	r0, [pc, #60]	; (80005e4 <HAL_GPIO_EXTI_Callback+0xd8>)
 80005a8:	f001 f9d4 	bl	8001954 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	60fb      	str	r3, [r7, #12]
	  if(res==0){
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d105      	bne.n	80005c2 <HAL_GPIO_EXTI_Callback+0xb6>
		  totalNum++;
 80005b6:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <HAL_GPIO_EXTI_Callback+0xe0>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	3301      	adds	r3, #1
 80005bc:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <HAL_GPIO_EXTI_Callback+0xe0>)
 80005be:	6013      	str	r3, [r2, #0]
 80005c0:	e004      	b.n	80005cc <HAL_GPIO_EXTI_Callback+0xc0>
		  totalNum--;
 80005c2:	4b0a      	ldr	r3, [pc, #40]	; (80005ec <HAL_GPIO_EXTI_Callback+0xe0>)
 80005c4:	681b      	ldr	r3, [r3, #0]
 80005c6:	3b01      	subs	r3, #1
 80005c8:	4a08      	ldr	r2, [pc, #32]	; (80005ec <HAL_GPIO_EXTI_Callback+0xe0>)
 80005ca:	6013      	str	r3, [r2, #0]
	  xSemaphoreGiveFromISR(screenChangeSem, NULL);
 80005cc:	4b06      	ldr	r3, [pc, #24]	; (80005e8 <HAL_GPIO_EXTI_Callback+0xdc>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	2100      	movs	r1, #0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f004 fd29 	bl	800502a <xQueueGiveFromISR>
}
 80005d8:	bf00      	nop
 80005da:	3710      	adds	r7, #16
 80005dc:	46bd      	mov	sp, r7
 80005de:	bd80      	pop	{r7, pc}
 80005e0:	20000128 	.word	0x20000128
 80005e4:	40020000 	.word	0x40020000
 80005e8:	20000124 	.word	0x20000124
 80005ec:	20000000 	.word	0x20000000
 80005f0:	20000129 	.word	0x20000129

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fed0 	bl	800139c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f842 	bl	8000684 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f97e 	bl	8000900 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000604:	f000 f952 	bl	80008ac <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8000608:	f000 f8ae 	bl	8000768 <MX_I2C1_Init>
  MX_TIM2_Init();
 800060c:	f000 f8da 	bl	80007c4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 8000610:	f000 facc 	bl	8000bac <ssd1306_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000614:	2100      	movs	r1, #0
 8000616:	4813      	ldr	r0, [pc, #76]	; (8000664 <main+0x70>)
 8000618:	f002 fe32 	bl	8003280 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800061c:	f004 f84e 	bl	80046bc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  screenChangeSem = xSemaphoreCreateBinary();
 8000620:	2203      	movs	r2, #3
 8000622:	2100      	movs	r1, #0
 8000624:	2001      	movs	r0, #1
 8000626:	f004 fb09 	bl	8004c3c <xQueueGenericCreate>
 800062a:	4603      	mov	r3, r0
 800062c:	4a0e      	ldr	r2, [pc, #56]	; (8000668 <main+0x74>)
 800062e:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinker */
  blinkerHandle = osThreadNew(StartBlinker, NULL, &blinker_attributes);
 8000630:	4a0e      	ldr	r2, [pc, #56]	; (800066c <main+0x78>)
 8000632:	2100      	movs	r1, #0
 8000634:	480e      	ldr	r0, [pc, #56]	; (8000670 <main+0x7c>)
 8000636:	f004 f88b 	bl	8004750 <osThreadNew>
 800063a:	4603      	mov	r3, r0
 800063c:	4a0d      	ldr	r2, [pc, #52]	; (8000674 <main+0x80>)
 800063e:	6013      	str	r3, [r2, #0]

  /* creation of oled */
  oledHandle = osThreadNew(StartOled, NULL, &oled_attributes);
 8000640:	4a0d      	ldr	r2, [pc, #52]	; (8000678 <main+0x84>)
 8000642:	2100      	movs	r1, #0
 8000644:	480d      	ldr	r0, [pc, #52]	; (800067c <main+0x88>)
 8000646:	f004 f883 	bl	8004750 <osThreadNew>
 800064a:	4603      	mov	r3, r0
 800064c:	4a0c      	ldr	r2, [pc, #48]	; (8000680 <main+0x8c>)
 800064e:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000650:	f004 f858 	bl	8004704 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  xSemaphoreGiveFromISR(screenChangeSem, NULL);
 8000654:	4b04      	ldr	r3, [pc, #16]	; (8000668 <main+0x74>)
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f004 fce5 	bl	800502a <xQueueGiveFromISR>
  while (1)
 8000660:	e7fe      	b.n	8000660 <main+0x6c>
 8000662:	bf00      	nop
 8000664:	2000008c 	.word	0x2000008c
 8000668:	20000124 	.word	0x20000124
 800066c:	08007898 	.word	0x08007898
 8000670:	08000a71 	.word	0x08000a71
 8000674:	2000011c 	.word	0x2000011c
 8000678:	080078bc 	.word	0x080078bc
 800067c:	08000aa5 	.word	0x08000aa5
 8000680:	20000120 	.word	0x20000120

08000684 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b094      	sub	sp, #80	; 0x50
 8000688:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800068a:	f107 031c 	add.w	r3, r7, #28
 800068e:	2234      	movs	r2, #52	; 0x34
 8000690:	2100      	movs	r1, #0
 8000692:	4618      	mov	r0, r3
 8000694:	f007 f8a6 	bl	80077e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	2200      	movs	r2, #0
 800069e:	601a      	str	r2, [r3, #0]
 80006a0:	605a      	str	r2, [r3, #4]
 80006a2:	609a      	str	r2, [r3, #8]
 80006a4:	60da      	str	r2, [r3, #12]
 80006a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a8:	2300      	movs	r3, #0
 80006aa:	607b      	str	r3, [r7, #4]
 80006ac:	4b2c      	ldr	r3, [pc, #176]	; (8000760 <SystemClock_Config+0xdc>)
 80006ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006b0:	4a2b      	ldr	r2, [pc, #172]	; (8000760 <SystemClock_Config+0xdc>)
 80006b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80006b6:	6413      	str	r3, [r2, #64]	; 0x40
 80006b8:	4b29      	ldr	r3, [pc, #164]	; (8000760 <SystemClock_Config+0xdc>)
 80006ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80006bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80006c0:	607b      	str	r3, [r7, #4]
 80006c2:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006c4:	2300      	movs	r3, #0
 80006c6:	603b      	str	r3, [r7, #0]
 80006c8:	4b26      	ldr	r3, [pc, #152]	; (8000764 <SystemClock_Config+0xe0>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a25      	ldr	r2, [pc, #148]	; (8000764 <SystemClock_Config+0xe0>)
 80006ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006d2:	6013      	str	r3, [r2, #0]
 80006d4:	4b23      	ldr	r3, [pc, #140]	; (8000764 <SystemClock_Config+0xe0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006dc:	603b      	str	r3, [r7, #0]
 80006de:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006e0:	2302      	movs	r3, #2
 80006e2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006e4:	2301      	movs	r3, #1
 80006e6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e8:	2310      	movs	r3, #16
 80006ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006ec:	2302      	movs	r3, #2
 80006ee:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006f0:	2300      	movs	r3, #0
 80006f2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006f4:	2308      	movs	r3, #8
 80006f6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006f8:	23b4      	movs	r3, #180	; 0xb4
 80006fa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006fc:	2302      	movs	r3, #2
 80006fe:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000700:	2302      	movs	r3, #2
 8000702:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000704:	2302      	movs	r3, #2
 8000706:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000708:	f107 031c 	add.w	r3, r7, #28
 800070c:	4618      	mov	r0, r3
 800070e:	f002 f9ff 	bl	8002b10 <HAL_RCC_OscConfig>
 8000712:	4603      	mov	r3, r0
 8000714:	2b00      	cmp	r3, #0
 8000716:	d001      	beq.n	800071c <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000718:	f000 fa0a 	bl	8000b30 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800071c:	f001 fe2c 	bl	8002378 <HAL_PWREx_EnableOverDrive>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d001      	beq.n	800072a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000726:	f000 fa03 	bl	8000b30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800072a:	230f      	movs	r3, #15
 800072c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800072e:	2302      	movs	r3, #2
 8000730:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000732:	2300      	movs	r3, #0
 8000734:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000736:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800073a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800073c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000740:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000742:	f107 0308 	add.w	r3, r7, #8
 8000746:	2105      	movs	r1, #5
 8000748:	4618      	mov	r0, r3
 800074a:	f001 fe65 	bl	8002418 <HAL_RCC_ClockConfig>
 800074e:	4603      	mov	r3, r0
 8000750:	2b00      	cmp	r3, #0
 8000752:	d001      	beq.n	8000758 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8000754:	f000 f9ec 	bl	8000b30 <Error_Handler>
  }
}
 8000758:	bf00      	nop
 800075a:	3750      	adds	r7, #80	; 0x50
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}
 8000760:	40023800 	.word	0x40023800
 8000764:	40007000 	.word	0x40007000

08000768 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800076c:	4b12      	ldr	r3, [pc, #72]	; (80007b8 <MX_I2C1_Init+0x50>)
 800076e:	4a13      	ldr	r2, [pc, #76]	; (80007bc <MX_I2C1_Init+0x54>)
 8000770:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000774:	4a12      	ldr	r2, [pc, #72]	; (80007c0 <MX_I2C1_Init+0x58>)
 8000776:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000778:	4b0f      	ldr	r3, [pc, #60]	; (80007b8 <MX_I2C1_Init+0x50>)
 800077a:	2200      	movs	r2, #0
 800077c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800077e:	4b0e      	ldr	r3, [pc, #56]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000780:	2200      	movs	r2, #0
 8000782:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000784:	4b0c      	ldr	r3, [pc, #48]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000786:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800078a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800078c:	4b0a      	ldr	r3, [pc, #40]	; (80007b8 <MX_I2C1_Init+0x50>)
 800078e:	2200      	movs	r2, #0
 8000790:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000792:	4b09      	ldr	r3, [pc, #36]	; (80007b8 <MX_I2C1_Init+0x50>)
 8000794:	2200      	movs	r2, #0
 8000796:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000798:	4b07      	ldr	r3, [pc, #28]	; (80007b8 <MX_I2C1_Init+0x50>)
 800079a:	2200      	movs	r2, #0
 800079c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800079e:	4b06      	ldr	r3, [pc, #24]	; (80007b8 <MX_I2C1_Init+0x50>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007a4:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_I2C1_Init+0x50>)
 80007a6:	f001 f939 	bl	8001a1c <HAL_I2C_Init>
 80007aa:	4603      	mov	r3, r0
 80007ac:	2b00      	cmp	r3, #0
 80007ae:	d001      	beq.n	80007b4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80007b0:	f000 f9be 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007b4:	bf00      	nop
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	20000038 	.word	0x20000038
 80007bc:	40005400 	.word	0x40005400
 80007c0:	00061a80 	.word	0x00061a80

080007c4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08e      	sub	sp, #56	; 0x38
 80007c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007ce:	2200      	movs	r2, #0
 80007d0:	601a      	str	r2, [r3, #0]
 80007d2:	605a      	str	r2, [r3, #4]
 80007d4:	609a      	str	r2, [r3, #8]
 80007d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d8:	f107 0320 	add.w	r3, r7, #32
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007e2:	1d3b      	adds	r3, r7, #4
 80007e4:	2200      	movs	r2, #0
 80007e6:	601a      	str	r2, [r3, #0]
 80007e8:	605a      	str	r2, [r3, #4]
 80007ea:	609a      	str	r2, [r3, #8]
 80007ec:	60da      	str	r2, [r3, #12]
 80007ee:	611a      	str	r2, [r3, #16]
 80007f0:	615a      	str	r2, [r3, #20]
 80007f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007f4:	4b2c      	ldr	r3, [pc, #176]	; (80008a8 <MX_TIM2_Init+0xe4>)
 80007f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80007fc:	4b2a      	ldr	r3, [pc, #168]	; (80008a8 <MX_TIM2_Init+0xe4>)
 80007fe:	2200      	movs	r2, #0
 8000800:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000802:	4b29      	ldr	r3, [pc, #164]	; (80008a8 <MX_TIM2_Init+0xe4>)
 8000804:	2200      	movs	r2, #0
 8000806:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 8000808:	4b27      	ldr	r3, [pc, #156]	; (80008a8 <MX_TIM2_Init+0xe4>)
 800080a:	22ff      	movs	r2, #255	; 0xff
 800080c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800080e:	4b26      	ldr	r3, [pc, #152]	; (80008a8 <MX_TIM2_Init+0xe4>)
 8000810:	2200      	movs	r2, #0
 8000812:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000814:	4b24      	ldr	r3, [pc, #144]	; (80008a8 <MX_TIM2_Init+0xe4>)
 8000816:	2280      	movs	r2, #128	; 0x80
 8000818:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800081a:	4823      	ldr	r0, [pc, #140]	; (80008a8 <MX_TIM2_Init+0xe4>)
 800081c:	f002 fc16 	bl	800304c <HAL_TIM_Base_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000826:	f000 f983 	bl	8000b30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800082a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800082e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000830:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000834:	4619      	mov	r1, r3
 8000836:	481c      	ldr	r0, [pc, #112]	; (80008a8 <MX_TIM2_Init+0xe4>)
 8000838:	f002 ff9c 	bl	8003774 <HAL_TIM_ConfigClockSource>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d001      	beq.n	8000846 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000842:	f000 f975 	bl	8000b30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000846:	4818      	ldr	r0, [pc, #96]	; (80008a8 <MX_TIM2_Init+0xe4>)
 8000848:	f002 fcc0 	bl	80031cc <HAL_TIM_PWM_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000852:	f000 f96d 	bl	8000b30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000856:	2300      	movs	r3, #0
 8000858:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800085a:	2300      	movs	r3, #0
 800085c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800085e:	f107 0320 	add.w	r3, r7, #32
 8000862:	4619      	mov	r1, r3
 8000864:	4810      	ldr	r0, [pc, #64]	; (80008a8 <MX_TIM2_Init+0xe4>)
 8000866:	f003 fb91 	bl	8003f8c <HAL_TIMEx_MasterConfigSynchronization>
 800086a:	4603      	mov	r3, r0
 800086c:	2b00      	cmp	r3, #0
 800086e:	d001      	beq.n	8000874 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000870:	f000 f95e 	bl	8000b30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000874:	2360      	movs	r3, #96	; 0x60
 8000876:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 123;
 8000878:	237b      	movs	r3, #123	; 0x7b
 800087a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800087c:	2300      	movs	r3, #0
 800087e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000880:	2300      	movs	r3, #0
 8000882:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000884:	1d3b      	adds	r3, r7, #4
 8000886:	2200      	movs	r2, #0
 8000888:	4619      	mov	r1, r3
 800088a:	4807      	ldr	r0, [pc, #28]	; (80008a8 <MX_TIM2_Init+0xe4>)
 800088c:	f002 feb0 	bl	80035f0 <HAL_TIM_PWM_ConfigChannel>
 8000890:	4603      	mov	r3, r0
 8000892:	2b00      	cmp	r3, #0
 8000894:	d001      	beq.n	800089a <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000896:	f000 f94b 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800089a:	4803      	ldr	r0, [pc, #12]	; (80008a8 <MX_TIM2_Init+0xe4>)
 800089c:	f000 fc10 	bl	80010c0 <HAL_TIM_MspPostInit>

}
 80008a0:	bf00      	nop
 80008a2:	3738      	adds	r7, #56	; 0x38
 80008a4:	46bd      	mov	sp, r7
 80008a6:	bd80      	pop	{r7, pc}
 80008a8:	2000008c 	.word	0x2000008c

080008ac <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80008ac:	b580      	push	{r7, lr}
 80008ae:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008b0:	4b11      	ldr	r3, [pc, #68]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b2:	4a12      	ldr	r2, [pc, #72]	; (80008fc <MX_USART2_UART_Init+0x50>)
 80008b4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008b6:	4b10      	ldr	r3, [pc, #64]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008b8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008bc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008be:	4b0e      	ldr	r3, [pc, #56]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008c4:	4b0c      	ldr	r3, [pc, #48]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008ca:	4b0b      	ldr	r3, [pc, #44]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008d0:	4b09      	ldr	r3, [pc, #36]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d2:	220c      	movs	r2, #12
 80008d4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80008d6:	4b08      	ldr	r3, [pc, #32]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008d8:	2200      	movs	r2, #0
 80008da:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80008dc:	4b06      	ldr	r3, [pc, #24]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008de:	2200      	movs	r2, #0
 80008e0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008e2:	4805      	ldr	r0, [pc, #20]	; (80008f8 <MX_USART2_UART_Init+0x4c>)
 80008e4:	f003 fbe2 	bl	80040ac <HAL_UART_Init>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80008ee:	f000 f91f 	bl	8000b30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008f2:	bf00      	nop
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	200000d4 	.word	0x200000d4
 80008fc:	40004400 	.word	0x40004400

08000900 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b08a      	sub	sp, #40	; 0x28
 8000904:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000906:	f107 0314 	add.w	r3, r7, #20
 800090a:	2200      	movs	r2, #0
 800090c:	601a      	str	r2, [r3, #0]
 800090e:	605a      	str	r2, [r3, #4]
 8000910:	609a      	str	r2, [r3, #8]
 8000912:	60da      	str	r2, [r3, #12]
 8000914:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	2300      	movs	r3, #0
 8000918:	613b      	str	r3, [r7, #16]
 800091a:	4b51      	ldr	r3, [pc, #324]	; (8000a60 <MX_GPIO_Init+0x160>)
 800091c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091e:	4a50      	ldr	r2, [pc, #320]	; (8000a60 <MX_GPIO_Init+0x160>)
 8000920:	f043 0304 	orr.w	r3, r3, #4
 8000924:	6313      	str	r3, [r2, #48]	; 0x30
 8000926:	4b4e      	ldr	r3, [pc, #312]	; (8000a60 <MX_GPIO_Init+0x160>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800092a:	f003 0304 	and.w	r3, r3, #4
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000932:	2300      	movs	r3, #0
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	4b4a      	ldr	r3, [pc, #296]	; (8000a60 <MX_GPIO_Init+0x160>)
 8000938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093a:	4a49      	ldr	r2, [pc, #292]	; (8000a60 <MX_GPIO_Init+0x160>)
 800093c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000940:	6313      	str	r3, [r2, #48]	; 0x30
 8000942:	4b47      	ldr	r3, [pc, #284]	; (8000a60 <MX_GPIO_Init+0x160>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800094a:	60fb      	str	r3, [r7, #12]
 800094c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094e:	2300      	movs	r3, #0
 8000950:	60bb      	str	r3, [r7, #8]
 8000952:	4b43      	ldr	r3, [pc, #268]	; (8000a60 <MX_GPIO_Init+0x160>)
 8000954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000956:	4a42      	ldr	r2, [pc, #264]	; (8000a60 <MX_GPIO_Init+0x160>)
 8000958:	f043 0301 	orr.w	r3, r3, #1
 800095c:	6313      	str	r3, [r2, #48]	; 0x30
 800095e:	4b40      	ldr	r3, [pc, #256]	; (8000a60 <MX_GPIO_Init+0x160>)
 8000960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000962:	f003 0301 	and.w	r3, r3, #1
 8000966:	60bb      	str	r3, [r7, #8]
 8000968:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800096a:	2300      	movs	r3, #0
 800096c:	607b      	str	r3, [r7, #4]
 800096e:	4b3c      	ldr	r3, [pc, #240]	; (8000a60 <MX_GPIO_Init+0x160>)
 8000970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000972:	4a3b      	ldr	r2, [pc, #236]	; (8000a60 <MX_GPIO_Init+0x160>)
 8000974:	f043 0302 	orr.w	r3, r3, #2
 8000978:	6313      	str	r3, [r2, #48]	; 0x30
 800097a:	4b39      	ldr	r3, [pc, #228]	; (8000a60 <MX_GPIO_Init+0x160>)
 800097c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097e:	f003 0302 	and.w	r3, r3, #2
 8000982:	607b      	str	r3, [r7, #4]
 8000984:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|GPIO_PIN_8|interruptLED_Pin|interruptLED2_Pin, GPIO_PIN_RESET);
 8000986:	2200      	movs	r2, #0
 8000988:	f44f 5199 	mov.w	r1, #4896	; 0x1320
 800098c:	4835      	ldr	r0, [pc, #212]	; (8000a64 <MX_GPIO_Init+0x164>)
 800098e:	f000 fff9 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000992:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000996:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000998:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800099c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	4619      	mov	r1, r3
 80009a8:	482f      	ldr	r0, [pc, #188]	; (8000a68 <MX_GPIO_Init+0x168>)
 80009aa:	f000 fe3f 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD2_Pin PA8 interruptLED_Pin interruptLED2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin|GPIO_PIN_8|interruptLED_Pin|interruptLED2_Pin;
 80009ae:	f44f 5399 	mov.w	r3, #4896	; 0x1320
 80009b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009b8:	2300      	movs	r3, #0
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009bc:	2300      	movs	r3, #0
 80009be:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009c0:	f107 0314 	add.w	r3, r7, #20
 80009c4:	4619      	mov	r1, r3
 80009c6:	4827      	ldr	r0, [pc, #156]	; (8000a64 <MX_GPIO_Init+0x164>)
 80009c8:	f000 fe30 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : interruptButton_Pin interruptButton2_Pin */
  GPIO_InitStruct.Pin = interruptButton_Pin|interruptButton2_Pin;
 80009cc:	23c0      	movs	r3, #192	; 0xc0
 80009ce:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 80009d0:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 80009d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009d6:	2300      	movs	r3, #0
 80009d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009da:	f107 0314 	add.w	r3, r7, #20
 80009de:	4619      	mov	r1, r3
 80009e0:	4820      	ldr	r0, [pc, #128]	; (8000a64 <MX_GPIO_Init+0x164>)
 80009e2:	f000 fe23 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : myButtonPin2_Pin */
  GPIO_InitStruct.Pin = myButtonPin2_Pin;
 80009e6:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009f0:	2301      	movs	r3, #1
 80009f2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(myButtonPin2_GPIO_Port, &GPIO_InitStruct);
 80009f4:	f107 0314 	add.w	r3, r7, #20
 80009f8:	4619      	mov	r1, r3
 80009fa:	481c      	ldr	r0, [pc, #112]	; (8000a6c <MX_GPIO_Init+0x16c>)
 80009fc:	f000 fe16 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : rotation1_1_Pin */
  GPIO_InitStruct.Pin = rotation1_1_Pin;
 8000a00:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000a04:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a06:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(rotation1_1_GPIO_Port, &GPIO_InitStruct);
 8000a10:	f107 0314 	add.w	r3, r7, #20
 8000a14:	4619      	mov	r1, r3
 8000a16:	4813      	ldr	r0, [pc, #76]	; (8000a64 <MX_GPIO_Init+0x164>)
 8000a18:	f000 fe08 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : rotation1_2_Pin */
  GPIO_InitStruct.Pin = rotation1_2_Pin;
 8000a1c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000a20:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a22:	2300      	movs	r3, #0
 8000a24:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a26:	2300      	movs	r3, #0
 8000a28:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(rotation1_2_GPIO_Port, &GPIO_InitStruct);
 8000a2a:	f107 0314 	add.w	r3, r7, #20
 8000a2e:	4619      	mov	r1, r3
 8000a30:	480c      	ldr	r0, [pc, #48]	; (8000a64 <MX_GPIO_Init+0x164>)
 8000a32:	f000 fdfb 	bl	800162c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2105      	movs	r1, #5
 8000a3a:	2017      	movs	r0, #23
 8000a3c:	f000 fdcc 	bl	80015d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000a40:	2017      	movs	r0, #23
 8000a42:	f000 fde5 	bl	8001610 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2105      	movs	r1, #5
 8000a4a:	2028      	movs	r0, #40	; 0x28
 8000a4c:	f000 fdc4 	bl	80015d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a50:	2028      	movs	r0, #40	; 0x28
 8000a52:	f000 fddd 	bl	8001610 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a56:	bf00      	nop
 8000a58:	3728      	adds	r7, #40	; 0x28
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	bd80      	pop	{r7, pc}
 8000a5e:	bf00      	nop
 8000a60:	40023800 	.word	0x40023800
 8000a64:	40020000 	.word	0x40020000
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020400 	.word	0x40020400

08000a70 <StartBlinker>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinker */
void StartBlinker(void *argument)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b084      	sub	sp, #16
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int pulse=0;
 8000a78:	2300      	movs	r3, #0
 8000a7a:	60fb      	str	r3, [r7, #12]
//	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
//	      osDelay(500);
//	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
//	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
//	  	  osDelay(500);
	        pulse++;
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	3301      	adds	r3, #1
 8000a80:	60fb      	str	r3, [r7, #12]
	        if(pulse/256==1)pulse=0;
 8000a82:	68fb      	ldr	r3, [r7, #12]
 8000a84:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8000a88:	2bff      	cmp	r3, #255	; 0xff
 8000a8a:	d801      	bhi.n	8000a90 <StartBlinker+0x20>
 8000a8c:	2300      	movs	r3, #0
 8000a8e:	60fb      	str	r3, [r7, #12]
	        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pulse);
 8000a90:	4b03      	ldr	r3, [pc, #12]	; (8000aa0 <StartBlinker+0x30>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	68fa      	ldr	r2, [r7, #12]
 8000a96:	635a      	str	r2, [r3, #52]	; 0x34
	        osDelay(10);
 8000a98:	200a      	movs	r0, #10
 8000a9a:	f003 feeb 	bl	8004874 <osDelay>
	        pulse++;
 8000a9e:	e7ed      	b.n	8000a7c <StartBlinker+0xc>
 8000aa0:	2000008c 	.word	0x2000008c

08000aa4 <StartOled>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOled */
void StartOled(void *argument)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b084      	sub	sp, #16
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
//	                              ssd1306_Fill(Black);
//	                                  ssd1306_DrawBitmap(0,0,epd_bitmap_catFrame7,128,64,White);
//	                                  osDelay(100);
//	                                  ssd1306_UpdateScreen();
//	  }
   if (xSemaphoreTake(screenChangeSem, portMAX_DELAY)){
 8000aac:	4b14      	ldr	r3, [pc, #80]	; (8000b00 <StartOled+0x5c>)
 8000aae:	681b      	ldr	r3, [r3, #0]
 8000ab0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ab4:	4618      	mov	r0, r3
 8000ab6:	f004 fc25 	bl	8005304 <xQueueSemaphoreTake>
 8000aba:	4603      	mov	r3, r0
 8000abc:	2b00      	cmp	r3, #0
 8000abe:	d0f5      	beq.n	8000aac <StartOled+0x8>
	  char snum[5];
	  itoa(totalNum, snum, 10);
 8000ac0:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <StartOled+0x60>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	f107 0108 	add.w	r1, r7, #8
 8000ac8:	220a      	movs	r2, #10
 8000aca:	4618      	mov	r0, r3
 8000acc:	f006 fe46 	bl	800775c <itoa>

	      ssd1306_Fill(Black);
 8000ad0:	2000      	movs	r0, #0
 8000ad2:	f000 f8d5 	bl	8000c80 <ssd1306_Fill>

	      ssd1306_SetCursor(44, 30);
 8000ad6:	211e      	movs	r1, #30
 8000ad8:	202c      	movs	r0, #44	; 0x2c
 8000ada:	f000 fa13 	bl	8000f04 <ssd1306_SetCursor>
	      ssd1306_WriteString(snum, Font_16x26, White);
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <StartOled+0x64>)
 8000ae0:	f107 0008 	add.w	r0, r7, #8
 8000ae4:	2301      	movs	r3, #1
 8000ae6:	ca06      	ldmia	r2, {r1, r2}
 8000ae8:	f000 f9e6 	bl	8000eb8 <ssd1306_WriteString>
	      ssd1306_UpdateScreen();
 8000aec:	f000 f8e0 	bl	8000cb0 <ssd1306_UpdateScreen>
	      xSemaphoreGiveFromISR(screenChangeSem, NULL);
 8000af0:	4b03      	ldr	r3, [pc, #12]	; (8000b00 <StartOled+0x5c>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2100      	movs	r1, #0
 8000af6:	4618      	mov	r0, r3
 8000af8:	f004 fa97 	bl	800502a <xQueueGiveFromISR>
   if (xSemaphoreTake(screenChangeSem, portMAX_DELAY)){
 8000afc:	e7d6      	b.n	8000aac <StartOled+0x8>
 8000afe:	bf00      	nop
 8000b00:	20000124 	.word	0x20000124
 8000b04:	20000000 	.word	0x20000000
 8000b08:	20000004 	.word	0x20000004

08000b0c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	4a04      	ldr	r2, [pc, #16]	; (8000b2c <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b1a:	4293      	cmp	r3, r2
 8000b1c:	d101      	bne.n	8000b22 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b1e:	f000 fc5f 	bl	80013e0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000b22:	bf00      	nop
 8000b24:	3708      	adds	r7, #8
 8000b26:	46bd      	mov	sp, r7
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40001000 	.word	0x40001000

08000b30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b34:	b672      	cpsid	i
}
 8000b36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b38:	e7fe      	b.n	8000b38 <Error_Handler+0x8>

08000b3a <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000b3a:	b480      	push	{r7}
 8000b3c:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000b3e:	bf00      	nop
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b086      	sub	sp, #24
 8000b4c:	af04      	add	r7, sp, #16
 8000b4e:	4603      	mov	r3, r0
 8000b50:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000b52:	f04f 33ff 	mov.w	r3, #4294967295
 8000b56:	9302      	str	r3, [sp, #8]
 8000b58:	2301      	movs	r3, #1
 8000b5a:	9301      	str	r3, [sp, #4]
 8000b5c:	1dfb      	adds	r3, r7, #7
 8000b5e:	9300      	str	r3, [sp, #0]
 8000b60:	2301      	movs	r3, #1
 8000b62:	2200      	movs	r2, #0
 8000b64:	2178      	movs	r1, #120	; 0x78
 8000b66:	4803      	ldr	r0, [pc, #12]	; (8000b74 <ssd1306_WriteCommand+0x2c>)
 8000b68:	f001 f89c 	bl	8001ca4 <HAL_I2C_Mem_Write>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	20000038 	.word	0x20000038

08000b78 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b086      	sub	sp, #24
 8000b7c:	af04      	add	r7, sp, #16
 8000b7e:	6078      	str	r0, [r7, #4]
 8000b80:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	b29b      	uxth	r3, r3
 8000b86:	f04f 32ff 	mov.w	r2, #4294967295
 8000b8a:	9202      	str	r2, [sp, #8]
 8000b8c:	9301      	str	r3, [sp, #4]
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	9300      	str	r3, [sp, #0]
 8000b92:	2301      	movs	r3, #1
 8000b94:	2240      	movs	r2, #64	; 0x40
 8000b96:	2178      	movs	r1, #120	; 0x78
 8000b98:	4803      	ldr	r0, [pc, #12]	; (8000ba8 <ssd1306_WriteData+0x30>)
 8000b9a:	f001 f883 	bl	8001ca4 <HAL_I2C_Mem_Write>
}
 8000b9e:	bf00      	nop
 8000ba0:	3708      	adds	r7, #8
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	20000038 	.word	0x20000038

08000bac <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000bac:	b580      	push	{r7, lr}
 8000bae:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000bb0:	f7ff ffc3 	bl	8000b3a <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000bb4:	2064      	movs	r0, #100	; 0x64
 8000bb6:	f000 fc33 	bl	8001420 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000bba:	2000      	movs	r0, #0
 8000bbc:	f000 f9ce 	bl	8000f5c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000bc0:	2020      	movs	r0, #32
 8000bc2:	f7ff ffc1 	bl	8000b48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	f7ff ffbe 	bl	8000b48 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000bcc:	20b0      	movs	r0, #176	; 0xb0
 8000bce:	f7ff ffbb 	bl	8000b48 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000bd2:	20c8      	movs	r0, #200	; 0xc8
 8000bd4:	f7ff ffb8 	bl	8000b48 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000bd8:	2000      	movs	r0, #0
 8000bda:	f7ff ffb5 	bl	8000b48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000bde:	2010      	movs	r0, #16
 8000be0:	f7ff ffb2 	bl	8000b48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000be4:	2040      	movs	r0, #64	; 0x40
 8000be6:	f7ff ffaf 	bl	8000b48 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000bea:	20ff      	movs	r0, #255	; 0xff
 8000bec:	f000 f9a2 	bl	8000f34 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000bf0:	20a1      	movs	r0, #161	; 0xa1
 8000bf2:	f7ff ffa9 	bl	8000b48 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000bf6:	20a6      	movs	r0, #166	; 0xa6
 8000bf8:	f7ff ffa6 	bl	8000b48 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000bfc:	20a8      	movs	r0, #168	; 0xa8
 8000bfe:	f7ff ffa3 	bl	8000b48 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000c02:	203f      	movs	r0, #63	; 0x3f
 8000c04:	f7ff ffa0 	bl	8000b48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000c08:	20a4      	movs	r0, #164	; 0xa4
 8000c0a:	f7ff ff9d 	bl	8000b48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000c0e:	20d3      	movs	r0, #211	; 0xd3
 8000c10:	f7ff ff9a 	bl	8000b48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000c14:	2000      	movs	r0, #0
 8000c16:	f7ff ff97 	bl	8000b48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000c1a:	20d5      	movs	r0, #213	; 0xd5
 8000c1c:	f7ff ff94 	bl	8000b48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000c20:	20f0      	movs	r0, #240	; 0xf0
 8000c22:	f7ff ff91 	bl	8000b48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000c26:	20d9      	movs	r0, #217	; 0xd9
 8000c28:	f7ff ff8e 	bl	8000b48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000c2c:	2022      	movs	r0, #34	; 0x22
 8000c2e:	f7ff ff8b 	bl	8000b48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000c32:	20da      	movs	r0, #218	; 0xda
 8000c34:	f7ff ff88 	bl	8000b48 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000c38:	2012      	movs	r0, #18
 8000c3a:	f7ff ff85 	bl	8000b48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000c3e:	20db      	movs	r0, #219	; 0xdb
 8000c40:	f7ff ff82 	bl	8000b48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000c44:	2020      	movs	r0, #32
 8000c46:	f7ff ff7f 	bl	8000b48 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000c4a:	208d      	movs	r0, #141	; 0x8d
 8000c4c:	f7ff ff7c 	bl	8000b48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000c50:	2014      	movs	r0, #20
 8000c52:	f7ff ff79 	bl	8000b48 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000c56:	2001      	movs	r0, #1
 8000c58:	f000 f980 	bl	8000f5c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000c5c:	2000      	movs	r0, #0
 8000c5e:	f000 f80f 	bl	8000c80 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000c62:	f000 f825 	bl	8000cb0 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000c66:	4b05      	ldr	r3, [pc, #20]	; (8000c7c <ssd1306_Init+0xd0>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <ssd1306_Init+0xd0>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000c72:	4b02      	ldr	r3, [pc, #8]	; (8000c7c <ssd1306_Init+0xd0>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	711a      	strb	r2, [r3, #4]
}
 8000c78:	bf00      	nop
 8000c7a:	bd80      	pop	{r7, pc}
 8000c7c:	2000052c 	.word	0x2000052c

08000c80 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	4603      	mov	r3, r0
 8000c88:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000c8a:	79fb      	ldrb	r3, [r7, #7]
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d101      	bne.n	8000c94 <ssd1306_Fill+0x14>
 8000c90:	2300      	movs	r3, #0
 8000c92:	e000      	b.n	8000c96 <ssd1306_Fill+0x16>
 8000c94:	23ff      	movs	r3, #255	; 0xff
 8000c96:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4803      	ldr	r0, [pc, #12]	; (8000cac <ssd1306_Fill+0x2c>)
 8000c9e:	f006 fda1 	bl	80077e4 <memset>
}
 8000ca2:	bf00      	nop
 8000ca4:	3708      	adds	r7, #8
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	2000012c 	.word	0x2000012c

08000cb0 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b082      	sub	sp, #8
 8000cb4:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	71fb      	strb	r3, [r7, #7]
 8000cba:	e016      	b.n	8000cea <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000cbc:	79fb      	ldrb	r3, [r7, #7]
 8000cbe:	3b50      	subs	r3, #80	; 0x50
 8000cc0:	b2db      	uxtb	r3, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff ff40 	bl	8000b48 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000cc8:	2000      	movs	r0, #0
 8000cca:	f7ff ff3d 	bl	8000b48 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000cce:	2010      	movs	r0, #16
 8000cd0:	f7ff ff3a 	bl	8000b48 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000cd4:	79fb      	ldrb	r3, [r7, #7]
 8000cd6:	01db      	lsls	r3, r3, #7
 8000cd8:	4a08      	ldr	r2, [pc, #32]	; (8000cfc <ssd1306_UpdateScreen+0x4c>)
 8000cda:	4413      	add	r3, r2
 8000cdc:	2180      	movs	r1, #128	; 0x80
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f7ff ff4a 	bl	8000b78 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000ce4:	79fb      	ldrb	r3, [r7, #7]
 8000ce6:	3301      	adds	r3, #1
 8000ce8:	71fb      	strb	r3, [r7, #7]
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	2b07      	cmp	r3, #7
 8000cee:	d9e5      	bls.n	8000cbc <ssd1306_UpdateScreen+0xc>
    }
}
 8000cf0:	bf00      	nop
 8000cf2:	bf00      	nop
 8000cf4:	3708      	adds	r7, #8
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	bd80      	pop	{r7, pc}
 8000cfa:	bf00      	nop
 8000cfc:	2000012c 	.word	0x2000012c

08000d00 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	71fb      	strb	r3, [r7, #7]
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	71bb      	strb	r3, [r7, #6]
 8000d0e:	4613      	mov	r3, r2
 8000d10:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000d12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	db3d      	blt.n	8000d96 <ssd1306_DrawPixel+0x96>
 8000d1a:	79bb      	ldrb	r3, [r7, #6]
 8000d1c:	2b3f      	cmp	r3, #63	; 0x3f
 8000d1e:	d83a      	bhi.n	8000d96 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000d20:	797b      	ldrb	r3, [r7, #5]
 8000d22:	2b01      	cmp	r3, #1
 8000d24:	d11a      	bne.n	8000d5c <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000d26:	79fa      	ldrb	r2, [r7, #7]
 8000d28:	79bb      	ldrb	r3, [r7, #6]
 8000d2a:	08db      	lsrs	r3, r3, #3
 8000d2c:	b2d8      	uxtb	r0, r3
 8000d2e:	4603      	mov	r3, r0
 8000d30:	01db      	lsls	r3, r3, #7
 8000d32:	4413      	add	r3, r2
 8000d34:	4a1b      	ldr	r2, [pc, #108]	; (8000da4 <ssd1306_DrawPixel+0xa4>)
 8000d36:	5cd3      	ldrb	r3, [r2, r3]
 8000d38:	b25a      	sxtb	r2, r3
 8000d3a:	79bb      	ldrb	r3, [r7, #6]
 8000d3c:	f003 0307 	and.w	r3, r3, #7
 8000d40:	2101      	movs	r1, #1
 8000d42:	fa01 f303 	lsl.w	r3, r1, r3
 8000d46:	b25b      	sxtb	r3, r3
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	b259      	sxtb	r1, r3
 8000d4c:	79fa      	ldrb	r2, [r7, #7]
 8000d4e:	4603      	mov	r3, r0
 8000d50:	01db      	lsls	r3, r3, #7
 8000d52:	4413      	add	r3, r2
 8000d54:	b2c9      	uxtb	r1, r1
 8000d56:	4a13      	ldr	r2, [pc, #76]	; (8000da4 <ssd1306_DrawPixel+0xa4>)
 8000d58:	54d1      	strb	r1, [r2, r3]
 8000d5a:	e01d      	b.n	8000d98 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000d5c:	79fa      	ldrb	r2, [r7, #7]
 8000d5e:	79bb      	ldrb	r3, [r7, #6]
 8000d60:	08db      	lsrs	r3, r3, #3
 8000d62:	b2d8      	uxtb	r0, r3
 8000d64:	4603      	mov	r3, r0
 8000d66:	01db      	lsls	r3, r3, #7
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a0e      	ldr	r2, [pc, #56]	; (8000da4 <ssd1306_DrawPixel+0xa4>)
 8000d6c:	5cd3      	ldrb	r3, [r2, r3]
 8000d6e:	b25a      	sxtb	r2, r3
 8000d70:	79bb      	ldrb	r3, [r7, #6]
 8000d72:	f003 0307 	and.w	r3, r3, #7
 8000d76:	2101      	movs	r1, #1
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	b25b      	sxtb	r3, r3
 8000d7e:	43db      	mvns	r3, r3
 8000d80:	b25b      	sxtb	r3, r3
 8000d82:	4013      	ands	r3, r2
 8000d84:	b259      	sxtb	r1, r3
 8000d86:	79fa      	ldrb	r2, [r7, #7]
 8000d88:	4603      	mov	r3, r0
 8000d8a:	01db      	lsls	r3, r3, #7
 8000d8c:	4413      	add	r3, r2
 8000d8e:	b2c9      	uxtb	r1, r1
 8000d90:	4a04      	ldr	r2, [pc, #16]	; (8000da4 <ssd1306_DrawPixel+0xa4>)
 8000d92:	54d1      	strb	r1, [r2, r3]
 8000d94:	e000      	b.n	8000d98 <ssd1306_DrawPixel+0x98>
        return;
 8000d96:	bf00      	nop
    }
}
 8000d98:	370c      	adds	r7, #12
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da0:	4770      	bx	lr
 8000da2:	bf00      	nop
 8000da4:	2000012c 	.word	0x2000012c

08000da8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, FontDef Font, SSD1306_COLOR color) {
 8000da8:	b590      	push	{r4, r7, lr}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4604      	mov	r4, r0
 8000db0:	1d38      	adds	r0, r7, #4
 8000db2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000db6:	461a      	mov	r2, r3
 8000db8:	4623      	mov	r3, r4
 8000dba:	73fb      	strb	r3, [r7, #15]
 8000dbc:	4613      	mov	r3, r2
 8000dbe:	73bb      	strb	r3, [r7, #14]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 8000dc0:	7bfb      	ldrb	r3, [r7, #15]
 8000dc2:	2b1f      	cmp	r3, #31
 8000dc4:	d902      	bls.n	8000dcc <ssd1306_WriteChar+0x24>
 8000dc6:	7bfb      	ldrb	r3, [r7, #15]
 8000dc8:	2b7e      	cmp	r3, #126	; 0x7e
 8000dca:	d901      	bls.n	8000dd0 <ssd1306_WriteChar+0x28>
        return 0;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	e06d      	b.n	8000eac <ssd1306_WriteChar+0x104>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000dd0:	4b38      	ldr	r3, [pc, #224]	; (8000eb4 <ssd1306_WriteChar+0x10c>)
 8000dd2:	881b      	ldrh	r3, [r3, #0]
 8000dd4:	461a      	mov	r2, r3
 8000dd6:	793b      	ldrb	r3, [r7, #4]
 8000dd8:	4413      	add	r3, r2
 8000dda:	2b80      	cmp	r3, #128	; 0x80
 8000ddc:	dc06      	bgt.n	8000dec <ssd1306_WriteChar+0x44>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.FontHeight))
 8000dde:	4b35      	ldr	r3, [pc, #212]	; (8000eb4 <ssd1306_WriteChar+0x10c>)
 8000de0:	885b      	ldrh	r3, [r3, #2]
 8000de2:	461a      	mov	r2, r3
 8000de4:	797b      	ldrb	r3, [r7, #5]
 8000de6:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.FontWidth) ||
 8000de8:	2b40      	cmp	r3, #64	; 0x40
 8000dea:	dd01      	ble.n	8000df0 <ssd1306_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	e05d      	b.n	8000eac <ssd1306_WriteChar+0x104>
    }
    
    // Use the font to write
    for(i = 0; i < Font.FontHeight; i++) {
 8000df0:	2300      	movs	r3, #0
 8000df2:	61fb      	str	r3, [r7, #28]
 8000df4:	e04c      	b.n	8000e90 <ssd1306_WriteChar+0xe8>
        b = Font.data[(ch - 32) * Font.FontHeight + i];
 8000df6:	68ba      	ldr	r2, [r7, #8]
 8000df8:	7bfb      	ldrb	r3, [r7, #15]
 8000dfa:	3b20      	subs	r3, #32
 8000dfc:	7979      	ldrb	r1, [r7, #5]
 8000dfe:	fb01 f303 	mul.w	r3, r1, r3
 8000e02:	4619      	mov	r1, r3
 8000e04:	69fb      	ldr	r3, [r7, #28]
 8000e06:	440b      	add	r3, r1
 8000e08:	005b      	lsls	r3, r3, #1
 8000e0a:	4413      	add	r3, r2
 8000e0c:	881b      	ldrh	r3, [r3, #0]
 8000e0e:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.FontWidth; j++) {
 8000e10:	2300      	movs	r3, #0
 8000e12:	61bb      	str	r3, [r7, #24]
 8000e14:	e034      	b.n	8000e80 <ssd1306_WriteChar+0xd8>
            if((b << j) & 0x8000)  {
 8000e16:	697a      	ldr	r2, [r7, #20]
 8000e18:	69bb      	ldr	r3, [r7, #24]
 8000e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d012      	beq.n	8000e4c <ssd1306_WriteChar+0xa4>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8000e26:	4b23      	ldr	r3, [pc, #140]	; (8000eb4 <ssd1306_WriteChar+0x10c>)
 8000e28:	881b      	ldrh	r3, [r3, #0]
 8000e2a:	b2da      	uxtb	r2, r3
 8000e2c:	69bb      	ldr	r3, [r7, #24]
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	4413      	add	r3, r2
 8000e32:	b2d8      	uxtb	r0, r3
 8000e34:	4b1f      	ldr	r3, [pc, #124]	; (8000eb4 <ssd1306_WriteChar+0x10c>)
 8000e36:	885b      	ldrh	r3, [r3, #2]
 8000e38:	b2da      	uxtb	r2, r3
 8000e3a:	69fb      	ldr	r3, [r7, #28]
 8000e3c:	b2db      	uxtb	r3, r3
 8000e3e:	4413      	add	r3, r2
 8000e40:	b2db      	uxtb	r3, r3
 8000e42:	7bba      	ldrb	r2, [r7, #14]
 8000e44:	4619      	mov	r1, r3
 8000e46:	f7ff ff5b 	bl	8000d00 <ssd1306_DrawPixel>
 8000e4a:	e016      	b.n	8000e7a <ssd1306_WriteChar+0xd2>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8000e4c:	4b19      	ldr	r3, [pc, #100]	; (8000eb4 <ssd1306_WriteChar+0x10c>)
 8000e4e:	881b      	ldrh	r3, [r3, #0]
 8000e50:	b2da      	uxtb	r2, r3
 8000e52:	69bb      	ldr	r3, [r7, #24]
 8000e54:	b2db      	uxtb	r3, r3
 8000e56:	4413      	add	r3, r2
 8000e58:	b2d8      	uxtb	r0, r3
 8000e5a:	4b16      	ldr	r3, [pc, #88]	; (8000eb4 <ssd1306_WriteChar+0x10c>)
 8000e5c:	885b      	ldrh	r3, [r3, #2]
 8000e5e:	b2da      	uxtb	r2, r3
 8000e60:	69fb      	ldr	r3, [r7, #28]
 8000e62:	b2db      	uxtb	r3, r3
 8000e64:	4413      	add	r3, r2
 8000e66:	b2d9      	uxtb	r1, r3
 8000e68:	7bbb      	ldrb	r3, [r7, #14]
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	bf0c      	ite	eq
 8000e6e:	2301      	moveq	r3, #1
 8000e70:	2300      	movne	r3, #0
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	461a      	mov	r2, r3
 8000e76:	f7ff ff43 	bl	8000d00 <ssd1306_DrawPixel>
        for(j = 0; j < Font.FontWidth; j++) {
 8000e7a:	69bb      	ldr	r3, [r7, #24]
 8000e7c:	3301      	adds	r3, #1
 8000e7e:	61bb      	str	r3, [r7, #24]
 8000e80:	793b      	ldrb	r3, [r7, #4]
 8000e82:	461a      	mov	r2, r3
 8000e84:	69bb      	ldr	r3, [r7, #24]
 8000e86:	4293      	cmp	r3, r2
 8000e88:	d3c5      	bcc.n	8000e16 <ssd1306_WriteChar+0x6e>
    for(i = 0; i < Font.FontHeight; i++) {
 8000e8a:	69fb      	ldr	r3, [r7, #28]
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	61fb      	str	r3, [r7, #28]
 8000e90:	797b      	ldrb	r3, [r7, #5]
 8000e92:	461a      	mov	r2, r3
 8000e94:	69fb      	ldr	r3, [r7, #28]
 8000e96:	4293      	cmp	r3, r2
 8000e98:	d3ad      	bcc.n	8000df6 <ssd1306_WriteChar+0x4e>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.FontWidth;
 8000e9a:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <ssd1306_WriteChar+0x10c>)
 8000e9c:	881a      	ldrh	r2, [r3, #0]
 8000e9e:	793b      	ldrb	r3, [r7, #4]
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	4413      	add	r3, r2
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	4b03      	ldr	r3, [pc, #12]	; (8000eb4 <ssd1306_WriteChar+0x10c>)
 8000ea8:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 8000eaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	3724      	adds	r7, #36	; 0x24
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd90      	pop	{r4, r7, pc}
 8000eb4:	2000052c 	.word	0x2000052c

08000eb8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, FontDef Font, SSD1306_COLOR color) {
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b084      	sub	sp, #16
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	60f8      	str	r0, [r7, #12]
 8000ec0:	1d38      	adds	r0, r7, #4
 8000ec2:	e880 0006 	stmia.w	r0, {r1, r2}
 8000ec6:	70fb      	strb	r3, [r7, #3]
    while (*str) {
 8000ec8:	e012      	b.n	8000ef0 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	7818      	ldrb	r0, [r3, #0]
 8000ece:	78fb      	ldrb	r3, [r7, #3]
 8000ed0:	1d3a      	adds	r2, r7, #4
 8000ed2:	ca06      	ldmia	r2, {r1, r2}
 8000ed4:	f7ff ff68 	bl	8000da8 <ssd1306_WriteChar>
 8000ed8:	4603      	mov	r3, r0
 8000eda:	461a      	mov	r2, r3
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	429a      	cmp	r2, r3
 8000ee2:	d002      	beq.n	8000eea <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	781b      	ldrb	r3, [r3, #0]
 8000ee8:	e008      	b.n	8000efc <ssd1306_WriteString+0x44>
        }
        str++;
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	3301      	adds	r3, #1
 8000eee:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d1e8      	bne.n	8000eca <ssd1306_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	781b      	ldrb	r3, [r3, #0]
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	3710      	adds	r7, #16
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bd80      	pop	{r7, pc}

08000f04 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8000f04:	b480      	push	{r7}
 8000f06:	b083      	sub	sp, #12
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	460a      	mov	r2, r1
 8000f0e:	71fb      	strb	r3, [r7, #7]
 8000f10:	4613      	mov	r3, r2
 8000f12:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8000f14:	79fb      	ldrb	r3, [r7, #7]
 8000f16:	b29a      	uxth	r2, r3
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <ssd1306_SetCursor+0x2c>)
 8000f1a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	b29a      	uxth	r2, r3
 8000f20:	4b03      	ldr	r3, [pc, #12]	; (8000f30 <ssd1306_SetCursor+0x2c>)
 8000f22:	805a      	strh	r2, [r3, #2]
}
 8000f24:	bf00      	nop
 8000f26:	370c      	adds	r7, #12
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2e:	4770      	bx	lr
 8000f30:	2000052c 	.word	0x2000052c

08000f34 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000f3e:	2381      	movs	r3, #129	; 0x81
 8000f40:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000f42:	7bfb      	ldrb	r3, [r7, #15]
 8000f44:	4618      	mov	r0, r3
 8000f46:	f7ff fdff 	bl	8000b48 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	f7ff fdfb 	bl	8000b48 <ssd1306_WriteCommand>
}
 8000f52:	bf00      	nop
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}
	...

08000f5c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b084      	sub	sp, #16
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	4603      	mov	r3, r0
 8000f64:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000f66:	79fb      	ldrb	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d005      	beq.n	8000f78 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000f6c:	23af      	movs	r3, #175	; 0xaf
 8000f6e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <ssd1306_SetDisplayOn+0x38>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	715a      	strb	r2, [r3, #5]
 8000f76:	e004      	b.n	8000f82 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000f78:	23ae      	movs	r3, #174	; 0xae
 8000f7a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000f7c:	4b05      	ldr	r3, [pc, #20]	; (8000f94 <ssd1306_SetDisplayOn+0x38>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000f82:	7bfb      	ldrb	r3, [r7, #15]
 8000f84:	4618      	mov	r0, r3
 8000f86:	f7ff fddf 	bl	8000b48 <ssd1306_WriteCommand>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	2000052c 	.word	0x2000052c

08000f98 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b082      	sub	sp, #8
 8000f9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b12      	ldr	r3, [pc, #72]	; (8000fec <HAL_MspInit+0x54>)
 8000fa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa6:	4a11      	ldr	r2, [pc, #68]	; (8000fec <HAL_MspInit+0x54>)
 8000fa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fac:	6453      	str	r3, [r2, #68]	; 0x44
 8000fae:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_MspInit+0x54>)
 8000fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fb2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fba:	2300      	movs	r3, #0
 8000fbc:	603b      	str	r3, [r7, #0]
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_MspInit+0x54>)
 8000fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc2:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_MspInit+0x54>)
 8000fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8000fca:	4b08      	ldr	r3, [pc, #32]	; (8000fec <HAL_MspInit+0x54>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fd2:	603b      	str	r3, [r7, #0]
 8000fd4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	210f      	movs	r1, #15
 8000fda:	f06f 0001 	mvn.w	r0, #1
 8000fde:	f000 fafb 	bl	80015d8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fe2:	bf00      	nop
 8000fe4:	3708      	adds	r7, #8
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	40023800 	.word	0x40023800

08000ff0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b08a      	sub	sp, #40	; 0x28
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 0314 	add.w	r3, r7, #20
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a19      	ldr	r2, [pc, #100]	; (8001074 <HAL_I2C_MspInit+0x84>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d12b      	bne.n	800106a <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	2300      	movs	r3, #0
 8001014:	613b      	str	r3, [r7, #16]
 8001016:	4b18      	ldr	r3, [pc, #96]	; (8001078 <HAL_I2C_MspInit+0x88>)
 8001018:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101a:	4a17      	ldr	r2, [pc, #92]	; (8001078 <HAL_I2C_MspInit+0x88>)
 800101c:	f043 0302 	orr.w	r3, r3, #2
 8001020:	6313      	str	r3, [r2, #48]	; 0x30
 8001022:	4b15      	ldr	r3, [pc, #84]	; (8001078 <HAL_I2C_MspInit+0x88>)
 8001024:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001026:	f003 0302 	and.w	r3, r3, #2
 800102a:	613b      	str	r3, [r7, #16]
 800102c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800102e:	23c0      	movs	r3, #192	; 0xc0
 8001030:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001032:	2312      	movs	r3, #18
 8001034:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2303      	movs	r3, #3
 800103c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800103e:	2304      	movs	r3, #4
 8001040:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 0314 	add.w	r3, r7, #20
 8001046:	4619      	mov	r1, r3
 8001048:	480c      	ldr	r0, [pc, #48]	; (800107c <HAL_I2C_MspInit+0x8c>)
 800104a:	f000 faef 	bl	800162c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800104e:	2300      	movs	r3, #0
 8001050:	60fb      	str	r3, [r7, #12]
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <HAL_I2C_MspInit+0x88>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	4a08      	ldr	r2, [pc, #32]	; (8001078 <HAL_I2C_MspInit+0x88>)
 8001058:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800105c:	6413      	str	r3, [r2, #64]	; 0x40
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <HAL_I2C_MspInit+0x88>)
 8001060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001062:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001066:	60fb      	str	r3, [r7, #12]
 8001068:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800106a:	bf00      	nop
 800106c:	3728      	adds	r7, #40	; 0x28
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40005400 	.word	0x40005400
 8001078:	40023800 	.word	0x40023800
 800107c:	40020400 	.word	0x40020400

08001080 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001080:	b480      	push	{r7}
 8001082:	b085      	sub	sp, #20
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001090:	d10d      	bne.n	80010ae <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	60fb      	str	r3, [r7, #12]
 8001096:	4b09      	ldr	r3, [pc, #36]	; (80010bc <HAL_TIM_Base_MspInit+0x3c>)
 8001098:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800109a:	4a08      	ldr	r2, [pc, #32]	; (80010bc <HAL_TIM_Base_MspInit+0x3c>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6413      	str	r3, [r2, #64]	; 0x40
 80010a2:	4b06      	ldr	r3, [pc, #24]	; (80010bc <HAL_TIM_Base_MspInit+0x3c>)
 80010a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	60fb      	str	r3, [r7, #12]
 80010ac:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010ae:	bf00      	nop
 80010b0:	3714      	adds	r7, #20
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40023800 	.word	0x40023800

080010c0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b088      	sub	sp, #32
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010c8:	f107 030c 	add.w	r3, r7, #12
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
 80010d0:	605a      	str	r2, [r3, #4]
 80010d2:	609a      	str	r2, [r3, #8]
 80010d4:	60da      	str	r2, [r3, #12]
 80010d6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010e0:	d11d      	bne.n	800111e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	2300      	movs	r3, #0
 80010e4:	60bb      	str	r3, [r7, #8]
 80010e6:	4b10      	ldr	r3, [pc, #64]	; (8001128 <HAL_TIM_MspPostInit+0x68>)
 80010e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ea:	4a0f      	ldr	r2, [pc, #60]	; (8001128 <HAL_TIM_MspPostInit+0x68>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6313      	str	r3, [r2, #48]	; 0x30
 80010f2:	4b0d      	ldr	r3, [pc, #52]	; (8001128 <HAL_TIM_MspPostInit+0x68>)
 80010f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f6:	f003 0301 	and.w	r3, r3, #1
 80010fa:	60bb      	str	r3, [r7, #8]
 80010fc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010fe:	2301      	movs	r3, #1
 8001100:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001102:	2302      	movs	r3, #2
 8001104:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001106:	2300      	movs	r3, #0
 8001108:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800110a:	2300      	movs	r3, #0
 800110c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800110e:	2301      	movs	r3, #1
 8001110:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001112:	f107 030c 	add.w	r3, r7, #12
 8001116:	4619      	mov	r1, r3
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <HAL_TIM_MspPostInit+0x6c>)
 800111a:	f000 fa87 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800111e:	bf00      	nop
 8001120:	3720      	adds	r7, #32
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}
 8001126:	bf00      	nop
 8001128:	40023800 	.word	0x40023800
 800112c:	40020000 	.word	0x40020000

08001130 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b08a      	sub	sp, #40	; 0x28
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001138:	f107 0314 	add.w	r3, r7, #20
 800113c:	2200      	movs	r2, #0
 800113e:	601a      	str	r2, [r3, #0]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	609a      	str	r2, [r3, #8]
 8001144:	60da      	str	r2, [r3, #12]
 8001146:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	4a19      	ldr	r2, [pc, #100]	; (80011b4 <HAL_UART_MspInit+0x84>)
 800114e:	4293      	cmp	r3, r2
 8001150:	d12b      	bne.n	80011aa <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
 8001156:	4b18      	ldr	r3, [pc, #96]	; (80011b8 <HAL_UART_MspInit+0x88>)
 8001158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115a:	4a17      	ldr	r2, [pc, #92]	; (80011b8 <HAL_UART_MspInit+0x88>)
 800115c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001160:	6413      	str	r3, [r2, #64]	; 0x40
 8001162:	4b15      	ldr	r3, [pc, #84]	; (80011b8 <HAL_UART_MspInit+0x88>)
 8001164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001166:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800116a:	613b      	str	r3, [r7, #16]
 800116c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800116e:	2300      	movs	r3, #0
 8001170:	60fb      	str	r3, [r7, #12]
 8001172:	4b11      	ldr	r3, [pc, #68]	; (80011b8 <HAL_UART_MspInit+0x88>)
 8001174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001176:	4a10      	ldr	r2, [pc, #64]	; (80011b8 <HAL_UART_MspInit+0x88>)
 8001178:	f043 0301 	orr.w	r3, r3, #1
 800117c:	6313      	str	r3, [r2, #48]	; 0x30
 800117e:	4b0e      	ldr	r3, [pc, #56]	; (80011b8 <HAL_UART_MspInit+0x88>)
 8001180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001182:	f003 0301 	and.w	r3, r3, #1
 8001186:	60fb      	str	r3, [r7, #12]
 8001188:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800118a:	230c      	movs	r3, #12
 800118c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800118e:	2302      	movs	r3, #2
 8001190:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001192:	2300      	movs	r3, #0
 8001194:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001196:	2303      	movs	r3, #3
 8001198:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800119a:	2307      	movs	r3, #7
 800119c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800119e:	f107 0314 	add.w	r3, r7, #20
 80011a2:	4619      	mov	r1, r3
 80011a4:	4805      	ldr	r0, [pc, #20]	; (80011bc <HAL_UART_MspInit+0x8c>)
 80011a6:	f000 fa41 	bl	800162c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011aa:	bf00      	nop
 80011ac:	3728      	adds	r7, #40	; 0x28
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40004400 	.word	0x40004400
 80011b8:	40023800 	.word	0x40023800
 80011bc:	40020000 	.word	0x40020000

080011c0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b08e      	sub	sp, #56	; 0x38
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011c8:	2300      	movs	r3, #0
 80011ca:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011cc:	2300      	movs	r3, #0
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011d0:	2300      	movs	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	4b33      	ldr	r3, [pc, #204]	; (80012a4 <HAL_InitTick+0xe4>)
 80011d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d8:	4a32      	ldr	r2, [pc, #200]	; (80012a4 <HAL_InitTick+0xe4>)
 80011da:	f043 0310 	orr.w	r3, r3, #16
 80011de:	6413      	str	r3, [r2, #64]	; 0x40
 80011e0:	4b30      	ldr	r3, [pc, #192]	; (80012a4 <HAL_InitTick+0xe4>)
 80011e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e4:	f003 0310 	and.w	r3, r3, #16
 80011e8:	60fb      	str	r3, [r7, #12]
 80011ea:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80011ec:	f107 0210 	add.w	r2, r7, #16
 80011f0:	f107 0314 	add.w	r3, r7, #20
 80011f4:	4611      	mov	r1, r2
 80011f6:	4618      	mov	r0, r3
 80011f8:	f001 fa28 	bl	800264c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80011fc:	6a3b      	ldr	r3, [r7, #32]
 80011fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001200:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001202:	2b00      	cmp	r3, #0
 8001204:	d103      	bne.n	800120e <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001206:	f001 f9f9 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 800120a:	6378      	str	r0, [r7, #52]	; 0x34
 800120c:	e004      	b.n	8001218 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800120e:	f001 f9f5 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 8001212:	4603      	mov	r3, r0
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800121a:	4a23      	ldr	r2, [pc, #140]	; (80012a8 <HAL_InitTick+0xe8>)
 800121c:	fba2 2303 	umull	r2, r3, r2, r3
 8001220:	0c9b      	lsrs	r3, r3, #18
 8001222:	3b01      	subs	r3, #1
 8001224:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001226:	4b21      	ldr	r3, [pc, #132]	; (80012ac <HAL_InitTick+0xec>)
 8001228:	4a21      	ldr	r2, [pc, #132]	; (80012b0 <HAL_InitTick+0xf0>)
 800122a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800122c:	4b1f      	ldr	r3, [pc, #124]	; (80012ac <HAL_InitTick+0xec>)
 800122e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001232:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001234:	4a1d      	ldr	r2, [pc, #116]	; (80012ac <HAL_InitTick+0xec>)
 8001236:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001238:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800123a:	4b1c      	ldr	r3, [pc, #112]	; (80012ac <HAL_InitTick+0xec>)
 800123c:	2200      	movs	r2, #0
 800123e:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001240:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_InitTick+0xec>)
 8001242:	2200      	movs	r2, #0
 8001244:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001246:	4b19      	ldr	r3, [pc, #100]	; (80012ac <HAL_InitTick+0xec>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800124c:	4817      	ldr	r0, [pc, #92]	; (80012ac <HAL_InitTick+0xec>)
 800124e:	f001 fefd 	bl	800304c <HAL_TIM_Base_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8001258:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800125c:	2b00      	cmp	r3, #0
 800125e:	d11b      	bne.n	8001298 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001260:	4812      	ldr	r0, [pc, #72]	; (80012ac <HAL_InitTick+0xec>)
 8001262:	f001 ff43 	bl	80030ec <HAL_TIM_Base_Start_IT>
 8001266:	4603      	mov	r3, r0
 8001268:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800126c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001270:	2b00      	cmp	r3, #0
 8001272:	d111      	bne.n	8001298 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001274:	2036      	movs	r0, #54	; 0x36
 8001276:	f000 f9cb 	bl	8001610 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	2b0f      	cmp	r3, #15
 800127e:	d808      	bhi.n	8001292 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001280:	2200      	movs	r2, #0
 8001282:	6879      	ldr	r1, [r7, #4]
 8001284:	2036      	movs	r0, #54	; 0x36
 8001286:	f000 f9a7 	bl	80015d8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <HAL_InitTick+0xf4>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	6013      	str	r3, [r2, #0]
 8001290:	e002      	b.n	8001298 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8001292:	2301      	movs	r3, #1
 8001294:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8001298:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800129c:	4618      	mov	r0, r3
 800129e:	3738      	adds	r7, #56	; 0x38
 80012a0:	46bd      	mov	sp, r7
 80012a2:	bd80      	pop	{r7, pc}
 80012a4:	40023800 	.word	0x40023800
 80012a8:	431bde83 	.word	0x431bde83
 80012ac:	20000534 	.word	0x20000534
 80012b0:	40001000 	.word	0x40001000
 80012b4:	20000010 	.word	0x20000010

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler+0x4>

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(interruptButton_Pin);
 80012e8:	2040      	movs	r0, #64	; 0x40
 80012ea:	f000 fb7f 	bl	80019ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(interruptButton2_Pin);
 80012ee:	2080      	movs	r0, #128	; 0x80
 80012f0:	f000 fb7c 	bl	80019ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80012f4:	bf00      	nop
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(rotation1_1_Pin);
 80012fc:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001300:	f000 fb74 	bl	80019ec <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001304:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001308:	f000 fb70 	bl	80019ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800130c:	bf00      	nop
 800130e:	bd80      	pop	{r7, pc}

08001310 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001314:	4802      	ldr	r0, [pc, #8]	; (8001320 <TIM6_DAC_IRQHandler+0x10>)
 8001316:	f002 f87b 	bl	8003410 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800131a:	bf00      	nop
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	20000534 	.word	0x20000534

08001324 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001328:	4b06      	ldr	r3, [pc, #24]	; (8001344 <SystemInit+0x20>)
 800132a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800132e:	4a05      	ldr	r2, [pc, #20]	; (8001344 <SystemInit+0x20>)
 8001330:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001334:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001338:	bf00      	nop
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	e000ed00 	.word	0xe000ed00

08001348 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001380 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800134c:	f7ff ffea 	bl	8001324 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	; (8001388 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	; (8001394 <LoopFillZerobss+0x22>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001376:	f006 fa3d 	bl	80077f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800137a:	f7ff f93b 	bl	80005f4 <main>
  bx  lr    
 800137e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001380:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	2000001c 	.word	0x2000001c
  ldr r2, =_sidata
 800138c:	08008c7c 	.word	0x08008c7c
  ldr r2, =_sbss
 8001390:	2000001c 	.word	0x2000001c
  ldr r4, =_ebss
 8001394:	20004ed0 	.word	0x20004ed0

08001398 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC_IRQHandler>
	...

0800139c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a0d      	ldr	r2, [pc, #52]	; (80013dc <HAL_Init+0x40>)
 80013a6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013ac:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_Init+0x40>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	4a0a      	ldr	r2, [pc, #40]	; (80013dc <HAL_Init+0x40>)
 80013b2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013b6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013b8:	4b08      	ldr	r3, [pc, #32]	; (80013dc <HAL_Init+0x40>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a07      	ldr	r2, [pc, #28]	; (80013dc <HAL_Init+0x40>)
 80013be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013c2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013c4:	2003      	movs	r0, #3
 80013c6:	f000 f8fc 	bl	80015c2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013ca:	200f      	movs	r0, #15
 80013cc:	f7ff fef8 	bl	80011c0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013d0:	f7ff fde2 	bl	8000f98 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013d4:	2300      	movs	r3, #0
}
 80013d6:	4618      	mov	r0, r3
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023c00 	.word	0x40023c00

080013e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013e0:	b480      	push	{r7}
 80013e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <HAL_IncTick+0x20>)
 80013e6:	781b      	ldrb	r3, [r3, #0]
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b06      	ldr	r3, [pc, #24]	; (8001404 <HAL_IncTick+0x24>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4413      	add	r3, r2
 80013f0:	4a04      	ldr	r2, [pc, #16]	; (8001404 <HAL_IncTick+0x24>)
 80013f2:	6013      	str	r3, [r2, #0]
}
 80013f4:	bf00      	nop
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	20000014 	.word	0x20000014
 8001404:	2000057c 	.word	0x2000057c

08001408 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  return uwTick;
 800140c:	4b03      	ldr	r3, [pc, #12]	; (800141c <HAL_GetTick+0x14>)
 800140e:	681b      	ldr	r3, [r3, #0]
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	2000057c 	.word	0x2000057c

08001420 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001420:	b580      	push	{r7, lr}
 8001422:	b084      	sub	sp, #16
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001428:	f7ff ffee 	bl	8001408 <HAL_GetTick>
 800142c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001438:	d005      	beq.n	8001446 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800143a:	4b0a      	ldr	r3, [pc, #40]	; (8001464 <HAL_Delay+0x44>)
 800143c:	781b      	ldrb	r3, [r3, #0]
 800143e:	461a      	mov	r2, r3
 8001440:	68fb      	ldr	r3, [r7, #12]
 8001442:	4413      	add	r3, r2
 8001444:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001446:	bf00      	nop
 8001448:	f7ff ffde 	bl	8001408 <HAL_GetTick>
 800144c:	4602      	mov	r2, r0
 800144e:	68bb      	ldr	r3, [r7, #8]
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	68fa      	ldr	r2, [r7, #12]
 8001454:	429a      	cmp	r2, r3
 8001456:	d8f7      	bhi.n	8001448 <HAL_Delay+0x28>
  {
  }
}
 8001458:	bf00      	nop
 800145a:	bf00      	nop
 800145c:	3710      	adds	r7, #16
 800145e:	46bd      	mov	sp, r7
 8001460:	bd80      	pop	{r7, pc}
 8001462:	bf00      	nop
 8001464:	20000014 	.word	0x20000014

08001468 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001468:	b480      	push	{r7}
 800146a:	b085      	sub	sp, #20
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	f003 0307 	and.w	r3, r3, #7
 8001476:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001478:	4b0c      	ldr	r3, [pc, #48]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800147e:	68ba      	ldr	r2, [r7, #8]
 8001480:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001484:	4013      	ands	r3, r2
 8001486:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800148c:	68bb      	ldr	r3, [r7, #8]
 800148e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001490:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001494:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800149a:	4a04      	ldr	r2, [pc, #16]	; (80014ac <__NVIC_SetPriorityGrouping+0x44>)
 800149c:	68bb      	ldr	r3, [r7, #8]
 800149e:	60d3      	str	r3, [r2, #12]
}
 80014a0:	bf00      	nop
 80014a2:	3714      	adds	r7, #20
 80014a4:	46bd      	mov	sp, r7
 80014a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014aa:	4770      	bx	lr
 80014ac:	e000ed00 	.word	0xe000ed00

080014b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014b4:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <__NVIC_GetPriorityGrouping+0x18>)
 80014b6:	68db      	ldr	r3, [r3, #12]
 80014b8:	0a1b      	lsrs	r3, r3, #8
 80014ba:	f003 0307 	and.w	r3, r3, #7
}
 80014be:	4618      	mov	r0, r3
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014cc:	b480      	push	{r7}
 80014ce:	b083      	sub	sp, #12
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	4603      	mov	r3, r0
 80014d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014da:	2b00      	cmp	r3, #0
 80014dc:	db0b      	blt.n	80014f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f003 021f 	and.w	r2, r3, #31
 80014e4:	4907      	ldr	r1, [pc, #28]	; (8001504 <__NVIC_EnableIRQ+0x38>)
 80014e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ea:	095b      	lsrs	r3, r3, #5
 80014ec:	2001      	movs	r0, #1
 80014ee:	fa00 f202 	lsl.w	r2, r0, r2
 80014f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	e000e100 	.word	0xe000e100

08001508 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	6039      	str	r1, [r7, #0]
 8001512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001518:	2b00      	cmp	r3, #0
 800151a:	db0a      	blt.n	8001532 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800151c:	683b      	ldr	r3, [r7, #0]
 800151e:	b2da      	uxtb	r2, r3
 8001520:	490c      	ldr	r1, [pc, #48]	; (8001554 <__NVIC_SetPriority+0x4c>)
 8001522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001526:	0112      	lsls	r2, r2, #4
 8001528:	b2d2      	uxtb	r2, r2
 800152a:	440b      	add	r3, r1
 800152c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001530:	e00a      	b.n	8001548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	b2da      	uxtb	r2, r3
 8001536:	4908      	ldr	r1, [pc, #32]	; (8001558 <__NVIC_SetPriority+0x50>)
 8001538:	79fb      	ldrb	r3, [r7, #7]
 800153a:	f003 030f 	and.w	r3, r3, #15
 800153e:	3b04      	subs	r3, #4
 8001540:	0112      	lsls	r2, r2, #4
 8001542:	b2d2      	uxtb	r2, r2
 8001544:	440b      	add	r3, r1
 8001546:	761a      	strb	r2, [r3, #24]
}
 8001548:	bf00      	nop
 800154a:	370c      	adds	r7, #12
 800154c:	46bd      	mov	sp, r7
 800154e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001552:	4770      	bx	lr
 8001554:	e000e100 	.word	0xe000e100
 8001558:	e000ed00 	.word	0xe000ed00

0800155c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800155c:	b480      	push	{r7}
 800155e:	b089      	sub	sp, #36	; 0x24
 8001560:	af00      	add	r7, sp, #0
 8001562:	60f8      	str	r0, [r7, #12]
 8001564:	60b9      	str	r1, [r7, #8]
 8001566:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001568:	68fb      	ldr	r3, [r7, #12]
 800156a:	f003 0307 	and.w	r3, r3, #7
 800156e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001570:	69fb      	ldr	r3, [r7, #28]
 8001572:	f1c3 0307 	rsb	r3, r3, #7
 8001576:	2b04      	cmp	r3, #4
 8001578:	bf28      	it	cs
 800157a:	2304      	movcs	r3, #4
 800157c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800157e:	69fb      	ldr	r3, [r7, #28]
 8001580:	3304      	adds	r3, #4
 8001582:	2b06      	cmp	r3, #6
 8001584:	d902      	bls.n	800158c <NVIC_EncodePriority+0x30>
 8001586:	69fb      	ldr	r3, [r7, #28]
 8001588:	3b03      	subs	r3, #3
 800158a:	e000      	b.n	800158e <NVIC_EncodePriority+0x32>
 800158c:	2300      	movs	r3, #0
 800158e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001590:	f04f 32ff 	mov.w	r2, #4294967295
 8001594:	69bb      	ldr	r3, [r7, #24]
 8001596:	fa02 f303 	lsl.w	r3, r2, r3
 800159a:	43da      	mvns	r2, r3
 800159c:	68bb      	ldr	r3, [r7, #8]
 800159e:	401a      	ands	r2, r3
 80015a0:	697b      	ldr	r3, [r7, #20]
 80015a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015a4:	f04f 31ff 	mov.w	r1, #4294967295
 80015a8:	697b      	ldr	r3, [r7, #20]
 80015aa:	fa01 f303 	lsl.w	r3, r1, r3
 80015ae:	43d9      	mvns	r1, r3
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015b4:	4313      	orrs	r3, r2
         );
}
 80015b6:	4618      	mov	r0, r3
 80015b8:	3724      	adds	r7, #36	; 0x24
 80015ba:	46bd      	mov	sp, r7
 80015bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c0:	4770      	bx	lr

080015c2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015c2:	b580      	push	{r7, lr}
 80015c4:	b082      	sub	sp, #8
 80015c6:	af00      	add	r7, sp, #0
 80015c8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ca:	6878      	ldr	r0, [r7, #4]
 80015cc:	f7ff ff4c 	bl	8001468 <__NVIC_SetPriorityGrouping>
}
 80015d0:	bf00      	nop
 80015d2:	3708      	adds	r7, #8
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bd80      	pop	{r7, pc}

080015d8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015d8:	b580      	push	{r7, lr}
 80015da:	b086      	sub	sp, #24
 80015dc:	af00      	add	r7, sp, #0
 80015de:	4603      	mov	r3, r0
 80015e0:	60b9      	str	r1, [r7, #8]
 80015e2:	607a      	str	r2, [r7, #4]
 80015e4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015ea:	f7ff ff61 	bl	80014b0 <__NVIC_GetPriorityGrouping>
 80015ee:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015f0:	687a      	ldr	r2, [r7, #4]
 80015f2:	68b9      	ldr	r1, [r7, #8]
 80015f4:	6978      	ldr	r0, [r7, #20]
 80015f6:	f7ff ffb1 	bl	800155c <NVIC_EncodePriority>
 80015fa:	4602      	mov	r2, r0
 80015fc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001600:	4611      	mov	r1, r2
 8001602:	4618      	mov	r0, r3
 8001604:	f7ff ff80 	bl	8001508 <__NVIC_SetPriority>
}
 8001608:	bf00      	nop
 800160a:	3718      	adds	r7, #24
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}

08001610 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b082      	sub	sp, #8
 8001614:	af00      	add	r7, sp, #0
 8001616:	4603      	mov	r3, r0
 8001618:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800161a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff54 	bl	80014cc <__NVIC_EnableIRQ>
}
 8001624:	bf00      	nop
 8001626:	3708      	adds	r7, #8
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b089      	sub	sp, #36	; 0x24
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800163a:	2300      	movs	r3, #0
 800163c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800163e:	2300      	movs	r3, #0
 8001640:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
 8001646:	e165      	b.n	8001914 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001648:	2201      	movs	r2, #1
 800164a:	69fb      	ldr	r3, [r7, #28]
 800164c:	fa02 f303 	lsl.w	r3, r2, r3
 8001650:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001652:	683b      	ldr	r3, [r7, #0]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	697a      	ldr	r2, [r7, #20]
 8001658:	4013      	ands	r3, r2
 800165a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	697b      	ldr	r3, [r7, #20]
 8001660:	429a      	cmp	r2, r3
 8001662:	f040 8154 	bne.w	800190e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001666:	683b      	ldr	r3, [r7, #0]
 8001668:	685b      	ldr	r3, [r3, #4]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d005      	beq.n	800167e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001672:	683b      	ldr	r3, [r7, #0]
 8001674:	685b      	ldr	r3, [r3, #4]
 8001676:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800167a:	2b02      	cmp	r3, #2
 800167c:	d130      	bne.n	80016e0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001684:	69fb      	ldr	r3, [r7, #28]
 8001686:	005b      	lsls	r3, r3, #1
 8001688:	2203      	movs	r2, #3
 800168a:	fa02 f303 	lsl.w	r3, r2, r3
 800168e:	43db      	mvns	r3, r3
 8001690:	69ba      	ldr	r2, [r7, #24]
 8001692:	4013      	ands	r3, r2
 8001694:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001696:	683b      	ldr	r3, [r7, #0]
 8001698:	68da      	ldr	r2, [r3, #12]
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	005b      	lsls	r3, r3, #1
 800169e:	fa02 f303 	lsl.w	r3, r2, r3
 80016a2:	69ba      	ldr	r2, [r7, #24]
 80016a4:	4313      	orrs	r3, r2
 80016a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	685b      	ldr	r3, [r3, #4]
 80016b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016b4:	2201      	movs	r2, #1
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	fa02 f303 	lsl.w	r3, r2, r3
 80016bc:	43db      	mvns	r3, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4013      	ands	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016c4:	683b      	ldr	r3, [r7, #0]
 80016c6:	685b      	ldr	r3, [r3, #4]
 80016c8:	091b      	lsrs	r3, r3, #4
 80016ca:	f003 0201 	and.w	r2, r3, #1
 80016ce:	69fb      	ldr	r3, [r7, #28]
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4313      	orrs	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	69ba      	ldr	r2, [r7, #24]
 80016de:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	f003 0303 	and.w	r3, r3, #3
 80016e8:	2b03      	cmp	r3, #3
 80016ea:	d017      	beq.n	800171c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	68db      	ldr	r3, [r3, #12]
 80016f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80016f2:	69fb      	ldr	r3, [r7, #28]
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	2203      	movs	r2, #3
 80016f8:	fa02 f303 	lsl.w	r3, r2, r3
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	689a      	ldr	r2, [r3, #8]
 8001708:	69fb      	ldr	r3, [r7, #28]
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	fa02 f303 	lsl.w	r3, r2, r3
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	4313      	orrs	r3, r2
 8001714:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	69ba      	ldr	r2, [r7, #24]
 800171a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	685b      	ldr	r3, [r3, #4]
 8001720:	f003 0303 	and.w	r3, r3, #3
 8001724:	2b02      	cmp	r3, #2
 8001726:	d123      	bne.n	8001770 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001728:	69fb      	ldr	r3, [r7, #28]
 800172a:	08da      	lsrs	r2, r3, #3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	3208      	adds	r2, #8
 8001730:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001734:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001736:	69fb      	ldr	r3, [r7, #28]
 8001738:	f003 0307 	and.w	r3, r3, #7
 800173c:	009b      	lsls	r3, r3, #2
 800173e:	220f      	movs	r2, #15
 8001740:	fa02 f303 	lsl.w	r3, r2, r3
 8001744:	43db      	mvns	r3, r3
 8001746:	69ba      	ldr	r2, [r7, #24]
 8001748:	4013      	ands	r3, r2
 800174a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800174c:	683b      	ldr	r3, [r7, #0]
 800174e:	691a      	ldr	r2, [r3, #16]
 8001750:	69fb      	ldr	r3, [r7, #28]
 8001752:	f003 0307 	and.w	r3, r3, #7
 8001756:	009b      	lsls	r3, r3, #2
 8001758:	fa02 f303 	lsl.w	r3, r2, r3
 800175c:	69ba      	ldr	r2, [r7, #24]
 800175e:	4313      	orrs	r3, r2
 8001760:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001762:	69fb      	ldr	r3, [r7, #28]
 8001764:	08da      	lsrs	r2, r3, #3
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	3208      	adds	r2, #8
 800176a:	69b9      	ldr	r1, [r7, #24]
 800176c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001776:	69fb      	ldr	r3, [r7, #28]
 8001778:	005b      	lsls	r3, r3, #1
 800177a:	2203      	movs	r2, #3
 800177c:	fa02 f303 	lsl.w	r3, r2, r3
 8001780:	43db      	mvns	r3, r3
 8001782:	69ba      	ldr	r2, [r7, #24]
 8001784:	4013      	ands	r3, r2
 8001786:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001788:	683b      	ldr	r3, [r7, #0]
 800178a:	685b      	ldr	r3, [r3, #4]
 800178c:	f003 0203 	and.w	r2, r3, #3
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	005b      	lsls	r3, r3, #1
 8001794:	fa02 f303 	lsl.w	r3, r2, r3
 8001798:	69ba      	ldr	r2, [r7, #24]
 800179a:	4313      	orrs	r3, r2
 800179c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	69ba      	ldr	r2, [r7, #24]
 80017a2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	f000 80ae 	beq.w	800190e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017b2:	2300      	movs	r3, #0
 80017b4:	60fb      	str	r3, [r7, #12]
 80017b6:	4b5d      	ldr	r3, [pc, #372]	; (800192c <HAL_GPIO_Init+0x300>)
 80017b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017ba:	4a5c      	ldr	r2, [pc, #368]	; (800192c <HAL_GPIO_Init+0x300>)
 80017bc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017c0:	6453      	str	r3, [r2, #68]	; 0x44
 80017c2:	4b5a      	ldr	r3, [pc, #360]	; (800192c <HAL_GPIO_Init+0x300>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017ca:	60fb      	str	r3, [r7, #12]
 80017cc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ce:	4a58      	ldr	r2, [pc, #352]	; (8001930 <HAL_GPIO_Init+0x304>)
 80017d0:	69fb      	ldr	r3, [r7, #28]
 80017d2:	089b      	lsrs	r3, r3, #2
 80017d4:	3302      	adds	r3, #2
 80017d6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017da:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017dc:	69fb      	ldr	r3, [r7, #28]
 80017de:	f003 0303 	and.w	r3, r3, #3
 80017e2:	009b      	lsls	r3, r3, #2
 80017e4:	220f      	movs	r2, #15
 80017e6:	fa02 f303 	lsl.w	r3, r2, r3
 80017ea:	43db      	mvns	r3, r3
 80017ec:	69ba      	ldr	r2, [r7, #24]
 80017ee:	4013      	ands	r3, r2
 80017f0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	4a4f      	ldr	r2, [pc, #316]	; (8001934 <HAL_GPIO_Init+0x308>)
 80017f6:	4293      	cmp	r3, r2
 80017f8:	d025      	beq.n	8001846 <HAL_GPIO_Init+0x21a>
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	4a4e      	ldr	r2, [pc, #312]	; (8001938 <HAL_GPIO_Init+0x30c>)
 80017fe:	4293      	cmp	r3, r2
 8001800:	d01f      	beq.n	8001842 <HAL_GPIO_Init+0x216>
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	4a4d      	ldr	r2, [pc, #308]	; (800193c <HAL_GPIO_Init+0x310>)
 8001806:	4293      	cmp	r3, r2
 8001808:	d019      	beq.n	800183e <HAL_GPIO_Init+0x212>
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4a4c      	ldr	r2, [pc, #304]	; (8001940 <HAL_GPIO_Init+0x314>)
 800180e:	4293      	cmp	r3, r2
 8001810:	d013      	beq.n	800183a <HAL_GPIO_Init+0x20e>
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4b      	ldr	r2, [pc, #300]	; (8001944 <HAL_GPIO_Init+0x318>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d00d      	beq.n	8001836 <HAL_GPIO_Init+0x20a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4a4a      	ldr	r2, [pc, #296]	; (8001948 <HAL_GPIO_Init+0x31c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d007      	beq.n	8001832 <HAL_GPIO_Init+0x206>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a49      	ldr	r2, [pc, #292]	; (800194c <HAL_GPIO_Init+0x320>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d101      	bne.n	800182e <HAL_GPIO_Init+0x202>
 800182a:	2306      	movs	r3, #6
 800182c:	e00c      	b.n	8001848 <HAL_GPIO_Init+0x21c>
 800182e:	2307      	movs	r3, #7
 8001830:	e00a      	b.n	8001848 <HAL_GPIO_Init+0x21c>
 8001832:	2305      	movs	r3, #5
 8001834:	e008      	b.n	8001848 <HAL_GPIO_Init+0x21c>
 8001836:	2304      	movs	r3, #4
 8001838:	e006      	b.n	8001848 <HAL_GPIO_Init+0x21c>
 800183a:	2303      	movs	r3, #3
 800183c:	e004      	b.n	8001848 <HAL_GPIO_Init+0x21c>
 800183e:	2302      	movs	r3, #2
 8001840:	e002      	b.n	8001848 <HAL_GPIO_Init+0x21c>
 8001842:	2301      	movs	r3, #1
 8001844:	e000      	b.n	8001848 <HAL_GPIO_Init+0x21c>
 8001846:	2300      	movs	r3, #0
 8001848:	69fa      	ldr	r2, [r7, #28]
 800184a:	f002 0203 	and.w	r2, r2, #3
 800184e:	0092      	lsls	r2, r2, #2
 8001850:	4093      	lsls	r3, r2
 8001852:	69ba      	ldr	r2, [r7, #24]
 8001854:	4313      	orrs	r3, r2
 8001856:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001858:	4935      	ldr	r1, [pc, #212]	; (8001930 <HAL_GPIO_Init+0x304>)
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	089b      	lsrs	r3, r3, #2
 800185e:	3302      	adds	r3, #2
 8001860:	69ba      	ldr	r2, [r7, #24]
 8001862:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001866:	4b3a      	ldr	r3, [pc, #232]	; (8001950 <HAL_GPIO_Init+0x324>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800186c:	693b      	ldr	r3, [r7, #16]
 800186e:	43db      	mvns	r3, r3
 8001870:	69ba      	ldr	r2, [r7, #24]
 8001872:	4013      	ands	r3, r2
 8001874:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	685b      	ldr	r3, [r3, #4]
 800187a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001882:	69ba      	ldr	r2, [r7, #24]
 8001884:	693b      	ldr	r3, [r7, #16]
 8001886:	4313      	orrs	r3, r2
 8001888:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800188a:	4a31      	ldr	r2, [pc, #196]	; (8001950 <HAL_GPIO_Init+0x324>)
 800188c:	69bb      	ldr	r3, [r7, #24]
 800188e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001890:	4b2f      	ldr	r3, [pc, #188]	; (8001950 <HAL_GPIO_Init+0x324>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001896:	693b      	ldr	r3, [r7, #16]
 8001898:	43db      	mvns	r3, r3
 800189a:	69ba      	ldr	r2, [r7, #24]
 800189c:	4013      	ands	r3, r2
 800189e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018a0:	683b      	ldr	r3, [r7, #0]
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d003      	beq.n	80018b4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018ac:	69ba      	ldr	r2, [r7, #24]
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	4313      	orrs	r3, r2
 80018b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018b4:	4a26      	ldr	r2, [pc, #152]	; (8001950 <HAL_GPIO_Init+0x324>)
 80018b6:	69bb      	ldr	r3, [r7, #24]
 80018b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018ba:	4b25      	ldr	r3, [pc, #148]	; (8001950 <HAL_GPIO_Init+0x324>)
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018c0:	693b      	ldr	r3, [r7, #16]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	69ba      	ldr	r2, [r7, #24]
 80018c6:	4013      	ands	r3, r2
 80018c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018ca:	683b      	ldr	r3, [r7, #0]
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d003      	beq.n	80018de <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80018d6:	69ba      	ldr	r2, [r7, #24]
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	4313      	orrs	r3, r2
 80018dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018de:	4a1c      	ldr	r2, [pc, #112]	; (8001950 <HAL_GPIO_Init+0x324>)
 80018e0:	69bb      	ldr	r3, [r7, #24]
 80018e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80018e4:	4b1a      	ldr	r3, [pc, #104]	; (8001950 <HAL_GPIO_Init+0x324>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	43db      	mvns	r3, r3
 80018ee:	69ba      	ldr	r2, [r7, #24]
 80018f0:	4013      	ands	r3, r2
 80018f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80018f4:	683b      	ldr	r3, [r7, #0]
 80018f6:	685b      	ldr	r3, [r3, #4]
 80018f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d003      	beq.n	8001908 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001900:	69ba      	ldr	r2, [r7, #24]
 8001902:	693b      	ldr	r3, [r7, #16]
 8001904:	4313      	orrs	r3, r2
 8001906:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001908:	4a11      	ldr	r2, [pc, #68]	; (8001950 <HAL_GPIO_Init+0x324>)
 800190a:	69bb      	ldr	r3, [r7, #24]
 800190c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800190e:	69fb      	ldr	r3, [r7, #28]
 8001910:	3301      	adds	r3, #1
 8001912:	61fb      	str	r3, [r7, #28]
 8001914:	69fb      	ldr	r3, [r7, #28]
 8001916:	2b0f      	cmp	r3, #15
 8001918:	f67f ae96 	bls.w	8001648 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	3724      	adds	r7, #36	; 0x24
 8001922:	46bd      	mov	sp, r7
 8001924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001928:	4770      	bx	lr
 800192a:	bf00      	nop
 800192c:	40023800 	.word	0x40023800
 8001930:	40013800 	.word	0x40013800
 8001934:	40020000 	.word	0x40020000
 8001938:	40020400 	.word	0x40020400
 800193c:	40020800 	.word	0x40020800
 8001940:	40020c00 	.word	0x40020c00
 8001944:	40021000 	.word	0x40021000
 8001948:	40021400 	.word	0x40021400
 800194c:	40021800 	.word	0x40021800
 8001950:	40013c00 	.word	0x40013c00

08001954 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001954:	b480      	push	{r7}
 8001956:	b085      	sub	sp, #20
 8001958:	af00      	add	r7, sp, #0
 800195a:	6078      	str	r0, [r7, #4]
 800195c:	460b      	mov	r3, r1
 800195e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	691a      	ldr	r2, [r3, #16]
 8001964:	887b      	ldrh	r3, [r7, #2]
 8001966:	4013      	ands	r3, r2
 8001968:	2b00      	cmp	r3, #0
 800196a:	d002      	beq.n	8001972 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800196c:	2301      	movs	r3, #1
 800196e:	73fb      	strb	r3, [r7, #15]
 8001970:	e001      	b.n	8001976 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001972:	2300      	movs	r3, #0
 8001974:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001976:	7bfb      	ldrb	r3, [r7, #15]
}
 8001978:	4618      	mov	r0, r3
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019a0:	e003      	b.n	80019aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	619a      	str	r2, [r3, #24]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr

080019b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019b6:	b480      	push	{r7}
 80019b8:	b085      	sub	sp, #20
 80019ba:	af00      	add	r7, sp, #0
 80019bc:	6078      	str	r0, [r7, #4]
 80019be:	460b      	mov	r3, r1
 80019c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019c8:	887a      	ldrh	r2, [r7, #2]
 80019ca:	68fb      	ldr	r3, [r7, #12]
 80019cc:	4013      	ands	r3, r2
 80019ce:	041a      	lsls	r2, r3, #16
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	43d9      	mvns	r1, r3
 80019d4:	887b      	ldrh	r3, [r7, #2]
 80019d6:	400b      	ands	r3, r1
 80019d8:	431a      	orrs	r2, r3
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	619a      	str	r2, [r3, #24]
}
 80019de:	bf00      	nop
 80019e0:	3714      	adds	r7, #20
 80019e2:	46bd      	mov	sp, r7
 80019e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e8:	4770      	bx	lr
	...

080019ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b082      	sub	sp, #8
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	4603      	mov	r3, r0
 80019f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019f6:	4b08      	ldr	r3, [pc, #32]	; (8001a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f8:	695a      	ldr	r2, [r3, #20]
 80019fa:	88fb      	ldrh	r3, [r7, #6]
 80019fc:	4013      	ands	r3, r2
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d006      	beq.n	8001a10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001a02:	4a05      	ldr	r2, [pc, #20]	; (8001a18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001a04:	88fb      	ldrh	r3, [r7, #6]
 8001a06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001a08:	88fb      	ldrh	r3, [r7, #6]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7fe fd7e 	bl	800050c <HAL_GPIO_EXTI_Callback>
  }
}
 8001a10:	bf00      	nop
 8001a12:	3708      	adds	r7, #8
 8001a14:	46bd      	mov	sp, r7
 8001a16:	bd80      	pop	{r7, pc}
 8001a18:	40013c00 	.word	0x40013c00

08001a1c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	b084      	sub	sp, #16
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d101      	bne.n	8001a2e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e12b      	b.n	8001c86 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a34:	b2db      	uxtb	r3, r3
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d106      	bne.n	8001a48 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff fad4 	bl	8000ff0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2224      	movs	r2, #36	; 0x24
 8001a4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0201 	bic.w	r2, r2, #1
 8001a5e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a6e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a7e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a80:	f000 fdbc 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 8001a84:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	685b      	ldr	r3, [r3, #4]
 8001a8a:	4a81      	ldr	r2, [pc, #516]	; (8001c90 <HAL_I2C_Init+0x274>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d807      	bhi.n	8001aa0 <HAL_I2C_Init+0x84>
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	4a80      	ldr	r2, [pc, #512]	; (8001c94 <HAL_I2C_Init+0x278>)
 8001a94:	4293      	cmp	r3, r2
 8001a96:	bf94      	ite	ls
 8001a98:	2301      	movls	r3, #1
 8001a9a:	2300      	movhi	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	e006      	b.n	8001aae <HAL_I2C_Init+0x92>
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	4a7d      	ldr	r2, [pc, #500]	; (8001c98 <HAL_I2C_Init+0x27c>)
 8001aa4:	4293      	cmp	r3, r2
 8001aa6:	bf94      	ite	ls
 8001aa8:	2301      	movls	r3, #1
 8001aaa:	2300      	movhi	r3, #0
 8001aac:	b2db      	uxtb	r3, r3
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	e0e7      	b.n	8001c86 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	4a78      	ldr	r2, [pc, #480]	; (8001c9c <HAL_I2C_Init+0x280>)
 8001aba:	fba2 2303 	umull	r2, r3, r2, r3
 8001abe:	0c9b      	lsrs	r3, r3, #18
 8001ac0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68ba      	ldr	r2, [r7, #8]
 8001ad2:	430a      	orrs	r2, r1
 8001ad4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	6a1b      	ldr	r3, [r3, #32]
 8001adc:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	4a6a      	ldr	r2, [pc, #424]	; (8001c90 <HAL_I2C_Init+0x274>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d802      	bhi.n	8001af0 <HAL_I2C_Init+0xd4>
 8001aea:	68bb      	ldr	r3, [r7, #8]
 8001aec:	3301      	adds	r3, #1
 8001aee:	e009      	b.n	8001b04 <HAL_I2C_Init+0xe8>
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001af6:	fb02 f303 	mul.w	r3, r2, r3
 8001afa:	4a69      	ldr	r2, [pc, #420]	; (8001ca0 <HAL_I2C_Init+0x284>)
 8001afc:	fba2 2303 	umull	r2, r3, r2, r3
 8001b00:	099b      	lsrs	r3, r3, #6
 8001b02:	3301      	adds	r3, #1
 8001b04:	687a      	ldr	r2, [r7, #4]
 8001b06:	6812      	ldr	r2, [r2, #0]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	69db      	ldr	r3, [r3, #28]
 8001b12:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b16:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	495c      	ldr	r1, [pc, #368]	; (8001c90 <HAL_I2C_Init+0x274>)
 8001b20:	428b      	cmp	r3, r1
 8001b22:	d819      	bhi.n	8001b58 <HAL_I2C_Init+0x13c>
 8001b24:	68fb      	ldr	r3, [r7, #12]
 8001b26:	1e59      	subs	r1, r3, #1
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	005b      	lsls	r3, r3, #1
 8001b2e:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b32:	1c59      	adds	r1, r3, #1
 8001b34:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b38:	400b      	ands	r3, r1
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d00a      	beq.n	8001b54 <HAL_I2C_Init+0x138>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	1e59      	subs	r1, r3, #1
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	005b      	lsls	r3, r3, #1
 8001b48:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b4c:	3301      	adds	r3, #1
 8001b4e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b52:	e051      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001b54:	2304      	movs	r3, #4
 8001b56:	e04f      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	689b      	ldr	r3, [r3, #8]
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d111      	bne.n	8001b84 <HAL_I2C_Init+0x168>
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	1e58      	subs	r0, r3, #1
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6859      	ldr	r1, [r3, #4]
 8001b68:	460b      	mov	r3, r1
 8001b6a:	005b      	lsls	r3, r3, #1
 8001b6c:	440b      	add	r3, r1
 8001b6e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b72:	3301      	adds	r3, #1
 8001b74:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf0c      	ite	eq
 8001b7c:	2301      	moveq	r3, #1
 8001b7e:	2300      	movne	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	e012      	b.n	8001baa <HAL_I2C_Init+0x18e>
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	1e58      	subs	r0, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	6859      	ldr	r1, [r3, #4]
 8001b8c:	460b      	mov	r3, r1
 8001b8e:	009b      	lsls	r3, r3, #2
 8001b90:	440b      	add	r3, r1
 8001b92:	0099      	lsls	r1, r3, #2
 8001b94:	440b      	add	r3, r1
 8001b96:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	bf0c      	ite	eq
 8001ba4:	2301      	moveq	r3, #1
 8001ba6:	2300      	movne	r3, #0
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d001      	beq.n	8001bb2 <HAL_I2C_Init+0x196>
 8001bae:	2301      	movs	r3, #1
 8001bb0:	e022      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d10e      	bne.n	8001bd8 <HAL_I2C_Init+0x1bc>
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1e58      	subs	r0, r3, #1
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6859      	ldr	r1, [r3, #4]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	005b      	lsls	r3, r3, #1
 8001bc6:	440b      	add	r3, r1
 8001bc8:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bcc:	3301      	adds	r3, #1
 8001bce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bd6:	e00f      	b.n	8001bf8 <HAL_I2C_Init+0x1dc>
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	1e58      	subs	r0, r3, #1
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6859      	ldr	r1, [r3, #4]
 8001be0:	460b      	mov	r3, r1
 8001be2:	009b      	lsls	r3, r3, #2
 8001be4:	440b      	add	r3, r1
 8001be6:	0099      	lsls	r1, r3, #2
 8001be8:	440b      	add	r3, r1
 8001bea:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bf4:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bf8:	6879      	ldr	r1, [r7, #4]
 8001bfa:	6809      	ldr	r1, [r1, #0]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	69da      	ldr	r2, [r3, #28]
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6a1b      	ldr	r3, [r3, #32]
 8001c12:	431a      	orrs	r2, r3
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	430a      	orrs	r2, r1
 8001c1a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	689b      	ldr	r3, [r3, #8]
 8001c22:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c26:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c2a:	687a      	ldr	r2, [r7, #4]
 8001c2c:	6911      	ldr	r1, [r2, #16]
 8001c2e:	687a      	ldr	r2, [r7, #4]
 8001c30:	68d2      	ldr	r2, [r2, #12]
 8001c32:	4311      	orrs	r1, r2
 8001c34:	687a      	ldr	r2, [r7, #4]
 8001c36:	6812      	ldr	r2, [r2, #0]
 8001c38:	430b      	orrs	r3, r1
 8001c3a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	68db      	ldr	r3, [r3, #12]
 8001c42:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	699b      	ldr	r3, [r3, #24]
 8001c4e:	431a      	orrs	r2, r3
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	430a      	orrs	r2, r1
 8001c56:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	681a      	ldr	r2, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f042 0201 	orr.w	r2, r2, #1
 8001c66:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2220      	movs	r2, #32
 8001c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2200      	movs	r2, #0
 8001c7a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2200      	movs	r2, #0
 8001c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c84:	2300      	movs	r3, #0
}
 8001c86:	4618      	mov	r0, r3
 8001c88:	3710      	adds	r7, #16
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bd80      	pop	{r7, pc}
 8001c8e:	bf00      	nop
 8001c90:	000186a0 	.word	0x000186a0
 8001c94:	001e847f 	.word	0x001e847f
 8001c98:	003d08ff 	.word	0x003d08ff
 8001c9c:	431bde83 	.word	0x431bde83
 8001ca0:	10624dd3 	.word	0x10624dd3

08001ca4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b088      	sub	sp, #32
 8001ca8:	af02      	add	r7, sp, #8
 8001caa:	60f8      	str	r0, [r7, #12]
 8001cac:	4608      	mov	r0, r1
 8001cae:	4611      	mov	r1, r2
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	817b      	strh	r3, [r7, #10]
 8001cb6:	460b      	mov	r3, r1
 8001cb8:	813b      	strh	r3, [r7, #8]
 8001cba:	4613      	mov	r3, r2
 8001cbc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001cbe:	f7ff fba3 	bl	8001408 <HAL_GetTick>
 8001cc2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cca:	b2db      	uxtb	r3, r3
 8001ccc:	2b20      	cmp	r3, #32
 8001cce:	f040 80d9 	bne.w	8001e84 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	2319      	movs	r3, #25
 8001cd8:	2201      	movs	r2, #1
 8001cda:	496d      	ldr	r1, [pc, #436]	; (8001e90 <HAL_I2C_Mem_Write+0x1ec>)
 8001cdc:	68f8      	ldr	r0, [r7, #12]
 8001cde:	f000 f971 	bl	8001fc4 <I2C_WaitOnFlagUntilTimeout>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001ce8:	2302      	movs	r3, #2
 8001cea:	e0cc      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d101      	bne.n	8001cfa <HAL_I2C_Mem_Write+0x56>
 8001cf6:	2302      	movs	r3, #2
 8001cf8:	e0c5      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	2201      	movs	r2, #1
 8001cfe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	2b01      	cmp	r3, #1
 8001d0e:	d007      	beq.n	8001d20 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	f042 0201 	orr.w	r2, r2, #1
 8001d1e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d20:	68fb      	ldr	r3, [r7, #12]
 8001d22:	681b      	ldr	r3, [r3, #0]
 8001d24:	681a      	ldr	r2, [r3, #0]
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d2e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	2221      	movs	r2, #33	; 0x21
 8001d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	2240      	movs	r2, #64	; 0x40
 8001d3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	2200      	movs	r2, #0
 8001d44:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d46:	68fb      	ldr	r3, [r7, #12]
 8001d48:	6a3a      	ldr	r2, [r7, #32]
 8001d4a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d50:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d56:	b29a      	uxth	r2, r3
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d5c:	68fb      	ldr	r3, [r7, #12]
 8001d5e:	4a4d      	ldr	r2, [pc, #308]	; (8001e94 <HAL_I2C_Mem_Write+0x1f0>)
 8001d60:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d62:	88f8      	ldrh	r0, [r7, #6]
 8001d64:	893a      	ldrh	r2, [r7, #8]
 8001d66:	8979      	ldrh	r1, [r7, #10]
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	9301      	str	r3, [sp, #4]
 8001d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d6e:	9300      	str	r3, [sp, #0]
 8001d70:	4603      	mov	r3, r0
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f890 	bl	8001e98 <I2C_RequestMemoryWrite>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d052      	beq.n	8001e24 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e081      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d82:	697a      	ldr	r2, [r7, #20]
 8001d84:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d86:	68f8      	ldr	r0, [r7, #12]
 8001d88:	f000 fa36 	bl	80021f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00d      	beq.n	8001dae <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d92:	68fb      	ldr	r3, [r7, #12]
 8001d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d107      	bne.n	8001daa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001da8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e06b      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbe:	1c5a      	adds	r2, r3, #1
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc8:	3b01      	subs	r3, #1
 8001dca:	b29a      	uxth	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dd4:	b29b      	uxth	r3, r3
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	695b      	ldr	r3, [r3, #20]
 8001de4:	f003 0304 	and.w	r3, r3, #4
 8001de8:	2b04      	cmp	r3, #4
 8001dea:	d11b      	bne.n	8001e24 <HAL_I2C_Mem_Write+0x180>
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d017      	beq.n	8001e24 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df8:	781a      	ldrb	r2, [r3, #0]
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001e00:	68fb      	ldr	r3, [r7, #12]
 8001e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e04:	1c5a      	adds	r2, r3, #1
 8001e06:	68fb      	ldr	r3, [r7, #12]
 8001e08:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e0e:	3b01      	subs	r3, #1
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e1a:	b29b      	uxth	r3, r3
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e24:	68fb      	ldr	r3, [r7, #12]
 8001e26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d1aa      	bne.n	8001d82 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e2c:	697a      	ldr	r2, [r7, #20]
 8001e2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e30:	68f8      	ldr	r0, [r7, #12]
 8001e32:	f000 fa29 	bl	8002288 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e36:	4603      	mov	r3, r0
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d00d      	beq.n	8001e58 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e40:	2b04      	cmp	r3, #4
 8001e42:	d107      	bne.n	8001e54 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e52:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e016      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e66:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2220      	movs	r2, #32
 8001e6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2200      	movs	r2, #0
 8001e74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	2200      	movs	r2, #0
 8001e7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e80:	2300      	movs	r3, #0
 8001e82:	e000      	b.n	8001e86 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e84:	2302      	movs	r3, #2
  }
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3718      	adds	r7, #24
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	00100002 	.word	0x00100002
 8001e94:	ffff0000 	.word	0xffff0000

08001e98 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b088      	sub	sp, #32
 8001e9c:	af02      	add	r7, sp, #8
 8001e9e:	60f8      	str	r0, [r7, #12]
 8001ea0:	4608      	mov	r0, r1
 8001ea2:	4611      	mov	r1, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	817b      	strh	r3, [r7, #10]
 8001eaa:	460b      	mov	r3, r1
 8001eac:	813b      	strh	r3, [r7, #8]
 8001eae:	4613      	mov	r3, r2
 8001eb0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001ec0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ec2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	6a3b      	ldr	r3, [r7, #32]
 8001ec8:	2200      	movs	r2, #0
 8001eca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001ece:	68f8      	ldr	r0, [r7, #12]
 8001ed0:	f000 f878 	bl	8001fc4 <I2C_WaitOnFlagUntilTimeout>
 8001ed4:	4603      	mov	r3, r0
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d00d      	beq.n	8001ef6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ee4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ee8:	d103      	bne.n	8001ef2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eea:	68fb      	ldr	r3, [r7, #12]
 8001eec:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ef0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ef2:	2303      	movs	r3, #3
 8001ef4:	e05f      	b.n	8001fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ef6:	897b      	ldrh	r3, [r7, #10]
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	461a      	mov	r2, r3
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001f04:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f08:	6a3a      	ldr	r2, [r7, #32]
 8001f0a:	492d      	ldr	r1, [pc, #180]	; (8001fc0 <I2C_RequestMemoryWrite+0x128>)
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	f000 f8d3 	bl	80020b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d001      	beq.n	8001f1c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e04c      	b.n	8001fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	695b      	ldr	r3, [r3, #20]
 8001f26:	617b      	str	r3, [r7, #20]
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	699b      	ldr	r3, [r3, #24]
 8001f2e:	617b      	str	r3, [r7, #20]
 8001f30:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f34:	6a39      	ldr	r1, [r7, #32]
 8001f36:	68f8      	ldr	r0, [r7, #12]
 8001f38:	f000 f95e 	bl	80021f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00d      	beq.n	8001f5e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f46:	2b04      	cmp	r3, #4
 8001f48:	d107      	bne.n	8001f5a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f4a:	68fb      	ldr	r3, [r7, #12]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	681a      	ldr	r2, [r3, #0]
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f58:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e02b      	b.n	8001fb6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f5e:	88fb      	ldrh	r3, [r7, #6]
 8001f60:	2b01      	cmp	r3, #1
 8001f62:	d105      	bne.n	8001f70 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f64:	893b      	ldrh	r3, [r7, #8]
 8001f66:	b2da      	uxtb	r2, r3
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	611a      	str	r2, [r3, #16]
 8001f6e:	e021      	b.n	8001fb4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f70:	893b      	ldrh	r3, [r7, #8]
 8001f72:	0a1b      	lsrs	r3, r3, #8
 8001f74:	b29b      	uxth	r3, r3
 8001f76:	b2da      	uxtb	r2, r3
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f80:	6a39      	ldr	r1, [r7, #32]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f938 	bl	80021f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d00d      	beq.n	8001faa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f92:	2b04      	cmp	r3, #4
 8001f94:	d107      	bne.n	8001fa6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681a      	ldr	r2, [r3, #0]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fa4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001fa6:	2301      	movs	r3, #1
 8001fa8:	e005      	b.n	8001fb6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001faa:	893b      	ldrh	r3, [r7, #8]
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001fb4:	2300      	movs	r3, #0
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	00010002 	.word	0x00010002

08001fc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b084      	sub	sp, #16
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	60f8      	str	r0, [r7, #12]
 8001fcc:	60b9      	str	r1, [r7, #8]
 8001fce:	603b      	str	r3, [r7, #0]
 8001fd0:	4613      	mov	r3, r2
 8001fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fd4:	e048      	b.n	8002068 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fdc:	d044      	beq.n	8002068 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fde:	f7ff fa13 	bl	8001408 <HAL_GetTick>
 8001fe2:	4602      	mov	r2, r0
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	1ad3      	subs	r3, r2, r3
 8001fe8:	683a      	ldr	r2, [r7, #0]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	d302      	bcc.n	8001ff4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d139      	bne.n	8002068 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	0c1b      	lsrs	r3, r3, #16
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d10d      	bne.n	800201a <I2C_WaitOnFlagUntilTimeout+0x56>
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	43da      	mvns	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	4013      	ands	r3, r2
 800200a:	b29b      	uxth	r3, r3
 800200c:	2b00      	cmp	r3, #0
 800200e:	bf0c      	ite	eq
 8002010:	2301      	moveq	r3, #1
 8002012:	2300      	movne	r3, #0
 8002014:	b2db      	uxtb	r3, r3
 8002016:	461a      	mov	r2, r3
 8002018:	e00c      	b.n	8002034 <I2C_WaitOnFlagUntilTimeout+0x70>
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	699b      	ldr	r3, [r3, #24]
 8002020:	43da      	mvns	r2, r3
 8002022:	68bb      	ldr	r3, [r7, #8]
 8002024:	4013      	ands	r3, r2
 8002026:	b29b      	uxth	r3, r3
 8002028:	2b00      	cmp	r3, #0
 800202a:	bf0c      	ite	eq
 800202c:	2301      	moveq	r3, #1
 800202e:	2300      	movne	r3, #0
 8002030:	b2db      	uxtb	r3, r3
 8002032:	461a      	mov	r2, r3
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	429a      	cmp	r2, r3
 8002038:	d116      	bne.n	8002068 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	2200      	movs	r2, #0
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	2220      	movs	r2, #32
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002054:	f043 0220 	orr.w	r2, r3, #32
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	2200      	movs	r2, #0
 8002060:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002064:	2301      	movs	r3, #1
 8002066:	e023      	b.n	80020b0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	0c1b      	lsrs	r3, r3, #16
 800206c:	b2db      	uxtb	r3, r3
 800206e:	2b01      	cmp	r3, #1
 8002070:	d10d      	bne.n	800208e <I2C_WaitOnFlagUntilTimeout+0xca>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	695b      	ldr	r3, [r3, #20]
 8002078:	43da      	mvns	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4013      	ands	r3, r2
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf0c      	ite	eq
 8002084:	2301      	moveq	r3, #1
 8002086:	2300      	movne	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	461a      	mov	r2, r3
 800208c:	e00c      	b.n	80020a8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800208e:	68fb      	ldr	r3, [r7, #12]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	699b      	ldr	r3, [r3, #24]
 8002094:	43da      	mvns	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	4013      	ands	r3, r2
 800209a:	b29b      	uxth	r3, r3
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	461a      	mov	r2, r3
 80020a8:	79fb      	ldrb	r3, [r7, #7]
 80020aa:	429a      	cmp	r2, r3
 80020ac:	d093      	beq.n	8001fd6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	3710      	adds	r7, #16
 80020b4:	46bd      	mov	sp, r7
 80020b6:	bd80      	pop	{r7, pc}

080020b8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b084      	sub	sp, #16
 80020bc:	af00      	add	r7, sp, #0
 80020be:	60f8      	str	r0, [r7, #12]
 80020c0:	60b9      	str	r1, [r7, #8]
 80020c2:	607a      	str	r2, [r7, #4]
 80020c4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020c6:	e071      	b.n	80021ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	695b      	ldr	r3, [r3, #20]
 80020ce:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020d2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020d6:	d123      	bne.n	8002120 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	681a      	ldr	r2, [r3, #0]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020e6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020f0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	2200      	movs	r2, #0
 80020f6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2220      	movs	r2, #32
 80020fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	f043 0204 	orr.w	r2, r3, #4
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2200      	movs	r2, #0
 8002118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e067      	b.n	80021f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002126:	d041      	beq.n	80021ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002128:	f7ff f96e 	bl	8001408 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	687a      	ldr	r2, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d302      	bcc.n	800213e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	2b00      	cmp	r3, #0
 800213c:	d136      	bne.n	80021ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	0c1b      	lsrs	r3, r3, #16
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d10c      	bne.n	8002162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	43da      	mvns	r2, r3
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	4013      	ands	r3, r2
 8002154:	b29b      	uxth	r3, r3
 8002156:	2b00      	cmp	r3, #0
 8002158:	bf14      	ite	ne
 800215a:	2301      	movne	r3, #1
 800215c:	2300      	moveq	r3, #0
 800215e:	b2db      	uxtb	r3, r3
 8002160:	e00b      	b.n	800217a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	699b      	ldr	r3, [r3, #24]
 8002168:	43da      	mvns	r2, r3
 800216a:	68bb      	ldr	r3, [r7, #8]
 800216c:	4013      	ands	r3, r2
 800216e:	b29b      	uxth	r3, r3
 8002170:	2b00      	cmp	r3, #0
 8002172:	bf14      	ite	ne
 8002174:	2301      	movne	r3, #1
 8002176:	2300      	moveq	r3, #0
 8002178:	b2db      	uxtb	r3, r3
 800217a:	2b00      	cmp	r3, #0
 800217c:	d016      	beq.n	80021ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2200      	movs	r2, #0
 8002182:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2220      	movs	r2, #32
 8002188:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002198:	f043 0220 	orr.w	r2, r3, #32
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80021a8:	2301      	movs	r3, #1
 80021aa:	e021      	b.n	80021f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	0c1b      	lsrs	r3, r3, #16
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	2b01      	cmp	r3, #1
 80021b4:	d10c      	bne.n	80021d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	695b      	ldr	r3, [r3, #20]
 80021bc:	43da      	mvns	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	4013      	ands	r3, r2
 80021c2:	b29b      	uxth	r3, r3
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	bf14      	ite	ne
 80021c8:	2301      	movne	r3, #1
 80021ca:	2300      	moveq	r3, #0
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	e00b      	b.n	80021e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	43da      	mvns	r2, r3
 80021d8:	68bb      	ldr	r3, [r7, #8]
 80021da:	4013      	ands	r3, r2
 80021dc:	b29b      	uxth	r3, r3
 80021de:	2b00      	cmp	r3, #0
 80021e0:	bf14      	ite	ne
 80021e2:	2301      	movne	r3, #1
 80021e4:	2300      	moveq	r3, #0
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	f47f af6d 	bne.w	80020c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80021ee:	2300      	movs	r3, #0
}
 80021f0:	4618      	mov	r0, r3
 80021f2:	3710      	adds	r7, #16
 80021f4:	46bd      	mov	sp, r7
 80021f6:	bd80      	pop	{r7, pc}

080021f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	b084      	sub	sp, #16
 80021fc:	af00      	add	r7, sp, #0
 80021fe:	60f8      	str	r0, [r7, #12]
 8002200:	60b9      	str	r1, [r7, #8]
 8002202:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002204:	e034      	b.n	8002270 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002206:	68f8      	ldr	r0, [r7, #12]
 8002208:	f000 f886 	bl	8002318 <I2C_IsAcknowledgeFailed>
 800220c:	4603      	mov	r3, r0
 800220e:	2b00      	cmp	r3, #0
 8002210:	d001      	beq.n	8002216 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002212:	2301      	movs	r3, #1
 8002214:	e034      	b.n	8002280 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	f1b3 3fff 	cmp.w	r3, #4294967295
 800221c:	d028      	beq.n	8002270 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800221e:	f7ff f8f3 	bl	8001408 <HAL_GetTick>
 8002222:	4602      	mov	r2, r0
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	1ad3      	subs	r3, r2, r3
 8002228:	68ba      	ldr	r2, [r7, #8]
 800222a:	429a      	cmp	r2, r3
 800222c:	d302      	bcc.n	8002234 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800222e:	68bb      	ldr	r3, [r7, #8]
 8002230:	2b00      	cmp	r3, #0
 8002232:	d11d      	bne.n	8002270 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	695b      	ldr	r3, [r3, #20]
 800223a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800223e:	2b80      	cmp	r3, #128	; 0x80
 8002240:	d016      	beq.n	8002270 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	2200      	movs	r2, #0
 8002246:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	2220      	movs	r2, #32
 800224c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225c:	f043 0220 	orr.w	r2, r3, #32
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2200      	movs	r2, #0
 8002268:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 800226c:	2301      	movs	r3, #1
 800226e:	e007      	b.n	8002280 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	695b      	ldr	r3, [r3, #20]
 8002276:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800227a:	2b80      	cmp	r3, #128	; 0x80
 800227c:	d1c3      	bne.n	8002206 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800227e:	2300      	movs	r3, #0
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b084      	sub	sp, #16
 800228c:	af00      	add	r7, sp, #0
 800228e:	60f8      	str	r0, [r7, #12]
 8002290:	60b9      	str	r1, [r7, #8]
 8002292:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002294:	e034      	b.n	8002300 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002296:	68f8      	ldr	r0, [r7, #12]
 8002298:	f000 f83e 	bl	8002318 <I2C_IsAcknowledgeFailed>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d001      	beq.n	80022a6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e034      	b.n	8002310 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80022a6:	68bb      	ldr	r3, [r7, #8]
 80022a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80022ac:	d028      	beq.n	8002300 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022ae:	f7ff f8ab 	bl	8001408 <HAL_GetTick>
 80022b2:	4602      	mov	r2, r0
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	1ad3      	subs	r3, r2, r3
 80022b8:	68ba      	ldr	r2, [r7, #8]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d302      	bcc.n	80022c4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022be:	68bb      	ldr	r3, [r7, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d11d      	bne.n	8002300 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	695b      	ldr	r3, [r3, #20]
 80022ca:	f003 0304 	and.w	r3, r3, #4
 80022ce:	2b04      	cmp	r3, #4
 80022d0:	d016      	beq.n	8002300 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022d2:	68fb      	ldr	r3, [r7, #12]
 80022d4:	2200      	movs	r2, #0
 80022d6:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	2220      	movs	r2, #32
 80022dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ec:	f043 0220 	orr.w	r2, r3, #32
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	2200      	movs	r2, #0
 80022f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e007      	b.n	8002310 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	695b      	ldr	r3, [r3, #20]
 8002306:	f003 0304 	and.w	r3, r3, #4
 800230a:	2b04      	cmp	r3, #4
 800230c:	d1c3      	bne.n	8002296 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800230e:	2300      	movs	r3, #0
}
 8002310:	4618      	mov	r0, r3
 8002312:	3710      	adds	r7, #16
 8002314:	46bd      	mov	sp, r7
 8002316:	bd80      	pop	{r7, pc}

08002318 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800232a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800232e:	d11b      	bne.n	8002368 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002338:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	2200      	movs	r2, #0
 800233e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2220      	movs	r2, #32
 8002344:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002354:	f043 0204 	orr.w	r2, r3, #4
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	2200      	movs	r2, #0
 8002360:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002364:	2301      	movs	r3, #1
 8002366:	e000      	b.n	800236a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002378:	b580      	push	{r7, lr}
 800237a:	b082      	sub	sp, #8
 800237c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800237e:	2300      	movs	r3, #0
 8002380:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	603b      	str	r3, [r7, #0]
 8002386:	4b20      	ldr	r3, [pc, #128]	; (8002408 <HAL_PWREx_EnableOverDrive+0x90>)
 8002388:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238a:	4a1f      	ldr	r2, [pc, #124]	; (8002408 <HAL_PWREx_EnableOverDrive+0x90>)
 800238c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002390:	6413      	str	r3, [r2, #64]	; 0x40
 8002392:	4b1d      	ldr	r3, [pc, #116]	; (8002408 <HAL_PWREx_EnableOverDrive+0x90>)
 8002394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002396:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800239a:	603b      	str	r3, [r7, #0]
 800239c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800239e:	4b1b      	ldr	r3, [pc, #108]	; (800240c <HAL_PWREx_EnableOverDrive+0x94>)
 80023a0:	2201      	movs	r2, #1
 80023a2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023a4:	f7ff f830 	bl	8001408 <HAL_GetTick>
 80023a8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023aa:	e009      	b.n	80023c0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023ac:	f7ff f82c 	bl	8001408 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ba:	d901      	bls.n	80023c0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80023bc:	2303      	movs	r3, #3
 80023be:	e01f      	b.n	8002400 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023c0:	4b13      	ldr	r3, [pc, #76]	; (8002410 <HAL_PWREx_EnableOverDrive+0x98>)
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023cc:	d1ee      	bne.n	80023ac <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023ce:	4b11      	ldr	r3, [pc, #68]	; (8002414 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023d0:	2201      	movs	r2, #1
 80023d2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023d4:	f7ff f818 	bl	8001408 <HAL_GetTick>
 80023d8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023da:	e009      	b.n	80023f0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023dc:	f7ff f814 	bl	8001408 <HAL_GetTick>
 80023e0:	4602      	mov	r2, r0
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	1ad3      	subs	r3, r2, r3
 80023e6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ea:	d901      	bls.n	80023f0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80023ec:	2303      	movs	r3, #3
 80023ee:	e007      	b.n	8002400 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023f0:	4b07      	ldr	r3, [pc, #28]	; (8002410 <HAL_PWREx_EnableOverDrive+0x98>)
 80023f2:	685b      	ldr	r3, [r3, #4]
 80023f4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023fc:	d1ee      	bne.n	80023dc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80023fe:	2300      	movs	r3, #0
}
 8002400:	4618      	mov	r0, r3
 8002402:	3708      	adds	r7, #8
 8002404:	46bd      	mov	sp, r7
 8002406:	bd80      	pop	{r7, pc}
 8002408:	40023800 	.word	0x40023800
 800240c:	420e0040 	.word	0x420e0040
 8002410:	40007000 	.word	0x40007000
 8002414:	420e0044 	.word	0x420e0044

08002418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002418:	b580      	push	{r7, lr}
 800241a:	b084      	sub	sp, #16
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	2b00      	cmp	r3, #0
 8002426:	d101      	bne.n	800242c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002428:	2301      	movs	r3, #1
 800242a:	e0cc      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800242c:	4b68      	ldr	r3, [pc, #416]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f003 030f 	and.w	r3, r3, #15
 8002434:	683a      	ldr	r2, [r7, #0]
 8002436:	429a      	cmp	r2, r3
 8002438:	d90c      	bls.n	8002454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800243a:	4b65      	ldr	r3, [pc, #404]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	b2d2      	uxtb	r2, r2
 8002440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002442:	4b63      	ldr	r3, [pc, #396]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	f003 030f 	and.w	r3, r3, #15
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	429a      	cmp	r2, r3
 800244e:	d001      	beq.n	8002454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e0b8      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 0302 	and.w	r3, r3, #2
 800245c:	2b00      	cmp	r3, #0
 800245e:	d020      	beq.n	80024a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 0304 	and.w	r3, r3, #4
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800246c:	4b59      	ldr	r3, [pc, #356]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800246e:	689b      	ldr	r3, [r3, #8]
 8002470:	4a58      	ldr	r2, [pc, #352]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002476:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d005      	beq.n	8002490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002484:	4b53      	ldr	r3, [pc, #332]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	4a52      	ldr	r2, [pc, #328]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800248e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002490:	4b50      	ldr	r3, [pc, #320]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002492:	689b      	ldr	r3, [r3, #8]
 8002494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	494d      	ldr	r1, [pc, #308]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800249e:	4313      	orrs	r3, r2
 80024a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f003 0301 	and.w	r3, r3, #1
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d044      	beq.n	8002538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d107      	bne.n	80024c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	4b47      	ldr	r3, [pc, #284]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d119      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	e07f      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d003      	beq.n	80024d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d2:	2b03      	cmp	r3, #3
 80024d4:	d107      	bne.n	80024e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024d6:	4b3f      	ldr	r3, [pc, #252]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d109      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024e2:	2301      	movs	r3, #1
 80024e4:	e06f      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024e6:	4b3b      	ldr	r3, [pc, #236]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 0302 	and.w	r3, r3, #2
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d101      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e067      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024f6:	4b37      	ldr	r3, [pc, #220]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	689b      	ldr	r3, [r3, #8]
 80024fa:	f023 0203 	bic.w	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	685b      	ldr	r3, [r3, #4]
 8002502:	4934      	ldr	r1, [pc, #208]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002504:	4313      	orrs	r3, r2
 8002506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002508:	f7fe ff7e 	bl	8001408 <HAL_GetTick>
 800250c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800250e:	e00a      	b.n	8002526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002510:	f7fe ff7a 	bl	8001408 <HAL_GetTick>
 8002514:	4602      	mov	r2, r0
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	1ad3      	subs	r3, r2, r3
 800251a:	f241 3288 	movw	r2, #5000	; 0x1388
 800251e:	4293      	cmp	r3, r2
 8002520:	d901      	bls.n	8002526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002522:	2303      	movs	r3, #3
 8002524:	e04f      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002526:	4b2b      	ldr	r3, [pc, #172]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 8002528:	689b      	ldr	r3, [r3, #8]
 800252a:	f003 020c 	and.w	r2, r3, #12
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	009b      	lsls	r3, r3, #2
 8002534:	429a      	cmp	r2, r3
 8002536:	d1eb      	bne.n	8002510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002538:	4b25      	ldr	r3, [pc, #148]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 030f 	and.w	r3, r3, #15
 8002540:	683a      	ldr	r2, [r7, #0]
 8002542:	429a      	cmp	r2, r3
 8002544:	d20c      	bcs.n	8002560 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002546:	4b22      	ldr	r3, [pc, #136]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002548:	683a      	ldr	r2, [r7, #0]
 800254a:	b2d2      	uxtb	r2, r2
 800254c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254e:	4b20      	ldr	r3, [pc, #128]	; (80025d0 <HAL_RCC_ClockConfig+0x1b8>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 030f 	and.w	r3, r3, #15
 8002556:	683a      	ldr	r2, [r7, #0]
 8002558:	429a      	cmp	r2, r3
 800255a:	d001      	beq.n	8002560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800255c:	2301      	movs	r3, #1
 800255e:	e032      	b.n	80025c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f003 0304 	and.w	r3, r3, #4
 8002568:	2b00      	cmp	r3, #0
 800256a:	d008      	beq.n	800257e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800256c:	4b19      	ldr	r3, [pc, #100]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	68db      	ldr	r3, [r3, #12]
 8002578:	4916      	ldr	r1, [pc, #88]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800257a:	4313      	orrs	r3, r2
 800257c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 0308 	and.w	r3, r3, #8
 8002586:	2b00      	cmp	r3, #0
 8002588:	d009      	beq.n	800259e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800258a:	4b12      	ldr	r3, [pc, #72]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800258c:	689b      	ldr	r3, [r3, #8]
 800258e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	490e      	ldr	r1, [pc, #56]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 800259a:	4313      	orrs	r3, r2
 800259c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800259e:	f000 f887 	bl	80026b0 <HAL_RCC_GetSysClockFreq>
 80025a2:	4602      	mov	r2, r0
 80025a4:	4b0b      	ldr	r3, [pc, #44]	; (80025d4 <HAL_RCC_ClockConfig+0x1bc>)
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	091b      	lsrs	r3, r3, #4
 80025aa:	f003 030f 	and.w	r3, r3, #15
 80025ae:	490a      	ldr	r1, [pc, #40]	; (80025d8 <HAL_RCC_ClockConfig+0x1c0>)
 80025b0:	5ccb      	ldrb	r3, [r1, r3]
 80025b2:	fa22 f303 	lsr.w	r3, r2, r3
 80025b6:	4a09      	ldr	r2, [pc, #36]	; (80025dc <HAL_RCC_ClockConfig+0x1c4>)
 80025b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ba:	4b09      	ldr	r3, [pc, #36]	; (80025e0 <HAL_RCC_ClockConfig+0x1c8>)
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4618      	mov	r0, r3
 80025c0:	f7fe fdfe 	bl	80011c0 <HAL_InitTick>

  return HAL_OK;
 80025c4:	2300      	movs	r3, #0
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	3710      	adds	r7, #16
 80025ca:	46bd      	mov	sp, r7
 80025cc:	bd80      	pop	{r7, pc}
 80025ce:	bf00      	nop
 80025d0:	40023c00 	.word	0x40023c00
 80025d4:	40023800 	.word	0x40023800
 80025d8:	08008c2c 	.word	0x08008c2c
 80025dc:	2000000c 	.word	0x2000000c
 80025e0:	20000010 	.word	0x20000010

080025e4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025e4:	b480      	push	{r7}
 80025e6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025e8:	4b03      	ldr	r3, [pc, #12]	; (80025f8 <HAL_RCC_GetHCLKFreq+0x14>)
 80025ea:	681b      	ldr	r3, [r3, #0]
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr
 80025f6:	bf00      	nop
 80025f8:	2000000c 	.word	0x2000000c

080025fc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002600:	f7ff fff0 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 8002604:	4602      	mov	r2, r0
 8002606:	4b05      	ldr	r3, [pc, #20]	; (800261c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002608:	689b      	ldr	r3, [r3, #8]
 800260a:	0a9b      	lsrs	r3, r3, #10
 800260c:	f003 0307 	and.w	r3, r3, #7
 8002610:	4903      	ldr	r1, [pc, #12]	; (8002620 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002612:	5ccb      	ldrb	r3, [r1, r3]
 8002614:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002618:	4618      	mov	r0, r3
 800261a:	bd80      	pop	{r7, pc}
 800261c:	40023800 	.word	0x40023800
 8002620:	08008c3c 	.word	0x08008c3c

08002624 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002624:	b580      	push	{r7, lr}
 8002626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002628:	f7ff ffdc 	bl	80025e4 <HAL_RCC_GetHCLKFreq>
 800262c:	4602      	mov	r2, r0
 800262e:	4b05      	ldr	r3, [pc, #20]	; (8002644 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002630:	689b      	ldr	r3, [r3, #8]
 8002632:	0b5b      	lsrs	r3, r3, #13
 8002634:	f003 0307 	and.w	r3, r3, #7
 8002638:	4903      	ldr	r1, [pc, #12]	; (8002648 <HAL_RCC_GetPCLK2Freq+0x24>)
 800263a:	5ccb      	ldrb	r3, [r1, r3]
 800263c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002640:	4618      	mov	r0, r3
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40023800 	.word	0x40023800
 8002648:	08008c3c 	.word	0x08008c3c

0800264c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800264c:	b480      	push	{r7}
 800264e:	b083      	sub	sp, #12
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	220f      	movs	r2, #15
 800265a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800265c:	4b12      	ldr	r3, [pc, #72]	; (80026a8 <HAL_RCC_GetClockConfig+0x5c>)
 800265e:	689b      	ldr	r3, [r3, #8]
 8002660:	f003 0203 	and.w	r2, r3, #3
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002668:	4b0f      	ldr	r3, [pc, #60]	; (80026a8 <HAL_RCC_GetClockConfig+0x5c>)
 800266a:	689b      	ldr	r3, [r3, #8]
 800266c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002674:	4b0c      	ldr	r3, [pc, #48]	; (80026a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002676:	689b      	ldr	r3, [r3, #8]
 8002678:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002680:	4b09      	ldr	r3, [pc, #36]	; (80026a8 <HAL_RCC_GetClockConfig+0x5c>)
 8002682:	689b      	ldr	r3, [r3, #8]
 8002684:	08db      	lsrs	r3, r3, #3
 8002686:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800268e:	4b07      	ldr	r3, [pc, #28]	; (80026ac <HAL_RCC_GetClockConfig+0x60>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 020f 	and.w	r2, r3, #15
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	601a      	str	r2, [r3, #0]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr
 80026a6:	bf00      	nop
 80026a8:	40023800 	.word	0x40023800
 80026ac:	40023c00 	.word	0x40023c00

080026b0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026b0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026b4:	b0ae      	sub	sp, #184	; 0xb8
 80026b6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80026be:	2300      	movs	r3, #0
 80026c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80026c4:	2300      	movs	r3, #0
 80026c6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80026ca:	2300      	movs	r3, #0
 80026cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026d6:	4bcb      	ldr	r3, [pc, #812]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 80026d8:	689b      	ldr	r3, [r3, #8]
 80026da:	f003 030c 	and.w	r3, r3, #12
 80026de:	2b0c      	cmp	r3, #12
 80026e0:	f200 8206 	bhi.w	8002af0 <HAL_RCC_GetSysClockFreq+0x440>
 80026e4:	a201      	add	r2, pc, #4	; (adr r2, 80026ec <HAL_RCC_GetSysClockFreq+0x3c>)
 80026e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ea:	bf00      	nop
 80026ec:	08002721 	.word	0x08002721
 80026f0:	08002af1 	.word	0x08002af1
 80026f4:	08002af1 	.word	0x08002af1
 80026f8:	08002af1 	.word	0x08002af1
 80026fc:	08002729 	.word	0x08002729
 8002700:	08002af1 	.word	0x08002af1
 8002704:	08002af1 	.word	0x08002af1
 8002708:	08002af1 	.word	0x08002af1
 800270c:	08002731 	.word	0x08002731
 8002710:	08002af1 	.word	0x08002af1
 8002714:	08002af1 	.word	0x08002af1
 8002718:	08002af1 	.word	0x08002af1
 800271c:	08002921 	.word	0x08002921
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002720:	4bb9      	ldr	r3, [pc, #740]	; (8002a08 <HAL_RCC_GetSysClockFreq+0x358>)
 8002722:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002726:	e1e7      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002728:	4bb8      	ldr	r3, [pc, #736]	; (8002a0c <HAL_RCC_GetSysClockFreq+0x35c>)
 800272a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800272e:	e1e3      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002730:	4bb4      	ldr	r3, [pc, #720]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002738:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800273c:	4bb1      	ldr	r3, [pc, #708]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d071      	beq.n	800282c <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002748:	4bae      	ldr	r3, [pc, #696]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800274a:	685b      	ldr	r3, [r3, #4]
 800274c:	099b      	lsrs	r3, r3, #6
 800274e:	2200      	movs	r2, #0
 8002750:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002754:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002758:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800275c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002760:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002764:	2300      	movs	r3, #0
 8002766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800276a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800276e:	4622      	mov	r2, r4
 8002770:	462b      	mov	r3, r5
 8002772:	f04f 0000 	mov.w	r0, #0
 8002776:	f04f 0100 	mov.w	r1, #0
 800277a:	0159      	lsls	r1, r3, #5
 800277c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002780:	0150      	lsls	r0, r2, #5
 8002782:	4602      	mov	r2, r0
 8002784:	460b      	mov	r3, r1
 8002786:	4621      	mov	r1, r4
 8002788:	1a51      	subs	r1, r2, r1
 800278a:	6439      	str	r1, [r7, #64]	; 0x40
 800278c:	4629      	mov	r1, r5
 800278e:	eb63 0301 	sbc.w	r3, r3, r1
 8002792:	647b      	str	r3, [r7, #68]	; 0x44
 8002794:	f04f 0200 	mov.w	r2, #0
 8002798:	f04f 0300 	mov.w	r3, #0
 800279c:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 80027a0:	4649      	mov	r1, r9
 80027a2:	018b      	lsls	r3, r1, #6
 80027a4:	4641      	mov	r1, r8
 80027a6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027aa:	4641      	mov	r1, r8
 80027ac:	018a      	lsls	r2, r1, #6
 80027ae:	4641      	mov	r1, r8
 80027b0:	1a51      	subs	r1, r2, r1
 80027b2:	63b9      	str	r1, [r7, #56]	; 0x38
 80027b4:	4649      	mov	r1, r9
 80027b6:	eb63 0301 	sbc.w	r3, r3, r1
 80027ba:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027bc:	f04f 0200 	mov.w	r2, #0
 80027c0:	f04f 0300 	mov.w	r3, #0
 80027c4:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80027c8:	4649      	mov	r1, r9
 80027ca:	00cb      	lsls	r3, r1, #3
 80027cc:	4641      	mov	r1, r8
 80027ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027d2:	4641      	mov	r1, r8
 80027d4:	00ca      	lsls	r2, r1, #3
 80027d6:	4610      	mov	r0, r2
 80027d8:	4619      	mov	r1, r3
 80027da:	4603      	mov	r3, r0
 80027dc:	4622      	mov	r2, r4
 80027de:	189b      	adds	r3, r3, r2
 80027e0:	633b      	str	r3, [r7, #48]	; 0x30
 80027e2:	462b      	mov	r3, r5
 80027e4:	460a      	mov	r2, r1
 80027e6:	eb42 0303 	adc.w	r3, r2, r3
 80027ea:	637b      	str	r3, [r7, #52]	; 0x34
 80027ec:	f04f 0200 	mov.w	r2, #0
 80027f0:	f04f 0300 	mov.w	r3, #0
 80027f4:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027f8:	4629      	mov	r1, r5
 80027fa:	024b      	lsls	r3, r1, #9
 80027fc:	4621      	mov	r1, r4
 80027fe:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002802:	4621      	mov	r1, r4
 8002804:	024a      	lsls	r2, r1, #9
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800280e:	2200      	movs	r2, #0
 8002810:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002814:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002818:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800281c:	f7fd fcf8 	bl	8000210 <__aeabi_uldivmod>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4613      	mov	r3, r2
 8002826:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800282a:	e067      	b.n	80028fc <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800282c:	4b75      	ldr	r3, [pc, #468]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	099b      	lsrs	r3, r3, #6
 8002832:	2200      	movs	r2, #0
 8002834:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002838:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 800283c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002840:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002844:	67bb      	str	r3, [r7, #120]	; 0x78
 8002846:	2300      	movs	r3, #0
 8002848:	67fb      	str	r3, [r7, #124]	; 0x7c
 800284a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800284e:	4622      	mov	r2, r4
 8002850:	462b      	mov	r3, r5
 8002852:	f04f 0000 	mov.w	r0, #0
 8002856:	f04f 0100 	mov.w	r1, #0
 800285a:	0159      	lsls	r1, r3, #5
 800285c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002860:	0150      	lsls	r0, r2, #5
 8002862:	4602      	mov	r2, r0
 8002864:	460b      	mov	r3, r1
 8002866:	4621      	mov	r1, r4
 8002868:	1a51      	subs	r1, r2, r1
 800286a:	62b9      	str	r1, [r7, #40]	; 0x28
 800286c:	4629      	mov	r1, r5
 800286e:	eb63 0301 	sbc.w	r3, r3, r1
 8002872:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002874:	f04f 0200 	mov.w	r2, #0
 8002878:	f04f 0300 	mov.w	r3, #0
 800287c:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 8002880:	4649      	mov	r1, r9
 8002882:	018b      	lsls	r3, r1, #6
 8002884:	4641      	mov	r1, r8
 8002886:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800288a:	4641      	mov	r1, r8
 800288c:	018a      	lsls	r2, r1, #6
 800288e:	4641      	mov	r1, r8
 8002890:	ebb2 0a01 	subs.w	sl, r2, r1
 8002894:	4649      	mov	r1, r9
 8002896:	eb63 0b01 	sbc.w	fp, r3, r1
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	f04f 0300 	mov.w	r3, #0
 80028a2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80028a6:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80028aa:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80028ae:	4692      	mov	sl, r2
 80028b0:	469b      	mov	fp, r3
 80028b2:	4623      	mov	r3, r4
 80028b4:	eb1a 0303 	adds.w	r3, sl, r3
 80028b8:	623b      	str	r3, [r7, #32]
 80028ba:	462b      	mov	r3, r5
 80028bc:	eb4b 0303 	adc.w	r3, fp, r3
 80028c0:	627b      	str	r3, [r7, #36]	; 0x24
 80028c2:	f04f 0200 	mov.w	r2, #0
 80028c6:	f04f 0300 	mov.w	r3, #0
 80028ca:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028ce:	4629      	mov	r1, r5
 80028d0:	028b      	lsls	r3, r1, #10
 80028d2:	4621      	mov	r1, r4
 80028d4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028d8:	4621      	mov	r1, r4
 80028da:	028a      	lsls	r2, r1, #10
 80028dc:	4610      	mov	r0, r2
 80028de:	4619      	mov	r1, r3
 80028e0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028e4:	2200      	movs	r2, #0
 80028e6:	673b      	str	r3, [r7, #112]	; 0x70
 80028e8:	677a      	str	r2, [r7, #116]	; 0x74
 80028ea:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80028ee:	f7fd fc8f 	bl	8000210 <__aeabi_uldivmod>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4613      	mov	r3, r2
 80028f8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028fc:	4b41      	ldr	r3, [pc, #260]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 80028fe:	685b      	ldr	r3, [r3, #4]
 8002900:	0c1b      	lsrs	r3, r3, #16
 8002902:	f003 0303 	and.w	r3, r3, #3
 8002906:	3301      	adds	r3, #1
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 800290e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002912:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002916:	fbb2 f3f3 	udiv	r3, r2, r3
 800291a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800291e:	e0eb      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002920:	4b38      	ldr	r3, [pc, #224]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002928:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800292c:	4b35      	ldr	r3, [pc, #212]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d06b      	beq.n	8002a10 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002938:	4b32      	ldr	r3, [pc, #200]	; (8002a04 <HAL_RCC_GetSysClockFreq+0x354>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	099b      	lsrs	r3, r3, #6
 800293e:	2200      	movs	r2, #0
 8002940:	66bb      	str	r3, [r7, #104]	; 0x68
 8002942:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002946:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800294a:	663b      	str	r3, [r7, #96]	; 0x60
 800294c:	2300      	movs	r3, #0
 800294e:	667b      	str	r3, [r7, #100]	; 0x64
 8002950:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002954:	4622      	mov	r2, r4
 8002956:	462b      	mov	r3, r5
 8002958:	f04f 0000 	mov.w	r0, #0
 800295c:	f04f 0100 	mov.w	r1, #0
 8002960:	0159      	lsls	r1, r3, #5
 8002962:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002966:	0150      	lsls	r0, r2, #5
 8002968:	4602      	mov	r2, r0
 800296a:	460b      	mov	r3, r1
 800296c:	4621      	mov	r1, r4
 800296e:	1a51      	subs	r1, r2, r1
 8002970:	61b9      	str	r1, [r7, #24]
 8002972:	4629      	mov	r1, r5
 8002974:	eb63 0301 	sbc.w	r3, r3, r1
 8002978:	61fb      	str	r3, [r7, #28]
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	f04f 0300 	mov.w	r3, #0
 8002982:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002986:	4659      	mov	r1, fp
 8002988:	018b      	lsls	r3, r1, #6
 800298a:	4651      	mov	r1, sl
 800298c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002990:	4651      	mov	r1, sl
 8002992:	018a      	lsls	r2, r1, #6
 8002994:	4651      	mov	r1, sl
 8002996:	ebb2 0801 	subs.w	r8, r2, r1
 800299a:	4659      	mov	r1, fp
 800299c:	eb63 0901 	sbc.w	r9, r3, r1
 80029a0:	f04f 0200 	mov.w	r2, #0
 80029a4:	f04f 0300 	mov.w	r3, #0
 80029a8:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029ac:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029b0:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029b4:	4690      	mov	r8, r2
 80029b6:	4699      	mov	r9, r3
 80029b8:	4623      	mov	r3, r4
 80029ba:	eb18 0303 	adds.w	r3, r8, r3
 80029be:	613b      	str	r3, [r7, #16]
 80029c0:	462b      	mov	r3, r5
 80029c2:	eb49 0303 	adc.w	r3, r9, r3
 80029c6:	617b      	str	r3, [r7, #20]
 80029c8:	f04f 0200 	mov.w	r2, #0
 80029cc:	f04f 0300 	mov.w	r3, #0
 80029d0:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029d4:	4629      	mov	r1, r5
 80029d6:	024b      	lsls	r3, r1, #9
 80029d8:	4621      	mov	r1, r4
 80029da:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029de:	4621      	mov	r1, r4
 80029e0:	024a      	lsls	r2, r1, #9
 80029e2:	4610      	mov	r0, r2
 80029e4:	4619      	mov	r1, r3
 80029e6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029ea:	2200      	movs	r2, #0
 80029ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80029ee:	65fa      	str	r2, [r7, #92]	; 0x5c
 80029f0:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029f4:	f7fd fc0c 	bl	8000210 <__aeabi_uldivmod>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4613      	mov	r3, r2
 80029fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a02:	e065      	b.n	8002ad0 <HAL_RCC_GetSysClockFreq+0x420>
 8002a04:	40023800 	.word	0x40023800
 8002a08:	00f42400 	.word	0x00f42400
 8002a0c:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a10:	4b3d      	ldr	r3, [pc, #244]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x458>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	099b      	lsrs	r3, r3, #6
 8002a16:	2200      	movs	r2, #0
 8002a18:	4618      	mov	r0, r3
 8002a1a:	4611      	mov	r1, r2
 8002a1c:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a20:	653b      	str	r3, [r7, #80]	; 0x50
 8002a22:	2300      	movs	r3, #0
 8002a24:	657b      	str	r3, [r7, #84]	; 0x54
 8002a26:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002a2a:	4642      	mov	r2, r8
 8002a2c:	464b      	mov	r3, r9
 8002a2e:	f04f 0000 	mov.w	r0, #0
 8002a32:	f04f 0100 	mov.w	r1, #0
 8002a36:	0159      	lsls	r1, r3, #5
 8002a38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a3c:	0150      	lsls	r0, r2, #5
 8002a3e:	4602      	mov	r2, r0
 8002a40:	460b      	mov	r3, r1
 8002a42:	4641      	mov	r1, r8
 8002a44:	1a51      	subs	r1, r2, r1
 8002a46:	60b9      	str	r1, [r7, #8]
 8002a48:	4649      	mov	r1, r9
 8002a4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a5c:	4659      	mov	r1, fp
 8002a5e:	018b      	lsls	r3, r1, #6
 8002a60:	4651      	mov	r1, sl
 8002a62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a66:	4651      	mov	r1, sl
 8002a68:	018a      	lsls	r2, r1, #6
 8002a6a:	4651      	mov	r1, sl
 8002a6c:	1a54      	subs	r4, r2, r1
 8002a6e:	4659      	mov	r1, fp
 8002a70:	eb63 0501 	sbc.w	r5, r3, r1
 8002a74:	f04f 0200 	mov.w	r2, #0
 8002a78:	f04f 0300 	mov.w	r3, #0
 8002a7c:	00eb      	lsls	r3, r5, #3
 8002a7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a82:	00e2      	lsls	r2, r4, #3
 8002a84:	4614      	mov	r4, r2
 8002a86:	461d      	mov	r5, r3
 8002a88:	4643      	mov	r3, r8
 8002a8a:	18e3      	adds	r3, r4, r3
 8002a8c:	603b      	str	r3, [r7, #0]
 8002a8e:	464b      	mov	r3, r9
 8002a90:	eb45 0303 	adc.w	r3, r5, r3
 8002a94:	607b      	str	r3, [r7, #4]
 8002a96:	f04f 0200 	mov.w	r2, #0
 8002a9a:	f04f 0300 	mov.w	r3, #0
 8002a9e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002aa2:	4629      	mov	r1, r5
 8002aa4:	028b      	lsls	r3, r1, #10
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002aac:	4621      	mov	r1, r4
 8002aae:	028a      	lsls	r2, r1, #10
 8002ab0:	4610      	mov	r0, r2
 8002ab2:	4619      	mov	r1, r3
 8002ab4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002ab8:	2200      	movs	r2, #0
 8002aba:	64bb      	str	r3, [r7, #72]	; 0x48
 8002abc:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002abe:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002ac2:	f7fd fba5 	bl	8000210 <__aeabi_uldivmod>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	460b      	mov	r3, r1
 8002aca:	4613      	mov	r3, r2
 8002acc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ad0:	4b0d      	ldr	r3, [pc, #52]	; (8002b08 <HAL_RCC_GetSysClockFreq+0x458>)
 8002ad2:	685b      	ldr	r3, [r3, #4]
 8002ad4:	0f1b      	lsrs	r3, r3, #28
 8002ad6:	f003 0307 	and.w	r3, r3, #7
 8002ada:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002ade:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ae2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ae6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002aea:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002aee:	e003      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002af0:	4b06      	ldr	r3, [pc, #24]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x45c>)
 8002af2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002af6:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002af8:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	37b8      	adds	r7, #184	; 0xb8
 8002b00:	46bd      	mov	sp, r7
 8002b02:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b06:	bf00      	nop
 8002b08:	40023800 	.word	0x40023800
 8002b0c:	00f42400 	.word	0x00f42400

08002b10 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002b10:	b580      	push	{r7, lr}
 8002b12:	b086      	sub	sp, #24
 8002b14:	af00      	add	r7, sp, #0
 8002b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d101      	bne.n	8002b22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e28d      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8083 	beq.w	8002c36 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b30:	4b94      	ldr	r3, [pc, #592]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b04      	cmp	r3, #4
 8002b3a:	d019      	beq.n	8002b70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b3c:	4b91      	ldr	r3, [pc, #580]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b44:	2b08      	cmp	r3, #8
 8002b46:	d106      	bne.n	8002b56 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b48:	4b8e      	ldr	r3, [pc, #568]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b50:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b54:	d00c      	beq.n	8002b70 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b56:	4b8b      	ldr	r3, [pc, #556]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b5e:	2b0c      	cmp	r3, #12
 8002b60:	d112      	bne.n	8002b88 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b62:	4b88      	ldr	r3, [pc, #544]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b6a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b6e:	d10b      	bne.n	8002b88 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b70:	4b84      	ldr	r3, [pc, #528]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d05b      	beq.n	8002c34 <HAL_RCC_OscConfig+0x124>
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d157      	bne.n	8002c34 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e25a      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b90:	d106      	bne.n	8002ba0 <HAL_RCC_OscConfig+0x90>
 8002b92:	4b7c      	ldr	r3, [pc, #496]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a7b      	ldr	r2, [pc, #492]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002b98:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	e01d      	b.n	8002bdc <HAL_RCC_OscConfig+0xcc>
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	685b      	ldr	r3, [r3, #4]
 8002ba4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002ba8:	d10c      	bne.n	8002bc4 <HAL_RCC_OscConfig+0xb4>
 8002baa:	4b76      	ldr	r3, [pc, #472]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	4a75      	ldr	r2, [pc, #468]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bb0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002bb4:	6013      	str	r3, [r2, #0]
 8002bb6:	4b73      	ldr	r3, [pc, #460]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	4a72      	ldr	r2, [pc, #456]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bc0:	6013      	str	r3, [r2, #0]
 8002bc2:	e00b      	b.n	8002bdc <HAL_RCC_OscConfig+0xcc>
 8002bc4:	4b6f      	ldr	r3, [pc, #444]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a6e      	ldr	r2, [pc, #440]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bce:	6013      	str	r3, [r2, #0]
 8002bd0:	4b6c      	ldr	r3, [pc, #432]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4a6b      	ldr	r2, [pc, #428]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002bd6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bda:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d013      	beq.n	8002c0c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002be4:	f7fe fc10 	bl	8001408 <HAL_GetTick>
 8002be8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	e008      	b.n	8002bfe <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bec:	f7fe fc0c 	bl	8001408 <HAL_GetTick>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	693b      	ldr	r3, [r7, #16]
 8002bf4:	1ad3      	subs	r3, r2, r3
 8002bf6:	2b64      	cmp	r3, #100	; 0x64
 8002bf8:	d901      	bls.n	8002bfe <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002bfa:	2303      	movs	r3, #3
 8002bfc:	e21f      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bfe:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d0f0      	beq.n	8002bec <HAL_RCC_OscConfig+0xdc>
 8002c0a:	e014      	b.n	8002c36 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c0c:	f7fe fbfc 	bl	8001408 <HAL_GetTick>
 8002c10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c12:	e008      	b.n	8002c26 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c14:	f7fe fbf8 	bl	8001408 <HAL_GetTick>
 8002c18:	4602      	mov	r2, r0
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	1ad3      	subs	r3, r2, r3
 8002c1e:	2b64      	cmp	r3, #100	; 0x64
 8002c20:	d901      	bls.n	8002c26 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c22:	2303      	movs	r3, #3
 8002c24:	e20b      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c26:	4b57      	ldr	r3, [pc, #348]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2e:	2b00      	cmp	r3, #0
 8002c30:	d1f0      	bne.n	8002c14 <HAL_RCC_OscConfig+0x104>
 8002c32:	e000      	b.n	8002c36 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f003 0302 	and.w	r3, r3, #2
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d06f      	beq.n	8002d22 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c42:	4b50      	ldr	r3, [pc, #320]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d017      	beq.n	8002c7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c4e:	4b4d      	ldr	r3, [pc, #308]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c56:	2b08      	cmp	r3, #8
 8002c58:	d105      	bne.n	8002c66 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c5a:	4b4a      	ldr	r3, [pc, #296]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d00b      	beq.n	8002c7e <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c66:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c68:	689b      	ldr	r3, [r3, #8]
 8002c6a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c6e:	2b0c      	cmp	r3, #12
 8002c70:	d11c      	bne.n	8002cac <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c72:	4b44      	ldr	r3, [pc, #272]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c74:	685b      	ldr	r3, [r3, #4]
 8002c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d116      	bne.n	8002cac <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c7e:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f003 0302 	and.w	r3, r3, #2
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d005      	beq.n	8002c96 <HAL_RCC_OscConfig+0x186>
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	2b01      	cmp	r3, #1
 8002c90:	d001      	beq.n	8002c96 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c92:	2301      	movs	r3, #1
 8002c94:	e1d3      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c96:	4b3b      	ldr	r3, [pc, #236]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	00db      	lsls	r3, r3, #3
 8002ca4:	4937      	ldr	r1, [pc, #220]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002ca6:	4313      	orrs	r3, r2
 8002ca8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002caa:	e03a      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d020      	beq.n	8002cf6 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002cb4:	4b34      	ldr	r3, [pc, #208]	; (8002d88 <HAL_RCC_OscConfig+0x278>)
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cba:	f7fe fba5 	bl	8001408 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cc2:	f7fe fba1 	bl	8001408 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e1b4      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cd4:	4b2b      	ldr	r3, [pc, #172]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f003 0302 	and.w	r3, r3, #2
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ce0:	4b28      	ldr	r3, [pc, #160]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	691b      	ldr	r3, [r3, #16]
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	4925      	ldr	r1, [pc, #148]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002cf0:	4313      	orrs	r3, r2
 8002cf2:	600b      	str	r3, [r1, #0]
 8002cf4:	e015      	b.n	8002d22 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cf6:	4b24      	ldr	r3, [pc, #144]	; (8002d88 <HAL_RCC_OscConfig+0x278>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cfc:	f7fe fb84 	bl	8001408 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002d04:	f7fe fb80 	bl	8001408 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e193      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d16:	4b1b      	ldr	r3, [pc, #108]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f003 0308 	and.w	r3, r3, #8
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d036      	beq.n	8002d9c <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	695b      	ldr	r3, [r3, #20]
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d016      	beq.n	8002d64 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d36:	4b15      	ldr	r3, [pc, #84]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d38:	2201      	movs	r2, #1
 8002d3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d3c:	f7fe fb64 	bl	8001408 <HAL_GetTick>
 8002d40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	e008      	b.n	8002d56 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d44:	f7fe fb60 	bl	8001408 <HAL_GetTick>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	693b      	ldr	r3, [r7, #16]
 8002d4c:	1ad3      	subs	r3, r2, r3
 8002d4e:	2b02      	cmp	r3, #2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e173      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d56:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_OscConfig+0x274>)
 8002d58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0f0      	beq.n	8002d44 <HAL_RCC_OscConfig+0x234>
 8002d62:	e01b      	b.n	8002d9c <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d64:	4b09      	ldr	r3, [pc, #36]	; (8002d8c <HAL_RCC_OscConfig+0x27c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d6a:	f7fe fb4d 	bl	8001408 <HAL_GetTick>
 8002d6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d70:	e00e      	b.n	8002d90 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d72:	f7fe fb49 	bl	8001408 <HAL_GetTick>
 8002d76:	4602      	mov	r2, r0
 8002d78:	693b      	ldr	r3, [r7, #16]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b02      	cmp	r3, #2
 8002d7e:	d907      	bls.n	8002d90 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d80:	2303      	movs	r3, #3
 8002d82:	e15c      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
 8002d84:	40023800 	.word	0x40023800
 8002d88:	42470000 	.word	0x42470000
 8002d8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d90:	4b8a      	ldr	r3, [pc, #552]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002d92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d94:	f003 0302 	and.w	r3, r3, #2
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d1ea      	bne.n	8002d72 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	f003 0304 	and.w	r3, r3, #4
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 8097 	beq.w	8002ed8 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002daa:	2300      	movs	r3, #0
 8002dac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002dae:	4b83      	ldr	r3, [pc, #524]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10f      	bne.n	8002dda <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
 8002dbe:	4b7f      	ldr	r3, [pc, #508]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dc2:	4a7e      	ldr	r2, [pc, #504]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002dc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002dca:	4b7c      	ldr	r3, [pc, #496]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dda:	4b79      	ldr	r3, [pc, #484]	; (8002fc0 <HAL_RCC_OscConfig+0x4b0>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d118      	bne.n	8002e18 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002de6:	4b76      	ldr	r3, [pc, #472]	; (8002fc0 <HAL_RCC_OscConfig+0x4b0>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a75      	ldr	r2, [pc, #468]	; (8002fc0 <HAL_RCC_OscConfig+0x4b0>)
 8002dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002df0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002df2:	f7fe fb09 	bl	8001408 <HAL_GetTick>
 8002df6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	e008      	b.n	8002e0c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dfa:	f7fe fb05 	bl	8001408 <HAL_GetTick>
 8002dfe:	4602      	mov	r2, r0
 8002e00:	693b      	ldr	r3, [r7, #16]
 8002e02:	1ad3      	subs	r3, r2, r3
 8002e04:	2b02      	cmp	r3, #2
 8002e06:	d901      	bls.n	8002e0c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002e08:	2303      	movs	r3, #3
 8002e0a:	e118      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e0c:	4b6c      	ldr	r3, [pc, #432]	; (8002fc0 <HAL_RCC_OscConfig+0x4b0>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d0f0      	beq.n	8002dfa <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	689b      	ldr	r3, [r3, #8]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d106      	bne.n	8002e2e <HAL_RCC_OscConfig+0x31e>
 8002e20:	4b66      	ldr	r3, [pc, #408]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e24:	4a65      	ldr	r2, [pc, #404]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e26:	f043 0301 	orr.w	r3, r3, #1
 8002e2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2c:	e01c      	b.n	8002e68 <HAL_RCC_OscConfig+0x358>
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	2b05      	cmp	r3, #5
 8002e34:	d10c      	bne.n	8002e50 <HAL_RCC_OscConfig+0x340>
 8002e36:	4b61      	ldr	r3, [pc, #388]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e3a:	4a60      	ldr	r2, [pc, #384]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e3c:	f043 0304 	orr.w	r3, r3, #4
 8002e40:	6713      	str	r3, [r2, #112]	; 0x70
 8002e42:	4b5e      	ldr	r3, [pc, #376]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e46:	4a5d      	ldr	r2, [pc, #372]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e48:	f043 0301 	orr.w	r3, r3, #1
 8002e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCC_OscConfig+0x358>
 8002e50:	4b5a      	ldr	r3, [pc, #360]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e54:	4a59      	ldr	r2, [pc, #356]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e56:	f023 0301 	bic.w	r3, r3, #1
 8002e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002e5c:	4b57      	ldr	r3, [pc, #348]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e60:	4a56      	ldr	r2, [pc, #344]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e62:	f023 0304 	bic.w	r3, r3, #4
 8002e66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	689b      	ldr	r3, [r3, #8]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d015      	beq.n	8002e9c <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e70:	f7fe faca 	bl	8001408 <HAL_GetTick>
 8002e74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e76:	e00a      	b.n	8002e8e <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e78:	f7fe fac6 	bl	8001408 <HAL_GetTick>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	1ad3      	subs	r3, r2, r3
 8002e82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d901      	bls.n	8002e8e <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e8a:	2303      	movs	r3, #3
 8002e8c:	e0d7      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e8e:	4b4b      	ldr	r3, [pc, #300]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e92:	f003 0302 	and.w	r3, r3, #2
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d0ee      	beq.n	8002e78 <HAL_RCC_OscConfig+0x368>
 8002e9a:	e014      	b.n	8002ec6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e9c:	f7fe fab4 	bl	8001408 <HAL_GetTick>
 8002ea0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea2:	e00a      	b.n	8002eba <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ea4:	f7fe fab0 	bl	8001408 <HAL_GetTick>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1ad3      	subs	r3, r2, r3
 8002eae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e0c1      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002eba:	4b40      	ldr	r3, [pc, #256]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ebe:	f003 0302 	and.w	r3, r3, #2
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1ee      	bne.n	8002ea4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ec6:	7dfb      	ldrb	r3, [r7, #23]
 8002ec8:	2b01      	cmp	r3, #1
 8002eca:	d105      	bne.n	8002ed8 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ecc:	4b3b      	ldr	r3, [pc, #236]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002ece:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed0:	4a3a      	ldr	r2, [pc, #232]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002ed2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ed6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	699b      	ldr	r3, [r3, #24]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80ad 	beq.w	800303c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ee2:	4b36      	ldr	r3, [pc, #216]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f003 030c 	and.w	r3, r3, #12
 8002eea:	2b08      	cmp	r3, #8
 8002eec:	d060      	beq.n	8002fb0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	2b02      	cmp	r3, #2
 8002ef4:	d145      	bne.n	8002f82 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ef6:	4b33      	ldr	r3, [pc, #204]	; (8002fc4 <HAL_RCC_OscConfig+0x4b4>)
 8002ef8:	2200      	movs	r2, #0
 8002efa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002efc:	f7fe fa84 	bl	8001408 <HAL_GetTick>
 8002f00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	e008      	b.n	8002f16 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f04:	f7fe fa80 	bl	8001408 <HAL_GetTick>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1ad3      	subs	r3, r2, r3
 8002f0e:	2b02      	cmp	r3, #2
 8002f10:	d901      	bls.n	8002f16 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002f12:	2303      	movs	r3, #3
 8002f14:	e093      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f16:	4b29      	ldr	r3, [pc, #164]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d1f0      	bne.n	8002f04 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	69da      	ldr	r2, [r3, #28]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	6a1b      	ldr	r3, [r3, #32]
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f30:	019b      	lsls	r3, r3, #6
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f38:	085b      	lsrs	r3, r3, #1
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	041b      	lsls	r3, r3, #16
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f44:	061b      	lsls	r3, r3, #24
 8002f46:	431a      	orrs	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f4c:	071b      	lsls	r3, r3, #28
 8002f4e:	491b      	ldr	r1, [pc, #108]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002f50:	4313      	orrs	r3, r2
 8002f52:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f54:	4b1b      	ldr	r3, [pc, #108]	; (8002fc4 <HAL_RCC_OscConfig+0x4b4>)
 8002f56:	2201      	movs	r2, #1
 8002f58:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f5a:	f7fe fa55 	bl	8001408 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f62:	f7fe fa51 	bl	8001408 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b02      	cmp	r3, #2
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e064      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f74:	4b11      	ldr	r3, [pc, #68]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x452>
 8002f80:	e05c      	b.n	800303c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f82:	4b10      	ldr	r3, [pc, #64]	; (8002fc4 <HAL_RCC_OscConfig+0x4b4>)
 8002f84:	2200      	movs	r2, #0
 8002f86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f88:	f7fe fa3e 	bl	8001408 <HAL_GetTick>
 8002f8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	e008      	b.n	8002fa2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f90:	f7fe fa3a 	bl	8001408 <HAL_GetTick>
 8002f94:	4602      	mov	r2, r0
 8002f96:	693b      	ldr	r3, [r7, #16]
 8002f98:	1ad3      	subs	r3, r2, r3
 8002f9a:	2b02      	cmp	r3, #2
 8002f9c:	d901      	bls.n	8002fa2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f9e:	2303      	movs	r3, #3
 8002fa0:	e04d      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002fa2:	4b06      	ldr	r3, [pc, #24]	; (8002fbc <HAL_RCC_OscConfig+0x4ac>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d1f0      	bne.n	8002f90 <HAL_RCC_OscConfig+0x480>
 8002fae:	e045      	b.n	800303c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	699b      	ldr	r3, [r3, #24]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d107      	bne.n	8002fc8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e040      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
 8002fbc:	40023800 	.word	0x40023800
 8002fc0:	40007000 	.word	0x40007000
 8002fc4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fc8:	4b1f      	ldr	r3, [pc, #124]	; (8003048 <HAL_RCC_OscConfig+0x538>)
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d030      	beq.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d129      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fee:	429a      	cmp	r2, r3
 8002ff0:	d122      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ff2:	68fa      	ldr	r2, [r7, #12]
 8002ff4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002ff8:	4013      	ands	r3, r2
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002ffe:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003000:	4293      	cmp	r3, r2
 8003002:	d119      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300e:	085b      	lsrs	r3, r3, #1
 8003010:	3b01      	subs	r3, #1
 8003012:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003014:	429a      	cmp	r2, r3
 8003016:	d10f      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003022:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003024:	429a      	cmp	r2, r3
 8003026:	d107      	bne.n	8003038 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003032:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003034:	429a      	cmp	r2, r3
 8003036:	d001      	beq.n	800303c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	e000      	b.n	800303e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 800303c:	2300      	movs	r3, #0
}
 800303e:	4618      	mov	r0, r3
 8003040:	3718      	adds	r7, #24
 8003042:	46bd      	mov	sp, r7
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	40023800 	.word	0x40023800

0800304c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b082      	sub	sp, #8
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d101      	bne.n	800305e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e041      	b.n	80030e2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003064:	b2db      	uxtb	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d106      	bne.n	8003078 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2200      	movs	r2, #0
 800306e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f7fe f804 	bl	8001080 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	2202      	movs	r2, #2
 800307c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681a      	ldr	r2, [r3, #0]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	3304      	adds	r3, #4
 8003088:	4619      	mov	r1, r3
 800308a:	4610      	mov	r0, r2
 800308c:	f000 fc62 	bl	8003954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2201      	movs	r2, #1
 8003094:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	2201      	movs	r2, #1
 800309c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2201      	movs	r2, #1
 80030a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2201      	movs	r2, #1
 80030ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2201      	movs	r2, #1
 80030b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	2201      	movs	r2, #1
 80030c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2201      	movs	r2, #1
 80030cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2201      	movs	r2, #1
 80030dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030e0:	2300      	movs	r3, #0
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	3708      	adds	r7, #8
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
	...

080030ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b085      	sub	sp, #20
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030fa:	b2db      	uxtb	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d001      	beq.n	8003104 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003100:	2301      	movs	r3, #1
 8003102:	e04e      	b.n	80031a2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2202      	movs	r2, #2
 8003108:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f042 0201 	orr.w	r2, r2, #1
 800311a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a23      	ldr	r2, [pc, #140]	; (80031b0 <HAL_TIM_Base_Start_IT+0xc4>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d022      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x80>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800312e:	d01d      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x80>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1f      	ldr	r2, [pc, #124]	; (80031b4 <HAL_TIM_Base_Start_IT+0xc8>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d018      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x80>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1e      	ldr	r2, [pc, #120]	; (80031b8 <HAL_TIM_Base_Start_IT+0xcc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d013      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x80>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a1c      	ldr	r2, [pc, #112]	; (80031bc <HAL_TIM_Base_Start_IT+0xd0>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d00e      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x80>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a1b      	ldr	r2, [pc, #108]	; (80031c0 <HAL_TIM_Base_Start_IT+0xd4>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d009      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x80>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4a19      	ldr	r2, [pc, #100]	; (80031c4 <HAL_TIM_Base_Start_IT+0xd8>)
 800315e:	4293      	cmp	r3, r2
 8003160:	d004      	beq.n	800316c <HAL_TIM_Base_Start_IT+0x80>
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	4a18      	ldr	r2, [pc, #96]	; (80031c8 <HAL_TIM_Base_Start_IT+0xdc>)
 8003168:	4293      	cmp	r3, r2
 800316a:	d111      	bne.n	8003190 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	2b06      	cmp	r3, #6
 800317c:	d010      	beq.n	80031a0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	681a      	ldr	r2, [r3, #0]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f042 0201 	orr.w	r2, r2, #1
 800318c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800318e:	e007      	b.n	80031a0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	681a      	ldr	r2, [r3, #0]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f042 0201 	orr.w	r2, r2, #1
 800319e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80031a0:	2300      	movs	r3, #0
}
 80031a2:	4618      	mov	r0, r3
 80031a4:	3714      	adds	r7, #20
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	40010000 	.word	0x40010000
 80031b4:	40000400 	.word	0x40000400
 80031b8:	40000800 	.word	0x40000800
 80031bc:	40000c00 	.word	0x40000c00
 80031c0:	40010400 	.word	0x40010400
 80031c4:	40014000 	.word	0x40014000
 80031c8:	40001800 	.word	0x40001800

080031cc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e041      	b.n	8003262 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f839 	bl	800326a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2202      	movs	r2, #2
 80031fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681a      	ldr	r2, [r3, #0]
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3304      	adds	r3, #4
 8003208:	4619      	mov	r1, r3
 800320a:	4610      	mov	r0, r2
 800320c:	f000 fba2 	bl	8003954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	2201      	movs	r2, #1
 8003214:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2201      	movs	r2, #1
 800321c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2201      	movs	r2, #1
 8003224:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2201      	movs	r2, #1
 800322c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	2201      	movs	r2, #1
 8003234:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	2201      	movs	r2, #1
 800323c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2201      	movs	r2, #1
 8003244:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	2201      	movs	r2, #1
 800325c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003260:	2300      	movs	r3, #0
}
 8003262:	4618      	mov	r0, r3
 8003264:	3708      	adds	r7, #8
 8003266:	46bd      	mov	sp, r7
 8003268:	bd80      	pop	{r7, pc}

0800326a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800326a:	b480      	push	{r7}
 800326c:	b083      	sub	sp, #12
 800326e:	af00      	add	r7, sp, #0
 8003270:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003272:	bf00      	nop
 8003274:	370c      	adds	r7, #12
 8003276:	46bd      	mov	sp, r7
 8003278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327c:	4770      	bx	lr
	...

08003280 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b084      	sub	sp, #16
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d109      	bne.n	80032a4 <HAL_TIM_PWM_Start+0x24>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	bf14      	ite	ne
 800329c:	2301      	movne	r3, #1
 800329e:	2300      	moveq	r3, #0
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	e022      	b.n	80032ea <HAL_TIM_PWM_Start+0x6a>
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	2b04      	cmp	r3, #4
 80032a8:	d109      	bne.n	80032be <HAL_TIM_PWM_Start+0x3e>
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	bf14      	ite	ne
 80032b6:	2301      	movne	r3, #1
 80032b8:	2300      	moveq	r3, #0
 80032ba:	b2db      	uxtb	r3, r3
 80032bc:	e015      	b.n	80032ea <HAL_TIM_PWM_Start+0x6a>
 80032be:	683b      	ldr	r3, [r7, #0]
 80032c0:	2b08      	cmp	r3, #8
 80032c2:	d109      	bne.n	80032d8 <HAL_TIM_PWM_Start+0x58>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	e008      	b.n	80032ea <HAL_TIM_PWM_Start+0x6a>
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	2b01      	cmp	r3, #1
 80032e2:	bf14      	ite	ne
 80032e4:	2301      	movne	r3, #1
 80032e6:	2300      	moveq	r3, #0
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d001      	beq.n	80032f2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e07c      	b.n	80033ec <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d104      	bne.n	8003302 <HAL_TIM_PWM_Start+0x82>
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2202      	movs	r2, #2
 80032fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003300:	e013      	b.n	800332a <HAL_TIM_PWM_Start+0xaa>
 8003302:	683b      	ldr	r3, [r7, #0]
 8003304:	2b04      	cmp	r3, #4
 8003306:	d104      	bne.n	8003312 <HAL_TIM_PWM_Start+0x92>
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003310:	e00b      	b.n	800332a <HAL_TIM_PWM_Start+0xaa>
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	2b08      	cmp	r3, #8
 8003316:	d104      	bne.n	8003322 <HAL_TIM_PWM_Start+0xa2>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2202      	movs	r2, #2
 800331c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003320:	e003      	b.n	800332a <HAL_TIM_PWM_Start+0xaa>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2202      	movs	r2, #2
 8003326:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2201      	movs	r2, #1
 8003330:	6839      	ldr	r1, [r7, #0]
 8003332:	4618      	mov	r0, r3
 8003334:	f000 fe04 	bl	8003f40 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a2d      	ldr	r2, [pc, #180]	; (80033f4 <HAL_TIM_PWM_Start+0x174>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d004      	beq.n	800334c <HAL_TIM_PWM_Start+0xcc>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <HAL_TIM_PWM_Start+0x178>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d101      	bne.n	8003350 <HAL_TIM_PWM_Start+0xd0>
 800334c:	2301      	movs	r3, #1
 800334e:	e000      	b.n	8003352 <HAL_TIM_PWM_Start+0xd2>
 8003350:	2300      	movs	r3, #0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d007      	beq.n	8003366 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003364:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a22      	ldr	r2, [pc, #136]	; (80033f4 <HAL_TIM_PWM_Start+0x174>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d022      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x136>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003378:	d01d      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x136>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1f      	ldr	r2, [pc, #124]	; (80033fc <HAL_TIM_PWM_Start+0x17c>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d018      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x136>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a1d      	ldr	r2, [pc, #116]	; (8003400 <HAL_TIM_PWM_Start+0x180>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d013      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x136>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a1c      	ldr	r2, [pc, #112]	; (8003404 <HAL_TIM_PWM_Start+0x184>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d00e      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x136>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <HAL_TIM_PWM_Start+0x178>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d009      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x136>
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a18      	ldr	r2, [pc, #96]	; (8003408 <HAL_TIM_PWM_Start+0x188>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d004      	beq.n	80033b6 <HAL_TIM_PWM_Start+0x136>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4a16      	ldr	r2, [pc, #88]	; (800340c <HAL_TIM_PWM_Start+0x18c>)
 80033b2:	4293      	cmp	r3, r2
 80033b4:	d111      	bne.n	80033da <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	689b      	ldr	r3, [r3, #8]
 80033bc:	f003 0307 	and.w	r3, r3, #7
 80033c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	2b06      	cmp	r3, #6
 80033c6:	d010      	beq.n	80033ea <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681a      	ldr	r2, [r3, #0]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f042 0201 	orr.w	r2, r2, #1
 80033d6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033d8:	e007      	b.n	80033ea <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	681a      	ldr	r2, [r3, #0]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	f042 0201 	orr.w	r2, r2, #1
 80033e8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033ea:	2300      	movs	r3, #0
}
 80033ec:	4618      	mov	r0, r3
 80033ee:	3710      	adds	r7, #16
 80033f0:	46bd      	mov	sp, r7
 80033f2:	bd80      	pop	{r7, pc}
 80033f4:	40010000 	.word	0x40010000
 80033f8:	40010400 	.word	0x40010400
 80033fc:	40000400 	.word	0x40000400
 8003400:	40000800 	.word	0x40000800
 8003404:	40000c00 	.word	0x40000c00
 8003408:	40014000 	.word	0x40014000
 800340c:	40001800 	.word	0x40001800

08003410 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b084      	sub	sp, #16
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68db      	ldr	r3, [r3, #12]
 800341e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003428:	68bb      	ldr	r3, [r7, #8]
 800342a:	f003 0302 	and.w	r3, r3, #2
 800342e:	2b00      	cmp	r3, #0
 8003430:	d020      	beq.n	8003474 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	f003 0302 	and.w	r3, r3, #2
 8003438:	2b00      	cmp	r3, #0
 800343a:	d01b      	beq.n	8003474 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	f06f 0202 	mvn.w	r2, #2
 8003444:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	2201      	movs	r2, #1
 800344a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	699b      	ldr	r3, [r3, #24]
 8003452:	f003 0303 	and.w	r3, r3, #3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d003      	beq.n	8003462 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fa5b 	bl	8003916 <HAL_TIM_IC_CaptureCallback>
 8003460:	e005      	b.n	800346e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003462:	6878      	ldr	r0, [r7, #4]
 8003464:	f000 fa4d 	bl	8003902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003468:	6878      	ldr	r0, [r7, #4]
 800346a:	f000 fa5e 	bl	800392a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2200      	movs	r2, #0
 8003472:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 0304 	and.w	r3, r3, #4
 800347a:	2b00      	cmp	r3, #0
 800347c:	d020      	beq.n	80034c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 0304 	and.w	r3, r3, #4
 8003484:	2b00      	cmp	r3, #0
 8003486:	d01b      	beq.n	80034c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	f06f 0204 	mvn.w	r2, #4
 8003490:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2202      	movs	r2, #2
 8003496:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	699b      	ldr	r3, [r3, #24]
 800349e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d003      	beq.n	80034ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034a6:	6878      	ldr	r0, [r7, #4]
 80034a8:	f000 fa35 	bl	8003916 <HAL_TIM_IC_CaptureCallback>
 80034ac:	e005      	b.n	80034ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ae:	6878      	ldr	r0, [r7, #4]
 80034b0:	f000 fa27 	bl	8003902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034b4:	6878      	ldr	r0, [r7, #4]
 80034b6:	f000 fa38 	bl	800392a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2200      	movs	r2, #0
 80034be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034c0:	68bb      	ldr	r3, [r7, #8]
 80034c2:	f003 0308 	and.w	r3, r3, #8
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d020      	beq.n	800350c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	f003 0308 	and.w	r3, r3, #8
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d01b      	beq.n	800350c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f06f 0208 	mvn.w	r2, #8
 80034dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2204      	movs	r2, #4
 80034e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	69db      	ldr	r3, [r3, #28]
 80034ea:	f003 0303 	and.w	r3, r3, #3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d003      	beq.n	80034fa <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034f2:	6878      	ldr	r0, [r7, #4]
 80034f4:	f000 fa0f 	bl	8003916 <HAL_TIM_IC_CaptureCallback>
 80034f8:	e005      	b.n	8003506 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034fa:	6878      	ldr	r0, [r7, #4]
 80034fc:	f000 fa01 	bl	8003902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003500:	6878      	ldr	r0, [r7, #4]
 8003502:	f000 fa12 	bl	800392a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2200      	movs	r2, #0
 800350a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	f003 0310 	and.w	r3, r3, #16
 8003512:	2b00      	cmp	r3, #0
 8003514:	d020      	beq.n	8003558 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f003 0310 	and.w	r3, r3, #16
 800351c:	2b00      	cmp	r3, #0
 800351e:	d01b      	beq.n	8003558 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f06f 0210 	mvn.w	r2, #16
 8003528:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2208      	movs	r2, #8
 800352e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	69db      	ldr	r3, [r3, #28]
 8003536:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800353a:	2b00      	cmp	r3, #0
 800353c:	d003      	beq.n	8003546 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f9e9 	bl	8003916 <HAL_TIM_IC_CaptureCallback>
 8003544:	e005      	b.n	8003552 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003546:	6878      	ldr	r0, [r7, #4]
 8003548:	f000 f9db 	bl	8003902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800354c:	6878      	ldr	r0, [r7, #4]
 800354e:	f000 f9ec 	bl	800392a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	2200      	movs	r2, #0
 8003556:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003558:	68bb      	ldr	r3, [r7, #8]
 800355a:	f003 0301 	and.w	r3, r3, #1
 800355e:	2b00      	cmp	r3, #0
 8003560:	d00c      	beq.n	800357c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f003 0301 	and.w	r3, r3, #1
 8003568:	2b00      	cmp	r3, #0
 800356a:	d007      	beq.n	800357c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0201 	mvn.w	r2, #1
 8003574:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003576:	6878      	ldr	r0, [r7, #4]
 8003578:	f7fd fac8 	bl	8000b0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003582:	2b00      	cmp	r3, #0
 8003584:	d00c      	beq.n	80035a0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800358c:	2b00      	cmp	r3, #0
 800358e:	d007      	beq.n	80035a0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003598:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800359a:	6878      	ldr	r0, [r7, #4]
 800359c:	f000 fd7c 	bl	8004098 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d00c      	beq.n	80035c4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d007      	beq.n	80035c4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035be:	6878      	ldr	r0, [r7, #4]
 80035c0:	f000 f9bd 	bl	800393e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	f003 0320 	and.w	r3, r3, #32
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00c      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	f003 0320 	and.w	r3, r3, #32
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d007      	beq.n	80035e8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f06f 0220 	mvn.w	r2, #32
 80035e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035e2:	6878      	ldr	r0, [r7, #4]
 80035e4:	f000 fd4e 	bl	8004084 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b086      	sub	sp, #24
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	60f8      	str	r0, [r7, #12]
 80035f8:	60b9      	str	r1, [r7, #8]
 80035fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035fc:	2300      	movs	r3, #0
 80035fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003606:	2b01      	cmp	r3, #1
 8003608:	d101      	bne.n	800360e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800360a:	2302      	movs	r3, #2
 800360c:	e0ae      	b.n	800376c <HAL_TIM_PWM_ConfigChannel+0x17c>
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	2201      	movs	r2, #1
 8003612:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2b0c      	cmp	r3, #12
 800361a:	f200 809f 	bhi.w	800375c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800361e:	a201      	add	r2, pc, #4	; (adr r2, 8003624 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003624:	08003659 	.word	0x08003659
 8003628:	0800375d 	.word	0x0800375d
 800362c:	0800375d 	.word	0x0800375d
 8003630:	0800375d 	.word	0x0800375d
 8003634:	08003699 	.word	0x08003699
 8003638:	0800375d 	.word	0x0800375d
 800363c:	0800375d 	.word	0x0800375d
 8003640:	0800375d 	.word	0x0800375d
 8003644:	080036db 	.word	0x080036db
 8003648:	0800375d 	.word	0x0800375d
 800364c:	0800375d 	.word	0x0800375d
 8003650:	0800375d 	.word	0x0800375d
 8003654:	0800371b 	.word	0x0800371b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	68b9      	ldr	r1, [r7, #8]
 800365e:	4618      	mov	r0, r3
 8003660:	f000 fa24 	bl	8003aac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	699a      	ldr	r2, [r3, #24]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0208 	orr.w	r2, r2, #8
 8003672:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	699a      	ldr	r2, [r3, #24]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f022 0204 	bic.w	r2, r2, #4
 8003682:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	6999      	ldr	r1, [r3, #24]
 800368a:	68bb      	ldr	r3, [r7, #8]
 800368c:	691a      	ldr	r2, [r3, #16]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	619a      	str	r2, [r3, #24]
      break;
 8003696:	e064      	b.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68b9      	ldr	r1, [r7, #8]
 800369e:	4618      	mov	r0, r3
 80036a0:	f000 fa74 	bl	8003b8c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	699a      	ldr	r2, [r3, #24]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80036b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	699a      	ldr	r2, [r3, #24]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	6999      	ldr	r1, [r3, #24]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	691b      	ldr	r3, [r3, #16]
 80036ce:	021a      	lsls	r2, r3, #8
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	430a      	orrs	r2, r1
 80036d6:	619a      	str	r2, [r3, #24]
      break;
 80036d8:	e043      	b.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68b9      	ldr	r1, [r7, #8]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fac9 	bl	8003c78 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	69da      	ldr	r2, [r3, #28]
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f042 0208 	orr.w	r2, r2, #8
 80036f4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	69da      	ldr	r2, [r3, #28]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0204 	bic.w	r2, r2, #4
 8003704:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	69d9      	ldr	r1, [r3, #28]
 800370c:	68bb      	ldr	r3, [r7, #8]
 800370e:	691a      	ldr	r2, [r3, #16]
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	430a      	orrs	r2, r1
 8003716:	61da      	str	r2, [r3, #28]
      break;
 8003718:	e023      	b.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	68b9      	ldr	r1, [r7, #8]
 8003720:	4618      	mov	r0, r3
 8003722:	f000 fb1d 	bl	8003d60 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	69da      	ldr	r2, [r3, #28]
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003734:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69da      	ldr	r2, [r3, #28]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003744:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	69d9      	ldr	r1, [r3, #28]
 800374c:	68bb      	ldr	r3, [r7, #8]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	021a      	lsls	r2, r3, #8
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	430a      	orrs	r2, r1
 8003758:	61da      	str	r2, [r3, #28]
      break;
 800375a:	e002      	b.n	8003762 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	75fb      	strb	r3, [r7, #23]
      break;
 8003760:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800376a:	7dfb      	ldrb	r3, [r7, #23]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3718      	adds	r7, #24
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800377e:	2300      	movs	r3, #0
 8003780:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003788:	2b01      	cmp	r3, #1
 800378a:	d101      	bne.n	8003790 <HAL_TIM_ConfigClockSource+0x1c>
 800378c:	2302      	movs	r3, #2
 800378e:	e0b4      	b.n	80038fa <HAL_TIM_ConfigClockSource+0x186>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2201      	movs	r2, #1
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2202      	movs	r2, #2
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80037a8:	68bb      	ldr	r3, [r7, #8]
 80037aa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80037ae:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80037b0:	68bb      	ldr	r3, [r7, #8]
 80037b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037b6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68ba      	ldr	r2, [r7, #8]
 80037be:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037c8:	d03e      	beq.n	8003848 <HAL_TIM_ConfigClockSource+0xd4>
 80037ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ce:	f200 8087 	bhi.w	80038e0 <HAL_TIM_ConfigClockSource+0x16c>
 80037d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037d6:	f000 8086 	beq.w	80038e6 <HAL_TIM_ConfigClockSource+0x172>
 80037da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037de:	d87f      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x16c>
 80037e0:	2b70      	cmp	r3, #112	; 0x70
 80037e2:	d01a      	beq.n	800381a <HAL_TIM_ConfigClockSource+0xa6>
 80037e4:	2b70      	cmp	r3, #112	; 0x70
 80037e6:	d87b      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x16c>
 80037e8:	2b60      	cmp	r3, #96	; 0x60
 80037ea:	d050      	beq.n	800388e <HAL_TIM_ConfigClockSource+0x11a>
 80037ec:	2b60      	cmp	r3, #96	; 0x60
 80037ee:	d877      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x16c>
 80037f0:	2b50      	cmp	r3, #80	; 0x50
 80037f2:	d03c      	beq.n	800386e <HAL_TIM_ConfigClockSource+0xfa>
 80037f4:	2b50      	cmp	r3, #80	; 0x50
 80037f6:	d873      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x16c>
 80037f8:	2b40      	cmp	r3, #64	; 0x40
 80037fa:	d058      	beq.n	80038ae <HAL_TIM_ConfigClockSource+0x13a>
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d86f      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003800:	2b30      	cmp	r3, #48	; 0x30
 8003802:	d064      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x15a>
 8003804:	2b30      	cmp	r3, #48	; 0x30
 8003806:	d86b      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003808:	2b20      	cmp	r3, #32
 800380a:	d060      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x15a>
 800380c:	2b20      	cmp	r3, #32
 800380e:	d867      	bhi.n	80038e0 <HAL_TIM_ConfigClockSource+0x16c>
 8003810:	2b00      	cmp	r3, #0
 8003812:	d05c      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x15a>
 8003814:	2b10      	cmp	r3, #16
 8003816:	d05a      	beq.n	80038ce <HAL_TIM_ConfigClockSource+0x15a>
 8003818:	e062      	b.n	80038e0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003826:	683b      	ldr	r3, [r7, #0]
 8003828:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800382a:	f000 fb69 	bl	8003f00 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800383c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	68ba      	ldr	r2, [r7, #8]
 8003844:	609a      	str	r2, [r3, #8]
      break;
 8003846:	e04f      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003858:	f000 fb52 	bl	8003f00 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	689a      	ldr	r2, [r3, #8]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800386a:	609a      	str	r2, [r3, #8]
      break;
 800386c:	e03c      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800387a:	461a      	mov	r2, r3
 800387c:	f000 fac6 	bl	8003e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	2150      	movs	r1, #80	; 0x50
 8003886:	4618      	mov	r0, r3
 8003888:	f000 fb1f 	bl	8003eca <TIM_ITRx_SetConfig>
      break;
 800388c:	e02c      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800389a:	461a      	mov	r2, r3
 800389c:	f000 fae5 	bl	8003e6a <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	2160      	movs	r1, #96	; 0x60
 80038a6:	4618      	mov	r0, r3
 80038a8:	f000 fb0f 	bl	8003eca <TIM_ITRx_SetConfig>
      break;
 80038ac:	e01c      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038ba:	461a      	mov	r2, r3
 80038bc:	f000 faa6 	bl	8003e0c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	2140      	movs	r1, #64	; 0x40
 80038c6:	4618      	mov	r0, r3
 80038c8:	f000 faff 	bl	8003eca <TIM_ITRx_SetConfig>
      break;
 80038cc:	e00c      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4619      	mov	r1, r3
 80038d8:	4610      	mov	r0, r2
 80038da:	f000 faf6 	bl	8003eca <TIM_ITRx_SetConfig>
      break;
 80038de:	e003      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038e0:	2301      	movs	r3, #1
 80038e2:	73fb      	strb	r3, [r7, #15]
      break;
 80038e4:	e000      	b.n	80038e8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038e6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	2201      	movs	r2, #1
 80038ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2200      	movs	r2, #0
 80038f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3710      	adds	r7, #16
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}

08003902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr

0800393e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800393e:	b480      	push	{r7}
 8003940:	b083      	sub	sp, #12
 8003942:	af00      	add	r7, sp, #0
 8003944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003946:	bf00      	nop
 8003948:	370c      	adds	r7, #12
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
	...

08003954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003954:	b480      	push	{r7}
 8003956:	b085      	sub	sp, #20
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
 800395c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681b      	ldr	r3, [r3, #0]
 8003962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	4a46      	ldr	r2, [pc, #280]	; (8003a80 <TIM_Base_SetConfig+0x12c>)
 8003968:	4293      	cmp	r3, r2
 800396a:	d013      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003972:	d00f      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a43      	ldr	r2, [pc, #268]	; (8003a84 <TIM_Base_SetConfig+0x130>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d00b      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a42      	ldr	r2, [pc, #264]	; (8003a88 <TIM_Base_SetConfig+0x134>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d007      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a41      	ldr	r2, [pc, #260]	; (8003a8c <TIM_Base_SetConfig+0x138>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d003      	beq.n	8003994 <TIM_Base_SetConfig+0x40>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a40      	ldr	r2, [pc, #256]	; (8003a90 <TIM_Base_SetConfig+0x13c>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d108      	bne.n	80039a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800399a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	685b      	ldr	r3, [r3, #4]
 80039a0:	68fa      	ldr	r2, [r7, #12]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	4a35      	ldr	r2, [pc, #212]	; (8003a80 <TIM_Base_SetConfig+0x12c>)
 80039aa:	4293      	cmp	r3, r2
 80039ac:	d02b      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039b4:	d027      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	4a32      	ldr	r2, [pc, #200]	; (8003a84 <TIM_Base_SetConfig+0x130>)
 80039ba:	4293      	cmp	r3, r2
 80039bc:	d023      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	4a31      	ldr	r2, [pc, #196]	; (8003a88 <TIM_Base_SetConfig+0x134>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d01f      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	4a30      	ldr	r2, [pc, #192]	; (8003a8c <TIM_Base_SetConfig+0x138>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d01b      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	4a2f      	ldr	r2, [pc, #188]	; (8003a90 <TIM_Base_SetConfig+0x13c>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d017      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a2e      	ldr	r2, [pc, #184]	; (8003a94 <TIM_Base_SetConfig+0x140>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d013      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	4a2d      	ldr	r2, [pc, #180]	; (8003a98 <TIM_Base_SetConfig+0x144>)
 80039e2:	4293      	cmp	r3, r2
 80039e4:	d00f      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a2c      	ldr	r2, [pc, #176]	; (8003a9c <TIM_Base_SetConfig+0x148>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d00b      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a2b      	ldr	r2, [pc, #172]	; (8003aa0 <TIM_Base_SetConfig+0x14c>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d007      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	4a2a      	ldr	r2, [pc, #168]	; (8003aa4 <TIM_Base_SetConfig+0x150>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d003      	beq.n	8003a06 <TIM_Base_SetConfig+0xb2>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4a29      	ldr	r2, [pc, #164]	; (8003aa8 <TIM_Base_SetConfig+0x154>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d108      	bne.n	8003a18 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	68db      	ldr	r3, [r3, #12]
 8003a12:	68fa      	ldr	r2, [r7, #12]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a1e:	683b      	ldr	r3, [r7, #0]
 8003a20:	695b      	ldr	r3, [r3, #20]
 8003a22:	4313      	orrs	r3, r2
 8003a24:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	68fa      	ldr	r2, [r7, #12]
 8003a2a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a2c:	683b      	ldr	r3, [r7, #0]
 8003a2e:	689a      	ldr	r2, [r3, #8]
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	681a      	ldr	r2, [r3, #0]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a10      	ldr	r2, [pc, #64]	; (8003a80 <TIM_Base_SetConfig+0x12c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d003      	beq.n	8003a4c <TIM_Base_SetConfig+0xf8>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a12      	ldr	r2, [pc, #72]	; (8003a90 <TIM_Base_SetConfig+0x13c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d103      	bne.n	8003a54 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	691a      	ldr	r2, [r3, #16]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	691b      	ldr	r3, [r3, #16]
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d105      	bne.n	8003a72 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	691b      	ldr	r3, [r3, #16]
 8003a6a:	f023 0201 	bic.w	r2, r3, #1
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	611a      	str	r2, [r3, #16]
  }
}
 8003a72:	bf00      	nop
 8003a74:	3714      	adds	r7, #20
 8003a76:	46bd      	mov	sp, r7
 8003a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7c:	4770      	bx	lr
 8003a7e:	bf00      	nop
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40000400 	.word	0x40000400
 8003a88:	40000800 	.word	0x40000800
 8003a8c:	40000c00 	.word	0x40000c00
 8003a90:	40010400 	.word	0x40010400
 8003a94:	40014000 	.word	0x40014000
 8003a98:	40014400 	.word	0x40014400
 8003a9c:	40014800 	.word	0x40014800
 8003aa0:	40001800 	.word	0x40001800
 8003aa4:	40001c00 	.word	0x40001c00
 8003aa8:	40002000 	.word	0x40002000

08003aac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b087      	sub	sp, #28
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f023 0201 	bic.w	r2, r3, #1
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	699b      	ldr	r3, [r3, #24]
 8003ad2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	f023 0303 	bic.w	r3, r3, #3
 8003ae2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	68fa      	ldr	r2, [r7, #12]
 8003aea:	4313      	orrs	r3, r2
 8003aec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003aee:	697b      	ldr	r3, [r7, #20]
 8003af0:	f023 0302 	bic.w	r3, r3, #2
 8003af4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	697a      	ldr	r2, [r7, #20]
 8003afc:	4313      	orrs	r3, r2
 8003afe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	4a20      	ldr	r2, [pc, #128]	; (8003b84 <TIM_OC1_SetConfig+0xd8>)
 8003b04:	4293      	cmp	r3, r2
 8003b06:	d003      	beq.n	8003b10 <TIM_OC1_SetConfig+0x64>
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	4a1f      	ldr	r2, [pc, #124]	; (8003b88 <TIM_OC1_SetConfig+0xdc>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d10c      	bne.n	8003b2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	f023 0308 	bic.w	r3, r3, #8
 8003b16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	68db      	ldr	r3, [r3, #12]
 8003b1c:	697a      	ldr	r2, [r7, #20]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b22:	697b      	ldr	r3, [r7, #20]
 8003b24:	f023 0304 	bic.w	r3, r3, #4
 8003b28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <TIM_OC1_SetConfig+0xd8>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d003      	beq.n	8003b3a <TIM_OC1_SetConfig+0x8e>
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	4a14      	ldr	r2, [pc, #80]	; (8003b88 <TIM_OC1_SetConfig+0xdc>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d111      	bne.n	8003b5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b3a:	693b      	ldr	r3, [r7, #16]
 8003b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b42:	693b      	ldr	r3, [r7, #16]
 8003b44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	695b      	ldr	r3, [r3, #20]
 8003b4e:	693a      	ldr	r2, [r7, #16]
 8003b50:	4313      	orrs	r3, r2
 8003b52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b54:	683b      	ldr	r3, [r7, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	693a      	ldr	r2, [r7, #16]
 8003b62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	68fa      	ldr	r2, [r7, #12]
 8003b68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	697a      	ldr	r2, [r7, #20]
 8003b76:	621a      	str	r2, [r3, #32]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	40010000 	.word	0x40010000
 8003b88:	40010400 	.word	0x40010400

08003b8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b087      	sub	sp, #28
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
 8003b94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	6a1b      	ldr	r3, [r3, #32]
 8003ba0:	f023 0210 	bic.w	r2, r3, #16
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	699b      	ldr	r3, [r3, #24]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003bba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bc2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	021b      	lsls	r3, r3, #8
 8003bca:	68fa      	ldr	r2, [r7, #12]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	f023 0320 	bic.w	r3, r3, #32
 8003bd6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	011b      	lsls	r3, r3, #4
 8003bde:	697a      	ldr	r2, [r7, #20]
 8003be0:	4313      	orrs	r3, r2
 8003be2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	4a22      	ldr	r2, [pc, #136]	; (8003c70 <TIM_OC2_SetConfig+0xe4>)
 8003be8:	4293      	cmp	r3, r2
 8003bea:	d003      	beq.n	8003bf4 <TIM_OC2_SetConfig+0x68>
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	4a21      	ldr	r2, [pc, #132]	; (8003c74 <TIM_OC2_SetConfig+0xe8>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d10d      	bne.n	8003c10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003bfa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	68db      	ldr	r3, [r3, #12]
 8003c00:	011b      	lsls	r3, r3, #4
 8003c02:	697a      	ldr	r2, [r7, #20]
 8003c04:	4313      	orrs	r3, r2
 8003c06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003c0e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	4a17      	ldr	r2, [pc, #92]	; (8003c70 <TIM_OC2_SetConfig+0xe4>)
 8003c14:	4293      	cmp	r3, r2
 8003c16:	d003      	beq.n	8003c20 <TIM_OC2_SetConfig+0x94>
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	4a16      	ldr	r2, [pc, #88]	; (8003c74 <TIM_OC2_SetConfig+0xe8>)
 8003c1c:	4293      	cmp	r3, r2
 8003c1e:	d113      	bne.n	8003c48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c20:	693b      	ldr	r3, [r7, #16]
 8003c22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	695b      	ldr	r3, [r3, #20]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	4313      	orrs	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	699b      	ldr	r3, [r3, #24]
 8003c40:	009b      	lsls	r3, r3, #2
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68fa      	ldr	r2, [r7, #12]
 8003c52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	685a      	ldr	r2, [r3, #4]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	697a      	ldr	r2, [r7, #20]
 8003c60:	621a      	str	r2, [r3, #32]
}
 8003c62:	bf00      	nop
 8003c64:	371c      	adds	r7, #28
 8003c66:	46bd      	mov	sp, r7
 8003c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6c:	4770      	bx	lr
 8003c6e:	bf00      	nop
 8003c70:	40010000 	.word	0x40010000
 8003c74:	40010400 	.word	0x40010400

08003c78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
 8003c80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6a1b      	ldr	r3, [r3, #32]
 8003c86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6a1b      	ldr	r3, [r3, #32]
 8003c8c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	685b      	ldr	r3, [r3, #4]
 8003c98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ca6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	f023 0303 	bic.w	r3, r3, #3
 8003cae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	68fa      	ldr	r2, [r7, #12]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003cba:	697b      	ldr	r3, [r7, #20]
 8003cbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	021b      	lsls	r3, r3, #8
 8003cc8:	697a      	ldr	r2, [r7, #20]
 8003cca:	4313      	orrs	r3, r2
 8003ccc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	4a21      	ldr	r2, [pc, #132]	; (8003d58 <TIM_OC3_SetConfig+0xe0>)
 8003cd2:	4293      	cmp	r3, r2
 8003cd4:	d003      	beq.n	8003cde <TIM_OC3_SetConfig+0x66>
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	4a20      	ldr	r2, [pc, #128]	; (8003d5c <TIM_OC3_SetConfig+0xe4>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d10d      	bne.n	8003cfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003ce4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	68db      	ldr	r3, [r3, #12]
 8003cea:	021b      	lsls	r3, r3, #8
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cf2:	697b      	ldr	r3, [r7, #20]
 8003cf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003cf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <TIM_OC3_SetConfig+0xe0>)
 8003cfe:	4293      	cmp	r3, r2
 8003d00:	d003      	beq.n	8003d0a <TIM_OC3_SetConfig+0x92>
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	4a15      	ldr	r2, [pc, #84]	; (8003d5c <TIM_OC3_SetConfig+0xe4>)
 8003d06:	4293      	cmp	r3, r2
 8003d08:	d113      	bne.n	8003d32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003d0a:	693b      	ldr	r3, [r7, #16]
 8003d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003d10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d1a:	683b      	ldr	r3, [r7, #0]
 8003d1c:	695b      	ldr	r3, [r3, #20]
 8003d1e:	011b      	lsls	r3, r3, #4
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	4313      	orrs	r3, r2
 8003d24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	699b      	ldr	r3, [r3, #24]
 8003d2a:	011b      	lsls	r3, r3, #4
 8003d2c:	693a      	ldr	r2, [r7, #16]
 8003d2e:	4313      	orrs	r3, r2
 8003d30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	693a      	ldr	r2, [r7, #16]
 8003d36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	68fa      	ldr	r2, [r7, #12]
 8003d3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d3e:	683b      	ldr	r3, [r7, #0]
 8003d40:	685a      	ldr	r2, [r3, #4]
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	697a      	ldr	r2, [r7, #20]
 8003d4a:	621a      	str	r2, [r3, #32]
}
 8003d4c:	bf00      	nop
 8003d4e:	371c      	adds	r7, #28
 8003d50:	46bd      	mov	sp, r7
 8003d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d56:	4770      	bx	lr
 8003d58:	40010000 	.word	0x40010000
 8003d5c:	40010400 	.word	0x40010400

08003d60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b087      	sub	sp, #28
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	6a1b      	ldr	r3, [r3, #32]
 8003d6e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	6a1b      	ldr	r3, [r3, #32]
 8003d74:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	69db      	ldr	r3, [r3, #28]
 8003d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	021b      	lsls	r3, r3, #8
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003daa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	689b      	ldr	r3, [r3, #8]
 8003db0:	031b      	lsls	r3, r3, #12
 8003db2:	693a      	ldr	r2, [r7, #16]
 8003db4:	4313      	orrs	r3, r2
 8003db6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	4a12      	ldr	r2, [pc, #72]	; (8003e04 <TIM_OC4_SetConfig+0xa4>)
 8003dbc:	4293      	cmp	r3, r2
 8003dbe:	d003      	beq.n	8003dc8 <TIM_OC4_SetConfig+0x68>
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	4a11      	ldr	r2, [pc, #68]	; (8003e08 <TIM_OC4_SetConfig+0xa8>)
 8003dc4:	4293      	cmp	r3, r2
 8003dc6:	d109      	bne.n	8003ddc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	695b      	ldr	r3, [r3, #20]
 8003dd4:	019b      	lsls	r3, r3, #6
 8003dd6:	697a      	ldr	r2, [r7, #20]
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	697a      	ldr	r2, [r7, #20]
 8003de0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	68fa      	ldr	r2, [r7, #12]
 8003de6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003de8:	683b      	ldr	r3, [r7, #0]
 8003dea:	685a      	ldr	r2, [r3, #4]
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	693a      	ldr	r2, [r7, #16]
 8003df4:	621a      	str	r2, [r3, #32]
}
 8003df6:	bf00      	nop
 8003df8:	371c      	adds	r7, #28
 8003dfa:	46bd      	mov	sp, r7
 8003dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e00:	4770      	bx	lr
 8003e02:	bf00      	nop
 8003e04:	40010000 	.word	0x40010000
 8003e08:	40010400 	.word	0x40010400

08003e0c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b087      	sub	sp, #28
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	6a1b      	ldr	r3, [r3, #32]
 8003e1c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a1b      	ldr	r3, [r3, #32]
 8003e22:	f023 0201 	bic.w	r2, r3, #1
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e30:	693b      	ldr	r3, [r7, #16]
 8003e32:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e36:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	011b      	lsls	r3, r3, #4
 8003e3c:	693a      	ldr	r2, [r7, #16]
 8003e3e:	4313      	orrs	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e42:	697b      	ldr	r3, [r7, #20]
 8003e44:	f023 030a 	bic.w	r3, r3, #10
 8003e48:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e4a:	697a      	ldr	r2, [r7, #20]
 8003e4c:	68bb      	ldr	r3, [r7, #8]
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	621a      	str	r2, [r3, #32]
}
 8003e5e:	bf00      	nop
 8003e60:	371c      	adds	r7, #28
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e6a:	b480      	push	{r7}
 8003e6c:	b087      	sub	sp, #28
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	60f8      	str	r0, [r7, #12]
 8003e72:	60b9      	str	r1, [r7, #8]
 8003e74:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	6a1b      	ldr	r3, [r3, #32]
 8003e7a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	6a1b      	ldr	r3, [r3, #32]
 8003e80:	f023 0210 	bic.w	r2, r3, #16
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	699b      	ldr	r3, [r3, #24]
 8003e8c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e8e:	693b      	ldr	r3, [r7, #16]
 8003e90:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	031b      	lsls	r3, r3, #12
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	4313      	orrs	r3, r2
 8003e9e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ea0:	697b      	ldr	r3, [r7, #20]
 8003ea2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003ea6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ea8:	68bb      	ldr	r3, [r7, #8]
 8003eaa:	011b      	lsls	r3, r3, #4
 8003eac:	697a      	ldr	r2, [r7, #20]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	693a      	ldr	r2, [r7, #16]
 8003eb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	697a      	ldr	r2, [r7, #20]
 8003ebc:	621a      	str	r2, [r3, #32]
}
 8003ebe:	bf00      	nop
 8003ec0:	371c      	adds	r7, #28
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec8:	4770      	bx	lr

08003eca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eca:	b480      	push	{r7}
 8003ecc:	b085      	sub	sp, #20
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	6078      	str	r0, [r7, #4]
 8003ed2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ee0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	4313      	orrs	r3, r2
 8003ee8:	f043 0307 	orr.w	r3, r3, #7
 8003eec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	609a      	str	r2, [r3, #8]
}
 8003ef4:	bf00      	nop
 8003ef6:	3714      	adds	r7, #20
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f00:	b480      	push	{r7}
 8003f02:	b087      	sub	sp, #28
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	60f8      	str	r0, [r7, #12]
 8003f08:	60b9      	str	r1, [r7, #8]
 8003f0a:	607a      	str	r2, [r7, #4]
 8003f0c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f1a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f1c:	683b      	ldr	r3, [r7, #0]
 8003f1e:	021a      	lsls	r2, r3, #8
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	431a      	orrs	r2, r3
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4313      	orrs	r3, r2
 8003f28:	697a      	ldr	r2, [r7, #20]
 8003f2a:	4313      	orrs	r3, r2
 8003f2c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	697a      	ldr	r2, [r7, #20]
 8003f32:	609a      	str	r2, [r3, #8]
}
 8003f34:	bf00      	nop
 8003f36:	371c      	adds	r7, #28
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f40:	b480      	push	{r7}
 8003f42:	b087      	sub	sp, #28
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	60f8      	str	r0, [r7, #12]
 8003f48:	60b9      	str	r1, [r7, #8]
 8003f4a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f4c:	68bb      	ldr	r3, [r7, #8]
 8003f4e:	f003 031f 	and.w	r3, r3, #31
 8003f52:	2201      	movs	r2, #1
 8003f54:	fa02 f303 	lsl.w	r3, r2, r3
 8003f58:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	6a1a      	ldr	r2, [r3, #32]
 8003f5e:	697b      	ldr	r3, [r7, #20]
 8003f60:	43db      	mvns	r3, r3
 8003f62:	401a      	ands	r2, r3
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f68:	68fb      	ldr	r3, [r7, #12]
 8003f6a:	6a1a      	ldr	r2, [r3, #32]
 8003f6c:	68bb      	ldr	r3, [r7, #8]
 8003f6e:	f003 031f 	and.w	r3, r3, #31
 8003f72:	6879      	ldr	r1, [r7, #4]
 8003f74:	fa01 f303 	lsl.w	r3, r1, r3
 8003f78:	431a      	orrs	r2, r3
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	621a      	str	r2, [r3, #32]
}
 8003f7e:	bf00      	nop
 8003f80:	371c      	adds	r7, #28
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr
	...

08003f8c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b085      	sub	sp, #20
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fa0:	2302      	movs	r3, #2
 8003fa2:	e05a      	b.n	800405a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2201      	movs	r2, #1
 8003fa8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2202      	movs	r2, #2
 8003fb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68fa      	ldr	r2, [r7, #12]
 8003fd2:	4313      	orrs	r3, r2
 8003fd4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	68fa      	ldr	r2, [r7, #12]
 8003fdc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a21      	ldr	r2, [pc, #132]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d022      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff0:	d01d      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1d      	ldr	r2, [pc, #116]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d018      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a1b      	ldr	r2, [pc, #108]	; (8004070 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d013      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a1a      	ldr	r2, [pc, #104]	; (8004074 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00e      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a18      	ldr	r2, [pc, #96]	; (8004078 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d009      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	4a17      	ldr	r2, [pc, #92]	; (800407c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004020:	4293      	cmp	r3, r2
 8004022:	d004      	beq.n	800402e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a15      	ldr	r2, [pc, #84]	; (8004080 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800402a:	4293      	cmp	r3, r2
 800402c:	d10c      	bne.n	8004048 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004034:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685b      	ldr	r3, [r3, #4]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	4313      	orrs	r3, r2
 800403e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	68ba      	ldr	r2, [r7, #8]
 8004046:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2201      	movs	r2, #1
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	2200      	movs	r2, #0
 8004054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004058:	2300      	movs	r3, #0
}
 800405a:	4618      	mov	r0, r3
 800405c:	3714      	adds	r7, #20
 800405e:	46bd      	mov	sp, r7
 8004060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004064:	4770      	bx	lr
 8004066:	bf00      	nop
 8004068:	40010000 	.word	0x40010000
 800406c:	40000400 	.word	0x40000400
 8004070:	40000800 	.word	0x40000800
 8004074:	40000c00 	.word	0x40000c00
 8004078:	40010400 	.word	0x40010400
 800407c:	40014000 	.word	0x40014000
 8004080:	40001800 	.word	0x40001800

08004084 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004098:	b480      	push	{r7}
 800409a:	b083      	sub	sp, #12
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr

080040ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d101      	bne.n	80040be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e042      	b.n	8004144 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040c4:	b2db      	uxtb	r3, r3
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d106      	bne.n	80040d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2200      	movs	r2, #0
 80040ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040d2:	6878      	ldr	r0, [r7, #4]
 80040d4:	f7fd f82c 	bl	8001130 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	2224      	movs	r2, #36	; 0x24
 80040dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	68da      	ldr	r2, [r3, #12]
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040f0:	6878      	ldr	r0, [r7, #4]
 80040f2:	f000 f82b 	bl	800414c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004104:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	695a      	ldr	r2, [r3, #20]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004114:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68da      	ldr	r2, [r3, #12]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004124:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2220      	movs	r2, #32
 8004130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2220      	movs	r2, #32
 8004138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800414c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004150:	b0c0      	sub	sp, #256	; 0x100
 8004152:	af00      	add	r7, sp, #0
 8004154:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004158:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	691b      	ldr	r3, [r3, #16]
 8004160:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004164:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004168:	68d9      	ldr	r1, [r3, #12]
 800416a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	ea40 0301 	orr.w	r3, r0, r1
 8004174:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004180:	691b      	ldr	r3, [r3, #16]
 8004182:	431a      	orrs	r2, r3
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	695b      	ldr	r3, [r3, #20]
 800418a:	431a      	orrs	r2, r3
 800418c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004190:	69db      	ldr	r3, [r3, #28]
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80041a4:	f021 010c 	bic.w	r1, r1, #12
 80041a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ac:	681a      	ldr	r2, [r3, #0]
 80041ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80041b2:	430b      	orrs	r3, r1
 80041b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c6:	6999      	ldr	r1, [r3, #24]
 80041c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	ea40 0301 	orr.w	r3, r0, r1
 80041d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	4b8f      	ldr	r3, [pc, #572]	; (8004418 <UART_SetConfig+0x2cc>)
 80041dc:	429a      	cmp	r2, r3
 80041de:	d005      	beq.n	80041ec <UART_SetConfig+0xa0>
 80041e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041e4:	681a      	ldr	r2, [r3, #0]
 80041e6:	4b8d      	ldr	r3, [pc, #564]	; (800441c <UART_SetConfig+0x2d0>)
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d104      	bne.n	80041f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041ec:	f7fe fa1a 	bl	8002624 <HAL_RCC_GetPCLK2Freq>
 80041f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041f4:	e003      	b.n	80041fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041f6:	f7fe fa01 	bl	80025fc <HAL_RCC_GetPCLK1Freq>
 80041fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004202:	69db      	ldr	r3, [r3, #28]
 8004204:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004208:	f040 810c 	bne.w	8004424 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800420c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004210:	2200      	movs	r2, #0
 8004212:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004216:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800421a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800421e:	4622      	mov	r2, r4
 8004220:	462b      	mov	r3, r5
 8004222:	1891      	adds	r1, r2, r2
 8004224:	65b9      	str	r1, [r7, #88]	; 0x58
 8004226:	415b      	adcs	r3, r3
 8004228:	65fb      	str	r3, [r7, #92]	; 0x5c
 800422a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800422e:	4621      	mov	r1, r4
 8004230:	eb12 0801 	adds.w	r8, r2, r1
 8004234:	4629      	mov	r1, r5
 8004236:	eb43 0901 	adc.w	r9, r3, r1
 800423a:	f04f 0200 	mov.w	r2, #0
 800423e:	f04f 0300 	mov.w	r3, #0
 8004242:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004246:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800424a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800424e:	4690      	mov	r8, r2
 8004250:	4699      	mov	r9, r3
 8004252:	4623      	mov	r3, r4
 8004254:	eb18 0303 	adds.w	r3, r8, r3
 8004258:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800425c:	462b      	mov	r3, r5
 800425e:	eb49 0303 	adc.w	r3, r9, r3
 8004262:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004266:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004272:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004276:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800427a:	460b      	mov	r3, r1
 800427c:	18db      	adds	r3, r3, r3
 800427e:	653b      	str	r3, [r7, #80]	; 0x50
 8004280:	4613      	mov	r3, r2
 8004282:	eb42 0303 	adc.w	r3, r2, r3
 8004286:	657b      	str	r3, [r7, #84]	; 0x54
 8004288:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800428c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004290:	f7fb ffbe 	bl	8000210 <__aeabi_uldivmod>
 8004294:	4602      	mov	r2, r0
 8004296:	460b      	mov	r3, r1
 8004298:	4b61      	ldr	r3, [pc, #388]	; (8004420 <UART_SetConfig+0x2d4>)
 800429a:	fba3 2302 	umull	r2, r3, r3, r2
 800429e:	095b      	lsrs	r3, r3, #5
 80042a0:	011c      	lsls	r4, r3, #4
 80042a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80042a6:	2200      	movs	r2, #0
 80042a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80042ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80042b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042b4:	4642      	mov	r2, r8
 80042b6:	464b      	mov	r3, r9
 80042b8:	1891      	adds	r1, r2, r2
 80042ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80042bc:	415b      	adcs	r3, r3
 80042be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042c4:	4641      	mov	r1, r8
 80042c6:	eb12 0a01 	adds.w	sl, r2, r1
 80042ca:	4649      	mov	r1, r9
 80042cc:	eb43 0b01 	adc.w	fp, r3, r1
 80042d0:	f04f 0200 	mov.w	r2, #0
 80042d4:	f04f 0300 	mov.w	r3, #0
 80042d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042e4:	4692      	mov	sl, r2
 80042e6:	469b      	mov	fp, r3
 80042e8:	4643      	mov	r3, r8
 80042ea:	eb1a 0303 	adds.w	r3, sl, r3
 80042ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042f2:	464b      	mov	r3, r9
 80042f4:	eb4b 0303 	adc.w	r3, fp, r3
 80042f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004300:	685b      	ldr	r3, [r3, #4]
 8004302:	2200      	movs	r2, #0
 8004304:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004308:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800430c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004310:	460b      	mov	r3, r1
 8004312:	18db      	adds	r3, r3, r3
 8004314:	643b      	str	r3, [r7, #64]	; 0x40
 8004316:	4613      	mov	r3, r2
 8004318:	eb42 0303 	adc.w	r3, r2, r3
 800431c:	647b      	str	r3, [r7, #68]	; 0x44
 800431e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004322:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004326:	f7fb ff73 	bl	8000210 <__aeabi_uldivmod>
 800432a:	4602      	mov	r2, r0
 800432c:	460b      	mov	r3, r1
 800432e:	4611      	mov	r1, r2
 8004330:	4b3b      	ldr	r3, [pc, #236]	; (8004420 <UART_SetConfig+0x2d4>)
 8004332:	fba3 2301 	umull	r2, r3, r3, r1
 8004336:	095b      	lsrs	r3, r3, #5
 8004338:	2264      	movs	r2, #100	; 0x64
 800433a:	fb02 f303 	mul.w	r3, r2, r3
 800433e:	1acb      	subs	r3, r1, r3
 8004340:	00db      	lsls	r3, r3, #3
 8004342:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004346:	4b36      	ldr	r3, [pc, #216]	; (8004420 <UART_SetConfig+0x2d4>)
 8004348:	fba3 2302 	umull	r2, r3, r3, r2
 800434c:	095b      	lsrs	r3, r3, #5
 800434e:	005b      	lsls	r3, r3, #1
 8004350:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004354:	441c      	add	r4, r3
 8004356:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800435a:	2200      	movs	r2, #0
 800435c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004360:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004364:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004368:	4642      	mov	r2, r8
 800436a:	464b      	mov	r3, r9
 800436c:	1891      	adds	r1, r2, r2
 800436e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004370:	415b      	adcs	r3, r3
 8004372:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004374:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004378:	4641      	mov	r1, r8
 800437a:	1851      	adds	r1, r2, r1
 800437c:	6339      	str	r1, [r7, #48]	; 0x30
 800437e:	4649      	mov	r1, r9
 8004380:	414b      	adcs	r3, r1
 8004382:	637b      	str	r3, [r7, #52]	; 0x34
 8004384:	f04f 0200 	mov.w	r2, #0
 8004388:	f04f 0300 	mov.w	r3, #0
 800438c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004390:	4659      	mov	r1, fp
 8004392:	00cb      	lsls	r3, r1, #3
 8004394:	4651      	mov	r1, sl
 8004396:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800439a:	4651      	mov	r1, sl
 800439c:	00ca      	lsls	r2, r1, #3
 800439e:	4610      	mov	r0, r2
 80043a0:	4619      	mov	r1, r3
 80043a2:	4603      	mov	r3, r0
 80043a4:	4642      	mov	r2, r8
 80043a6:	189b      	adds	r3, r3, r2
 80043a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80043ac:	464b      	mov	r3, r9
 80043ae:	460a      	mov	r2, r1
 80043b0:	eb42 0303 	adc.w	r3, r2, r3
 80043b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043bc:	685b      	ldr	r3, [r3, #4]
 80043be:	2200      	movs	r2, #0
 80043c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043cc:	460b      	mov	r3, r1
 80043ce:	18db      	adds	r3, r3, r3
 80043d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80043d2:	4613      	mov	r3, r2
 80043d4:	eb42 0303 	adc.w	r3, r2, r3
 80043d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043e2:	f7fb ff15 	bl	8000210 <__aeabi_uldivmod>
 80043e6:	4602      	mov	r2, r0
 80043e8:	460b      	mov	r3, r1
 80043ea:	4b0d      	ldr	r3, [pc, #52]	; (8004420 <UART_SetConfig+0x2d4>)
 80043ec:	fba3 1302 	umull	r1, r3, r3, r2
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	2164      	movs	r1, #100	; 0x64
 80043f4:	fb01 f303 	mul.w	r3, r1, r3
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	3332      	adds	r3, #50	; 0x32
 80043fe:	4a08      	ldr	r2, [pc, #32]	; (8004420 <UART_SetConfig+0x2d4>)
 8004400:	fba2 2303 	umull	r2, r3, r2, r3
 8004404:	095b      	lsrs	r3, r3, #5
 8004406:	f003 0207 	and.w	r2, r3, #7
 800440a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4422      	add	r2, r4
 8004412:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004414:	e106      	b.n	8004624 <UART_SetConfig+0x4d8>
 8004416:	bf00      	nop
 8004418:	40011000 	.word	0x40011000
 800441c:	40011400 	.word	0x40011400
 8004420:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004424:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004428:	2200      	movs	r2, #0
 800442a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800442e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004432:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004436:	4642      	mov	r2, r8
 8004438:	464b      	mov	r3, r9
 800443a:	1891      	adds	r1, r2, r2
 800443c:	6239      	str	r1, [r7, #32]
 800443e:	415b      	adcs	r3, r3
 8004440:	627b      	str	r3, [r7, #36]	; 0x24
 8004442:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004446:	4641      	mov	r1, r8
 8004448:	1854      	adds	r4, r2, r1
 800444a:	4649      	mov	r1, r9
 800444c:	eb43 0501 	adc.w	r5, r3, r1
 8004450:	f04f 0200 	mov.w	r2, #0
 8004454:	f04f 0300 	mov.w	r3, #0
 8004458:	00eb      	lsls	r3, r5, #3
 800445a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800445e:	00e2      	lsls	r2, r4, #3
 8004460:	4614      	mov	r4, r2
 8004462:	461d      	mov	r5, r3
 8004464:	4643      	mov	r3, r8
 8004466:	18e3      	adds	r3, r4, r3
 8004468:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800446c:	464b      	mov	r3, r9
 800446e:	eb45 0303 	adc.w	r3, r5, r3
 8004472:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800447a:	685b      	ldr	r3, [r3, #4]
 800447c:	2200      	movs	r2, #0
 800447e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004482:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004486:	f04f 0200 	mov.w	r2, #0
 800448a:	f04f 0300 	mov.w	r3, #0
 800448e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004492:	4629      	mov	r1, r5
 8004494:	008b      	lsls	r3, r1, #2
 8004496:	4621      	mov	r1, r4
 8004498:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800449c:	4621      	mov	r1, r4
 800449e:	008a      	lsls	r2, r1, #2
 80044a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80044a4:	f7fb feb4 	bl	8000210 <__aeabi_uldivmod>
 80044a8:	4602      	mov	r2, r0
 80044aa:	460b      	mov	r3, r1
 80044ac:	4b60      	ldr	r3, [pc, #384]	; (8004630 <UART_SetConfig+0x4e4>)
 80044ae:	fba3 2302 	umull	r2, r3, r3, r2
 80044b2:	095b      	lsrs	r3, r3, #5
 80044b4:	011c      	lsls	r4, r3, #4
 80044b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044ba:	2200      	movs	r2, #0
 80044bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044c8:	4642      	mov	r2, r8
 80044ca:	464b      	mov	r3, r9
 80044cc:	1891      	adds	r1, r2, r2
 80044ce:	61b9      	str	r1, [r7, #24]
 80044d0:	415b      	adcs	r3, r3
 80044d2:	61fb      	str	r3, [r7, #28]
 80044d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044d8:	4641      	mov	r1, r8
 80044da:	1851      	adds	r1, r2, r1
 80044dc:	6139      	str	r1, [r7, #16]
 80044de:	4649      	mov	r1, r9
 80044e0:	414b      	adcs	r3, r1
 80044e2:	617b      	str	r3, [r7, #20]
 80044e4:	f04f 0200 	mov.w	r2, #0
 80044e8:	f04f 0300 	mov.w	r3, #0
 80044ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044f0:	4659      	mov	r1, fp
 80044f2:	00cb      	lsls	r3, r1, #3
 80044f4:	4651      	mov	r1, sl
 80044f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044fa:	4651      	mov	r1, sl
 80044fc:	00ca      	lsls	r2, r1, #3
 80044fe:	4610      	mov	r0, r2
 8004500:	4619      	mov	r1, r3
 8004502:	4603      	mov	r3, r0
 8004504:	4642      	mov	r2, r8
 8004506:	189b      	adds	r3, r3, r2
 8004508:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800450c:	464b      	mov	r3, r9
 800450e:	460a      	mov	r2, r1
 8004510:	eb42 0303 	adc.w	r3, r2, r3
 8004514:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004518:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	2200      	movs	r2, #0
 8004520:	67bb      	str	r3, [r7, #120]	; 0x78
 8004522:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	f04f 0300 	mov.w	r3, #0
 800452c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004530:	4649      	mov	r1, r9
 8004532:	008b      	lsls	r3, r1, #2
 8004534:	4641      	mov	r1, r8
 8004536:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800453a:	4641      	mov	r1, r8
 800453c:	008a      	lsls	r2, r1, #2
 800453e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004542:	f7fb fe65 	bl	8000210 <__aeabi_uldivmod>
 8004546:	4602      	mov	r2, r0
 8004548:	460b      	mov	r3, r1
 800454a:	4611      	mov	r1, r2
 800454c:	4b38      	ldr	r3, [pc, #224]	; (8004630 <UART_SetConfig+0x4e4>)
 800454e:	fba3 2301 	umull	r2, r3, r3, r1
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	2264      	movs	r2, #100	; 0x64
 8004556:	fb02 f303 	mul.w	r3, r2, r3
 800455a:	1acb      	subs	r3, r1, r3
 800455c:	011b      	lsls	r3, r3, #4
 800455e:	3332      	adds	r3, #50	; 0x32
 8004560:	4a33      	ldr	r2, [pc, #204]	; (8004630 <UART_SetConfig+0x4e4>)
 8004562:	fba2 2303 	umull	r2, r3, r2, r3
 8004566:	095b      	lsrs	r3, r3, #5
 8004568:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800456c:	441c      	add	r4, r3
 800456e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004572:	2200      	movs	r2, #0
 8004574:	673b      	str	r3, [r7, #112]	; 0x70
 8004576:	677a      	str	r2, [r7, #116]	; 0x74
 8004578:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800457c:	4642      	mov	r2, r8
 800457e:	464b      	mov	r3, r9
 8004580:	1891      	adds	r1, r2, r2
 8004582:	60b9      	str	r1, [r7, #8]
 8004584:	415b      	adcs	r3, r3
 8004586:	60fb      	str	r3, [r7, #12]
 8004588:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800458c:	4641      	mov	r1, r8
 800458e:	1851      	adds	r1, r2, r1
 8004590:	6039      	str	r1, [r7, #0]
 8004592:	4649      	mov	r1, r9
 8004594:	414b      	adcs	r3, r1
 8004596:	607b      	str	r3, [r7, #4]
 8004598:	f04f 0200 	mov.w	r2, #0
 800459c:	f04f 0300 	mov.w	r3, #0
 80045a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80045a4:	4659      	mov	r1, fp
 80045a6:	00cb      	lsls	r3, r1, #3
 80045a8:	4651      	mov	r1, sl
 80045aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80045ae:	4651      	mov	r1, sl
 80045b0:	00ca      	lsls	r2, r1, #3
 80045b2:	4610      	mov	r0, r2
 80045b4:	4619      	mov	r1, r3
 80045b6:	4603      	mov	r3, r0
 80045b8:	4642      	mov	r2, r8
 80045ba:	189b      	adds	r3, r3, r2
 80045bc:	66bb      	str	r3, [r7, #104]	; 0x68
 80045be:	464b      	mov	r3, r9
 80045c0:	460a      	mov	r2, r1
 80045c2:	eb42 0303 	adc.w	r3, r2, r3
 80045c6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	663b      	str	r3, [r7, #96]	; 0x60
 80045d2:	667a      	str	r2, [r7, #100]	; 0x64
 80045d4:	f04f 0200 	mov.w	r2, #0
 80045d8:	f04f 0300 	mov.w	r3, #0
 80045dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045e0:	4649      	mov	r1, r9
 80045e2:	008b      	lsls	r3, r1, #2
 80045e4:	4641      	mov	r1, r8
 80045e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045ea:	4641      	mov	r1, r8
 80045ec:	008a      	lsls	r2, r1, #2
 80045ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045f2:	f7fb fe0d 	bl	8000210 <__aeabi_uldivmod>
 80045f6:	4602      	mov	r2, r0
 80045f8:	460b      	mov	r3, r1
 80045fa:	4b0d      	ldr	r3, [pc, #52]	; (8004630 <UART_SetConfig+0x4e4>)
 80045fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	2164      	movs	r1, #100	; 0x64
 8004604:	fb01 f303 	mul.w	r3, r1, r3
 8004608:	1ad3      	subs	r3, r2, r3
 800460a:	011b      	lsls	r3, r3, #4
 800460c:	3332      	adds	r3, #50	; 0x32
 800460e:	4a08      	ldr	r2, [pc, #32]	; (8004630 <UART_SetConfig+0x4e4>)
 8004610:	fba2 2303 	umull	r2, r3, r2, r3
 8004614:	095b      	lsrs	r3, r3, #5
 8004616:	f003 020f 	and.w	r2, r3, #15
 800461a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	4422      	add	r2, r4
 8004622:	609a      	str	r2, [r3, #8]
}
 8004624:	bf00      	nop
 8004626:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800462a:	46bd      	mov	sp, r7
 800462c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004630:	51eb851f 	.word	0x51eb851f

08004634 <__NVIC_SetPriority>:
{
 8004634:	b480      	push	{r7}
 8004636:	b083      	sub	sp, #12
 8004638:	af00      	add	r7, sp, #0
 800463a:	4603      	mov	r3, r0
 800463c:	6039      	str	r1, [r7, #0]
 800463e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004640:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004644:	2b00      	cmp	r3, #0
 8004646:	db0a      	blt.n	800465e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	b2da      	uxtb	r2, r3
 800464c:	490c      	ldr	r1, [pc, #48]	; (8004680 <__NVIC_SetPriority+0x4c>)
 800464e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004652:	0112      	lsls	r2, r2, #4
 8004654:	b2d2      	uxtb	r2, r2
 8004656:	440b      	add	r3, r1
 8004658:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800465c:	e00a      	b.n	8004674 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	b2da      	uxtb	r2, r3
 8004662:	4908      	ldr	r1, [pc, #32]	; (8004684 <__NVIC_SetPriority+0x50>)
 8004664:	79fb      	ldrb	r3, [r7, #7]
 8004666:	f003 030f 	and.w	r3, r3, #15
 800466a:	3b04      	subs	r3, #4
 800466c:	0112      	lsls	r2, r2, #4
 800466e:	b2d2      	uxtb	r2, r2
 8004670:	440b      	add	r3, r1
 8004672:	761a      	strb	r2, [r3, #24]
}
 8004674:	bf00      	nop
 8004676:	370c      	adds	r7, #12
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	e000e100 	.word	0xe000e100
 8004684:	e000ed00 	.word	0xe000ed00

08004688 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004688:	b580      	push	{r7, lr}
 800468a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800468c:	4b05      	ldr	r3, [pc, #20]	; (80046a4 <SysTick_Handler+0x1c>)
 800468e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004690:	f001 fee8 	bl	8006464 <xTaskGetSchedulerState>
 8004694:	4603      	mov	r3, r0
 8004696:	2b01      	cmp	r3, #1
 8004698:	d001      	beq.n	800469e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800469a:	f002 fdcd 	bl	8007238 <xPortSysTickHandler>
  }
}
 800469e:	bf00      	nop
 80046a0:	bd80      	pop	{r7, pc}
 80046a2:	bf00      	nop
 80046a4:	e000e010 	.word	0xe000e010

080046a8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80046ac:	2100      	movs	r1, #0
 80046ae:	f06f 0004 	mvn.w	r0, #4
 80046b2:	f7ff ffbf 	bl	8004634 <__NVIC_SetPriority>
#endif
}
 80046b6:	bf00      	nop
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046c2:	f3ef 8305 	mrs	r3, IPSR
 80046c6:	603b      	str	r3, [r7, #0]
  return(result);
 80046c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80046ce:	f06f 0305 	mvn.w	r3, #5
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	e00c      	b.n	80046f0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046d6:	4b0a      	ldr	r3, [pc, #40]	; (8004700 <osKernelInitialize+0x44>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d105      	bne.n	80046ea <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80046de:	4b08      	ldr	r3, [pc, #32]	; (8004700 <osKernelInitialize+0x44>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046e4:	2300      	movs	r3, #0
 80046e6:	607b      	str	r3, [r7, #4]
 80046e8:	e002      	b.n	80046f0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80046ea:	f04f 33ff 	mov.w	r3, #4294967295
 80046ee:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046f0:	687b      	ldr	r3, [r7, #4]
}
 80046f2:	4618      	mov	r0, r3
 80046f4:	370c      	adds	r7, #12
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	20000580 	.word	0x20000580

08004704 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004704:	b580      	push	{r7, lr}
 8004706:	b082      	sub	sp, #8
 8004708:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800470a:	f3ef 8305 	mrs	r3, IPSR
 800470e:	603b      	str	r3, [r7, #0]
  return(result);
 8004710:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004712:	2b00      	cmp	r3, #0
 8004714:	d003      	beq.n	800471e <osKernelStart+0x1a>
    stat = osErrorISR;
 8004716:	f06f 0305 	mvn.w	r3, #5
 800471a:	607b      	str	r3, [r7, #4]
 800471c:	e010      	b.n	8004740 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800471e:	4b0b      	ldr	r3, [pc, #44]	; (800474c <osKernelStart+0x48>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	2b01      	cmp	r3, #1
 8004724:	d109      	bne.n	800473a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004726:	f7ff ffbf 	bl	80046a8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800472a:	4b08      	ldr	r3, [pc, #32]	; (800474c <osKernelStart+0x48>)
 800472c:	2202      	movs	r2, #2
 800472e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004730:	f001 fa50 	bl	8005bd4 <vTaskStartScheduler>
      stat = osOK;
 8004734:	2300      	movs	r3, #0
 8004736:	607b      	str	r3, [r7, #4]
 8004738:	e002      	b.n	8004740 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800473a:	f04f 33ff 	mov.w	r3, #4294967295
 800473e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004740:	687b      	ldr	r3, [r7, #4]
}
 8004742:	4618      	mov	r0, r3
 8004744:	3708      	adds	r7, #8
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	20000580 	.word	0x20000580

08004750 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004750:	b580      	push	{r7, lr}
 8004752:	b08e      	sub	sp, #56	; 0x38
 8004754:	af04      	add	r7, sp, #16
 8004756:	60f8      	str	r0, [r7, #12]
 8004758:	60b9      	str	r1, [r7, #8]
 800475a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800475c:	2300      	movs	r3, #0
 800475e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004760:	f3ef 8305 	mrs	r3, IPSR
 8004764:	617b      	str	r3, [r7, #20]
  return(result);
 8004766:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004768:	2b00      	cmp	r3, #0
 800476a:	d17e      	bne.n	800486a <osThreadNew+0x11a>
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d07b      	beq.n	800486a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004772:	2380      	movs	r3, #128	; 0x80
 8004774:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004776:	2318      	movs	r3, #24
 8004778:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800477a:	2300      	movs	r3, #0
 800477c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800477e:	f04f 33ff 	mov.w	r3, #4294967295
 8004782:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d045      	beq.n	8004816 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	2b00      	cmp	r3, #0
 8004790:	d002      	beq.n	8004798 <osThreadNew+0x48>
        name = attr->name;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d002      	beq.n	80047a6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	699b      	ldr	r3, [r3, #24]
 80047a4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80047a6:	69fb      	ldr	r3, [r7, #28]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d008      	beq.n	80047be <osThreadNew+0x6e>
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	2b38      	cmp	r3, #56	; 0x38
 80047b0:	d805      	bhi.n	80047be <osThreadNew+0x6e>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	685b      	ldr	r3, [r3, #4]
 80047b6:	f003 0301 	and.w	r3, r3, #1
 80047ba:	2b00      	cmp	r3, #0
 80047bc:	d001      	beq.n	80047c2 <osThreadNew+0x72>
        return (NULL);
 80047be:	2300      	movs	r3, #0
 80047c0:	e054      	b.n	800486c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	695b      	ldr	r3, [r3, #20]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d003      	beq.n	80047d2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	695b      	ldr	r3, [r3, #20]
 80047ce:	089b      	lsrs	r3, r3, #2
 80047d0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	689b      	ldr	r3, [r3, #8]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d00e      	beq.n	80047f8 <osThreadNew+0xa8>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	2b5b      	cmp	r3, #91	; 0x5b
 80047e0:	d90a      	bls.n	80047f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d006      	beq.n	80047f8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	695b      	ldr	r3, [r3, #20]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d002      	beq.n	80047f8 <osThreadNew+0xa8>
        mem = 1;
 80047f2:	2301      	movs	r3, #1
 80047f4:	61bb      	str	r3, [r7, #24]
 80047f6:	e010      	b.n	800481a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	689b      	ldr	r3, [r3, #8]
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d10c      	bne.n	800481a <osThreadNew+0xca>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	68db      	ldr	r3, [r3, #12]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d108      	bne.n	800481a <osThreadNew+0xca>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	691b      	ldr	r3, [r3, #16]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d104      	bne.n	800481a <osThreadNew+0xca>
          mem = 0;
 8004810:	2300      	movs	r3, #0
 8004812:	61bb      	str	r3, [r7, #24]
 8004814:	e001      	b.n	800481a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004816:	2300      	movs	r3, #0
 8004818:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800481a:	69bb      	ldr	r3, [r7, #24]
 800481c:	2b01      	cmp	r3, #1
 800481e:	d110      	bne.n	8004842 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004828:	9202      	str	r2, [sp, #8]
 800482a:	9301      	str	r3, [sp, #4]
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	9300      	str	r3, [sp, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	6a3a      	ldr	r2, [r7, #32]
 8004834:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004836:	68f8      	ldr	r0, [r7, #12]
 8004838:	f000 fff6 	bl	8005828 <xTaskCreateStatic>
 800483c:	4603      	mov	r3, r0
 800483e:	613b      	str	r3, [r7, #16]
 8004840:	e013      	b.n	800486a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d110      	bne.n	800486a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004848:	6a3b      	ldr	r3, [r7, #32]
 800484a:	b29a      	uxth	r2, r3
 800484c:	f107 0310 	add.w	r3, r7, #16
 8004850:	9301      	str	r3, [sp, #4]
 8004852:	69fb      	ldr	r3, [r7, #28]
 8004854:	9300      	str	r3, [sp, #0]
 8004856:	68bb      	ldr	r3, [r7, #8]
 8004858:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800485a:	68f8      	ldr	r0, [r7, #12]
 800485c:	f001 f841 	bl	80058e2 <xTaskCreate>
 8004860:	4603      	mov	r3, r0
 8004862:	2b01      	cmp	r3, #1
 8004864:	d001      	beq.n	800486a <osThreadNew+0x11a>
            hTask = NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800486a:	693b      	ldr	r3, [r7, #16]
}
 800486c:	4618      	mov	r0, r3
 800486e:	3728      	adds	r7, #40	; 0x28
 8004870:	46bd      	mov	sp, r7
 8004872:	bd80      	pop	{r7, pc}

08004874 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004874:	b580      	push	{r7, lr}
 8004876:	b084      	sub	sp, #16
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800487c:	f3ef 8305 	mrs	r3, IPSR
 8004880:	60bb      	str	r3, [r7, #8]
  return(result);
 8004882:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <osDelay+0x1c>
    stat = osErrorISR;
 8004888:	f06f 0305 	mvn.w	r3, #5
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e007      	b.n	80048a0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004890:	2300      	movs	r3, #0
 8004892:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d002      	beq.n	80048a0 <osDelay+0x2c>
      vTaskDelay(ticks);
 800489a:	6878      	ldr	r0, [r7, #4]
 800489c:	f001 f966 	bl	8005b6c <vTaskDelay>
    }
  }

  return (stat);
 80048a0:	68fb      	ldr	r3, [r7, #12]
}
 80048a2:	4618      	mov	r0, r3
 80048a4:	3710      	adds	r7, #16
 80048a6:	46bd      	mov	sp, r7
 80048a8:	bd80      	pop	{r7, pc}
	...

080048ac <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80048ac:	b480      	push	{r7}
 80048ae:	b085      	sub	sp, #20
 80048b0:	af00      	add	r7, sp, #0
 80048b2:	60f8      	str	r0, [r7, #12]
 80048b4:	60b9      	str	r1, [r7, #8]
 80048b6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a07      	ldr	r2, [pc, #28]	; (80048d8 <vApplicationGetIdleTaskMemory+0x2c>)
 80048bc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048be:	68bb      	ldr	r3, [r7, #8]
 80048c0:	4a06      	ldr	r2, [pc, #24]	; (80048dc <vApplicationGetIdleTaskMemory+0x30>)
 80048c2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2280      	movs	r2, #128	; 0x80
 80048c8:	601a      	str	r2, [r3, #0]
}
 80048ca:	bf00      	nop
 80048cc:	3714      	adds	r7, #20
 80048ce:	46bd      	mov	sp, r7
 80048d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d4:	4770      	bx	lr
 80048d6:	bf00      	nop
 80048d8:	20000584 	.word	0x20000584
 80048dc:	200005e0 	.word	0x200005e0

080048e0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	60f8      	str	r0, [r7, #12]
 80048e8:	60b9      	str	r1, [r7, #8]
 80048ea:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	4a07      	ldr	r2, [pc, #28]	; (800490c <vApplicationGetTimerTaskMemory+0x2c>)
 80048f0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048f2:	68bb      	ldr	r3, [r7, #8]
 80048f4:	4a06      	ldr	r2, [pc, #24]	; (8004910 <vApplicationGetTimerTaskMemory+0x30>)
 80048f6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048fe:	601a      	str	r2, [r3, #0]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	200007e0 	.word	0x200007e0
 8004910:	2000083c 	.word	0x2000083c

08004914 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004914:	b480      	push	{r7}
 8004916:	b083      	sub	sp, #12
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f103 0208 	add.w	r2, r3, #8
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f04f 32ff 	mov.w	r2, #4294967295
 800492c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f103 0208 	add.w	r2, r3, #8
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f103 0208 	add.w	r2, r3, #8
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	2200      	movs	r2, #0
 8004946:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004948:	bf00      	nop
 800494a:	370c      	adds	r7, #12
 800494c:	46bd      	mov	sp, r7
 800494e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004952:	4770      	bx	lr

08004954 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004954:	b480      	push	{r7}
 8004956:	b083      	sub	sp, #12
 8004958:	af00      	add	r7, sp, #0
 800495a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	2200      	movs	r2, #0
 8004960:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004962:	bf00      	nop
 8004964:	370c      	adds	r7, #12
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr

0800496e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800496e:	b480      	push	{r7}
 8004970:	b085      	sub	sp, #20
 8004972:	af00      	add	r7, sp, #0
 8004974:	6078      	str	r0, [r7, #4]
 8004976:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	68fa      	ldr	r2, [r7, #12]
 8004982:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	689a      	ldr	r2, [r3, #8]
 8004988:	683b      	ldr	r3, [r7, #0]
 800498a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	683a      	ldr	r2, [r7, #0]
 8004992:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	683a      	ldr	r2, [r7, #0]
 8004998:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	687a      	ldr	r2, [r7, #4]
 800499e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	1c5a      	adds	r2, r3, #1
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	601a      	str	r2, [r3, #0]
}
 80049aa:	bf00      	nop
 80049ac:	3714      	adds	r7, #20
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr

080049b6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049b6:	b480      	push	{r7}
 80049b8:	b085      	sub	sp, #20
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
 80049be:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049cc:	d103      	bne.n	80049d6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	60fb      	str	r3, [r7, #12]
 80049d4:	e00c      	b.n	80049f0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	3308      	adds	r3, #8
 80049da:	60fb      	str	r3, [r7, #12]
 80049dc:	e002      	b.n	80049e4 <vListInsert+0x2e>
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68ba      	ldr	r2, [r7, #8]
 80049ec:	429a      	cmp	r2, r3
 80049ee:	d2f6      	bcs.n	80049de <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	685a      	ldr	r2, [r3, #4]
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	685b      	ldr	r3, [r3, #4]
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	683a      	ldr	r2, [r7, #0]
 8004a0a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	687a      	ldr	r2, [r7, #4]
 8004a10:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	1c5a      	adds	r2, r3, #1
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	601a      	str	r2, [r3, #0]
}
 8004a1c:	bf00      	nop
 8004a1e:	3714      	adds	r7, #20
 8004a20:	46bd      	mov	sp, r7
 8004a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a26:	4770      	bx	lr

08004a28 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a28:	b480      	push	{r7}
 8004a2a:	b085      	sub	sp, #20
 8004a2c:	af00      	add	r7, sp, #0
 8004a2e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	6892      	ldr	r2, [r2, #8]
 8004a3e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	687a      	ldr	r2, [r7, #4]
 8004a46:	6852      	ldr	r2, [r2, #4]
 8004a48:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	687a      	ldr	r2, [r7, #4]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d103      	bne.n	8004a5c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	689a      	ldr	r2, [r3, #8]
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	2200      	movs	r2, #0
 8004a60:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	1e5a      	subs	r2, r3, #1
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	681b      	ldr	r3, [r3, #0]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3714      	adds	r7, #20
 8004a74:	46bd      	mov	sp, r7
 8004a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a7a:	4770      	bx	lr

08004a7c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b084      	sub	sp, #16
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
 8004a84:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d10a      	bne.n	8004aa6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a94:	f383 8811 	msr	BASEPRI, r3
 8004a98:	f3bf 8f6f 	isb	sy
 8004a9c:	f3bf 8f4f 	dsb	sy
 8004aa0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004aa2:	bf00      	nop
 8004aa4:	e7fe      	b.n	8004aa4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004aa6:	f002 fb35 	bl	8007114 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ab2:	68f9      	ldr	r1, [r7, #12]
 8004ab4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ab6:	fb01 f303 	mul.w	r3, r1, r3
 8004aba:	441a      	add	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	681a      	ldr	r2, [r3, #0]
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	681a      	ldr	r2, [r3, #0]
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad6:	3b01      	subs	r3, #1
 8004ad8:	68f9      	ldr	r1, [r7, #12]
 8004ada:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004adc:	fb01 f303 	mul.w	r3, r1, r3
 8004ae0:	441a      	add	r2, r3
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	22ff      	movs	r2, #255	; 0xff
 8004aea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	22ff      	movs	r2, #255	; 0xff
 8004af2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004af6:	683b      	ldr	r3, [r7, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d114      	bne.n	8004b26 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	691b      	ldr	r3, [r3, #16]
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d01a      	beq.n	8004b3a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	3310      	adds	r3, #16
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f001 faed 	bl	80060e8 <xTaskRemoveFromEventList>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d012      	beq.n	8004b3a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b14:	4b0c      	ldr	r3, [pc, #48]	; (8004b48 <xQueueGenericReset+0xcc>)
 8004b16:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	f3bf 8f4f 	dsb	sy
 8004b20:	f3bf 8f6f 	isb	sy
 8004b24:	e009      	b.n	8004b3a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	3310      	adds	r3, #16
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	f7ff fef2 	bl	8004914 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	3324      	adds	r3, #36	; 0x24
 8004b34:	4618      	mov	r0, r3
 8004b36:	f7ff feed 	bl	8004914 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b3a:	f002 fb1b 	bl	8007174 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b3e:	2301      	movs	r3, #1
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3710      	adds	r7, #16
 8004b44:	46bd      	mov	sp, r7
 8004b46:	bd80      	pop	{r7, pc}
 8004b48:	e000ed04 	.word	0xe000ed04

08004b4c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b08e      	sub	sp, #56	; 0x38
 8004b50:	af02      	add	r7, sp, #8
 8004b52:	60f8      	str	r0, [r7, #12]
 8004b54:	60b9      	str	r1, [r7, #8]
 8004b56:	607a      	str	r2, [r7, #4]
 8004b58:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10a      	bne.n	8004b76 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b72:	bf00      	nop
 8004b74:	e7fe      	b.n	8004b74 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b76:	683b      	ldr	r3, [r7, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b80:	f383 8811 	msr	BASEPRI, r3
 8004b84:	f3bf 8f6f 	isb	sy
 8004b88:	f3bf 8f4f 	dsb	sy
 8004b8c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b8e:	bf00      	nop
 8004b90:	e7fe      	b.n	8004b90 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d002      	beq.n	8004b9e <xQueueGenericCreateStatic+0x52>
 8004b98:	68bb      	ldr	r3, [r7, #8]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d001      	beq.n	8004ba2 <xQueueGenericCreateStatic+0x56>
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e000      	b.n	8004ba4 <xQueueGenericCreateStatic+0x58>
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d10a      	bne.n	8004bbe <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004ba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bac:	f383 8811 	msr	BASEPRI, r3
 8004bb0:	f3bf 8f6f 	isb	sy
 8004bb4:	f3bf 8f4f 	dsb	sy
 8004bb8:	623b      	str	r3, [r7, #32]
}
 8004bba:	bf00      	nop
 8004bbc:	e7fe      	b.n	8004bbc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <xQueueGenericCreateStatic+0x7e>
 8004bc4:	68bb      	ldr	r3, [r7, #8]
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d101      	bne.n	8004bce <xQueueGenericCreateStatic+0x82>
 8004bca:	2301      	movs	r3, #1
 8004bcc:	e000      	b.n	8004bd0 <xQueueGenericCreateStatic+0x84>
 8004bce:	2300      	movs	r3, #0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d10a      	bne.n	8004bea <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004bd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd8:	f383 8811 	msr	BASEPRI, r3
 8004bdc:	f3bf 8f6f 	isb	sy
 8004be0:	f3bf 8f4f 	dsb	sy
 8004be4:	61fb      	str	r3, [r7, #28]
}
 8004be6:	bf00      	nop
 8004be8:	e7fe      	b.n	8004be8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bea:	2350      	movs	r3, #80	; 0x50
 8004bec:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	2b50      	cmp	r3, #80	; 0x50
 8004bf2:	d00a      	beq.n	8004c0a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004bf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bf8:	f383 8811 	msr	BASEPRI, r3
 8004bfc:	f3bf 8f6f 	isb	sy
 8004c00:	f3bf 8f4f 	dsb	sy
 8004c04:	61bb      	str	r3, [r7, #24]
}
 8004c06:	bf00      	nop
 8004c08:	e7fe      	b.n	8004c08 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004c0a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004c10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d00d      	beq.n	8004c32 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c18:	2201      	movs	r2, #1
 8004c1a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c1e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	4613      	mov	r3, r2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	68b9      	ldr	r1, [r7, #8]
 8004c2c:	68f8      	ldr	r0, [r7, #12]
 8004c2e:	f000 f83f 	bl	8004cb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3730      	adds	r7, #48	; 0x30
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}

08004c3c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b08a      	sub	sp, #40	; 0x28
 8004c40:	af02      	add	r7, sp, #8
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	4613      	mov	r3, r2
 8004c48:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d10a      	bne.n	8004c66 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	613b      	str	r3, [r7, #16]
}
 8004c62:	bf00      	nop
 8004c64:	e7fe      	b.n	8004c64 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	68ba      	ldr	r2, [r7, #8]
 8004c6a:	fb02 f303 	mul.w	r3, r2, r3
 8004c6e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c70:	69fb      	ldr	r3, [r7, #28]
 8004c72:	3350      	adds	r3, #80	; 0x50
 8004c74:	4618      	mov	r0, r3
 8004c76:	f002 fb6f 	bl	8007358 <pvPortMalloc>
 8004c7a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d011      	beq.n	8004ca6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c86:	697b      	ldr	r3, [r7, #20]
 8004c88:	3350      	adds	r3, #80	; 0x50
 8004c8a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c8c:	69bb      	ldr	r3, [r7, #24]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c94:	79fa      	ldrb	r2, [r7, #7]
 8004c96:	69bb      	ldr	r3, [r7, #24]
 8004c98:	9300      	str	r3, [sp, #0]
 8004c9a:	4613      	mov	r3, r2
 8004c9c:	697a      	ldr	r2, [r7, #20]
 8004c9e:	68b9      	ldr	r1, [r7, #8]
 8004ca0:	68f8      	ldr	r0, [r7, #12]
 8004ca2:	f000 f805 	bl	8004cb0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ca6:	69bb      	ldr	r3, [r7, #24]
	}
 8004ca8:	4618      	mov	r0, r3
 8004caa:	3720      	adds	r7, #32
 8004cac:	46bd      	mov	sp, r7
 8004cae:	bd80      	pop	{r7, pc}

08004cb0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004cb0:	b580      	push	{r7, lr}
 8004cb2:	b084      	sub	sp, #16
 8004cb4:	af00      	add	r7, sp, #0
 8004cb6:	60f8      	str	r0, [r7, #12]
 8004cb8:	60b9      	str	r1, [r7, #8]
 8004cba:	607a      	str	r2, [r7, #4]
 8004cbc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004cbe:	68bb      	ldr	r3, [r7, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d103      	bne.n	8004ccc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	69ba      	ldr	r2, [r7, #24]
 8004cc8:	601a      	str	r2, [r3, #0]
 8004cca:	e002      	b.n	8004cd2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	687a      	ldr	r2, [r7, #4]
 8004cd0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	68fa      	ldr	r2, [r7, #12]
 8004cd6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cd8:	69bb      	ldr	r3, [r7, #24]
 8004cda:	68ba      	ldr	r2, [r7, #8]
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cde:	2101      	movs	r1, #1
 8004ce0:	69b8      	ldr	r0, [r7, #24]
 8004ce2:	f7ff fecb 	bl	8004a7c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ce6:	69bb      	ldr	r3, [r7, #24]
 8004ce8:	78fa      	ldrb	r2, [r7, #3]
 8004cea:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cee:	bf00      	nop
 8004cf0:	3710      	adds	r7, #16
 8004cf2:	46bd      	mov	sp, r7
 8004cf4:	bd80      	pop	{r7, pc}
	...

08004cf8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004cf8:	b580      	push	{r7, lr}
 8004cfa:	b08e      	sub	sp, #56	; 0x38
 8004cfc:	af00      	add	r7, sp, #0
 8004cfe:	60f8      	str	r0, [r7, #12]
 8004d00:	60b9      	str	r1, [r7, #8]
 8004d02:	607a      	str	r2, [r7, #4]
 8004d04:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004d06:	2300      	movs	r3, #0
 8004d08:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d10a      	bne.n	8004d2a <xQueueGenericSend+0x32>
	__asm volatile
 8004d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d18:	f383 8811 	msr	BASEPRI, r3
 8004d1c:	f3bf 8f6f 	isb	sy
 8004d20:	f3bf 8f4f 	dsb	sy
 8004d24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d26:	bf00      	nop
 8004d28:	e7fe      	b.n	8004d28 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d103      	bne.n	8004d38 <xQueueGenericSend+0x40>
 8004d30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d101      	bne.n	8004d3c <xQueueGenericSend+0x44>
 8004d38:	2301      	movs	r3, #1
 8004d3a:	e000      	b.n	8004d3e <xQueueGenericSend+0x46>
 8004d3c:	2300      	movs	r3, #0
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d10a      	bne.n	8004d58 <xQueueGenericSend+0x60>
	__asm volatile
 8004d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d46:	f383 8811 	msr	BASEPRI, r3
 8004d4a:	f3bf 8f6f 	isb	sy
 8004d4e:	f3bf 8f4f 	dsb	sy
 8004d52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d54:	bf00      	nop
 8004d56:	e7fe      	b.n	8004d56 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d103      	bne.n	8004d66 <xQueueGenericSend+0x6e>
 8004d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d62:	2b01      	cmp	r3, #1
 8004d64:	d101      	bne.n	8004d6a <xQueueGenericSend+0x72>
 8004d66:	2301      	movs	r3, #1
 8004d68:	e000      	b.n	8004d6c <xQueueGenericSend+0x74>
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <xQueueGenericSend+0x8e>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	623b      	str	r3, [r7, #32]
}
 8004d82:	bf00      	nop
 8004d84:	e7fe      	b.n	8004d84 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d86:	f001 fb6d 	bl	8006464 <xTaskGetSchedulerState>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d102      	bne.n	8004d96 <xQueueGenericSend+0x9e>
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d101      	bne.n	8004d9a <xQueueGenericSend+0xa2>
 8004d96:	2301      	movs	r3, #1
 8004d98:	e000      	b.n	8004d9c <xQueueGenericSend+0xa4>
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d10a      	bne.n	8004db6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004da0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004da4:	f383 8811 	msr	BASEPRI, r3
 8004da8:	f3bf 8f6f 	isb	sy
 8004dac:	f3bf 8f4f 	dsb	sy
 8004db0:	61fb      	str	r3, [r7, #28]
}
 8004db2:	bf00      	nop
 8004db4:	e7fe      	b.n	8004db4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004db6:	f002 f9ad 	bl	8007114 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004dba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dc2:	429a      	cmp	r2, r3
 8004dc4:	d302      	bcc.n	8004dcc <xQueueGenericSend+0xd4>
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d129      	bne.n	8004e20 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	68b9      	ldr	r1, [r7, #8]
 8004dd0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dd2:	f000 fbbb 	bl	800554c <prvCopyDataToQueue>
 8004dd6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d010      	beq.n	8004e02 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de2:	3324      	adds	r3, #36	; 0x24
 8004de4:	4618      	mov	r0, r3
 8004de6:	f001 f97f 	bl	80060e8 <xTaskRemoveFromEventList>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d013      	beq.n	8004e18 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004df0:	4b3f      	ldr	r3, [pc, #252]	; (8004ef0 <xQueueGenericSend+0x1f8>)
 8004df2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	f3bf 8f4f 	dsb	sy
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	e00a      	b.n	8004e18 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004e02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004e08:	4b39      	ldr	r3, [pc, #228]	; (8004ef0 <xQueueGenericSend+0x1f8>)
 8004e0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e0e:	601a      	str	r2, [r3, #0]
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e18:	f002 f9ac 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	e063      	b.n	8004ee8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d103      	bne.n	8004e2e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e26:	f002 f9a5 	bl	8007174 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e05c      	b.n	8004ee8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d106      	bne.n	8004e42 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e34:	f107 0314 	add.w	r3, r7, #20
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f001 f9b9 	bl	80061b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e3e:	2301      	movs	r3, #1
 8004e40:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e42:	f002 f997 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e46:	f000 ff2b 	bl	8005ca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e4a:	f002 f963 	bl	8007114 <vPortEnterCritical>
 8004e4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e50:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e54:	b25b      	sxtb	r3, r3
 8004e56:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5a:	d103      	bne.n	8004e64 <xQueueGenericSend+0x16c>
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	2200      	movs	r2, #0
 8004e60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e6a:	b25b      	sxtb	r3, r3
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e70:	d103      	bne.n	8004e7a <xQueueGenericSend+0x182>
 8004e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e74:	2200      	movs	r2, #0
 8004e76:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e7a:	f002 f97b 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e7e:	1d3a      	adds	r2, r7, #4
 8004e80:	f107 0314 	add.w	r3, r7, #20
 8004e84:	4611      	mov	r1, r2
 8004e86:	4618      	mov	r0, r3
 8004e88:	f001 f9a8 	bl	80061dc <xTaskCheckForTimeOut>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d124      	bne.n	8004edc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e92:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e94:	f000 fc52 	bl	800573c <prvIsQueueFull>
 8004e98:	4603      	mov	r3, r0
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d018      	beq.n	8004ed0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ea0:	3310      	adds	r3, #16
 8004ea2:	687a      	ldr	r2, [r7, #4]
 8004ea4:	4611      	mov	r1, r2
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f001 f8ce 	bl	8006048 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004eac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eae:	f000 fbdd 	bl	800566c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004eb2:	f000 ff03 	bl	8005cbc <xTaskResumeAll>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	f47f af7c 	bne.w	8004db6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004ebe:	4b0c      	ldr	r3, [pc, #48]	; (8004ef0 <xQueueGenericSend+0x1f8>)
 8004ec0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	f3bf 8f4f 	dsb	sy
 8004eca:	f3bf 8f6f 	isb	sy
 8004ece:	e772      	b.n	8004db6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ed0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ed2:	f000 fbcb 	bl	800566c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ed6:	f000 fef1 	bl	8005cbc <xTaskResumeAll>
 8004eda:	e76c      	b.n	8004db6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004edc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ede:	f000 fbc5 	bl	800566c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ee2:	f000 feeb 	bl	8005cbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ee6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3738      	adds	r7, #56	; 0x38
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}
 8004ef0:	e000ed04 	.word	0xe000ed04

08004ef4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ef4:	b580      	push	{r7, lr}
 8004ef6:	b090      	sub	sp, #64	; 0x40
 8004ef8:	af00      	add	r7, sp, #0
 8004efa:	60f8      	str	r0, [r7, #12]
 8004efc:	60b9      	str	r1, [r7, #8]
 8004efe:	607a      	str	r2, [r7, #4]
 8004f00:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004f06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10a      	bne.n	8004f22 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f22:	68bb      	ldr	r3, [r7, #8]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d103      	bne.n	8004f30 <xQueueGenericSendFromISR+0x3c>
 8004f28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d101      	bne.n	8004f34 <xQueueGenericSendFromISR+0x40>
 8004f30:	2301      	movs	r3, #1
 8004f32:	e000      	b.n	8004f36 <xQueueGenericSendFromISR+0x42>
 8004f34:	2300      	movs	r3, #0
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d10a      	bne.n	8004f50 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f3e:	f383 8811 	msr	BASEPRI, r3
 8004f42:	f3bf 8f6f 	isb	sy
 8004f46:	f3bf 8f4f 	dsb	sy
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f4c:	bf00      	nop
 8004f4e:	e7fe      	b.n	8004f4e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	2b02      	cmp	r3, #2
 8004f54:	d103      	bne.n	8004f5e <xQueueGenericSendFromISR+0x6a>
 8004f56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d101      	bne.n	8004f62 <xQueueGenericSendFromISR+0x6e>
 8004f5e:	2301      	movs	r3, #1
 8004f60:	e000      	b.n	8004f64 <xQueueGenericSendFromISR+0x70>
 8004f62:	2300      	movs	r3, #0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d10a      	bne.n	8004f7e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004f68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6c:	f383 8811 	msr	BASEPRI, r3
 8004f70:	f3bf 8f6f 	isb	sy
 8004f74:	f3bf 8f4f 	dsb	sy
 8004f78:	623b      	str	r3, [r7, #32]
}
 8004f7a:	bf00      	nop
 8004f7c:	e7fe      	b.n	8004f7c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f7e:	f002 f9ab 	bl	80072d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f82:	f3ef 8211 	mrs	r2, BASEPRI
 8004f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f8a:	f383 8811 	msr	BASEPRI, r3
 8004f8e:	f3bf 8f6f 	isb	sy
 8004f92:	f3bf 8f4f 	dsb	sy
 8004f96:	61fa      	str	r2, [r7, #28]
 8004f98:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f9c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fa2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fa6:	429a      	cmp	r2, r3
 8004fa8:	d302      	bcc.n	8004fb0 <xQueueGenericSendFromISR+0xbc>
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d12f      	bne.n	8005010 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004fb0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fc0:	683a      	ldr	r2, [r7, #0]
 8004fc2:	68b9      	ldr	r1, [r7, #8]
 8004fc4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fc6:	f000 fac1 	bl	800554c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd2:	d112      	bne.n	8004ffa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d016      	beq.n	800500a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fde:	3324      	adds	r3, #36	; 0x24
 8004fe0:	4618      	mov	r0, r3
 8004fe2:	f001 f881 	bl	80060e8 <xTaskRemoveFromEventList>
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d00e      	beq.n	800500a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d00b      	beq.n	800500a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	2201      	movs	r2, #1
 8004ff6:	601a      	str	r2, [r3, #0]
 8004ff8:	e007      	b.n	800500a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004ffa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ffe:	3301      	adds	r3, #1
 8005000:	b2db      	uxtb	r3, r3
 8005002:	b25a      	sxtb	r2, r3
 8005004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005006:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800500a:	2301      	movs	r3, #1
 800500c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800500e:	e001      	b.n	8005014 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005010:	2300      	movs	r3, #0
 8005012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005014:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005016:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005018:	697b      	ldr	r3, [r7, #20]
 800501a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800501e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005022:	4618      	mov	r0, r3
 8005024:	3740      	adds	r7, #64	; 0x40
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b08e      	sub	sp, #56	; 0x38
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
 8005032:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800503a:	2b00      	cmp	r3, #0
 800503c:	d10a      	bne.n	8005054 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800503e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005042:	f383 8811 	msr	BASEPRI, r3
 8005046:	f3bf 8f6f 	isb	sy
 800504a:	f3bf 8f4f 	dsb	sy
 800504e:	623b      	str	r3, [r7, #32]
}
 8005050:	bf00      	nop
 8005052:	e7fe      	b.n	8005052 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005054:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005056:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005058:	2b00      	cmp	r3, #0
 800505a:	d00a      	beq.n	8005072 <xQueueGiveFromISR+0x48>
	__asm volatile
 800505c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005060:	f383 8811 	msr	BASEPRI, r3
 8005064:	f3bf 8f6f 	isb	sy
 8005068:	f3bf 8f4f 	dsb	sy
 800506c:	61fb      	str	r3, [r7, #28]
}
 800506e:	bf00      	nop
 8005070:	e7fe      	b.n	8005070 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8005072:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	2b00      	cmp	r3, #0
 8005078:	d103      	bne.n	8005082 <xQueueGiveFromISR+0x58>
 800507a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <xQueueGiveFromISR+0x5c>
 8005082:	2301      	movs	r3, #1
 8005084:	e000      	b.n	8005088 <xQueueGiveFromISR+0x5e>
 8005086:	2300      	movs	r3, #0
 8005088:	2b00      	cmp	r3, #0
 800508a:	d10a      	bne.n	80050a2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800508c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005090:	f383 8811 	msr	BASEPRI, r3
 8005094:	f3bf 8f6f 	isb	sy
 8005098:	f3bf 8f4f 	dsb	sy
 800509c:	61bb      	str	r3, [r7, #24]
}
 800509e:	bf00      	nop
 80050a0:	e7fe      	b.n	80050a0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80050a2:	f002 f919 	bl	80072d8 <vPortValidateInterruptPriority>
	__asm volatile
 80050a6:	f3ef 8211 	mrs	r2, BASEPRI
 80050aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	617a      	str	r2, [r7, #20]
 80050bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80050be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80050c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d22b      	bcs.n	800512a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d112      	bne.n	8005114 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d016      	beq.n	8005124 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050f8:	3324      	adds	r3, #36	; 0x24
 80050fa:	4618      	mov	r0, r3
 80050fc:	f000 fff4 	bl	80060e8 <xTaskRemoveFromEventList>
 8005100:	4603      	mov	r3, r0
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00e      	beq.n	8005124 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00b      	beq.n	8005124 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	2201      	movs	r2, #1
 8005110:	601a      	str	r2, [r3, #0]
 8005112:	e007      	b.n	8005124 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005114:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005118:	3301      	adds	r3, #1
 800511a:	b2db      	uxtb	r3, r3
 800511c:	b25a      	sxtb	r2, r3
 800511e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005120:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005124:	2301      	movs	r3, #1
 8005126:	637b      	str	r3, [r7, #52]	; 0x34
 8005128:	e001      	b.n	800512e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800512a:	2300      	movs	r3, #0
 800512c:	637b      	str	r3, [r7, #52]	; 0x34
 800512e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005130:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	f383 8811 	msr	BASEPRI, r3
}
 8005138:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800513a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800513c:	4618      	mov	r0, r3
 800513e:	3738      	adds	r7, #56	; 0x38
 8005140:	46bd      	mov	sp, r7
 8005142:	bd80      	pop	{r7, pc}

08005144 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005144:	b580      	push	{r7, lr}
 8005146:	b08c      	sub	sp, #48	; 0x30
 8005148:	af00      	add	r7, sp, #0
 800514a:	60f8      	str	r0, [r7, #12]
 800514c:	60b9      	str	r1, [r7, #8]
 800514e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005150:	2300      	movs	r3, #0
 8005152:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800515a:	2b00      	cmp	r3, #0
 800515c:	d10a      	bne.n	8005174 <xQueueReceive+0x30>
	__asm volatile
 800515e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005162:	f383 8811 	msr	BASEPRI, r3
 8005166:	f3bf 8f6f 	isb	sy
 800516a:	f3bf 8f4f 	dsb	sy
 800516e:	623b      	str	r3, [r7, #32]
}
 8005170:	bf00      	nop
 8005172:	e7fe      	b.n	8005172 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d103      	bne.n	8005182 <xQueueReceive+0x3e>
 800517a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800517c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800517e:	2b00      	cmp	r3, #0
 8005180:	d101      	bne.n	8005186 <xQueueReceive+0x42>
 8005182:	2301      	movs	r3, #1
 8005184:	e000      	b.n	8005188 <xQueueReceive+0x44>
 8005186:	2300      	movs	r3, #0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d10a      	bne.n	80051a2 <xQueueReceive+0x5e>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	61fb      	str	r3, [r7, #28]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80051a2:	f001 f95f 	bl	8006464 <xTaskGetSchedulerState>
 80051a6:	4603      	mov	r3, r0
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d102      	bne.n	80051b2 <xQueueReceive+0x6e>
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d101      	bne.n	80051b6 <xQueueReceive+0x72>
 80051b2:	2301      	movs	r3, #1
 80051b4:	e000      	b.n	80051b8 <xQueueReceive+0x74>
 80051b6:	2300      	movs	r3, #0
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d10a      	bne.n	80051d2 <xQueueReceive+0x8e>
	__asm volatile
 80051bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c0:	f383 8811 	msr	BASEPRI, r3
 80051c4:	f3bf 8f6f 	isb	sy
 80051c8:	f3bf 8f4f 	dsb	sy
 80051cc:	61bb      	str	r3, [r7, #24]
}
 80051ce:	bf00      	nop
 80051d0:	e7fe      	b.n	80051d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051d2:	f001 ff9f 	bl	8007114 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d01f      	beq.n	8005222 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051e2:	68b9      	ldr	r1, [r7, #8]
 80051e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051e6:	f000 fa1b 	bl	8005620 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ec:	1e5a      	subs	r2, r3, #1
 80051ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d00f      	beq.n	800521a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051fc:	3310      	adds	r3, #16
 80051fe:	4618      	mov	r0, r3
 8005200:	f000 ff72 	bl	80060e8 <xTaskRemoveFromEventList>
 8005204:	4603      	mov	r3, r0
 8005206:	2b00      	cmp	r3, #0
 8005208:	d007      	beq.n	800521a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800520a:	4b3d      	ldr	r3, [pc, #244]	; (8005300 <xQueueReceive+0x1bc>)
 800520c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005210:	601a      	str	r2, [r3, #0]
 8005212:	f3bf 8f4f 	dsb	sy
 8005216:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800521a:	f001 ffab 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 800521e:	2301      	movs	r3, #1
 8005220:	e069      	b.n	80052f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d103      	bne.n	8005230 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005228:	f001 ffa4 	bl	8007174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800522c:	2300      	movs	r3, #0
 800522e:	e062      	b.n	80052f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005230:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005232:	2b00      	cmp	r3, #0
 8005234:	d106      	bne.n	8005244 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005236:	f107 0310 	add.w	r3, r7, #16
 800523a:	4618      	mov	r0, r3
 800523c:	f000 ffb8 	bl	80061b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005240:	2301      	movs	r3, #1
 8005242:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005244:	f001 ff96 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005248:	f000 fd2a 	bl	8005ca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800524c:	f001 ff62 	bl	8007114 <vPortEnterCritical>
 8005250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005252:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005256:	b25b      	sxtb	r3, r3
 8005258:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525c:	d103      	bne.n	8005266 <xQueueReceive+0x122>
 800525e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005260:	2200      	movs	r2, #0
 8005262:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005268:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800526c:	b25b      	sxtb	r3, r3
 800526e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005272:	d103      	bne.n	800527c <xQueueReceive+0x138>
 8005274:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005276:	2200      	movs	r2, #0
 8005278:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800527c:	f001 ff7a 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005280:	1d3a      	adds	r2, r7, #4
 8005282:	f107 0310 	add.w	r3, r7, #16
 8005286:	4611      	mov	r1, r2
 8005288:	4618      	mov	r0, r3
 800528a:	f000 ffa7 	bl	80061dc <xTaskCheckForTimeOut>
 800528e:	4603      	mov	r3, r0
 8005290:	2b00      	cmp	r3, #0
 8005292:	d123      	bne.n	80052dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005294:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005296:	f000 fa3b 	bl	8005710 <prvIsQueueEmpty>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d017      	beq.n	80052d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80052a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052a2:	3324      	adds	r3, #36	; 0x24
 80052a4:	687a      	ldr	r2, [r7, #4]
 80052a6:	4611      	mov	r1, r2
 80052a8:	4618      	mov	r0, r3
 80052aa:	f000 fecd 	bl	8006048 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80052ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052b0:	f000 f9dc 	bl	800566c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052b4:	f000 fd02 	bl	8005cbc <xTaskResumeAll>
 80052b8:	4603      	mov	r3, r0
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d189      	bne.n	80051d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80052be:	4b10      	ldr	r3, [pc, #64]	; (8005300 <xQueueReceive+0x1bc>)
 80052c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
 80052ce:	e780      	b.n	80051d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052d2:	f000 f9cb 	bl	800566c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052d6:	f000 fcf1 	bl	8005cbc <xTaskResumeAll>
 80052da:	e77a      	b.n	80051d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80052dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052de:	f000 f9c5 	bl	800566c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052e2:	f000 fceb 	bl	8005cbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052e8:	f000 fa12 	bl	8005710 <prvIsQueueEmpty>
 80052ec:	4603      	mov	r3, r0
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	f43f af6f 	beq.w	80051d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052f6:	4618      	mov	r0, r3
 80052f8:	3730      	adds	r7, #48	; 0x30
 80052fa:	46bd      	mov	sp, r7
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	e000ed04 	.word	0xe000ed04

08005304 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b08e      	sub	sp, #56	; 0x38
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800530e:	2300      	movs	r3, #0
 8005310:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005316:	2300      	movs	r3, #0
 8005318:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800531a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800531c:	2b00      	cmp	r3, #0
 800531e:	d10a      	bne.n	8005336 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	623b      	str	r3, [r7, #32]
}
 8005332:	bf00      	nop
 8005334:	e7fe      	b.n	8005334 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00a      	beq.n	8005354 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	61fb      	str	r3, [r7, #28]
}
 8005350:	bf00      	nop
 8005352:	e7fe      	b.n	8005352 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005354:	f001 f886 	bl	8006464 <xTaskGetSchedulerState>
 8005358:	4603      	mov	r3, r0
 800535a:	2b00      	cmp	r3, #0
 800535c:	d102      	bne.n	8005364 <xQueueSemaphoreTake+0x60>
 800535e:	683b      	ldr	r3, [r7, #0]
 8005360:	2b00      	cmp	r3, #0
 8005362:	d101      	bne.n	8005368 <xQueueSemaphoreTake+0x64>
 8005364:	2301      	movs	r3, #1
 8005366:	e000      	b.n	800536a <xQueueSemaphoreTake+0x66>
 8005368:	2300      	movs	r3, #0
 800536a:	2b00      	cmp	r3, #0
 800536c:	d10a      	bne.n	8005384 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800536e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005372:	f383 8811 	msr	BASEPRI, r3
 8005376:	f3bf 8f6f 	isb	sy
 800537a:	f3bf 8f4f 	dsb	sy
 800537e:	61bb      	str	r3, [r7, #24]
}
 8005380:	bf00      	nop
 8005382:	e7fe      	b.n	8005382 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005384:	f001 fec6 	bl	8007114 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800538e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005390:	2b00      	cmp	r3, #0
 8005392:	d024      	beq.n	80053de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005394:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005396:	1e5a      	subs	r2, r3, #1
 8005398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800539c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d104      	bne.n	80053ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80053a4:	f001 f9d4 	bl	8006750 <pvTaskIncrementMutexHeldCount>
 80053a8:	4602      	mov	r2, r0
 80053aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80053ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b0:	691b      	ldr	r3, [r3, #16]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00f      	beq.n	80053d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053b8:	3310      	adds	r3, #16
 80053ba:	4618      	mov	r0, r3
 80053bc:	f000 fe94 	bl	80060e8 <xTaskRemoveFromEventList>
 80053c0:	4603      	mov	r3, r0
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d007      	beq.n	80053d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053c6:	4b54      	ldr	r3, [pc, #336]	; (8005518 <xQueueSemaphoreTake+0x214>)
 80053c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053cc:	601a      	str	r2, [r3, #0]
 80053ce:	f3bf 8f4f 	dsb	sy
 80053d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053d6:	f001 fecd 	bl	8007174 <vPortExitCritical>
				return pdPASS;
 80053da:	2301      	movs	r3, #1
 80053dc:	e097      	b.n	800550e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053de:	683b      	ldr	r3, [r7, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d111      	bne.n	8005408 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80053e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d00a      	beq.n	8005400 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80053ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ee:	f383 8811 	msr	BASEPRI, r3
 80053f2:	f3bf 8f6f 	isb	sy
 80053f6:	f3bf 8f4f 	dsb	sy
 80053fa:	617b      	str	r3, [r7, #20]
}
 80053fc:	bf00      	nop
 80053fe:	e7fe      	b.n	80053fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005400:	f001 feb8 	bl	8007174 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005404:	2300      	movs	r3, #0
 8005406:	e082      	b.n	800550e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005408:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800540a:	2b00      	cmp	r3, #0
 800540c:	d106      	bne.n	800541c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800540e:	f107 030c 	add.w	r3, r7, #12
 8005412:	4618      	mov	r0, r3
 8005414:	f000 fecc 	bl	80061b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005418:	2301      	movs	r3, #1
 800541a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800541c:	f001 feaa 	bl	8007174 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005420:	f000 fc3e 	bl	8005ca0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005424:	f001 fe76 	bl	8007114 <vPortEnterCritical>
 8005428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800542e:	b25b      	sxtb	r3, r3
 8005430:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005434:	d103      	bne.n	800543e <xQueueSemaphoreTake+0x13a>
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	2200      	movs	r2, #0
 800543a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800543e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005440:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005444:	b25b      	sxtb	r3, r3
 8005446:	f1b3 3fff 	cmp.w	r3, #4294967295
 800544a:	d103      	bne.n	8005454 <xQueueSemaphoreTake+0x150>
 800544c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800544e:	2200      	movs	r2, #0
 8005450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005454:	f001 fe8e 	bl	8007174 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005458:	463a      	mov	r2, r7
 800545a:	f107 030c 	add.w	r3, r7, #12
 800545e:	4611      	mov	r1, r2
 8005460:	4618      	mov	r0, r3
 8005462:	f000 febb 	bl	80061dc <xTaskCheckForTimeOut>
 8005466:	4603      	mov	r3, r0
 8005468:	2b00      	cmp	r3, #0
 800546a:	d132      	bne.n	80054d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800546c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800546e:	f000 f94f 	bl	8005710 <prvIsQueueEmpty>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d026      	beq.n	80054c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d109      	bne.n	8005494 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005480:	f001 fe48 	bl	8007114 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	4618      	mov	r0, r3
 800548a:	f001 f809 	bl	80064a0 <xTaskPriorityInherit>
 800548e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005490:	f001 fe70 	bl	8007174 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005496:	3324      	adds	r3, #36	; 0x24
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	4611      	mov	r1, r2
 800549c:	4618      	mov	r0, r3
 800549e:	f000 fdd3 	bl	8006048 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80054a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054a4:	f000 f8e2 	bl	800566c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80054a8:	f000 fc08 	bl	8005cbc <xTaskResumeAll>
 80054ac:	4603      	mov	r3, r0
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	f47f af68 	bne.w	8005384 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80054b4:	4b18      	ldr	r3, [pc, #96]	; (8005518 <xQueueSemaphoreTake+0x214>)
 80054b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054ba:	601a      	str	r2, [r3, #0]
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	f3bf 8f6f 	isb	sy
 80054c4:	e75e      	b.n	8005384 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80054c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054c8:	f000 f8d0 	bl	800566c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054cc:	f000 fbf6 	bl	8005cbc <xTaskResumeAll>
 80054d0:	e758      	b.n	8005384 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80054d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054d4:	f000 f8ca 	bl	800566c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054d8:	f000 fbf0 	bl	8005cbc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054de:	f000 f917 	bl	8005710 <prvIsQueueEmpty>
 80054e2:	4603      	mov	r3, r0
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	f43f af4d 	beq.w	8005384 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80054ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d00d      	beq.n	800550c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80054f0:	f001 fe10 	bl	8007114 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80054f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054f6:	f000 f811 	bl	800551c <prvGetDisinheritPriorityAfterTimeout>
 80054fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80054fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054fe:	689b      	ldr	r3, [r3, #8]
 8005500:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005502:	4618      	mov	r0, r3
 8005504:	f001 f8a2 	bl	800664c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005508:	f001 fe34 	bl	8007174 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800550c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800550e:	4618      	mov	r0, r3
 8005510:	3738      	adds	r7, #56	; 0x38
 8005512:	46bd      	mov	sp, r7
 8005514:	bd80      	pop	{r7, pc}
 8005516:	bf00      	nop
 8005518:	e000ed04 	.word	0xe000ed04

0800551c <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800551c:	b480      	push	{r7}
 800551e:	b085      	sub	sp, #20
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005528:	2b00      	cmp	r3, #0
 800552a:	d006      	beq.n	800553a <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005536:	60fb      	str	r3, [r7, #12]
 8005538:	e001      	b.n	800553e <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800553a:	2300      	movs	r3, #0
 800553c:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800553e:	68fb      	ldr	r3, [r7, #12]
	}
 8005540:	4618      	mov	r0, r3
 8005542:	3714      	adds	r7, #20
 8005544:	46bd      	mov	sp, r7
 8005546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554a:	4770      	bx	lr

0800554c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800554c:	b580      	push	{r7, lr}
 800554e:	b086      	sub	sp, #24
 8005550:	af00      	add	r7, sp, #0
 8005552:	60f8      	str	r0, [r7, #12]
 8005554:	60b9      	str	r1, [r7, #8]
 8005556:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005560:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005562:	68fb      	ldr	r3, [r7, #12]
 8005564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005566:	2b00      	cmp	r3, #0
 8005568:	d10d      	bne.n	8005586 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d14d      	bne.n	800560e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	689b      	ldr	r3, [r3, #8]
 8005576:	4618      	mov	r0, r3
 8005578:	f000 fffa 	bl	8006570 <xTaskPriorityDisinherit>
 800557c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	2200      	movs	r2, #0
 8005582:	609a      	str	r2, [r3, #8]
 8005584:	e043      	b.n	800560e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d119      	bne.n	80055c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6858      	ldr	r0, [r3, #4]
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	461a      	mov	r2, r3
 8005596:	68b9      	ldr	r1, [r7, #8]
 8005598:	f002 f950 	bl	800783c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	685a      	ldr	r2, [r3, #4]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	441a      	add	r2, r3
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	685a      	ldr	r2, [r3, #4]
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	429a      	cmp	r2, r3
 80055b4:	d32b      	bcc.n	800560e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055b6:	68fb      	ldr	r3, [r7, #12]
 80055b8:	681a      	ldr	r2, [r3, #0]
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	605a      	str	r2, [r3, #4]
 80055be:	e026      	b.n	800560e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	68d8      	ldr	r0, [r3, #12]
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c8:	461a      	mov	r2, r3
 80055ca:	68b9      	ldr	r1, [r7, #8]
 80055cc:	f002 f936 	bl	800783c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	68da      	ldr	r2, [r3, #12]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055d8:	425b      	negs	r3, r3
 80055da:	441a      	add	r2, r3
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	68da      	ldr	r2, [r3, #12]
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d207      	bcs.n	80055fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	689a      	ldr	r2, [r3, #8]
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055f4:	425b      	negs	r3, r3
 80055f6:	441a      	add	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b02      	cmp	r3, #2
 8005600:	d105      	bne.n	800560e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005602:	693b      	ldr	r3, [r7, #16]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d002      	beq.n	800560e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	3b01      	subs	r3, #1
 800560c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800560e:	693b      	ldr	r3, [r7, #16]
 8005610:	1c5a      	adds	r2, r3, #1
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005616:	697b      	ldr	r3, [r7, #20]
}
 8005618:	4618      	mov	r0, r3
 800561a:	3718      	adds	r7, #24
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005620:	b580      	push	{r7, lr}
 8005622:	b082      	sub	sp, #8
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	2b00      	cmp	r3, #0
 8005630:	d018      	beq.n	8005664 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	68da      	ldr	r2, [r3, #12]
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800563a:	441a      	add	r2, r3
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68da      	ldr	r2, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	689b      	ldr	r3, [r3, #8]
 8005648:	429a      	cmp	r2, r3
 800564a:	d303      	bcc.n	8005654 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	68d9      	ldr	r1, [r3, #12]
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800565c:	461a      	mov	r2, r3
 800565e:	6838      	ldr	r0, [r7, #0]
 8005660:	f002 f8ec 	bl	800783c <memcpy>
	}
}
 8005664:	bf00      	nop
 8005666:	3708      	adds	r7, #8
 8005668:	46bd      	mov	sp, r7
 800566a:	bd80      	pop	{r7, pc}

0800566c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b084      	sub	sp, #16
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005674:	f001 fd4e 	bl	8007114 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800567e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005680:	e011      	b.n	80056a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	2b00      	cmp	r3, #0
 8005688:	d012      	beq.n	80056b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	3324      	adds	r3, #36	; 0x24
 800568e:	4618      	mov	r0, r3
 8005690:	f000 fd2a 	bl	80060e8 <xTaskRemoveFromEventList>
 8005694:	4603      	mov	r3, r0
 8005696:	2b00      	cmp	r3, #0
 8005698:	d001      	beq.n	800569e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800569a:	f000 fe01 	bl	80062a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800569e:	7bfb      	ldrb	r3, [r7, #15]
 80056a0:	3b01      	subs	r3, #1
 80056a2:	b2db      	uxtb	r3, r3
 80056a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80056a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	dce9      	bgt.n	8005682 <prvUnlockQueue+0x16>
 80056ae:	e000      	b.n	80056b2 <prvUnlockQueue+0x46>
					break;
 80056b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	22ff      	movs	r2, #255	; 0xff
 80056b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056ba:	f001 fd5b 	bl	8007174 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056be:	f001 fd29 	bl	8007114 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056ca:	e011      	b.n	80056f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d012      	beq.n	80056fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	3310      	adds	r3, #16
 80056d8:	4618      	mov	r0, r3
 80056da:	f000 fd05 	bl	80060e8 <xTaskRemoveFromEventList>
 80056de:	4603      	mov	r3, r0
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	d001      	beq.n	80056e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056e4:	f000 fddc 	bl	80062a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056e8:	7bbb      	ldrb	r3, [r7, #14]
 80056ea:	3b01      	subs	r3, #1
 80056ec:	b2db      	uxtb	r3, r3
 80056ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	dce9      	bgt.n	80056cc <prvUnlockQueue+0x60>
 80056f8:	e000      	b.n	80056fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	22ff      	movs	r2, #255	; 0xff
 8005700:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005704:	f001 fd36 	bl	8007174 <vPortExitCritical>
}
 8005708:	bf00      	nop
 800570a:	3710      	adds	r7, #16
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b084      	sub	sp, #16
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005718:	f001 fcfc 	bl	8007114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005724:	2301      	movs	r3, #1
 8005726:	60fb      	str	r3, [r7, #12]
 8005728:	e001      	b.n	800572e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800572a:	2300      	movs	r3, #0
 800572c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800572e:	f001 fd21 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8005732:	68fb      	ldr	r3, [r7, #12]
}
 8005734:	4618      	mov	r0, r3
 8005736:	3710      	adds	r7, #16
 8005738:	46bd      	mov	sp, r7
 800573a:	bd80      	pop	{r7, pc}

0800573c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800573c:	b580      	push	{r7, lr}
 800573e:	b084      	sub	sp, #16
 8005740:	af00      	add	r7, sp, #0
 8005742:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005744:	f001 fce6 	bl	8007114 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005750:	429a      	cmp	r2, r3
 8005752:	d102      	bne.n	800575a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005754:	2301      	movs	r3, #1
 8005756:	60fb      	str	r3, [r7, #12]
 8005758:	e001      	b.n	800575e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800575a:	2300      	movs	r3, #0
 800575c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800575e:	f001 fd09 	bl	8007174 <vPortExitCritical>

	return xReturn;
 8005762:	68fb      	ldr	r3, [r7, #12]
}
 8005764:	4618      	mov	r0, r3
 8005766:	3710      	adds	r7, #16
 8005768:	46bd      	mov	sp, r7
 800576a:	bd80      	pop	{r7, pc}

0800576c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800576c:	b480      	push	{r7}
 800576e:	b085      	sub	sp, #20
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
 8005774:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005776:	2300      	movs	r3, #0
 8005778:	60fb      	str	r3, [r7, #12]
 800577a:	e014      	b.n	80057a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800577c:	4a0f      	ldr	r2, [pc, #60]	; (80057bc <vQueueAddToRegistry+0x50>)
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005784:	2b00      	cmp	r3, #0
 8005786:	d10b      	bne.n	80057a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005788:	490c      	ldr	r1, [pc, #48]	; (80057bc <vQueueAddToRegistry+0x50>)
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	683a      	ldr	r2, [r7, #0]
 800578e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005792:	4a0a      	ldr	r2, [pc, #40]	; (80057bc <vQueueAddToRegistry+0x50>)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	00db      	lsls	r3, r3, #3
 8005798:	4413      	add	r3, r2
 800579a:	687a      	ldr	r2, [r7, #4]
 800579c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800579e:	e006      	b.n	80057ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	3301      	adds	r3, #1
 80057a4:	60fb      	str	r3, [r7, #12]
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b07      	cmp	r3, #7
 80057aa:	d9e7      	bls.n	800577c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80057ac:	bf00      	nop
 80057ae:	bf00      	nop
 80057b0:	3714      	adds	r7, #20
 80057b2:	46bd      	mov	sp, r7
 80057b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057b8:	4770      	bx	lr
 80057ba:	bf00      	nop
 80057bc:	20000c3c 	.word	0x20000c3c

080057c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	b086      	sub	sp, #24
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057d0:	f001 fca0 	bl	8007114 <vPortEnterCritical>
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057da:	b25b      	sxtb	r3, r3
 80057dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e0:	d103      	bne.n	80057ea <vQueueWaitForMessageRestricted+0x2a>
 80057e2:	697b      	ldr	r3, [r7, #20]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057ea:	697b      	ldr	r3, [r7, #20]
 80057ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057f0:	b25b      	sxtb	r3, r3
 80057f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f6:	d103      	bne.n	8005800 <vQueueWaitForMessageRestricted+0x40>
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005800:	f001 fcb8 	bl	8007174 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005808:	2b00      	cmp	r3, #0
 800580a:	d106      	bne.n	800581a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800580c:	697b      	ldr	r3, [r7, #20]
 800580e:	3324      	adds	r3, #36	; 0x24
 8005810:	687a      	ldr	r2, [r7, #4]
 8005812:	68b9      	ldr	r1, [r7, #8]
 8005814:	4618      	mov	r0, r3
 8005816:	f000 fc3b 	bl	8006090 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800581a:	6978      	ldr	r0, [r7, #20]
 800581c:	f7ff ff26 	bl	800566c <prvUnlockQueue>
	}
 8005820:	bf00      	nop
 8005822:	3718      	adds	r7, #24
 8005824:	46bd      	mov	sp, r7
 8005826:	bd80      	pop	{r7, pc}

08005828 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005828:	b580      	push	{r7, lr}
 800582a:	b08e      	sub	sp, #56	; 0x38
 800582c:	af04      	add	r7, sp, #16
 800582e:	60f8      	str	r0, [r7, #12]
 8005830:	60b9      	str	r1, [r7, #8]
 8005832:	607a      	str	r2, [r7, #4]
 8005834:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005836:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005838:	2b00      	cmp	r3, #0
 800583a:	d10a      	bne.n	8005852 <xTaskCreateStatic+0x2a>
	__asm volatile
 800583c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005840:	f383 8811 	msr	BASEPRI, r3
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	f3bf 8f4f 	dsb	sy
 800584c:	623b      	str	r3, [r7, #32]
}
 800584e:	bf00      	nop
 8005850:	e7fe      	b.n	8005850 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005854:	2b00      	cmp	r3, #0
 8005856:	d10a      	bne.n	800586e <xTaskCreateStatic+0x46>
	__asm volatile
 8005858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800585c:	f383 8811 	msr	BASEPRI, r3
 8005860:	f3bf 8f6f 	isb	sy
 8005864:	f3bf 8f4f 	dsb	sy
 8005868:	61fb      	str	r3, [r7, #28]
}
 800586a:	bf00      	nop
 800586c:	e7fe      	b.n	800586c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800586e:	235c      	movs	r3, #92	; 0x5c
 8005870:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	2b5c      	cmp	r3, #92	; 0x5c
 8005876:	d00a      	beq.n	800588e <xTaskCreateStatic+0x66>
	__asm volatile
 8005878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800587c:	f383 8811 	msr	BASEPRI, r3
 8005880:	f3bf 8f6f 	isb	sy
 8005884:	f3bf 8f4f 	dsb	sy
 8005888:	61bb      	str	r3, [r7, #24]
}
 800588a:	bf00      	nop
 800588c:	e7fe      	b.n	800588c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800588e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005892:	2b00      	cmp	r3, #0
 8005894:	d01e      	beq.n	80058d4 <xTaskCreateStatic+0xac>
 8005896:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005898:	2b00      	cmp	r3, #0
 800589a:	d01b      	beq.n	80058d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800589c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800589e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80058a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80058a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80058a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a8:	2202      	movs	r2, #2
 80058aa:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80058ae:	2300      	movs	r3, #0
 80058b0:	9303      	str	r3, [sp, #12]
 80058b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b4:	9302      	str	r3, [sp, #8]
 80058b6:	f107 0314 	add.w	r3, r7, #20
 80058ba:	9301      	str	r3, [sp, #4]
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	9300      	str	r3, [sp, #0]
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	68b9      	ldr	r1, [r7, #8]
 80058c6:	68f8      	ldr	r0, [r7, #12]
 80058c8:	f000 f850 	bl	800596c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ce:	f000 f8dd 	bl	8005a8c <prvAddNewTaskToReadyList>
 80058d2:	e001      	b.n	80058d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80058d4:	2300      	movs	r3, #0
 80058d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058d8:	697b      	ldr	r3, [r7, #20]
	}
 80058da:	4618      	mov	r0, r3
 80058dc:	3728      	adds	r7, #40	; 0x28
 80058de:	46bd      	mov	sp, r7
 80058e0:	bd80      	pop	{r7, pc}

080058e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058e2:	b580      	push	{r7, lr}
 80058e4:	b08c      	sub	sp, #48	; 0x30
 80058e6:	af04      	add	r7, sp, #16
 80058e8:	60f8      	str	r0, [r7, #12]
 80058ea:	60b9      	str	r1, [r7, #8]
 80058ec:	603b      	str	r3, [r7, #0]
 80058ee:	4613      	mov	r3, r2
 80058f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058f2:	88fb      	ldrh	r3, [r7, #6]
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	4618      	mov	r0, r3
 80058f8:	f001 fd2e 	bl	8007358 <pvPortMalloc>
 80058fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d00e      	beq.n	8005922 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005904:	205c      	movs	r0, #92	; 0x5c
 8005906:	f001 fd27 	bl	8007358 <pvPortMalloc>
 800590a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	631a      	str	r2, [r3, #48]	; 0x30
 8005918:	e005      	b.n	8005926 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800591a:	6978      	ldr	r0, [r7, #20]
 800591c:	f001 fde8 	bl	80074f0 <vPortFree>
 8005920:	e001      	b.n	8005926 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005922:	2300      	movs	r3, #0
 8005924:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d017      	beq.n	800595c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800592c:	69fb      	ldr	r3, [r7, #28]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005934:	88fa      	ldrh	r2, [r7, #6]
 8005936:	2300      	movs	r3, #0
 8005938:	9303      	str	r3, [sp, #12]
 800593a:	69fb      	ldr	r3, [r7, #28]
 800593c:	9302      	str	r3, [sp, #8]
 800593e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005940:	9301      	str	r3, [sp, #4]
 8005942:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005944:	9300      	str	r3, [sp, #0]
 8005946:	683b      	ldr	r3, [r7, #0]
 8005948:	68b9      	ldr	r1, [r7, #8]
 800594a:	68f8      	ldr	r0, [r7, #12]
 800594c:	f000 f80e 	bl	800596c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005950:	69f8      	ldr	r0, [r7, #28]
 8005952:	f000 f89b 	bl	8005a8c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005956:	2301      	movs	r3, #1
 8005958:	61bb      	str	r3, [r7, #24]
 800595a:	e002      	b.n	8005962 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800595c:	f04f 33ff 	mov.w	r3, #4294967295
 8005960:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005962:	69bb      	ldr	r3, [r7, #24]
	}
 8005964:	4618      	mov	r0, r3
 8005966:	3720      	adds	r7, #32
 8005968:	46bd      	mov	sp, r7
 800596a:	bd80      	pop	{r7, pc}

0800596c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b088      	sub	sp, #32
 8005970:	af00      	add	r7, sp, #0
 8005972:	60f8      	str	r0, [r7, #12]
 8005974:	60b9      	str	r1, [r7, #8]
 8005976:	607a      	str	r2, [r7, #4]
 8005978:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800597a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800597c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	461a      	mov	r2, r3
 8005984:	21a5      	movs	r1, #165	; 0xa5
 8005986:	f001 ff2d 	bl	80077e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800598a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005994:	3b01      	subs	r3, #1
 8005996:	009b      	lsls	r3, r3, #2
 8005998:	4413      	add	r3, r2
 800599a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	f023 0307 	bic.w	r3, r3, #7
 80059a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	f003 0307 	and.w	r3, r3, #7
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d00a      	beq.n	80059c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80059ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059b2:	f383 8811 	msr	BASEPRI, r3
 80059b6:	f3bf 8f6f 	isb	sy
 80059ba:	f3bf 8f4f 	dsb	sy
 80059be:	617b      	str	r3, [r7, #20]
}
 80059c0:	bf00      	nop
 80059c2:	e7fe      	b.n	80059c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d01f      	beq.n	8005a0a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059ca:	2300      	movs	r3, #0
 80059cc:	61fb      	str	r3, [r7, #28]
 80059ce:	e012      	b.n	80059f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	7819      	ldrb	r1, [r3, #0]
 80059d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059da:	69fb      	ldr	r3, [r7, #28]
 80059dc:	4413      	add	r3, r2
 80059de:	3334      	adds	r3, #52	; 0x34
 80059e0:	460a      	mov	r2, r1
 80059e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059e4:	68ba      	ldr	r2, [r7, #8]
 80059e6:	69fb      	ldr	r3, [r7, #28]
 80059e8:	4413      	add	r3, r2
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d006      	beq.n	80059fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059f0:	69fb      	ldr	r3, [r7, #28]
 80059f2:	3301      	adds	r3, #1
 80059f4:	61fb      	str	r3, [r7, #28]
 80059f6:	69fb      	ldr	r3, [r7, #28]
 80059f8:	2b0f      	cmp	r3, #15
 80059fa:	d9e9      	bls.n	80059d0 <prvInitialiseNewTask+0x64>
 80059fc:	e000      	b.n	8005a00 <prvInitialiseNewTask+0x94>
			{
				break;
 80059fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a02:	2200      	movs	r2, #0
 8005a04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a08:	e003      	b.n	8005a12 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005a12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a14:	2b37      	cmp	r3, #55	; 0x37
 8005a16:	d901      	bls.n	8005a1c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a18:	2337      	movs	r3, #55	; 0x37
 8005a1a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a20:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a26:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	3304      	adds	r3, #4
 8005a32:	4618      	mov	r0, r3
 8005a34:	f7fe ff8e 	bl	8004954 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	3318      	adds	r3, #24
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe ff89 	bl	8004954 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a46:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a50:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a54:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a56:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a5a:	2200      	movs	r2, #0
 8005a5c:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	2200      	movs	r2, #0
 8005a62:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a66:	683a      	ldr	r2, [r7, #0]
 8005a68:	68f9      	ldr	r1, [r7, #12]
 8005a6a:	69b8      	ldr	r0, [r7, #24]
 8005a6c:	f001 fa26 	bl	8006ebc <pxPortInitialiseStack>
 8005a70:	4602      	mov	r2, r0
 8005a72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a74:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d002      	beq.n	8005a82 <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a82:	bf00      	nop
 8005a84:	3720      	adds	r7, #32
 8005a86:	46bd      	mov	sp, r7
 8005a88:	bd80      	pop	{r7, pc}
	...

08005a8c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b082      	sub	sp, #8
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a94:	f001 fb3e 	bl	8007114 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a98:	4b2d      	ldr	r3, [pc, #180]	; (8005b50 <prvAddNewTaskToReadyList+0xc4>)
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	3301      	adds	r3, #1
 8005a9e:	4a2c      	ldr	r2, [pc, #176]	; (8005b50 <prvAddNewTaskToReadyList+0xc4>)
 8005aa0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005aa2:	4b2c      	ldr	r3, [pc, #176]	; (8005b54 <prvAddNewTaskToReadyList+0xc8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d109      	bne.n	8005abe <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005aaa:	4a2a      	ldr	r2, [pc, #168]	; (8005b54 <prvAddNewTaskToReadyList+0xc8>)
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ab0:	4b27      	ldr	r3, [pc, #156]	; (8005b50 <prvAddNewTaskToReadyList+0xc4>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	2b01      	cmp	r3, #1
 8005ab6:	d110      	bne.n	8005ada <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ab8:	f000 fc16 	bl	80062e8 <prvInitialiseTaskLists>
 8005abc:	e00d      	b.n	8005ada <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005abe:	4b26      	ldr	r3, [pc, #152]	; (8005b58 <prvAddNewTaskToReadyList+0xcc>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	d109      	bne.n	8005ada <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ac6:	4b23      	ldr	r3, [pc, #140]	; (8005b54 <prvAddNewTaskToReadyList+0xc8>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d802      	bhi.n	8005ada <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ad4:	4a1f      	ldr	r2, [pc, #124]	; (8005b54 <prvAddNewTaskToReadyList+0xc8>)
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ada:	4b20      	ldr	r3, [pc, #128]	; (8005b5c <prvAddNewTaskToReadyList+0xd0>)
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	3301      	adds	r3, #1
 8005ae0:	4a1e      	ldr	r2, [pc, #120]	; (8005b5c <prvAddNewTaskToReadyList+0xd0>)
 8005ae2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ae4:	4b1d      	ldr	r3, [pc, #116]	; (8005b5c <prvAddNewTaskToReadyList+0xd0>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	4b1b      	ldr	r3, [pc, #108]	; (8005b60 <prvAddNewTaskToReadyList+0xd4>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	429a      	cmp	r2, r3
 8005af6:	d903      	bls.n	8005b00 <prvAddNewTaskToReadyList+0x74>
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005afc:	4a18      	ldr	r2, [pc, #96]	; (8005b60 <prvAddNewTaskToReadyList+0xd4>)
 8005afe:	6013      	str	r3, [r2, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b04:	4613      	mov	r3, r2
 8005b06:	009b      	lsls	r3, r3, #2
 8005b08:	4413      	add	r3, r2
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	4a15      	ldr	r2, [pc, #84]	; (8005b64 <prvAddNewTaskToReadyList+0xd8>)
 8005b0e:	441a      	add	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	3304      	adds	r3, #4
 8005b14:	4619      	mov	r1, r3
 8005b16:	4610      	mov	r0, r2
 8005b18:	f7fe ff29 	bl	800496e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b1c:	f001 fb2a 	bl	8007174 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b20:	4b0d      	ldr	r3, [pc, #52]	; (8005b58 <prvAddNewTaskToReadyList+0xcc>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d00e      	beq.n	8005b46 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <prvAddNewTaskToReadyList+0xc8>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b32:	429a      	cmp	r2, r3
 8005b34:	d207      	bcs.n	8005b46 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b36:	4b0c      	ldr	r3, [pc, #48]	; (8005b68 <prvAddNewTaskToReadyList+0xdc>)
 8005b38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b3c:	601a      	str	r2, [r3, #0]
 8005b3e:	f3bf 8f4f 	dsb	sy
 8005b42:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b46:	bf00      	nop
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
 8005b4e:	bf00      	nop
 8005b50:	20001150 	.word	0x20001150
 8005b54:	20000c7c 	.word	0x20000c7c
 8005b58:	2000115c 	.word	0x2000115c
 8005b5c:	2000116c 	.word	0x2000116c
 8005b60:	20001158 	.word	0x20001158
 8005b64:	20000c80 	.word	0x20000c80
 8005b68:	e000ed04 	.word	0xe000ed04

08005b6c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b084      	sub	sp, #16
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b74:	2300      	movs	r3, #0
 8005b76:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d017      	beq.n	8005bae <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b7e:	4b13      	ldr	r3, [pc, #76]	; (8005bcc <vTaskDelay+0x60>)
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d00a      	beq.n	8005b9c <vTaskDelay+0x30>
	__asm volatile
 8005b86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b8a:	f383 8811 	msr	BASEPRI, r3
 8005b8e:	f3bf 8f6f 	isb	sy
 8005b92:	f3bf 8f4f 	dsb	sy
 8005b96:	60bb      	str	r3, [r7, #8]
}
 8005b98:	bf00      	nop
 8005b9a:	e7fe      	b.n	8005b9a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b9c:	f000 f880 	bl	8005ca0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005ba0:	2100      	movs	r1, #0
 8005ba2:	6878      	ldr	r0, [r7, #4]
 8005ba4:	f000 fde8 	bl	8006778 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005ba8:	f000 f888 	bl	8005cbc <xTaskResumeAll>
 8005bac:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d107      	bne.n	8005bc4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005bb4:	4b06      	ldr	r3, [pc, #24]	; (8005bd0 <vTaskDelay+0x64>)
 8005bb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bba:	601a      	str	r2, [r3, #0]
 8005bbc:	f3bf 8f4f 	dsb	sy
 8005bc0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bc4:	bf00      	nop
 8005bc6:	3710      	adds	r7, #16
 8005bc8:	46bd      	mov	sp, r7
 8005bca:	bd80      	pop	{r7, pc}
 8005bcc:	20001178 	.word	0x20001178
 8005bd0:	e000ed04 	.word	0xe000ed04

08005bd4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b08a      	sub	sp, #40	; 0x28
 8005bd8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005be2:	463a      	mov	r2, r7
 8005be4:	1d39      	adds	r1, r7, #4
 8005be6:	f107 0308 	add.w	r3, r7, #8
 8005bea:	4618      	mov	r0, r3
 8005bec:	f7fe fe5e 	bl	80048ac <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bf0:	6839      	ldr	r1, [r7, #0]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68ba      	ldr	r2, [r7, #8]
 8005bf6:	9202      	str	r2, [sp, #8]
 8005bf8:	9301      	str	r3, [sp, #4]
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	9300      	str	r3, [sp, #0]
 8005bfe:	2300      	movs	r3, #0
 8005c00:	460a      	mov	r2, r1
 8005c02:	4921      	ldr	r1, [pc, #132]	; (8005c88 <vTaskStartScheduler+0xb4>)
 8005c04:	4821      	ldr	r0, [pc, #132]	; (8005c8c <vTaskStartScheduler+0xb8>)
 8005c06:	f7ff fe0f 	bl	8005828 <xTaskCreateStatic>
 8005c0a:	4603      	mov	r3, r0
 8005c0c:	4a20      	ldr	r2, [pc, #128]	; (8005c90 <vTaskStartScheduler+0xbc>)
 8005c0e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005c10:	4b1f      	ldr	r3, [pc, #124]	; (8005c90 <vTaskStartScheduler+0xbc>)
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	617b      	str	r3, [r7, #20]
 8005c1c:	e001      	b.n	8005c22 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b01      	cmp	r3, #1
 8005c26:	d102      	bne.n	8005c2e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c28:	f000 fdfa 	bl	8006820 <xTimerCreateTimerTask>
 8005c2c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c2e:	697b      	ldr	r3, [r7, #20]
 8005c30:	2b01      	cmp	r3, #1
 8005c32:	d116      	bne.n	8005c62 <vTaskStartScheduler+0x8e>
	__asm volatile
 8005c34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c38:	f383 8811 	msr	BASEPRI, r3
 8005c3c:	f3bf 8f6f 	isb	sy
 8005c40:	f3bf 8f4f 	dsb	sy
 8005c44:	613b      	str	r3, [r7, #16]
}
 8005c46:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c48:	4b12      	ldr	r3, [pc, #72]	; (8005c94 <vTaskStartScheduler+0xc0>)
 8005c4a:	f04f 32ff 	mov.w	r2, #4294967295
 8005c4e:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c50:	4b11      	ldr	r3, [pc, #68]	; (8005c98 <vTaskStartScheduler+0xc4>)
 8005c52:	2201      	movs	r2, #1
 8005c54:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c56:	4b11      	ldr	r3, [pc, #68]	; (8005c9c <vTaskStartScheduler+0xc8>)
 8005c58:	2200      	movs	r2, #0
 8005c5a:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c5c:	f001 f9b8 	bl	8006fd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c60:	e00e      	b.n	8005c80 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c68:	d10a      	bne.n	8005c80 <vTaskStartScheduler+0xac>
	__asm volatile
 8005c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c6e:	f383 8811 	msr	BASEPRI, r3
 8005c72:	f3bf 8f6f 	isb	sy
 8005c76:	f3bf 8f4f 	dsb	sy
 8005c7a:	60fb      	str	r3, [r7, #12]
}
 8005c7c:	bf00      	nop
 8005c7e:	e7fe      	b.n	8005c7e <vTaskStartScheduler+0xaa>
}
 8005c80:	bf00      	nop
 8005c82:	3718      	adds	r7, #24
 8005c84:	46bd      	mov	sp, r7
 8005c86:	bd80      	pop	{r7, pc}
 8005c88:	08007880 	.word	0x08007880
 8005c8c:	080062b9 	.word	0x080062b9
 8005c90:	20001174 	.word	0x20001174
 8005c94:	20001170 	.word	0x20001170
 8005c98:	2000115c 	.word	0x2000115c
 8005c9c:	20001154 	.word	0x20001154

08005ca0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ca0:	b480      	push	{r7}
 8005ca2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005ca4:	4b04      	ldr	r3, [pc, #16]	; (8005cb8 <vTaskSuspendAll+0x18>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	3301      	adds	r3, #1
 8005caa:	4a03      	ldr	r2, [pc, #12]	; (8005cb8 <vTaskSuspendAll+0x18>)
 8005cac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005cae:	bf00      	nop
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	20001178 	.word	0x20001178

08005cbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cca:	4b42      	ldr	r3, [pc, #264]	; (8005dd4 <xTaskResumeAll+0x118>)
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d10a      	bne.n	8005ce8 <xTaskResumeAll+0x2c>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	603b      	str	r3, [r7, #0]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005ce8:	f001 fa14 	bl	8007114 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cec:	4b39      	ldr	r3, [pc, #228]	; (8005dd4 <xTaskResumeAll+0x118>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	3b01      	subs	r3, #1
 8005cf2:	4a38      	ldr	r2, [pc, #224]	; (8005dd4 <xTaskResumeAll+0x118>)
 8005cf4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cf6:	4b37      	ldr	r3, [pc, #220]	; (8005dd4 <xTaskResumeAll+0x118>)
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d162      	bne.n	8005dc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cfe:	4b36      	ldr	r3, [pc, #216]	; (8005dd8 <xTaskResumeAll+0x11c>)
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d05e      	beq.n	8005dc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d06:	e02f      	b.n	8005d68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d08:	4b34      	ldr	r3, [pc, #208]	; (8005ddc <xTaskResumeAll+0x120>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	68db      	ldr	r3, [r3, #12]
 8005d0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	3318      	adds	r3, #24
 8005d14:	4618      	mov	r0, r3
 8005d16:	f7fe fe87 	bl	8004a28 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	3304      	adds	r3, #4
 8005d1e:	4618      	mov	r0, r3
 8005d20:	f7fe fe82 	bl	8004a28 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d28:	4b2d      	ldr	r3, [pc, #180]	; (8005de0 <xTaskResumeAll+0x124>)
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	429a      	cmp	r2, r3
 8005d2e:	d903      	bls.n	8005d38 <xTaskResumeAll+0x7c>
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d34:	4a2a      	ldr	r2, [pc, #168]	; (8005de0 <xTaskResumeAll+0x124>)
 8005d36:	6013      	str	r3, [r2, #0]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d3c:	4613      	mov	r3, r2
 8005d3e:	009b      	lsls	r3, r3, #2
 8005d40:	4413      	add	r3, r2
 8005d42:	009b      	lsls	r3, r3, #2
 8005d44:	4a27      	ldr	r2, [pc, #156]	; (8005de4 <xTaskResumeAll+0x128>)
 8005d46:	441a      	add	r2, r3
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	3304      	adds	r3, #4
 8005d4c:	4619      	mov	r1, r3
 8005d4e:	4610      	mov	r0, r2
 8005d50:	f7fe fe0d 	bl	800496e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d58:	4b23      	ldr	r3, [pc, #140]	; (8005de8 <xTaskResumeAll+0x12c>)
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d5e:	429a      	cmp	r2, r3
 8005d60:	d302      	bcc.n	8005d68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d62:	4b22      	ldr	r3, [pc, #136]	; (8005dec <xTaskResumeAll+0x130>)
 8005d64:	2201      	movs	r2, #1
 8005d66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d68:	4b1c      	ldr	r3, [pc, #112]	; (8005ddc <xTaskResumeAll+0x120>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d1cb      	bne.n	8005d08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d001      	beq.n	8005d7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d76:	f000 fb55 	bl	8006424 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d7a:	4b1d      	ldr	r3, [pc, #116]	; (8005df0 <xTaskResumeAll+0x134>)
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d010      	beq.n	8005da8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d86:	f000 f847 	bl	8005e18 <xTaskIncrementTick>
 8005d8a:	4603      	mov	r3, r0
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d002      	beq.n	8005d96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d90:	4b16      	ldr	r3, [pc, #88]	; (8005dec <xTaskResumeAll+0x130>)
 8005d92:	2201      	movs	r2, #1
 8005d94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	3b01      	subs	r3, #1
 8005d9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1f1      	bne.n	8005d86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005da2:	4b13      	ldr	r3, [pc, #76]	; (8005df0 <xTaskResumeAll+0x134>)
 8005da4:	2200      	movs	r2, #0
 8005da6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005da8:	4b10      	ldr	r3, [pc, #64]	; (8005dec <xTaskResumeAll+0x130>)
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d009      	beq.n	8005dc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005db0:	2301      	movs	r3, #1
 8005db2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005db4:	4b0f      	ldr	r3, [pc, #60]	; (8005df4 <xTaskResumeAll+0x138>)
 8005db6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dba:	601a      	str	r2, [r3, #0]
 8005dbc:	f3bf 8f4f 	dsb	sy
 8005dc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005dc4:	f001 f9d6 	bl	8007174 <vPortExitCritical>

	return xAlreadyYielded;
 8005dc8:	68bb      	ldr	r3, [r7, #8]
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3710      	adds	r7, #16
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
 8005dd2:	bf00      	nop
 8005dd4:	20001178 	.word	0x20001178
 8005dd8:	20001150 	.word	0x20001150
 8005ddc:	20001110 	.word	0x20001110
 8005de0:	20001158 	.word	0x20001158
 8005de4:	20000c80 	.word	0x20000c80
 8005de8:	20000c7c 	.word	0x20000c7c
 8005dec:	20001164 	.word	0x20001164
 8005df0:	20001160 	.word	0x20001160
 8005df4:	e000ed04 	.word	0xe000ed04

08005df8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005df8:	b480      	push	{r7}
 8005dfa:	b083      	sub	sp, #12
 8005dfc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005dfe:	4b05      	ldr	r3, [pc, #20]	; (8005e14 <xTaskGetTickCount+0x1c>)
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005e04:	687b      	ldr	r3, [r7, #4]
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	370c      	adds	r7, #12
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	20001154 	.word	0x20001154

08005e18 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e1e:	2300      	movs	r3, #0
 8005e20:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e22:	4b4f      	ldr	r3, [pc, #316]	; (8005f60 <xTaskIncrementTick+0x148>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	f040 808f 	bne.w	8005f4a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e2c:	4b4d      	ldr	r3, [pc, #308]	; (8005f64 <xTaskIncrementTick+0x14c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	3301      	adds	r3, #1
 8005e32:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e34:	4a4b      	ldr	r2, [pc, #300]	; (8005f64 <xTaskIncrementTick+0x14c>)
 8005e36:	693b      	ldr	r3, [r7, #16]
 8005e38:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d120      	bne.n	8005e82 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e40:	4b49      	ldr	r3, [pc, #292]	; (8005f68 <xTaskIncrementTick+0x150>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00a      	beq.n	8005e60 <xTaskIncrementTick+0x48>
	__asm volatile
 8005e4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4e:	f383 8811 	msr	BASEPRI, r3
 8005e52:	f3bf 8f6f 	isb	sy
 8005e56:	f3bf 8f4f 	dsb	sy
 8005e5a:	603b      	str	r3, [r7, #0]
}
 8005e5c:	bf00      	nop
 8005e5e:	e7fe      	b.n	8005e5e <xTaskIncrementTick+0x46>
 8005e60:	4b41      	ldr	r3, [pc, #260]	; (8005f68 <xTaskIncrementTick+0x150>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	4b41      	ldr	r3, [pc, #260]	; (8005f6c <xTaskIncrementTick+0x154>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	4a3f      	ldr	r2, [pc, #252]	; (8005f68 <xTaskIncrementTick+0x150>)
 8005e6c:	6013      	str	r3, [r2, #0]
 8005e6e:	4a3f      	ldr	r2, [pc, #252]	; (8005f6c <xTaskIncrementTick+0x154>)
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	4b3e      	ldr	r3, [pc, #248]	; (8005f70 <xTaskIncrementTick+0x158>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3301      	adds	r3, #1
 8005e7a:	4a3d      	ldr	r2, [pc, #244]	; (8005f70 <xTaskIncrementTick+0x158>)
 8005e7c:	6013      	str	r3, [r2, #0]
 8005e7e:	f000 fad1 	bl	8006424 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e82:	4b3c      	ldr	r3, [pc, #240]	; (8005f74 <xTaskIncrementTick+0x15c>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	693a      	ldr	r2, [r7, #16]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d349      	bcc.n	8005f20 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e8c:	4b36      	ldr	r3, [pc, #216]	; (8005f68 <xTaskIncrementTick+0x150>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d104      	bne.n	8005ea0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e96:	4b37      	ldr	r3, [pc, #220]	; (8005f74 <xTaskIncrementTick+0x15c>)
 8005e98:	f04f 32ff 	mov.w	r2, #4294967295
 8005e9c:	601a      	str	r2, [r3, #0]
					break;
 8005e9e:	e03f      	b.n	8005f20 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea0:	4b31      	ldr	r3, [pc, #196]	; (8005f68 <xTaskIncrementTick+0x150>)
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005eaa:	68bb      	ldr	r3, [r7, #8]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005eb0:	693a      	ldr	r2, [r7, #16]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	429a      	cmp	r2, r3
 8005eb6:	d203      	bcs.n	8005ec0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005eb8:	4a2e      	ldr	r2, [pc, #184]	; (8005f74 <xTaskIncrementTick+0x15c>)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ebe:	e02f      	b.n	8005f20 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	3304      	adds	r3, #4
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	f7fe fdaf 	bl	8004a28 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d004      	beq.n	8005edc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ed2:	68bb      	ldr	r3, [r7, #8]
 8005ed4:	3318      	adds	r3, #24
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	f7fe fda6 	bl	8004a28 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee0:	4b25      	ldr	r3, [pc, #148]	; (8005f78 <xTaskIncrementTick+0x160>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	429a      	cmp	r2, r3
 8005ee6:	d903      	bls.n	8005ef0 <xTaskIncrementTick+0xd8>
 8005ee8:	68bb      	ldr	r3, [r7, #8]
 8005eea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005eec:	4a22      	ldr	r2, [pc, #136]	; (8005f78 <xTaskIncrementTick+0x160>)
 8005eee:	6013      	str	r3, [r2, #0]
 8005ef0:	68bb      	ldr	r3, [r7, #8]
 8005ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ef4:	4613      	mov	r3, r2
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	4413      	add	r3, r2
 8005efa:	009b      	lsls	r3, r3, #2
 8005efc:	4a1f      	ldr	r2, [pc, #124]	; (8005f7c <xTaskIncrementTick+0x164>)
 8005efe:	441a      	add	r2, r3
 8005f00:	68bb      	ldr	r3, [r7, #8]
 8005f02:	3304      	adds	r3, #4
 8005f04:	4619      	mov	r1, r3
 8005f06:	4610      	mov	r0, r2
 8005f08:	f7fe fd31 	bl	800496e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005f0c:	68bb      	ldr	r3, [r7, #8]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f10:	4b1b      	ldr	r3, [pc, #108]	; (8005f80 <xTaskIncrementTick+0x168>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d3b8      	bcc.n	8005e8c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f1a:	2301      	movs	r3, #1
 8005f1c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f1e:	e7b5      	b.n	8005e8c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f20:	4b17      	ldr	r3, [pc, #92]	; (8005f80 <xTaskIncrementTick+0x168>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f26:	4915      	ldr	r1, [pc, #84]	; (8005f7c <xTaskIncrementTick+0x164>)
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	440b      	add	r3, r1
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2b01      	cmp	r3, #1
 8005f36:	d901      	bls.n	8005f3c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f3c:	4b11      	ldr	r3, [pc, #68]	; (8005f84 <xTaskIncrementTick+0x16c>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d007      	beq.n	8005f54 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f44:	2301      	movs	r3, #1
 8005f46:	617b      	str	r3, [r7, #20]
 8005f48:	e004      	b.n	8005f54 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f4a:	4b0f      	ldr	r3, [pc, #60]	; (8005f88 <xTaskIncrementTick+0x170>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	3301      	adds	r3, #1
 8005f50:	4a0d      	ldr	r2, [pc, #52]	; (8005f88 <xTaskIncrementTick+0x170>)
 8005f52:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f54:	697b      	ldr	r3, [r7, #20]
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3718      	adds	r7, #24
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	20001178 	.word	0x20001178
 8005f64:	20001154 	.word	0x20001154
 8005f68:	20001108 	.word	0x20001108
 8005f6c:	2000110c 	.word	0x2000110c
 8005f70:	20001168 	.word	0x20001168
 8005f74:	20001170 	.word	0x20001170
 8005f78:	20001158 	.word	0x20001158
 8005f7c:	20000c80 	.word	0x20000c80
 8005f80:	20000c7c 	.word	0x20000c7c
 8005f84:	20001164 	.word	0x20001164
 8005f88:	20001160 	.word	0x20001160

08005f8c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	b085      	sub	sp, #20
 8005f90:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f92:	4b28      	ldr	r3, [pc, #160]	; (8006034 <vTaskSwitchContext+0xa8>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d003      	beq.n	8005fa2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f9a:	4b27      	ldr	r3, [pc, #156]	; (8006038 <vTaskSwitchContext+0xac>)
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005fa0:	e041      	b.n	8006026 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005fa2:	4b25      	ldr	r3, [pc, #148]	; (8006038 <vTaskSwitchContext+0xac>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fa8:	4b24      	ldr	r3, [pc, #144]	; (800603c <vTaskSwitchContext+0xb0>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	60fb      	str	r3, [r7, #12]
 8005fae:	e010      	b.n	8005fd2 <vTaskSwitchContext+0x46>
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d10a      	bne.n	8005fcc <vTaskSwitchContext+0x40>
	__asm volatile
 8005fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fba:	f383 8811 	msr	BASEPRI, r3
 8005fbe:	f3bf 8f6f 	isb	sy
 8005fc2:	f3bf 8f4f 	dsb	sy
 8005fc6:	607b      	str	r3, [r7, #4]
}
 8005fc8:	bf00      	nop
 8005fca:	e7fe      	b.n	8005fca <vTaskSwitchContext+0x3e>
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	3b01      	subs	r3, #1
 8005fd0:	60fb      	str	r3, [r7, #12]
 8005fd2:	491b      	ldr	r1, [pc, #108]	; (8006040 <vTaskSwitchContext+0xb4>)
 8005fd4:	68fa      	ldr	r2, [r7, #12]
 8005fd6:	4613      	mov	r3, r2
 8005fd8:	009b      	lsls	r3, r3, #2
 8005fda:	4413      	add	r3, r2
 8005fdc:	009b      	lsls	r3, r3, #2
 8005fde:	440b      	add	r3, r1
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d0e4      	beq.n	8005fb0 <vTaskSwitchContext+0x24>
 8005fe6:	68fa      	ldr	r2, [r7, #12]
 8005fe8:	4613      	mov	r3, r2
 8005fea:	009b      	lsls	r3, r3, #2
 8005fec:	4413      	add	r3, r2
 8005fee:	009b      	lsls	r3, r3, #2
 8005ff0:	4a13      	ldr	r2, [pc, #76]	; (8006040 <vTaskSwitchContext+0xb4>)
 8005ff2:	4413      	add	r3, r2
 8005ff4:	60bb      	str	r3, [r7, #8]
 8005ff6:	68bb      	ldr	r3, [r7, #8]
 8005ff8:	685b      	ldr	r3, [r3, #4]
 8005ffa:	685a      	ldr	r2, [r3, #4]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	605a      	str	r2, [r3, #4]
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	685a      	ldr	r2, [r3, #4]
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	3308      	adds	r3, #8
 8006008:	429a      	cmp	r2, r3
 800600a:	d104      	bne.n	8006016 <vTaskSwitchContext+0x8a>
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	685b      	ldr	r3, [r3, #4]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	68bb      	ldr	r3, [r7, #8]
 8006014:	605a      	str	r2, [r3, #4]
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	685b      	ldr	r3, [r3, #4]
 800601a:	68db      	ldr	r3, [r3, #12]
 800601c:	4a09      	ldr	r2, [pc, #36]	; (8006044 <vTaskSwitchContext+0xb8>)
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	4a06      	ldr	r2, [pc, #24]	; (800603c <vTaskSwitchContext+0xb0>)
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	6013      	str	r3, [r2, #0]
}
 8006026:	bf00      	nop
 8006028:	3714      	adds	r7, #20
 800602a:	46bd      	mov	sp, r7
 800602c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006030:	4770      	bx	lr
 8006032:	bf00      	nop
 8006034:	20001178 	.word	0x20001178
 8006038:	20001164 	.word	0x20001164
 800603c:	20001158 	.word	0x20001158
 8006040:	20000c80 	.word	0x20000c80
 8006044:	20000c7c 	.word	0x20000c7c

08006048 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b084      	sub	sp, #16
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
 8006050:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	2b00      	cmp	r3, #0
 8006056:	d10a      	bne.n	800606e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006058:	f04f 0350 	mov.w	r3, #80	; 0x50
 800605c:	f383 8811 	msr	BASEPRI, r3
 8006060:	f3bf 8f6f 	isb	sy
 8006064:	f3bf 8f4f 	dsb	sy
 8006068:	60fb      	str	r3, [r7, #12]
}
 800606a:	bf00      	nop
 800606c:	e7fe      	b.n	800606c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800606e:	4b07      	ldr	r3, [pc, #28]	; (800608c <vTaskPlaceOnEventList+0x44>)
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	3318      	adds	r3, #24
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f7fe fc9d 	bl	80049b6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800607c:	2101      	movs	r1, #1
 800607e:	6838      	ldr	r0, [r7, #0]
 8006080:	f000 fb7a 	bl	8006778 <prvAddCurrentTaskToDelayedList>
}
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}
 800608c:	20000c7c 	.word	0x20000c7c

08006090 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006090:	b580      	push	{r7, lr}
 8006092:	b086      	sub	sp, #24
 8006094:	af00      	add	r7, sp, #0
 8006096:	60f8      	str	r0, [r7, #12]
 8006098:	60b9      	str	r1, [r7, #8]
 800609a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d10a      	bne.n	80060b8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80060a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a6:	f383 8811 	msr	BASEPRI, r3
 80060aa:	f3bf 8f6f 	isb	sy
 80060ae:	f3bf 8f4f 	dsb	sy
 80060b2:	617b      	str	r3, [r7, #20]
}
 80060b4:	bf00      	nop
 80060b6:	e7fe      	b.n	80060b6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060b8:	4b0a      	ldr	r3, [pc, #40]	; (80060e4 <vTaskPlaceOnEventListRestricted+0x54>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	3318      	adds	r3, #24
 80060be:	4619      	mov	r1, r3
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f7fe fc54 	bl	800496e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d002      	beq.n	80060d2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80060cc:	f04f 33ff 	mov.w	r3, #4294967295
 80060d0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060d2:	6879      	ldr	r1, [r7, #4]
 80060d4:	68b8      	ldr	r0, [r7, #8]
 80060d6:	f000 fb4f 	bl	8006778 <prvAddCurrentTaskToDelayedList>
	}
 80060da:	bf00      	nop
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}
 80060e2:	bf00      	nop
 80060e4:	20000c7c 	.word	0x20000c7c

080060e8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060e8:	b580      	push	{r7, lr}
 80060ea:	b086      	sub	sp, #24
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	68db      	ldr	r3, [r3, #12]
 80060f6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060f8:	693b      	ldr	r3, [r7, #16]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d10a      	bne.n	8006114 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80060fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006102:	f383 8811 	msr	BASEPRI, r3
 8006106:	f3bf 8f6f 	isb	sy
 800610a:	f3bf 8f4f 	dsb	sy
 800610e:	60fb      	str	r3, [r7, #12]
}
 8006110:	bf00      	nop
 8006112:	e7fe      	b.n	8006112 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006114:	693b      	ldr	r3, [r7, #16]
 8006116:	3318      	adds	r3, #24
 8006118:	4618      	mov	r0, r3
 800611a:	f7fe fc85 	bl	8004a28 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800611e:	4b1e      	ldr	r3, [pc, #120]	; (8006198 <xTaskRemoveFromEventList+0xb0>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d11d      	bne.n	8006162 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	3304      	adds	r3, #4
 800612a:	4618      	mov	r0, r3
 800612c:	f7fe fc7c 	bl	8004a28 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006134:	4b19      	ldr	r3, [pc, #100]	; (800619c <xTaskRemoveFromEventList+0xb4>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	429a      	cmp	r2, r3
 800613a:	d903      	bls.n	8006144 <xTaskRemoveFromEventList+0x5c>
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006140:	4a16      	ldr	r2, [pc, #88]	; (800619c <xTaskRemoveFromEventList+0xb4>)
 8006142:	6013      	str	r3, [r2, #0]
 8006144:	693b      	ldr	r3, [r7, #16]
 8006146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006148:	4613      	mov	r3, r2
 800614a:	009b      	lsls	r3, r3, #2
 800614c:	4413      	add	r3, r2
 800614e:	009b      	lsls	r3, r3, #2
 8006150:	4a13      	ldr	r2, [pc, #76]	; (80061a0 <xTaskRemoveFromEventList+0xb8>)
 8006152:	441a      	add	r2, r3
 8006154:	693b      	ldr	r3, [r7, #16]
 8006156:	3304      	adds	r3, #4
 8006158:	4619      	mov	r1, r3
 800615a:	4610      	mov	r0, r2
 800615c:	f7fe fc07 	bl	800496e <vListInsertEnd>
 8006160:	e005      	b.n	800616e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006162:	693b      	ldr	r3, [r7, #16]
 8006164:	3318      	adds	r3, #24
 8006166:	4619      	mov	r1, r3
 8006168:	480e      	ldr	r0, [pc, #56]	; (80061a4 <xTaskRemoveFromEventList+0xbc>)
 800616a:	f7fe fc00 	bl	800496e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800616e:	693b      	ldr	r3, [r7, #16]
 8006170:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006172:	4b0d      	ldr	r3, [pc, #52]	; (80061a8 <xTaskRemoveFromEventList+0xc0>)
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006178:	429a      	cmp	r2, r3
 800617a:	d905      	bls.n	8006188 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800617c:	2301      	movs	r3, #1
 800617e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006180:	4b0a      	ldr	r3, [pc, #40]	; (80061ac <xTaskRemoveFromEventList+0xc4>)
 8006182:	2201      	movs	r2, #1
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	e001      	b.n	800618c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006188:	2300      	movs	r3, #0
 800618a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800618c:	697b      	ldr	r3, [r7, #20]
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	20001178 	.word	0x20001178
 800619c:	20001158 	.word	0x20001158
 80061a0:	20000c80 	.word	0x20000c80
 80061a4:	20001110 	.word	0x20001110
 80061a8:	20000c7c 	.word	0x20000c7c
 80061ac:	20001164 	.word	0x20001164

080061b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061b8:	4b06      	ldr	r3, [pc, #24]	; (80061d4 <vTaskInternalSetTimeOutState+0x24>)
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061c0:	4b05      	ldr	r3, [pc, #20]	; (80061d8 <vTaskInternalSetTimeOutState+0x28>)
 80061c2:	681a      	ldr	r2, [r3, #0]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	605a      	str	r2, [r3, #4]
}
 80061c8:	bf00      	nop
 80061ca:	370c      	adds	r7, #12
 80061cc:	46bd      	mov	sp, r7
 80061ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061d2:	4770      	bx	lr
 80061d4:	20001168 	.word	0x20001168
 80061d8:	20001154 	.word	0x20001154

080061dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b088      	sub	sp, #32
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	6078      	str	r0, [r7, #4]
 80061e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80061ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f0:	f383 8811 	msr	BASEPRI, r3
 80061f4:	f3bf 8f6f 	isb	sy
 80061f8:	f3bf 8f4f 	dsb	sy
 80061fc:	613b      	str	r3, [r7, #16]
}
 80061fe:	bf00      	nop
 8006200:	e7fe      	b.n	8006200 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006202:	683b      	ldr	r3, [r7, #0]
 8006204:	2b00      	cmp	r3, #0
 8006206:	d10a      	bne.n	800621e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800620c:	f383 8811 	msr	BASEPRI, r3
 8006210:	f3bf 8f6f 	isb	sy
 8006214:	f3bf 8f4f 	dsb	sy
 8006218:	60fb      	str	r3, [r7, #12]
}
 800621a:	bf00      	nop
 800621c:	e7fe      	b.n	800621c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800621e:	f000 ff79 	bl	8007114 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006222:	4b1d      	ldr	r3, [pc, #116]	; (8006298 <xTaskCheckForTimeOut+0xbc>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	685b      	ldr	r3, [r3, #4]
 800622c:	69ba      	ldr	r2, [r7, #24]
 800622e:	1ad3      	subs	r3, r2, r3
 8006230:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623a:	d102      	bne.n	8006242 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800623c:	2300      	movs	r3, #0
 800623e:	61fb      	str	r3, [r7, #28]
 8006240:	e023      	b.n	800628a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681a      	ldr	r2, [r3, #0]
 8006246:	4b15      	ldr	r3, [pc, #84]	; (800629c <xTaskCheckForTimeOut+0xc0>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	429a      	cmp	r2, r3
 800624c:	d007      	beq.n	800625e <xTaskCheckForTimeOut+0x82>
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	69ba      	ldr	r2, [r7, #24]
 8006254:	429a      	cmp	r2, r3
 8006256:	d302      	bcc.n	800625e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006258:	2301      	movs	r3, #1
 800625a:	61fb      	str	r3, [r7, #28]
 800625c:	e015      	b.n	800628a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800625e:	683b      	ldr	r3, [r7, #0]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	697a      	ldr	r2, [r7, #20]
 8006264:	429a      	cmp	r2, r3
 8006266:	d20b      	bcs.n	8006280 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	681a      	ldr	r2, [r3, #0]
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	1ad2      	subs	r2, r2, r3
 8006270:	683b      	ldr	r3, [r7, #0]
 8006272:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006274:	6878      	ldr	r0, [r7, #4]
 8006276:	f7ff ff9b 	bl	80061b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800627a:	2300      	movs	r3, #0
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	e004      	b.n	800628a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006280:	683b      	ldr	r3, [r7, #0]
 8006282:	2200      	movs	r2, #0
 8006284:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006286:	2301      	movs	r3, #1
 8006288:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800628a:	f000 ff73 	bl	8007174 <vPortExitCritical>

	return xReturn;
 800628e:	69fb      	ldr	r3, [r7, #28]
}
 8006290:	4618      	mov	r0, r3
 8006292:	3720      	adds	r7, #32
 8006294:	46bd      	mov	sp, r7
 8006296:	bd80      	pop	{r7, pc}
 8006298:	20001154 	.word	0x20001154
 800629c:	20001168 	.word	0x20001168

080062a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80062a0:	b480      	push	{r7}
 80062a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80062a4:	4b03      	ldr	r3, [pc, #12]	; (80062b4 <vTaskMissedYield+0x14>)
 80062a6:	2201      	movs	r2, #1
 80062a8:	601a      	str	r2, [r3, #0]
}
 80062aa:	bf00      	nop
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	20001164 	.word	0x20001164

080062b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062c0:	f000 f852 	bl	8006368 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062c4:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <prvIdleTask+0x28>)
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	2b01      	cmp	r3, #1
 80062ca:	d9f9      	bls.n	80062c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80062cc:	4b05      	ldr	r3, [pc, #20]	; (80062e4 <prvIdleTask+0x2c>)
 80062ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062d2:	601a      	str	r2, [r3, #0]
 80062d4:	f3bf 8f4f 	dsb	sy
 80062d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062dc:	e7f0      	b.n	80062c0 <prvIdleTask+0x8>
 80062de:	bf00      	nop
 80062e0:	20000c80 	.word	0x20000c80
 80062e4:	e000ed04 	.word	0xe000ed04

080062e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062ee:	2300      	movs	r3, #0
 80062f0:	607b      	str	r3, [r7, #4]
 80062f2:	e00c      	b.n	800630e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062f4:	687a      	ldr	r2, [r7, #4]
 80062f6:	4613      	mov	r3, r2
 80062f8:	009b      	lsls	r3, r3, #2
 80062fa:	4413      	add	r3, r2
 80062fc:	009b      	lsls	r3, r3, #2
 80062fe:	4a12      	ldr	r2, [pc, #72]	; (8006348 <prvInitialiseTaskLists+0x60>)
 8006300:	4413      	add	r3, r2
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe fb06 	bl	8004914 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	3301      	adds	r3, #1
 800630c:	607b      	str	r3, [r7, #4]
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2b37      	cmp	r3, #55	; 0x37
 8006312:	d9ef      	bls.n	80062f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006314:	480d      	ldr	r0, [pc, #52]	; (800634c <prvInitialiseTaskLists+0x64>)
 8006316:	f7fe fafd 	bl	8004914 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800631a:	480d      	ldr	r0, [pc, #52]	; (8006350 <prvInitialiseTaskLists+0x68>)
 800631c:	f7fe fafa 	bl	8004914 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006320:	480c      	ldr	r0, [pc, #48]	; (8006354 <prvInitialiseTaskLists+0x6c>)
 8006322:	f7fe faf7 	bl	8004914 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006326:	480c      	ldr	r0, [pc, #48]	; (8006358 <prvInitialiseTaskLists+0x70>)
 8006328:	f7fe faf4 	bl	8004914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800632c:	480b      	ldr	r0, [pc, #44]	; (800635c <prvInitialiseTaskLists+0x74>)
 800632e:	f7fe faf1 	bl	8004914 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006332:	4b0b      	ldr	r3, [pc, #44]	; (8006360 <prvInitialiseTaskLists+0x78>)
 8006334:	4a05      	ldr	r2, [pc, #20]	; (800634c <prvInitialiseTaskLists+0x64>)
 8006336:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006338:	4b0a      	ldr	r3, [pc, #40]	; (8006364 <prvInitialiseTaskLists+0x7c>)
 800633a:	4a05      	ldr	r2, [pc, #20]	; (8006350 <prvInitialiseTaskLists+0x68>)
 800633c:	601a      	str	r2, [r3, #0]
}
 800633e:	bf00      	nop
 8006340:	3708      	adds	r7, #8
 8006342:	46bd      	mov	sp, r7
 8006344:	bd80      	pop	{r7, pc}
 8006346:	bf00      	nop
 8006348:	20000c80 	.word	0x20000c80
 800634c:	200010e0 	.word	0x200010e0
 8006350:	200010f4 	.word	0x200010f4
 8006354:	20001110 	.word	0x20001110
 8006358:	20001124 	.word	0x20001124
 800635c:	2000113c 	.word	0x2000113c
 8006360:	20001108 	.word	0x20001108
 8006364:	2000110c 	.word	0x2000110c

08006368 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800636e:	e019      	b.n	80063a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006370:	f000 fed0 	bl	8007114 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006374:	4b10      	ldr	r3, [pc, #64]	; (80063b8 <prvCheckTasksWaitingTermination+0x50>)
 8006376:	68db      	ldr	r3, [r3, #12]
 8006378:	68db      	ldr	r3, [r3, #12]
 800637a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	3304      	adds	r3, #4
 8006380:	4618      	mov	r0, r3
 8006382:	f7fe fb51 	bl	8004a28 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006386:	4b0d      	ldr	r3, [pc, #52]	; (80063bc <prvCheckTasksWaitingTermination+0x54>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	3b01      	subs	r3, #1
 800638c:	4a0b      	ldr	r2, [pc, #44]	; (80063bc <prvCheckTasksWaitingTermination+0x54>)
 800638e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006390:	4b0b      	ldr	r3, [pc, #44]	; (80063c0 <prvCheckTasksWaitingTermination+0x58>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	3b01      	subs	r3, #1
 8006396:	4a0a      	ldr	r2, [pc, #40]	; (80063c0 <prvCheckTasksWaitingTermination+0x58>)
 8006398:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800639a:	f000 feeb 	bl	8007174 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800639e:	6878      	ldr	r0, [r7, #4]
 80063a0:	f000 f810 	bl	80063c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <prvCheckTasksWaitingTermination+0x58>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b00      	cmp	r3, #0
 80063aa:	d1e1      	bne.n	8006370 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80063ac:	bf00      	nop
 80063ae:	bf00      	nop
 80063b0:	3708      	adds	r7, #8
 80063b2:	46bd      	mov	sp, r7
 80063b4:	bd80      	pop	{r7, pc}
 80063b6:	bf00      	nop
 80063b8:	20001124 	.word	0x20001124
 80063bc:	20001150 	.word	0x20001150
 80063c0:	20001138 	.word	0x20001138

080063c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063c4:	b580      	push	{r7, lr}
 80063c6:	b084      	sub	sp, #16
 80063c8:	af00      	add	r7, sp, #0
 80063ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d108      	bne.n	80063e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063da:	4618      	mov	r0, r3
 80063dc:	f001 f888 	bl	80074f0 <vPortFree>
				vPortFree( pxTCB );
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 f885 	bl	80074f0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063e6:	e018      	b.n	800641a <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d103      	bne.n	80063fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f001 f87c 	bl	80074f0 <vPortFree>
	}
 80063f8:	e00f      	b.n	800641a <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8006400:	2b02      	cmp	r3, #2
 8006402:	d00a      	beq.n	800641a <prvDeleteTCB+0x56>
	__asm volatile
 8006404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006408:	f383 8811 	msr	BASEPRI, r3
 800640c:	f3bf 8f6f 	isb	sy
 8006410:	f3bf 8f4f 	dsb	sy
 8006414:	60fb      	str	r3, [r7, #12]
}
 8006416:	bf00      	nop
 8006418:	e7fe      	b.n	8006418 <prvDeleteTCB+0x54>
	}
 800641a:	bf00      	nop
 800641c:	3710      	adds	r7, #16
 800641e:	46bd      	mov	sp, r7
 8006420:	bd80      	pop	{r7, pc}
	...

08006424 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800642a:	4b0c      	ldr	r3, [pc, #48]	; (800645c <prvResetNextTaskUnblockTime+0x38>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	2b00      	cmp	r3, #0
 8006432:	d104      	bne.n	800643e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006434:	4b0a      	ldr	r3, [pc, #40]	; (8006460 <prvResetNextTaskUnblockTime+0x3c>)
 8006436:	f04f 32ff 	mov.w	r2, #4294967295
 800643a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800643c:	e008      	b.n	8006450 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800643e:	4b07      	ldr	r3, [pc, #28]	; (800645c <prvResetNextTaskUnblockTime+0x38>)
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	685b      	ldr	r3, [r3, #4]
 800644c:	4a04      	ldr	r2, [pc, #16]	; (8006460 <prvResetNextTaskUnblockTime+0x3c>)
 800644e:	6013      	str	r3, [r2, #0]
}
 8006450:	bf00      	nop
 8006452:	370c      	adds	r7, #12
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	20001108 	.word	0x20001108
 8006460:	20001170 	.word	0x20001170

08006464 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006464:	b480      	push	{r7}
 8006466:	b083      	sub	sp, #12
 8006468:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800646a:	4b0b      	ldr	r3, [pc, #44]	; (8006498 <xTaskGetSchedulerState+0x34>)
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d102      	bne.n	8006478 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006472:	2301      	movs	r3, #1
 8006474:	607b      	str	r3, [r7, #4]
 8006476:	e008      	b.n	800648a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006478:	4b08      	ldr	r3, [pc, #32]	; (800649c <xTaskGetSchedulerState+0x38>)
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006480:	2302      	movs	r3, #2
 8006482:	607b      	str	r3, [r7, #4]
 8006484:	e001      	b.n	800648a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006486:	2300      	movs	r3, #0
 8006488:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800648a:	687b      	ldr	r3, [r7, #4]
	}
 800648c:	4618      	mov	r0, r3
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr
 8006498:	2000115c 	.word	0x2000115c
 800649c:	20001178 	.word	0x20001178

080064a0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b084      	sub	sp, #16
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80064ac:	2300      	movs	r3, #0
 80064ae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d051      	beq.n	800655a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ba:	4b2a      	ldr	r3, [pc, #168]	; (8006564 <xTaskPriorityInherit+0xc4>)
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064c0:	429a      	cmp	r2, r3
 80064c2:	d241      	bcs.n	8006548 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064c4:	68bb      	ldr	r3, [r7, #8]
 80064c6:	699b      	ldr	r3, [r3, #24]
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	db06      	blt.n	80064da <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064cc:	4b25      	ldr	r3, [pc, #148]	; (8006564 <xTaskPriorityInherit+0xc4>)
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064d2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80064da:	68bb      	ldr	r3, [r7, #8]
 80064dc:	6959      	ldr	r1, [r3, #20]
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064e2:	4613      	mov	r3, r2
 80064e4:	009b      	lsls	r3, r3, #2
 80064e6:	4413      	add	r3, r2
 80064e8:	009b      	lsls	r3, r3, #2
 80064ea:	4a1f      	ldr	r2, [pc, #124]	; (8006568 <xTaskPriorityInherit+0xc8>)
 80064ec:	4413      	add	r3, r2
 80064ee:	4299      	cmp	r1, r3
 80064f0:	d122      	bne.n	8006538 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	3304      	adds	r3, #4
 80064f6:	4618      	mov	r0, r3
 80064f8:	f7fe fa96 	bl	8004a28 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064fc:	4b19      	ldr	r3, [pc, #100]	; (8006564 <xTaskPriorityInherit+0xc4>)
 80064fe:	681b      	ldr	r3, [r3, #0]
 8006500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006502:	68bb      	ldr	r3, [r7, #8]
 8006504:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650a:	4b18      	ldr	r3, [pc, #96]	; (800656c <xTaskPriorityInherit+0xcc>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	429a      	cmp	r2, r3
 8006510:	d903      	bls.n	800651a <xTaskPriorityInherit+0x7a>
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006516:	4a15      	ldr	r2, [pc, #84]	; (800656c <xTaskPriorityInherit+0xcc>)
 8006518:	6013      	str	r3, [r2, #0]
 800651a:	68bb      	ldr	r3, [r7, #8]
 800651c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800651e:	4613      	mov	r3, r2
 8006520:	009b      	lsls	r3, r3, #2
 8006522:	4413      	add	r3, r2
 8006524:	009b      	lsls	r3, r3, #2
 8006526:	4a10      	ldr	r2, [pc, #64]	; (8006568 <xTaskPriorityInherit+0xc8>)
 8006528:	441a      	add	r2, r3
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	3304      	adds	r3, #4
 800652e:	4619      	mov	r1, r3
 8006530:	4610      	mov	r0, r2
 8006532:	f7fe fa1c 	bl	800496e <vListInsertEnd>
 8006536:	e004      	b.n	8006542 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006538:	4b0a      	ldr	r3, [pc, #40]	; (8006564 <xTaskPriorityInherit+0xc4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800653e:	68bb      	ldr	r3, [r7, #8]
 8006540:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006542:	2301      	movs	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]
 8006546:	e008      	b.n	800655a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006548:	68bb      	ldr	r3, [r7, #8]
 800654a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800654c:	4b05      	ldr	r3, [pc, #20]	; (8006564 <xTaskPriorityInherit+0xc4>)
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006552:	429a      	cmp	r2, r3
 8006554:	d201      	bcs.n	800655a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006556:	2301      	movs	r3, #1
 8006558:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800655a:	68fb      	ldr	r3, [r7, #12]
	}
 800655c:	4618      	mov	r0, r3
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}
 8006564:	20000c7c 	.word	0x20000c7c
 8006568:	20000c80 	.word	0x20000c80
 800656c:	20001158 	.word	0x20001158

08006570 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006570:	b580      	push	{r7, lr}
 8006572:	b086      	sub	sp, #24
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800657c:	2300      	movs	r3, #0
 800657e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2b00      	cmp	r3, #0
 8006584:	d056      	beq.n	8006634 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006586:	4b2e      	ldr	r3, [pc, #184]	; (8006640 <xTaskPriorityDisinherit+0xd0>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	693a      	ldr	r2, [r7, #16]
 800658c:	429a      	cmp	r2, r3
 800658e:	d00a      	beq.n	80065a6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006594:	f383 8811 	msr	BASEPRI, r3
 8006598:	f3bf 8f6f 	isb	sy
 800659c:	f3bf 8f4f 	dsb	sy
 80065a0:	60fb      	str	r3, [r7, #12]
}
 80065a2:	bf00      	nop
 80065a4:	e7fe      	b.n	80065a4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80065a6:	693b      	ldr	r3, [r7, #16]
 80065a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	d10a      	bne.n	80065c4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80065ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065b2:	f383 8811 	msr	BASEPRI, r3
 80065b6:	f3bf 8f6f 	isb	sy
 80065ba:	f3bf 8f4f 	dsb	sy
 80065be:	60bb      	str	r3, [r7, #8]
}
 80065c0:	bf00      	nop
 80065c2:	e7fe      	b.n	80065c2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c8:	1e5a      	subs	r2, r3, #1
 80065ca:	693b      	ldr	r3, [r7, #16]
 80065cc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d2:	693b      	ldr	r3, [r7, #16]
 80065d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065d6:	429a      	cmp	r2, r3
 80065d8:	d02c      	beq.n	8006634 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065da:	693b      	ldr	r3, [r7, #16]
 80065dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d128      	bne.n	8006634 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3304      	adds	r3, #4
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe fa1e 	bl	8004a28 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065f8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065fc:	693b      	ldr	r3, [r7, #16]
 80065fe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	4b0f      	ldr	r3, [pc, #60]	; (8006644 <xTaskPriorityDisinherit+0xd4>)
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	429a      	cmp	r2, r3
 800660a:	d903      	bls.n	8006614 <xTaskPriorityDisinherit+0xa4>
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	4a0c      	ldr	r2, [pc, #48]	; (8006644 <xTaskPriorityDisinherit+0xd4>)
 8006612:	6013      	str	r3, [r2, #0]
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006618:	4613      	mov	r3, r2
 800661a:	009b      	lsls	r3, r3, #2
 800661c:	4413      	add	r3, r2
 800661e:	009b      	lsls	r3, r3, #2
 8006620:	4a09      	ldr	r2, [pc, #36]	; (8006648 <xTaskPriorityDisinherit+0xd8>)
 8006622:	441a      	add	r2, r3
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	3304      	adds	r3, #4
 8006628:	4619      	mov	r1, r3
 800662a:	4610      	mov	r0, r2
 800662c:	f7fe f99f 	bl	800496e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006630:	2301      	movs	r3, #1
 8006632:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006634:	697b      	ldr	r3, [r7, #20]
	}
 8006636:	4618      	mov	r0, r3
 8006638:	3718      	adds	r7, #24
 800663a:	46bd      	mov	sp, r7
 800663c:	bd80      	pop	{r7, pc}
 800663e:	bf00      	nop
 8006640:	20000c7c 	.word	0x20000c7c
 8006644:	20001158 	.word	0x20001158
 8006648:	20000c80 	.word	0x20000c80

0800664c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800664c:	b580      	push	{r7, lr}
 800664e:	b088      	sub	sp, #32
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800665a:	2301      	movs	r3, #1
 800665c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d06a      	beq.n	800673a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006664:	69bb      	ldr	r3, [r7, #24]
 8006666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006668:	2b00      	cmp	r3, #0
 800666a:	d10a      	bne.n	8006682 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800666c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006670:	f383 8811 	msr	BASEPRI, r3
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	f3bf 8f4f 	dsb	sy
 800667c:	60fb      	str	r3, [r7, #12]
}
 800667e:	bf00      	nop
 8006680:	e7fe      	b.n	8006680 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006682:	69bb      	ldr	r3, [r7, #24]
 8006684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	429a      	cmp	r2, r3
 800668a:	d902      	bls.n	8006692 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800668c:	683b      	ldr	r3, [r7, #0]
 800668e:	61fb      	str	r3, [r7, #28]
 8006690:	e002      	b.n	8006698 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006696:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006698:	69bb      	ldr	r3, [r7, #24]
 800669a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800669c:	69fa      	ldr	r2, [r7, #28]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d04b      	beq.n	800673a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80066a2:	69bb      	ldr	r3, [r7, #24]
 80066a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d146      	bne.n	800673a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80066ac:	4b25      	ldr	r3, [pc, #148]	; (8006744 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	69ba      	ldr	r2, [r7, #24]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d10a      	bne.n	80066cc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80066b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066ba:	f383 8811 	msr	BASEPRI, r3
 80066be:	f3bf 8f6f 	isb	sy
 80066c2:	f3bf 8f4f 	dsb	sy
 80066c6:	60bb      	str	r3, [r7, #8]
}
 80066c8:	bf00      	nop
 80066ca:	e7fe      	b.n	80066ca <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066d0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	69fa      	ldr	r2, [r7, #28]
 80066d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066d8:	69bb      	ldr	r3, [r7, #24]
 80066da:	699b      	ldr	r3, [r3, #24]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	db04      	blt.n	80066ea <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066e0:	69fb      	ldr	r3, [r7, #28]
 80066e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066e6:	69bb      	ldr	r3, [r7, #24]
 80066e8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80066ea:	69bb      	ldr	r3, [r7, #24]
 80066ec:	6959      	ldr	r1, [r3, #20]
 80066ee:	693a      	ldr	r2, [r7, #16]
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4a13      	ldr	r2, [pc, #76]	; (8006748 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80066fa:	4413      	add	r3, r2
 80066fc:	4299      	cmp	r1, r3
 80066fe:	d11c      	bne.n	800673a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	3304      	adds	r3, #4
 8006704:	4618      	mov	r0, r3
 8006706:	f7fe f98f 	bl	8004a28 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670e:	4b0f      	ldr	r3, [pc, #60]	; (800674c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	429a      	cmp	r2, r3
 8006714:	d903      	bls.n	800671e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006716:	69bb      	ldr	r3, [r7, #24]
 8006718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800671a:	4a0c      	ldr	r2, [pc, #48]	; (800674c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800671c:	6013      	str	r3, [r2, #0]
 800671e:	69bb      	ldr	r3, [r7, #24]
 8006720:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4a07      	ldr	r2, [pc, #28]	; (8006748 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800672c:	441a      	add	r2, r3
 800672e:	69bb      	ldr	r3, [r7, #24]
 8006730:	3304      	adds	r3, #4
 8006732:	4619      	mov	r1, r3
 8006734:	4610      	mov	r0, r2
 8006736:	f7fe f91a 	bl	800496e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800673a:	bf00      	nop
 800673c:	3720      	adds	r7, #32
 800673e:	46bd      	mov	sp, r7
 8006740:	bd80      	pop	{r7, pc}
 8006742:	bf00      	nop
 8006744:	20000c7c 	.word	0x20000c7c
 8006748:	20000c80 	.word	0x20000c80
 800674c:	20001158 	.word	0x20001158

08006750 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006750:	b480      	push	{r7}
 8006752:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006754:	4b07      	ldr	r3, [pc, #28]	; (8006774 <pvTaskIncrementMutexHeldCount+0x24>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	2b00      	cmp	r3, #0
 800675a:	d004      	beq.n	8006766 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800675c:	4b05      	ldr	r3, [pc, #20]	; (8006774 <pvTaskIncrementMutexHeldCount+0x24>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006762:	3201      	adds	r2, #1
 8006764:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006766:	4b03      	ldr	r3, [pc, #12]	; (8006774 <pvTaskIncrementMutexHeldCount+0x24>)
 8006768:	681b      	ldr	r3, [r3, #0]
	}
 800676a:	4618      	mov	r0, r3
 800676c:	46bd      	mov	sp, r7
 800676e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006772:	4770      	bx	lr
 8006774:	20000c7c 	.word	0x20000c7c

08006778 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006778:	b580      	push	{r7, lr}
 800677a:	b084      	sub	sp, #16
 800677c:	af00      	add	r7, sp, #0
 800677e:	6078      	str	r0, [r7, #4]
 8006780:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006782:	4b21      	ldr	r3, [pc, #132]	; (8006808 <prvAddCurrentTaskToDelayedList+0x90>)
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006788:	4b20      	ldr	r3, [pc, #128]	; (800680c <prvAddCurrentTaskToDelayedList+0x94>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	3304      	adds	r3, #4
 800678e:	4618      	mov	r0, r3
 8006790:	f7fe f94a 	bl	8004a28 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f1b3 3fff 	cmp.w	r3, #4294967295
 800679a:	d10a      	bne.n	80067b2 <prvAddCurrentTaskToDelayedList+0x3a>
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d007      	beq.n	80067b2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067a2:	4b1a      	ldr	r3, [pc, #104]	; (800680c <prvAddCurrentTaskToDelayedList+0x94>)
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	3304      	adds	r3, #4
 80067a8:	4619      	mov	r1, r3
 80067aa:	4819      	ldr	r0, [pc, #100]	; (8006810 <prvAddCurrentTaskToDelayedList+0x98>)
 80067ac:	f7fe f8df 	bl	800496e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80067b0:	e026      	b.n	8006800 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80067b2:	68fa      	ldr	r2, [r7, #12]
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	4413      	add	r3, r2
 80067b8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067ba:	4b14      	ldr	r3, [pc, #80]	; (800680c <prvAddCurrentTaskToDelayedList+0x94>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	68ba      	ldr	r2, [r7, #8]
 80067c0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067c2:	68ba      	ldr	r2, [r7, #8]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d209      	bcs.n	80067de <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ca:	4b12      	ldr	r3, [pc, #72]	; (8006814 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4b0f      	ldr	r3, [pc, #60]	; (800680c <prvAddCurrentTaskToDelayedList+0x94>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f7fe f8ed 	bl	80049b6 <vListInsert>
}
 80067dc:	e010      	b.n	8006800 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067de:	4b0e      	ldr	r3, [pc, #56]	; (8006818 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	4b0a      	ldr	r3, [pc, #40]	; (800680c <prvAddCurrentTaskToDelayedList+0x94>)
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	3304      	adds	r3, #4
 80067e8:	4619      	mov	r1, r3
 80067ea:	4610      	mov	r0, r2
 80067ec:	f7fe f8e3 	bl	80049b6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067f0:	4b0a      	ldr	r3, [pc, #40]	; (800681c <prvAddCurrentTaskToDelayedList+0xa4>)
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	68ba      	ldr	r2, [r7, #8]
 80067f6:	429a      	cmp	r2, r3
 80067f8:	d202      	bcs.n	8006800 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067fa:	4a08      	ldr	r2, [pc, #32]	; (800681c <prvAddCurrentTaskToDelayedList+0xa4>)
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	6013      	str	r3, [r2, #0]
}
 8006800:	bf00      	nop
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	20001154 	.word	0x20001154
 800680c:	20000c7c 	.word	0x20000c7c
 8006810:	2000113c 	.word	0x2000113c
 8006814:	2000110c 	.word	0x2000110c
 8006818:	20001108 	.word	0x20001108
 800681c:	20001170 	.word	0x20001170

08006820 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b08a      	sub	sp, #40	; 0x28
 8006824:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006826:	2300      	movs	r3, #0
 8006828:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800682a:	f000 fb07 	bl	8006e3c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800682e:	4b1c      	ldr	r3, [pc, #112]	; (80068a0 <xTimerCreateTimerTask+0x80>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	2b00      	cmp	r3, #0
 8006834:	d021      	beq.n	800687a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006836:	2300      	movs	r3, #0
 8006838:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800683a:	2300      	movs	r3, #0
 800683c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800683e:	1d3a      	adds	r2, r7, #4
 8006840:	f107 0108 	add.w	r1, r7, #8
 8006844:	f107 030c 	add.w	r3, r7, #12
 8006848:	4618      	mov	r0, r3
 800684a:	f7fe f849 	bl	80048e0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800684e:	6879      	ldr	r1, [r7, #4]
 8006850:	68bb      	ldr	r3, [r7, #8]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	9202      	str	r2, [sp, #8]
 8006856:	9301      	str	r3, [sp, #4]
 8006858:	2302      	movs	r3, #2
 800685a:	9300      	str	r3, [sp, #0]
 800685c:	2300      	movs	r3, #0
 800685e:	460a      	mov	r2, r1
 8006860:	4910      	ldr	r1, [pc, #64]	; (80068a4 <xTimerCreateTimerTask+0x84>)
 8006862:	4811      	ldr	r0, [pc, #68]	; (80068a8 <xTimerCreateTimerTask+0x88>)
 8006864:	f7fe ffe0 	bl	8005828 <xTaskCreateStatic>
 8006868:	4603      	mov	r3, r0
 800686a:	4a10      	ldr	r2, [pc, #64]	; (80068ac <xTimerCreateTimerTask+0x8c>)
 800686c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800686e:	4b0f      	ldr	r3, [pc, #60]	; (80068ac <xTimerCreateTimerTask+0x8c>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	2b00      	cmp	r3, #0
 8006874:	d001      	beq.n	800687a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006876:	2301      	movs	r3, #1
 8006878:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800687a:	697b      	ldr	r3, [r7, #20]
 800687c:	2b00      	cmp	r3, #0
 800687e:	d10a      	bne.n	8006896 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	613b      	str	r3, [r7, #16]
}
 8006892:	bf00      	nop
 8006894:	e7fe      	b.n	8006894 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006896:	697b      	ldr	r3, [r7, #20]
}
 8006898:	4618      	mov	r0, r3
 800689a:	3718      	adds	r7, #24
 800689c:	46bd      	mov	sp, r7
 800689e:	bd80      	pop	{r7, pc}
 80068a0:	200011ac 	.word	0x200011ac
 80068a4:	08007888 	.word	0x08007888
 80068a8:	080069e5 	.word	0x080069e5
 80068ac:	200011b0 	.word	0x200011b0

080068b0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b08a      	sub	sp, #40	; 0x28
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	60f8      	str	r0, [r7, #12]
 80068b8:	60b9      	str	r1, [r7, #8]
 80068ba:	607a      	str	r2, [r7, #4]
 80068bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068be:	2300      	movs	r3, #0
 80068c0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d10a      	bne.n	80068de <xTimerGenericCommand+0x2e>
	__asm volatile
 80068c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068cc:	f383 8811 	msr	BASEPRI, r3
 80068d0:	f3bf 8f6f 	isb	sy
 80068d4:	f3bf 8f4f 	dsb	sy
 80068d8:	623b      	str	r3, [r7, #32]
}
 80068da:	bf00      	nop
 80068dc:	e7fe      	b.n	80068dc <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068de:	4b1a      	ldr	r3, [pc, #104]	; (8006948 <xTimerGenericCommand+0x98>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d02a      	beq.n	800693c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068e6:	68bb      	ldr	r3, [r7, #8]
 80068e8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068f2:	68bb      	ldr	r3, [r7, #8]
 80068f4:	2b05      	cmp	r3, #5
 80068f6:	dc18      	bgt.n	800692a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068f8:	f7ff fdb4 	bl	8006464 <xTaskGetSchedulerState>
 80068fc:	4603      	mov	r3, r0
 80068fe:	2b02      	cmp	r3, #2
 8006900:	d109      	bne.n	8006916 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006902:	4b11      	ldr	r3, [pc, #68]	; (8006948 <xTimerGenericCommand+0x98>)
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	f107 0110 	add.w	r1, r7, #16
 800690a:	2300      	movs	r3, #0
 800690c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800690e:	f7fe f9f3 	bl	8004cf8 <xQueueGenericSend>
 8006912:	6278      	str	r0, [r7, #36]	; 0x24
 8006914:	e012      	b.n	800693c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006916:	4b0c      	ldr	r3, [pc, #48]	; (8006948 <xTimerGenericCommand+0x98>)
 8006918:	6818      	ldr	r0, [r3, #0]
 800691a:	f107 0110 	add.w	r1, r7, #16
 800691e:	2300      	movs	r3, #0
 8006920:	2200      	movs	r2, #0
 8006922:	f7fe f9e9 	bl	8004cf8 <xQueueGenericSend>
 8006926:	6278      	str	r0, [r7, #36]	; 0x24
 8006928:	e008      	b.n	800693c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800692a:	4b07      	ldr	r3, [pc, #28]	; (8006948 <xTimerGenericCommand+0x98>)
 800692c:	6818      	ldr	r0, [r3, #0]
 800692e:	f107 0110 	add.w	r1, r7, #16
 8006932:	2300      	movs	r3, #0
 8006934:	683a      	ldr	r2, [r7, #0]
 8006936:	f7fe fadd 	bl	8004ef4 <xQueueGenericSendFromISR>
 800693a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800693c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800693e:	4618      	mov	r0, r3
 8006940:	3728      	adds	r7, #40	; 0x28
 8006942:	46bd      	mov	sp, r7
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	200011ac 	.word	0x200011ac

0800694c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b088      	sub	sp, #32
 8006950:	af02      	add	r7, sp, #8
 8006952:	6078      	str	r0, [r7, #4]
 8006954:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006956:	4b22      	ldr	r3, [pc, #136]	; (80069e0 <prvProcessExpiredTimer+0x94>)
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	68db      	ldr	r3, [r3, #12]
 800695e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	3304      	adds	r3, #4
 8006964:	4618      	mov	r0, r3
 8006966:	f7fe f85f 	bl	8004a28 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800696a:	697b      	ldr	r3, [r7, #20]
 800696c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b00      	cmp	r3, #0
 8006976:	d022      	beq.n	80069be <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006978:	697b      	ldr	r3, [r7, #20]
 800697a:	699a      	ldr	r2, [r3, #24]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	18d1      	adds	r1, r2, r3
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	683a      	ldr	r2, [r7, #0]
 8006984:	6978      	ldr	r0, [r7, #20]
 8006986:	f000 f8d1 	bl	8006b2c <prvInsertTimerInActiveList>
 800698a:	4603      	mov	r3, r0
 800698c:	2b00      	cmp	r3, #0
 800698e:	d01f      	beq.n	80069d0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006990:	2300      	movs	r3, #0
 8006992:	9300      	str	r3, [sp, #0]
 8006994:	2300      	movs	r3, #0
 8006996:	687a      	ldr	r2, [r7, #4]
 8006998:	2100      	movs	r1, #0
 800699a:	6978      	ldr	r0, [r7, #20]
 800699c:	f7ff ff88 	bl	80068b0 <xTimerGenericCommand>
 80069a0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80069a2:	693b      	ldr	r3, [r7, #16]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	d113      	bne.n	80069d0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80069a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069ac:	f383 8811 	msr	BASEPRI, r3
 80069b0:	f3bf 8f6f 	isb	sy
 80069b4:	f3bf 8f4f 	dsb	sy
 80069b8:	60fb      	str	r3, [r7, #12]
}
 80069ba:	bf00      	nop
 80069bc:	e7fe      	b.n	80069bc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069be:	697b      	ldr	r3, [r7, #20]
 80069c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069c4:	f023 0301 	bic.w	r3, r3, #1
 80069c8:	b2da      	uxtb	r2, r3
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	6a1b      	ldr	r3, [r3, #32]
 80069d4:	6978      	ldr	r0, [r7, #20]
 80069d6:	4798      	blx	r3
}
 80069d8:	bf00      	nop
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	200011a4 	.word	0x200011a4

080069e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069ec:	f107 0308 	add.w	r3, r7, #8
 80069f0:	4618      	mov	r0, r3
 80069f2:	f000 f857 	bl	8006aa4 <prvGetNextExpireTime>
 80069f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069f8:	68bb      	ldr	r3, [r7, #8]
 80069fa:	4619      	mov	r1, r3
 80069fc:	68f8      	ldr	r0, [r7, #12]
 80069fe:	f000 f803 	bl	8006a08 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006a02:	f000 f8d5 	bl	8006bb0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006a06:	e7f1      	b.n	80069ec <prvTimerTask+0x8>

08006a08 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006a08:	b580      	push	{r7, lr}
 8006a0a:	b084      	sub	sp, #16
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	6078      	str	r0, [r7, #4]
 8006a10:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a12:	f7ff f945 	bl	8005ca0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a16:	f107 0308 	add.w	r3, r7, #8
 8006a1a:	4618      	mov	r0, r3
 8006a1c:	f000 f866 	bl	8006aec <prvSampleTimeNow>
 8006a20:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a22:	68bb      	ldr	r3, [r7, #8]
 8006a24:	2b00      	cmp	r3, #0
 8006a26:	d130      	bne.n	8006a8a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d10a      	bne.n	8006a44 <prvProcessTimerOrBlockTask+0x3c>
 8006a2e:	687a      	ldr	r2, [r7, #4]
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	429a      	cmp	r2, r3
 8006a34:	d806      	bhi.n	8006a44 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a36:	f7ff f941 	bl	8005cbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a3a:	68f9      	ldr	r1, [r7, #12]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f7ff ff85 	bl	800694c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a42:	e024      	b.n	8006a8e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d008      	beq.n	8006a5c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a4a:	4b13      	ldr	r3, [pc, #76]	; (8006a98 <prvProcessTimerOrBlockTask+0x90>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d101      	bne.n	8006a58 <prvProcessTimerOrBlockTask+0x50>
 8006a54:	2301      	movs	r3, #1
 8006a56:	e000      	b.n	8006a5a <prvProcessTimerOrBlockTask+0x52>
 8006a58:	2300      	movs	r3, #0
 8006a5a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a5c:	4b0f      	ldr	r3, [pc, #60]	; (8006a9c <prvProcessTimerOrBlockTask+0x94>)
 8006a5e:	6818      	ldr	r0, [r3, #0]
 8006a60:	687a      	ldr	r2, [r7, #4]
 8006a62:	68fb      	ldr	r3, [r7, #12]
 8006a64:	1ad3      	subs	r3, r2, r3
 8006a66:	683a      	ldr	r2, [r7, #0]
 8006a68:	4619      	mov	r1, r3
 8006a6a:	f7fe fea9 	bl	80057c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a6e:	f7ff f925 	bl	8005cbc <xTaskResumeAll>
 8006a72:	4603      	mov	r3, r0
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d10a      	bne.n	8006a8e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a78:	4b09      	ldr	r3, [pc, #36]	; (8006aa0 <prvProcessTimerOrBlockTask+0x98>)
 8006a7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a7e:	601a      	str	r2, [r3, #0]
 8006a80:	f3bf 8f4f 	dsb	sy
 8006a84:	f3bf 8f6f 	isb	sy
}
 8006a88:	e001      	b.n	8006a8e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a8a:	f7ff f917 	bl	8005cbc <xTaskResumeAll>
}
 8006a8e:	bf00      	nop
 8006a90:	3710      	adds	r7, #16
 8006a92:	46bd      	mov	sp, r7
 8006a94:	bd80      	pop	{r7, pc}
 8006a96:	bf00      	nop
 8006a98:	200011a8 	.word	0x200011a8
 8006a9c:	200011ac 	.word	0x200011ac
 8006aa0:	e000ed04 	.word	0xe000ed04

08006aa4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006aa4:	b480      	push	{r7}
 8006aa6:	b085      	sub	sp, #20
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006aac:	4b0e      	ldr	r3, [pc, #56]	; (8006ae8 <prvGetNextExpireTime+0x44>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d101      	bne.n	8006aba <prvGetNextExpireTime+0x16>
 8006ab6:	2201      	movs	r2, #1
 8006ab8:	e000      	b.n	8006abc <prvGetNextExpireTime+0x18>
 8006aba:	2200      	movs	r2, #0
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d105      	bne.n	8006ad4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ac8:	4b07      	ldr	r3, [pc, #28]	; (8006ae8 <prvGetNextExpireTime+0x44>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	68db      	ldr	r3, [r3, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	60fb      	str	r3, [r7, #12]
 8006ad2:	e001      	b.n	8006ad8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
}
 8006ada:	4618      	mov	r0, r3
 8006adc:	3714      	adds	r7, #20
 8006ade:	46bd      	mov	sp, r7
 8006ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop
 8006ae8:	200011a4 	.word	0x200011a4

08006aec <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006af4:	f7ff f980 	bl	8005df8 <xTaskGetTickCount>
 8006af8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006afa:	4b0b      	ldr	r3, [pc, #44]	; (8006b28 <prvSampleTimeNow+0x3c>)
 8006afc:	681b      	ldr	r3, [r3, #0]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d205      	bcs.n	8006b10 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006b04:	f000 f936 	bl	8006d74 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2201      	movs	r2, #1
 8006b0c:	601a      	str	r2, [r3, #0]
 8006b0e:	e002      	b.n	8006b16 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	2200      	movs	r2, #0
 8006b14:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b16:	4a04      	ldr	r2, [pc, #16]	; (8006b28 <prvSampleTimeNow+0x3c>)
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b1c:	68fb      	ldr	r3, [r7, #12]
}
 8006b1e:	4618      	mov	r0, r3
 8006b20:	3710      	adds	r7, #16
 8006b22:	46bd      	mov	sp, r7
 8006b24:	bd80      	pop	{r7, pc}
 8006b26:	bf00      	nop
 8006b28:	200011b4 	.word	0x200011b4

08006b2c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b2c:	b580      	push	{r7, lr}
 8006b2e:	b086      	sub	sp, #24
 8006b30:	af00      	add	r7, sp, #0
 8006b32:	60f8      	str	r0, [r7, #12]
 8006b34:	60b9      	str	r1, [r7, #8]
 8006b36:	607a      	str	r2, [r7, #4]
 8006b38:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b3a:	2300      	movs	r3, #0
 8006b3c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	68ba      	ldr	r2, [r7, #8]
 8006b42:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	68fa      	ldr	r2, [r7, #12]
 8006b48:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b4a:	68ba      	ldr	r2, [r7, #8]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	429a      	cmp	r2, r3
 8006b50:	d812      	bhi.n	8006b78 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b52:	687a      	ldr	r2, [r7, #4]
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	1ad2      	subs	r2, r2, r3
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	699b      	ldr	r3, [r3, #24]
 8006b5c:	429a      	cmp	r2, r3
 8006b5e:	d302      	bcc.n	8006b66 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b60:	2301      	movs	r3, #1
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	e01b      	b.n	8006b9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b66:	4b10      	ldr	r3, [pc, #64]	; (8006ba8 <prvInsertTimerInActiveList+0x7c>)
 8006b68:	681a      	ldr	r2, [r3, #0]
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	3304      	adds	r3, #4
 8006b6e:	4619      	mov	r1, r3
 8006b70:	4610      	mov	r0, r2
 8006b72:	f7fd ff20 	bl	80049b6 <vListInsert>
 8006b76:	e012      	b.n	8006b9e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b78:	687a      	ldr	r2, [r7, #4]
 8006b7a:	683b      	ldr	r3, [r7, #0]
 8006b7c:	429a      	cmp	r2, r3
 8006b7e:	d206      	bcs.n	8006b8e <prvInsertTimerInActiveList+0x62>
 8006b80:	68ba      	ldr	r2, [r7, #8]
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	429a      	cmp	r2, r3
 8006b86:	d302      	bcc.n	8006b8e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	617b      	str	r3, [r7, #20]
 8006b8c:	e007      	b.n	8006b9e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b8e:	4b07      	ldr	r3, [pc, #28]	; (8006bac <prvInsertTimerInActiveList+0x80>)
 8006b90:	681a      	ldr	r2, [r3, #0]
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	3304      	adds	r3, #4
 8006b96:	4619      	mov	r1, r3
 8006b98:	4610      	mov	r0, r2
 8006b9a:	f7fd ff0c 	bl	80049b6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b9e:	697b      	ldr	r3, [r7, #20]
}
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	3718      	adds	r7, #24
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	bd80      	pop	{r7, pc}
 8006ba8:	200011a8 	.word	0x200011a8
 8006bac:	200011a4 	.word	0x200011a4

08006bb0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006bb0:	b580      	push	{r7, lr}
 8006bb2:	b08e      	sub	sp, #56	; 0x38
 8006bb4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006bb6:	e0ca      	b.n	8006d4e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	da18      	bge.n	8006bf0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006bbe:	1d3b      	adds	r3, r7, #4
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d10a      	bne.n	8006be0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bce:	f383 8811 	msr	BASEPRI, r3
 8006bd2:	f3bf 8f6f 	isb	sy
 8006bd6:	f3bf 8f4f 	dsb	sy
 8006bda:	61fb      	str	r3, [r7, #28]
}
 8006bdc:	bf00      	nop
 8006bde:	e7fe      	b.n	8006bde <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006be6:	6850      	ldr	r0, [r2, #4]
 8006be8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bea:	6892      	ldr	r2, [r2, #8]
 8006bec:	4611      	mov	r1, r2
 8006bee:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f2c0 80ab 	blt.w	8006d4e <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfe:	695b      	ldr	r3, [r3, #20]
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d004      	beq.n	8006c0e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c06:	3304      	adds	r3, #4
 8006c08:	4618      	mov	r0, r3
 8006c0a:	f7fd ff0d 	bl	8004a28 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c0e:	463b      	mov	r3, r7
 8006c10:	4618      	mov	r0, r3
 8006c12:	f7ff ff6b 	bl	8006aec <prvSampleTimeNow>
 8006c16:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2b09      	cmp	r3, #9
 8006c1c:	f200 8096 	bhi.w	8006d4c <prvProcessReceivedCommands+0x19c>
 8006c20:	a201      	add	r2, pc, #4	; (adr r2, 8006c28 <prvProcessReceivedCommands+0x78>)
 8006c22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c26:	bf00      	nop
 8006c28:	08006c51 	.word	0x08006c51
 8006c2c:	08006c51 	.word	0x08006c51
 8006c30:	08006c51 	.word	0x08006c51
 8006c34:	08006cc5 	.word	0x08006cc5
 8006c38:	08006cd9 	.word	0x08006cd9
 8006c3c:	08006d23 	.word	0x08006d23
 8006c40:	08006c51 	.word	0x08006c51
 8006c44:	08006c51 	.word	0x08006c51
 8006c48:	08006cc5 	.word	0x08006cc5
 8006c4c:	08006cd9 	.word	0x08006cd9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c56:	f043 0301 	orr.w	r3, r3, #1
 8006c5a:	b2da      	uxtb	r2, r3
 8006c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c62:	68ba      	ldr	r2, [r7, #8]
 8006c64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c66:	699b      	ldr	r3, [r3, #24]
 8006c68:	18d1      	adds	r1, r2, r3
 8006c6a:	68bb      	ldr	r3, [r7, #8]
 8006c6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c70:	f7ff ff5c 	bl	8006b2c <prvInsertTimerInActiveList>
 8006c74:	4603      	mov	r3, r0
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	d069      	beq.n	8006d4e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c7c:	6a1b      	ldr	r3, [r3, #32]
 8006c7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c80:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c88:	f003 0304 	and.w	r3, r3, #4
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d05e      	beq.n	8006d4e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c90:	68ba      	ldr	r2, [r7, #8]
 8006c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	441a      	add	r2, r3
 8006c98:	2300      	movs	r3, #0
 8006c9a:	9300      	str	r3, [sp, #0]
 8006c9c:	2300      	movs	r3, #0
 8006c9e:	2100      	movs	r1, #0
 8006ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ca2:	f7ff fe05 	bl	80068b0 <xTimerGenericCommand>
 8006ca6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ca8:	6a3b      	ldr	r3, [r7, #32]
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d14f      	bne.n	8006d4e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cb2:	f383 8811 	msr	BASEPRI, r3
 8006cb6:	f3bf 8f6f 	isb	sy
 8006cba:	f3bf 8f4f 	dsb	sy
 8006cbe:	61bb      	str	r3, [r7, #24]
}
 8006cc0:	bf00      	nop
 8006cc2:	e7fe      	b.n	8006cc2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cca:	f023 0301 	bic.w	r3, r3, #1
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006cd6:	e03a      	b.n	8006d4e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cde:	f043 0301 	orr.w	r3, r3, #1
 8006ce2:	b2da      	uxtb	r2, r3
 8006ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ce6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cea:	68ba      	ldr	r2, [r7, #8]
 8006cec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cee:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cf2:	699b      	ldr	r3, [r3, #24]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d10a      	bne.n	8006d0e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006cf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cfc:	f383 8811 	msr	BASEPRI, r3
 8006d00:	f3bf 8f6f 	isb	sy
 8006d04:	f3bf 8f4f 	dsb	sy
 8006d08:	617b      	str	r3, [r7, #20]
}
 8006d0a:	bf00      	nop
 8006d0c:	e7fe      	b.n	8006d0c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	699a      	ldr	r2, [r3, #24]
 8006d12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d14:	18d1      	adds	r1, r2, r3
 8006d16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d1a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d1c:	f7ff ff06 	bl	8006b2c <prvInsertTimerInActiveList>
					break;
 8006d20:	e015      	b.n	8006d4e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d24:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d28:	f003 0302 	and.w	r3, r3, #2
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d103      	bne.n	8006d38 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006d30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d32:	f000 fbdd 	bl	80074f0 <vPortFree>
 8006d36:	e00a      	b.n	8006d4e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d3a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d3e:	f023 0301 	bic.w	r3, r3, #1
 8006d42:	b2da      	uxtb	r2, r3
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d4a:	e000      	b.n	8006d4e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006d4c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d4e:	4b08      	ldr	r3, [pc, #32]	; (8006d70 <prvProcessReceivedCommands+0x1c0>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	1d39      	adds	r1, r7, #4
 8006d54:	2200      	movs	r2, #0
 8006d56:	4618      	mov	r0, r3
 8006d58:	f7fe f9f4 	bl	8005144 <xQueueReceive>
 8006d5c:	4603      	mov	r3, r0
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	f47f af2a 	bne.w	8006bb8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d64:	bf00      	nop
 8006d66:	bf00      	nop
 8006d68:	3730      	adds	r7, #48	; 0x30
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	200011ac 	.word	0x200011ac

08006d74 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d7a:	e048      	b.n	8006e0e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d7c:	4b2d      	ldr	r3, [pc, #180]	; (8006e34 <prvSwitchTimerLists+0xc0>)
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d86:	4b2b      	ldr	r3, [pc, #172]	; (8006e34 <prvSwitchTimerLists+0xc0>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68db      	ldr	r3, [r3, #12]
 8006d8c:	68db      	ldr	r3, [r3, #12]
 8006d8e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	3304      	adds	r3, #4
 8006d94:	4618      	mov	r0, r3
 8006d96:	f7fd fe47 	bl	8004a28 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	6a1b      	ldr	r3, [r3, #32]
 8006d9e:	68f8      	ldr	r0, [r7, #12]
 8006da0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006da8:	f003 0304 	and.w	r3, r3, #4
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d02e      	beq.n	8006e0e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	699b      	ldr	r3, [r3, #24]
 8006db4:	693a      	ldr	r2, [r7, #16]
 8006db6:	4413      	add	r3, r2
 8006db8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dba:	68ba      	ldr	r2, [r7, #8]
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	429a      	cmp	r2, r3
 8006dc0:	d90e      	bls.n	8006de0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	68ba      	ldr	r2, [r7, #8]
 8006dc6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	68fa      	ldr	r2, [r7, #12]
 8006dcc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dce:	4b19      	ldr	r3, [pc, #100]	; (8006e34 <prvSwitchTimerLists+0xc0>)
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3304      	adds	r3, #4
 8006dd6:	4619      	mov	r1, r3
 8006dd8:	4610      	mov	r0, r2
 8006dda:	f7fd fdec 	bl	80049b6 <vListInsert>
 8006dde:	e016      	b.n	8006e0e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006de0:	2300      	movs	r3, #0
 8006de2:	9300      	str	r3, [sp, #0]
 8006de4:	2300      	movs	r3, #0
 8006de6:	693a      	ldr	r2, [r7, #16]
 8006de8:	2100      	movs	r1, #0
 8006dea:	68f8      	ldr	r0, [r7, #12]
 8006dec:	f7ff fd60 	bl	80068b0 <xTimerGenericCommand>
 8006df0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d10a      	bne.n	8006e0e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006df8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dfc:	f383 8811 	msr	BASEPRI, r3
 8006e00:	f3bf 8f6f 	isb	sy
 8006e04:	f3bf 8f4f 	dsb	sy
 8006e08:	603b      	str	r3, [r7, #0]
}
 8006e0a:	bf00      	nop
 8006e0c:	e7fe      	b.n	8006e0c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e0e:	4b09      	ldr	r3, [pc, #36]	; (8006e34 <prvSwitchTimerLists+0xc0>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d1b1      	bne.n	8006d7c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e18:	4b06      	ldr	r3, [pc, #24]	; (8006e34 <prvSwitchTimerLists+0xc0>)
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e1e:	4b06      	ldr	r3, [pc, #24]	; (8006e38 <prvSwitchTimerLists+0xc4>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4a04      	ldr	r2, [pc, #16]	; (8006e34 <prvSwitchTimerLists+0xc0>)
 8006e24:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e26:	4a04      	ldr	r2, [pc, #16]	; (8006e38 <prvSwitchTimerLists+0xc4>)
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	6013      	str	r3, [r2, #0]
}
 8006e2c:	bf00      	nop
 8006e2e:	3718      	adds	r7, #24
 8006e30:	46bd      	mov	sp, r7
 8006e32:	bd80      	pop	{r7, pc}
 8006e34:	200011a4 	.word	0x200011a4
 8006e38:	200011a8 	.word	0x200011a8

08006e3c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b082      	sub	sp, #8
 8006e40:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e42:	f000 f967 	bl	8007114 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e46:	4b15      	ldr	r3, [pc, #84]	; (8006e9c <prvCheckForValidListAndQueue+0x60>)
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d120      	bne.n	8006e90 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e4e:	4814      	ldr	r0, [pc, #80]	; (8006ea0 <prvCheckForValidListAndQueue+0x64>)
 8006e50:	f7fd fd60 	bl	8004914 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e54:	4813      	ldr	r0, [pc, #76]	; (8006ea4 <prvCheckForValidListAndQueue+0x68>)
 8006e56:	f7fd fd5d 	bl	8004914 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e5a:	4b13      	ldr	r3, [pc, #76]	; (8006ea8 <prvCheckForValidListAndQueue+0x6c>)
 8006e5c:	4a10      	ldr	r2, [pc, #64]	; (8006ea0 <prvCheckForValidListAndQueue+0x64>)
 8006e5e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e60:	4b12      	ldr	r3, [pc, #72]	; (8006eac <prvCheckForValidListAndQueue+0x70>)
 8006e62:	4a10      	ldr	r2, [pc, #64]	; (8006ea4 <prvCheckForValidListAndQueue+0x68>)
 8006e64:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e66:	2300      	movs	r3, #0
 8006e68:	9300      	str	r3, [sp, #0]
 8006e6a:	4b11      	ldr	r3, [pc, #68]	; (8006eb0 <prvCheckForValidListAndQueue+0x74>)
 8006e6c:	4a11      	ldr	r2, [pc, #68]	; (8006eb4 <prvCheckForValidListAndQueue+0x78>)
 8006e6e:	2110      	movs	r1, #16
 8006e70:	200a      	movs	r0, #10
 8006e72:	f7fd fe6b 	bl	8004b4c <xQueueGenericCreateStatic>
 8006e76:	4603      	mov	r3, r0
 8006e78:	4a08      	ldr	r2, [pc, #32]	; (8006e9c <prvCheckForValidListAndQueue+0x60>)
 8006e7a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e7c:	4b07      	ldr	r3, [pc, #28]	; (8006e9c <prvCheckForValidListAndQueue+0x60>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d005      	beq.n	8006e90 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e84:	4b05      	ldr	r3, [pc, #20]	; (8006e9c <prvCheckForValidListAndQueue+0x60>)
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	490b      	ldr	r1, [pc, #44]	; (8006eb8 <prvCheckForValidListAndQueue+0x7c>)
 8006e8a:	4618      	mov	r0, r3
 8006e8c:	f7fe fc6e 	bl	800576c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e90:	f000 f970 	bl	8007174 <vPortExitCritical>
}
 8006e94:	bf00      	nop
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}
 8006e9a:	bf00      	nop
 8006e9c:	200011ac 	.word	0x200011ac
 8006ea0:	2000117c 	.word	0x2000117c
 8006ea4:	20001190 	.word	0x20001190
 8006ea8:	200011a4 	.word	0x200011a4
 8006eac:	200011a8 	.word	0x200011a8
 8006eb0:	20001258 	.word	0x20001258
 8006eb4:	200011b8 	.word	0x200011b8
 8006eb8:	08007890 	.word	0x08007890

08006ebc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ebc:	b480      	push	{r7}
 8006ebe:	b085      	sub	sp, #20
 8006ec0:	af00      	add	r7, sp, #0
 8006ec2:	60f8      	str	r0, [r7, #12]
 8006ec4:	60b9      	str	r1, [r7, #8]
 8006ec6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	3b04      	subs	r3, #4
 8006ecc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ed4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	3b04      	subs	r3, #4
 8006eda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006edc:	68bb      	ldr	r3, [r7, #8]
 8006ede:	f023 0201 	bic.w	r2, r3, #1
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	3b04      	subs	r3, #4
 8006eea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006eec:	4a0c      	ldr	r2, [pc, #48]	; (8006f20 <pxPortInitialiseStack+0x64>)
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	3b14      	subs	r3, #20
 8006ef6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	3b04      	subs	r3, #4
 8006f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f06f 0202 	mvn.w	r2, #2
 8006f0a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	3b20      	subs	r3, #32
 8006f10:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006f12:	68fb      	ldr	r3, [r7, #12]
}
 8006f14:	4618      	mov	r0, r3
 8006f16:	3714      	adds	r7, #20
 8006f18:	46bd      	mov	sp, r7
 8006f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f1e:	4770      	bx	lr
 8006f20:	08006f25 	.word	0x08006f25

08006f24 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f24:	b480      	push	{r7}
 8006f26:	b085      	sub	sp, #20
 8006f28:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f2e:	4b12      	ldr	r3, [pc, #72]	; (8006f78 <prvTaskExitError+0x54>)
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f36:	d00a      	beq.n	8006f4e <prvTaskExitError+0x2a>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	60fb      	str	r3, [r7, #12]
}
 8006f4a:	bf00      	nop
 8006f4c:	e7fe      	b.n	8006f4c <prvTaskExitError+0x28>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	60bb      	str	r3, [r7, #8]
}
 8006f60:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f62:	bf00      	nop
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d0fc      	beq.n	8006f64 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f6a:	bf00      	nop
 8006f6c:	bf00      	nop
 8006f6e:	3714      	adds	r7, #20
 8006f70:	46bd      	mov	sp, r7
 8006f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f76:	4770      	bx	lr
 8006f78:	20000018 	.word	0x20000018
 8006f7c:	00000000 	.word	0x00000000

08006f80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f80:	4b07      	ldr	r3, [pc, #28]	; (8006fa0 <pxCurrentTCBConst2>)
 8006f82:	6819      	ldr	r1, [r3, #0]
 8006f84:	6808      	ldr	r0, [r1, #0]
 8006f86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8a:	f380 8809 	msr	PSP, r0
 8006f8e:	f3bf 8f6f 	isb	sy
 8006f92:	f04f 0000 	mov.w	r0, #0
 8006f96:	f380 8811 	msr	BASEPRI, r0
 8006f9a:	4770      	bx	lr
 8006f9c:	f3af 8000 	nop.w

08006fa0 <pxCurrentTCBConst2>:
 8006fa0:	20000c7c 	.word	0x20000c7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006fa4:	bf00      	nop
 8006fa6:	bf00      	nop

08006fa8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006fa8:	4808      	ldr	r0, [pc, #32]	; (8006fcc <prvPortStartFirstTask+0x24>)
 8006faa:	6800      	ldr	r0, [r0, #0]
 8006fac:	6800      	ldr	r0, [r0, #0]
 8006fae:	f380 8808 	msr	MSP, r0
 8006fb2:	f04f 0000 	mov.w	r0, #0
 8006fb6:	f380 8814 	msr	CONTROL, r0
 8006fba:	b662      	cpsie	i
 8006fbc:	b661      	cpsie	f
 8006fbe:	f3bf 8f4f 	dsb	sy
 8006fc2:	f3bf 8f6f 	isb	sy
 8006fc6:	df00      	svc	0
 8006fc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fca:	bf00      	nop
 8006fcc:	e000ed08 	.word	0xe000ed08

08006fd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b086      	sub	sp, #24
 8006fd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fd6:	4b46      	ldr	r3, [pc, #280]	; (80070f0 <xPortStartScheduler+0x120>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	4a46      	ldr	r2, [pc, #280]	; (80070f4 <xPortStartScheduler+0x124>)
 8006fdc:	4293      	cmp	r3, r2
 8006fde:	d10a      	bne.n	8006ff6 <xPortStartScheduler+0x26>
	__asm volatile
 8006fe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fe4:	f383 8811 	msr	BASEPRI, r3
 8006fe8:	f3bf 8f6f 	isb	sy
 8006fec:	f3bf 8f4f 	dsb	sy
 8006ff0:	613b      	str	r3, [r7, #16]
}
 8006ff2:	bf00      	nop
 8006ff4:	e7fe      	b.n	8006ff4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ff6:	4b3e      	ldr	r3, [pc, #248]	; (80070f0 <xPortStartScheduler+0x120>)
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a3f      	ldr	r2, [pc, #252]	; (80070f8 <xPortStartScheduler+0x128>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d10a      	bne.n	8007016 <xPortStartScheduler+0x46>
	__asm volatile
 8007000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007004:	f383 8811 	msr	BASEPRI, r3
 8007008:	f3bf 8f6f 	isb	sy
 800700c:	f3bf 8f4f 	dsb	sy
 8007010:	60fb      	str	r3, [r7, #12]
}
 8007012:	bf00      	nop
 8007014:	e7fe      	b.n	8007014 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007016:	4b39      	ldr	r3, [pc, #228]	; (80070fc <xPortStartScheduler+0x12c>)
 8007018:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800701a:	697b      	ldr	r3, [r7, #20]
 800701c:	781b      	ldrb	r3, [r3, #0]
 800701e:	b2db      	uxtb	r3, r3
 8007020:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007022:	697b      	ldr	r3, [r7, #20]
 8007024:	22ff      	movs	r2, #255	; 0xff
 8007026:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007028:	697b      	ldr	r3, [r7, #20]
 800702a:	781b      	ldrb	r3, [r3, #0]
 800702c:	b2db      	uxtb	r3, r3
 800702e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007030:	78fb      	ldrb	r3, [r7, #3]
 8007032:	b2db      	uxtb	r3, r3
 8007034:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007038:	b2da      	uxtb	r2, r3
 800703a:	4b31      	ldr	r3, [pc, #196]	; (8007100 <xPortStartScheduler+0x130>)
 800703c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800703e:	4b31      	ldr	r3, [pc, #196]	; (8007104 <xPortStartScheduler+0x134>)
 8007040:	2207      	movs	r2, #7
 8007042:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007044:	e009      	b.n	800705a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007046:	4b2f      	ldr	r3, [pc, #188]	; (8007104 <xPortStartScheduler+0x134>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	3b01      	subs	r3, #1
 800704c:	4a2d      	ldr	r2, [pc, #180]	; (8007104 <xPortStartScheduler+0x134>)
 800704e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007050:	78fb      	ldrb	r3, [r7, #3]
 8007052:	b2db      	uxtb	r3, r3
 8007054:	005b      	lsls	r3, r3, #1
 8007056:	b2db      	uxtb	r3, r3
 8007058:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800705a:	78fb      	ldrb	r3, [r7, #3]
 800705c:	b2db      	uxtb	r3, r3
 800705e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007062:	2b80      	cmp	r3, #128	; 0x80
 8007064:	d0ef      	beq.n	8007046 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007066:	4b27      	ldr	r3, [pc, #156]	; (8007104 <xPortStartScheduler+0x134>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	f1c3 0307 	rsb	r3, r3, #7
 800706e:	2b04      	cmp	r3, #4
 8007070:	d00a      	beq.n	8007088 <xPortStartScheduler+0xb8>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	60bb      	str	r3, [r7, #8]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007088:	4b1e      	ldr	r3, [pc, #120]	; (8007104 <xPortStartScheduler+0x134>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	021b      	lsls	r3, r3, #8
 800708e:	4a1d      	ldr	r2, [pc, #116]	; (8007104 <xPortStartScheduler+0x134>)
 8007090:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007092:	4b1c      	ldr	r3, [pc, #112]	; (8007104 <xPortStartScheduler+0x134>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800709a:	4a1a      	ldr	r2, [pc, #104]	; (8007104 <xPortStartScheduler+0x134>)
 800709c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800709e:	687b      	ldr	r3, [r7, #4]
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80070a6:	4b18      	ldr	r3, [pc, #96]	; (8007108 <xPortStartScheduler+0x138>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	4a17      	ldr	r2, [pc, #92]	; (8007108 <xPortStartScheduler+0x138>)
 80070ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070b2:	4b15      	ldr	r3, [pc, #84]	; (8007108 <xPortStartScheduler+0x138>)
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	4a14      	ldr	r2, [pc, #80]	; (8007108 <xPortStartScheduler+0x138>)
 80070b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070be:	f000 f8dd 	bl	800727c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070c2:	4b12      	ldr	r3, [pc, #72]	; (800710c <xPortStartScheduler+0x13c>)
 80070c4:	2200      	movs	r2, #0
 80070c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070c8:	f000 f8fc 	bl	80072c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070cc:	4b10      	ldr	r3, [pc, #64]	; (8007110 <xPortStartScheduler+0x140>)
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	4a0f      	ldr	r2, [pc, #60]	; (8007110 <xPortStartScheduler+0x140>)
 80070d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070d8:	f7ff ff66 	bl	8006fa8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070dc:	f7fe ff56 	bl	8005f8c <vTaskSwitchContext>
	prvTaskExitError();
 80070e0:	f7ff ff20 	bl	8006f24 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070e4:	2300      	movs	r3, #0
}
 80070e6:	4618      	mov	r0, r3
 80070e8:	3718      	adds	r7, #24
 80070ea:	46bd      	mov	sp, r7
 80070ec:	bd80      	pop	{r7, pc}
 80070ee:	bf00      	nop
 80070f0:	e000ed00 	.word	0xe000ed00
 80070f4:	410fc271 	.word	0x410fc271
 80070f8:	410fc270 	.word	0x410fc270
 80070fc:	e000e400 	.word	0xe000e400
 8007100:	200012a8 	.word	0x200012a8
 8007104:	200012ac 	.word	0x200012ac
 8007108:	e000ed20 	.word	0xe000ed20
 800710c:	20000018 	.word	0x20000018
 8007110:	e000ef34 	.word	0xe000ef34

08007114 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007114:	b480      	push	{r7}
 8007116:	b083      	sub	sp, #12
 8007118:	af00      	add	r7, sp, #0
	__asm volatile
 800711a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800711e:	f383 8811 	msr	BASEPRI, r3
 8007122:	f3bf 8f6f 	isb	sy
 8007126:	f3bf 8f4f 	dsb	sy
 800712a:	607b      	str	r3, [r7, #4]
}
 800712c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800712e:	4b0f      	ldr	r3, [pc, #60]	; (800716c <vPortEnterCritical+0x58>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	3301      	adds	r3, #1
 8007134:	4a0d      	ldr	r2, [pc, #52]	; (800716c <vPortEnterCritical+0x58>)
 8007136:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007138:	4b0c      	ldr	r3, [pc, #48]	; (800716c <vPortEnterCritical+0x58>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	2b01      	cmp	r3, #1
 800713e:	d10f      	bne.n	8007160 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007140:	4b0b      	ldr	r3, [pc, #44]	; (8007170 <vPortEnterCritical+0x5c>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	b2db      	uxtb	r3, r3
 8007146:	2b00      	cmp	r3, #0
 8007148:	d00a      	beq.n	8007160 <vPortEnterCritical+0x4c>
	__asm volatile
 800714a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800714e:	f383 8811 	msr	BASEPRI, r3
 8007152:	f3bf 8f6f 	isb	sy
 8007156:	f3bf 8f4f 	dsb	sy
 800715a:	603b      	str	r3, [r7, #0]
}
 800715c:	bf00      	nop
 800715e:	e7fe      	b.n	800715e <vPortEnterCritical+0x4a>
	}
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr
 800716c:	20000018 	.word	0x20000018
 8007170:	e000ed04 	.word	0xe000ed04

08007174 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b083      	sub	sp, #12
 8007178:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800717a:	4b12      	ldr	r3, [pc, #72]	; (80071c4 <vPortExitCritical+0x50>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d10a      	bne.n	8007198 <vPortExitCritical+0x24>
	__asm volatile
 8007182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007186:	f383 8811 	msr	BASEPRI, r3
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	f3bf 8f4f 	dsb	sy
 8007192:	607b      	str	r3, [r7, #4]
}
 8007194:	bf00      	nop
 8007196:	e7fe      	b.n	8007196 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007198:	4b0a      	ldr	r3, [pc, #40]	; (80071c4 <vPortExitCritical+0x50>)
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	3b01      	subs	r3, #1
 800719e:	4a09      	ldr	r2, [pc, #36]	; (80071c4 <vPortExitCritical+0x50>)
 80071a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80071a2:	4b08      	ldr	r3, [pc, #32]	; (80071c4 <vPortExitCritical+0x50>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d105      	bne.n	80071b6 <vPortExitCritical+0x42>
 80071aa:	2300      	movs	r3, #0
 80071ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071ae:	683b      	ldr	r3, [r7, #0]
 80071b0:	f383 8811 	msr	BASEPRI, r3
}
 80071b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071b6:	bf00      	nop
 80071b8:	370c      	adds	r7, #12
 80071ba:	46bd      	mov	sp, r7
 80071bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c0:	4770      	bx	lr
 80071c2:	bf00      	nop
 80071c4:	20000018 	.word	0x20000018
	...

080071d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071d0:	f3ef 8009 	mrs	r0, PSP
 80071d4:	f3bf 8f6f 	isb	sy
 80071d8:	4b15      	ldr	r3, [pc, #84]	; (8007230 <pxCurrentTCBConst>)
 80071da:	681a      	ldr	r2, [r3, #0]
 80071dc:	f01e 0f10 	tst.w	lr, #16
 80071e0:	bf08      	it	eq
 80071e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ea:	6010      	str	r0, [r2, #0]
 80071ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071f4:	f380 8811 	msr	BASEPRI, r0
 80071f8:	f3bf 8f4f 	dsb	sy
 80071fc:	f3bf 8f6f 	isb	sy
 8007200:	f7fe fec4 	bl	8005f8c <vTaskSwitchContext>
 8007204:	f04f 0000 	mov.w	r0, #0
 8007208:	f380 8811 	msr	BASEPRI, r0
 800720c:	bc09      	pop	{r0, r3}
 800720e:	6819      	ldr	r1, [r3, #0]
 8007210:	6808      	ldr	r0, [r1, #0]
 8007212:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007216:	f01e 0f10 	tst.w	lr, #16
 800721a:	bf08      	it	eq
 800721c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007220:	f380 8809 	msr	PSP, r0
 8007224:	f3bf 8f6f 	isb	sy
 8007228:	4770      	bx	lr
 800722a:	bf00      	nop
 800722c:	f3af 8000 	nop.w

08007230 <pxCurrentTCBConst>:
 8007230:	20000c7c 	.word	0x20000c7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007234:	bf00      	nop
 8007236:	bf00      	nop

08007238 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b082      	sub	sp, #8
 800723c:	af00      	add	r7, sp, #0
	__asm volatile
 800723e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007242:	f383 8811 	msr	BASEPRI, r3
 8007246:	f3bf 8f6f 	isb	sy
 800724a:	f3bf 8f4f 	dsb	sy
 800724e:	607b      	str	r3, [r7, #4]
}
 8007250:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007252:	f7fe fde1 	bl	8005e18 <xTaskIncrementTick>
 8007256:	4603      	mov	r3, r0
 8007258:	2b00      	cmp	r3, #0
 800725a:	d003      	beq.n	8007264 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800725c:	4b06      	ldr	r3, [pc, #24]	; (8007278 <xPortSysTickHandler+0x40>)
 800725e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007262:	601a      	str	r2, [r3, #0]
 8007264:	2300      	movs	r3, #0
 8007266:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007268:	683b      	ldr	r3, [r7, #0]
 800726a:	f383 8811 	msr	BASEPRI, r3
}
 800726e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007270:	bf00      	nop
 8007272:	3708      	adds	r7, #8
 8007274:	46bd      	mov	sp, r7
 8007276:	bd80      	pop	{r7, pc}
 8007278:	e000ed04 	.word	0xe000ed04

0800727c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800727c:	b480      	push	{r7}
 800727e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007280:	4b0b      	ldr	r3, [pc, #44]	; (80072b0 <vPortSetupTimerInterrupt+0x34>)
 8007282:	2200      	movs	r2, #0
 8007284:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007286:	4b0b      	ldr	r3, [pc, #44]	; (80072b4 <vPortSetupTimerInterrupt+0x38>)
 8007288:	2200      	movs	r2, #0
 800728a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800728c:	4b0a      	ldr	r3, [pc, #40]	; (80072b8 <vPortSetupTimerInterrupt+0x3c>)
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a0a      	ldr	r2, [pc, #40]	; (80072bc <vPortSetupTimerInterrupt+0x40>)
 8007292:	fba2 2303 	umull	r2, r3, r2, r3
 8007296:	099b      	lsrs	r3, r3, #6
 8007298:	4a09      	ldr	r2, [pc, #36]	; (80072c0 <vPortSetupTimerInterrupt+0x44>)
 800729a:	3b01      	subs	r3, #1
 800729c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800729e:	4b04      	ldr	r3, [pc, #16]	; (80072b0 <vPortSetupTimerInterrupt+0x34>)
 80072a0:	2207      	movs	r2, #7
 80072a2:	601a      	str	r2, [r3, #0]
}
 80072a4:	bf00      	nop
 80072a6:	46bd      	mov	sp, r7
 80072a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ac:	4770      	bx	lr
 80072ae:	bf00      	nop
 80072b0:	e000e010 	.word	0xe000e010
 80072b4:	e000e018 	.word	0xe000e018
 80072b8:	2000000c 	.word	0x2000000c
 80072bc:	10624dd3 	.word	0x10624dd3
 80072c0:	e000e014 	.word	0xe000e014

080072c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072d4 <vPortEnableVFP+0x10>
 80072c8:	6801      	ldr	r1, [r0, #0]
 80072ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072ce:	6001      	str	r1, [r0, #0]
 80072d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072d2:	bf00      	nop
 80072d4:	e000ed88 	.word	0xe000ed88

080072d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072d8:	b480      	push	{r7}
 80072da:	b085      	sub	sp, #20
 80072dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072de:	f3ef 8305 	mrs	r3, IPSR
 80072e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	2b0f      	cmp	r3, #15
 80072e8:	d914      	bls.n	8007314 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ea:	4a17      	ldr	r2, [pc, #92]	; (8007348 <vPortValidateInterruptPriority+0x70>)
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	4413      	add	r3, r2
 80072f0:	781b      	ldrb	r3, [r3, #0]
 80072f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072f4:	4b15      	ldr	r3, [pc, #84]	; (800734c <vPortValidateInterruptPriority+0x74>)
 80072f6:	781b      	ldrb	r3, [r3, #0]
 80072f8:	7afa      	ldrb	r2, [r7, #11]
 80072fa:	429a      	cmp	r2, r3
 80072fc:	d20a      	bcs.n	8007314 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80072fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007302:	f383 8811 	msr	BASEPRI, r3
 8007306:	f3bf 8f6f 	isb	sy
 800730a:	f3bf 8f4f 	dsb	sy
 800730e:	607b      	str	r3, [r7, #4]
}
 8007310:	bf00      	nop
 8007312:	e7fe      	b.n	8007312 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007314:	4b0e      	ldr	r3, [pc, #56]	; (8007350 <vPortValidateInterruptPriority+0x78>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800731c:	4b0d      	ldr	r3, [pc, #52]	; (8007354 <vPortValidateInterruptPriority+0x7c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	429a      	cmp	r2, r3
 8007322:	d90a      	bls.n	800733a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007328:	f383 8811 	msr	BASEPRI, r3
 800732c:	f3bf 8f6f 	isb	sy
 8007330:	f3bf 8f4f 	dsb	sy
 8007334:	603b      	str	r3, [r7, #0]
}
 8007336:	bf00      	nop
 8007338:	e7fe      	b.n	8007338 <vPortValidateInterruptPriority+0x60>
	}
 800733a:	bf00      	nop
 800733c:	3714      	adds	r7, #20
 800733e:	46bd      	mov	sp, r7
 8007340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007344:	4770      	bx	lr
 8007346:	bf00      	nop
 8007348:	e000e3f0 	.word	0xe000e3f0
 800734c:	200012a8 	.word	0x200012a8
 8007350:	e000ed0c 	.word	0xe000ed0c
 8007354:	200012ac 	.word	0x200012ac

08007358 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08a      	sub	sp, #40	; 0x28
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007360:	2300      	movs	r3, #0
 8007362:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007364:	f7fe fc9c 	bl	8005ca0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007368:	4b5b      	ldr	r3, [pc, #364]	; (80074d8 <pvPortMalloc+0x180>)
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	2b00      	cmp	r3, #0
 800736e:	d101      	bne.n	8007374 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007370:	f000 f920 	bl	80075b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007374:	4b59      	ldr	r3, [pc, #356]	; (80074dc <pvPortMalloc+0x184>)
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	4013      	ands	r3, r2
 800737c:	2b00      	cmp	r3, #0
 800737e:	f040 8093 	bne.w	80074a8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2b00      	cmp	r3, #0
 8007386:	d01d      	beq.n	80073c4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007388:	2208      	movs	r2, #8
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	4413      	add	r3, r2
 800738e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f003 0307 	and.w	r3, r3, #7
 8007396:	2b00      	cmp	r3, #0
 8007398:	d014      	beq.n	80073c4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f023 0307 	bic.w	r3, r3, #7
 80073a0:	3308      	adds	r3, #8
 80073a2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	f003 0307 	and.w	r3, r3, #7
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d00a      	beq.n	80073c4 <pvPortMalloc+0x6c>
	__asm volatile
 80073ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073b2:	f383 8811 	msr	BASEPRI, r3
 80073b6:	f3bf 8f6f 	isb	sy
 80073ba:	f3bf 8f4f 	dsb	sy
 80073be:	617b      	str	r3, [r7, #20]
}
 80073c0:	bf00      	nop
 80073c2:	e7fe      	b.n	80073c2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d06e      	beq.n	80074a8 <pvPortMalloc+0x150>
 80073ca:	4b45      	ldr	r3, [pc, #276]	; (80074e0 <pvPortMalloc+0x188>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	687a      	ldr	r2, [r7, #4]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d869      	bhi.n	80074a8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073d4:	4b43      	ldr	r3, [pc, #268]	; (80074e4 <pvPortMalloc+0x18c>)
 80073d6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073d8:	4b42      	ldr	r3, [pc, #264]	; (80074e4 <pvPortMalloc+0x18c>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073de:	e004      	b.n	80073ea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	685b      	ldr	r3, [r3, #4]
 80073ee:	687a      	ldr	r2, [r7, #4]
 80073f0:	429a      	cmp	r2, r3
 80073f2:	d903      	bls.n	80073fc <pvPortMalloc+0xa4>
 80073f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073f6:	681b      	ldr	r3, [r3, #0]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	d1f1      	bne.n	80073e0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073fc:	4b36      	ldr	r3, [pc, #216]	; (80074d8 <pvPortMalloc+0x180>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007402:	429a      	cmp	r2, r3
 8007404:	d050      	beq.n	80074a8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007406:	6a3b      	ldr	r3, [r7, #32]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	2208      	movs	r2, #8
 800740c:	4413      	add	r3, r2
 800740e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007410:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	6a3b      	ldr	r3, [r7, #32]
 8007416:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741a:	685a      	ldr	r2, [r3, #4]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	1ad2      	subs	r2, r2, r3
 8007420:	2308      	movs	r3, #8
 8007422:	005b      	lsls	r3, r3, #1
 8007424:	429a      	cmp	r2, r3
 8007426:	d91f      	bls.n	8007468 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007428:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	4413      	add	r3, r2
 800742e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	f003 0307 	and.w	r3, r3, #7
 8007436:	2b00      	cmp	r3, #0
 8007438:	d00a      	beq.n	8007450 <pvPortMalloc+0xf8>
	__asm volatile
 800743a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800743e:	f383 8811 	msr	BASEPRI, r3
 8007442:	f3bf 8f6f 	isb	sy
 8007446:	f3bf 8f4f 	dsb	sy
 800744a:	613b      	str	r3, [r7, #16]
}
 800744c:	bf00      	nop
 800744e:	e7fe      	b.n	800744e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007452:	685a      	ldr	r2, [r3, #4]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	1ad2      	subs	r2, r2, r3
 8007458:	69bb      	ldr	r3, [r7, #24]
 800745a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	687a      	ldr	r2, [r7, #4]
 8007460:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007462:	69b8      	ldr	r0, [r7, #24]
 8007464:	f000 f908 	bl	8007678 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007468:	4b1d      	ldr	r3, [pc, #116]	; (80074e0 <pvPortMalloc+0x188>)
 800746a:	681a      	ldr	r2, [r3, #0]
 800746c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	4a1b      	ldr	r2, [pc, #108]	; (80074e0 <pvPortMalloc+0x188>)
 8007474:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007476:	4b1a      	ldr	r3, [pc, #104]	; (80074e0 <pvPortMalloc+0x188>)
 8007478:	681a      	ldr	r2, [r3, #0]
 800747a:	4b1b      	ldr	r3, [pc, #108]	; (80074e8 <pvPortMalloc+0x190>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	429a      	cmp	r2, r3
 8007480:	d203      	bcs.n	800748a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007482:	4b17      	ldr	r3, [pc, #92]	; (80074e0 <pvPortMalloc+0x188>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	4a18      	ldr	r2, [pc, #96]	; (80074e8 <pvPortMalloc+0x190>)
 8007488:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800748a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	4b13      	ldr	r3, [pc, #76]	; (80074dc <pvPortMalloc+0x184>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	431a      	orrs	r2, r3
 8007494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007496:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800749a:	2200      	movs	r2, #0
 800749c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800749e:	4b13      	ldr	r3, [pc, #76]	; (80074ec <pvPortMalloc+0x194>)
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	3301      	adds	r3, #1
 80074a4:	4a11      	ldr	r2, [pc, #68]	; (80074ec <pvPortMalloc+0x194>)
 80074a6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80074a8:	f7fe fc08 	bl	8005cbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80074ac:	69fb      	ldr	r3, [r7, #28]
 80074ae:	f003 0307 	and.w	r3, r3, #7
 80074b2:	2b00      	cmp	r3, #0
 80074b4:	d00a      	beq.n	80074cc <pvPortMalloc+0x174>
	__asm volatile
 80074b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074ba:	f383 8811 	msr	BASEPRI, r3
 80074be:	f3bf 8f6f 	isb	sy
 80074c2:	f3bf 8f4f 	dsb	sy
 80074c6:	60fb      	str	r3, [r7, #12]
}
 80074c8:	bf00      	nop
 80074ca:	e7fe      	b.n	80074ca <pvPortMalloc+0x172>
	return pvReturn;
 80074cc:	69fb      	ldr	r3, [r7, #28]
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3728      	adds	r7, #40	; 0x28
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
 80074d6:	bf00      	nop
 80074d8:	20004eb8 	.word	0x20004eb8
 80074dc:	20004ecc 	.word	0x20004ecc
 80074e0:	20004ebc 	.word	0x20004ebc
 80074e4:	20004eb0 	.word	0x20004eb0
 80074e8:	20004ec0 	.word	0x20004ec0
 80074ec:	20004ec4 	.word	0x20004ec4

080074f0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b086      	sub	sp, #24
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d04d      	beq.n	800759e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007502:	2308      	movs	r3, #8
 8007504:	425b      	negs	r3, r3
 8007506:	697a      	ldr	r2, [r7, #20]
 8007508:	4413      	add	r3, r2
 800750a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800750c:	697b      	ldr	r3, [r7, #20]
 800750e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007510:	693b      	ldr	r3, [r7, #16]
 8007512:	685a      	ldr	r2, [r3, #4]
 8007514:	4b24      	ldr	r3, [pc, #144]	; (80075a8 <vPortFree+0xb8>)
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	4013      	ands	r3, r2
 800751a:	2b00      	cmp	r3, #0
 800751c:	d10a      	bne.n	8007534 <vPortFree+0x44>
	__asm volatile
 800751e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007522:	f383 8811 	msr	BASEPRI, r3
 8007526:	f3bf 8f6f 	isb	sy
 800752a:	f3bf 8f4f 	dsb	sy
 800752e:	60fb      	str	r3, [r7, #12]
}
 8007530:	bf00      	nop
 8007532:	e7fe      	b.n	8007532 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007534:	693b      	ldr	r3, [r7, #16]
 8007536:	681b      	ldr	r3, [r3, #0]
 8007538:	2b00      	cmp	r3, #0
 800753a:	d00a      	beq.n	8007552 <vPortFree+0x62>
	__asm volatile
 800753c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007540:	f383 8811 	msr	BASEPRI, r3
 8007544:	f3bf 8f6f 	isb	sy
 8007548:	f3bf 8f4f 	dsb	sy
 800754c:	60bb      	str	r3, [r7, #8]
}
 800754e:	bf00      	nop
 8007550:	e7fe      	b.n	8007550 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007552:	693b      	ldr	r3, [r7, #16]
 8007554:	685a      	ldr	r2, [r3, #4]
 8007556:	4b14      	ldr	r3, [pc, #80]	; (80075a8 <vPortFree+0xb8>)
 8007558:	681b      	ldr	r3, [r3, #0]
 800755a:	4013      	ands	r3, r2
 800755c:	2b00      	cmp	r3, #0
 800755e:	d01e      	beq.n	800759e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007560:	693b      	ldr	r3, [r7, #16]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d11a      	bne.n	800759e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007568:	693b      	ldr	r3, [r7, #16]
 800756a:	685a      	ldr	r2, [r3, #4]
 800756c:	4b0e      	ldr	r3, [pc, #56]	; (80075a8 <vPortFree+0xb8>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	43db      	mvns	r3, r3
 8007572:	401a      	ands	r2, r3
 8007574:	693b      	ldr	r3, [r7, #16]
 8007576:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007578:	f7fe fb92 	bl	8005ca0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	685a      	ldr	r2, [r3, #4]
 8007580:	4b0a      	ldr	r3, [pc, #40]	; (80075ac <vPortFree+0xbc>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	4413      	add	r3, r2
 8007586:	4a09      	ldr	r2, [pc, #36]	; (80075ac <vPortFree+0xbc>)
 8007588:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800758a:	6938      	ldr	r0, [r7, #16]
 800758c:	f000 f874 	bl	8007678 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007590:	4b07      	ldr	r3, [pc, #28]	; (80075b0 <vPortFree+0xc0>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	3301      	adds	r3, #1
 8007596:	4a06      	ldr	r2, [pc, #24]	; (80075b0 <vPortFree+0xc0>)
 8007598:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800759a:	f7fe fb8f 	bl	8005cbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800759e:	bf00      	nop
 80075a0:	3718      	adds	r7, #24
 80075a2:	46bd      	mov	sp, r7
 80075a4:	bd80      	pop	{r7, pc}
 80075a6:	bf00      	nop
 80075a8:	20004ecc 	.word	0x20004ecc
 80075ac:	20004ebc 	.word	0x20004ebc
 80075b0:	20004ec8 	.word	0x20004ec8

080075b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075b4:	b480      	push	{r7}
 80075b6:	b085      	sub	sp, #20
 80075b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075ba:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80075be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075c0:	4b27      	ldr	r3, [pc, #156]	; (8007660 <prvHeapInit+0xac>)
 80075c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d00c      	beq.n	80075e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	3307      	adds	r3, #7
 80075d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	f023 0307 	bic.w	r3, r3, #7
 80075da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075dc:	68ba      	ldr	r2, [r7, #8]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	4a1f      	ldr	r2, [pc, #124]	; (8007660 <prvHeapInit+0xac>)
 80075e4:	4413      	add	r3, r2
 80075e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075ec:	4a1d      	ldr	r2, [pc, #116]	; (8007664 <prvHeapInit+0xb0>)
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075f2:	4b1c      	ldr	r3, [pc, #112]	; (8007664 <prvHeapInit+0xb0>)
 80075f4:	2200      	movs	r2, #0
 80075f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	68ba      	ldr	r2, [r7, #8]
 80075fc:	4413      	add	r3, r2
 80075fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007600:	2208      	movs	r2, #8
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	1a9b      	subs	r3, r3, r2
 8007606:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	f023 0307 	bic.w	r3, r3, #7
 800760e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	4a15      	ldr	r2, [pc, #84]	; (8007668 <prvHeapInit+0xb4>)
 8007614:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007616:	4b14      	ldr	r3, [pc, #80]	; (8007668 <prvHeapInit+0xb4>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	2200      	movs	r2, #0
 800761c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800761e:	4b12      	ldr	r3, [pc, #72]	; (8007668 <prvHeapInit+0xb4>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2200      	movs	r2, #0
 8007624:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	68fa      	ldr	r2, [r7, #12]
 800762e:	1ad2      	subs	r2, r2, r3
 8007630:	683b      	ldr	r3, [r7, #0]
 8007632:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007634:	4b0c      	ldr	r3, [pc, #48]	; (8007668 <prvHeapInit+0xb4>)
 8007636:	681a      	ldr	r2, [r3, #0]
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800763c:	683b      	ldr	r3, [r7, #0]
 800763e:	685b      	ldr	r3, [r3, #4]
 8007640:	4a0a      	ldr	r2, [pc, #40]	; (800766c <prvHeapInit+0xb8>)
 8007642:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007644:	683b      	ldr	r3, [r7, #0]
 8007646:	685b      	ldr	r3, [r3, #4]
 8007648:	4a09      	ldr	r2, [pc, #36]	; (8007670 <prvHeapInit+0xbc>)
 800764a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800764c:	4b09      	ldr	r3, [pc, #36]	; (8007674 <prvHeapInit+0xc0>)
 800764e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007652:	601a      	str	r2, [r3, #0]
}
 8007654:	bf00      	nop
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr
 8007660:	200012b0 	.word	0x200012b0
 8007664:	20004eb0 	.word	0x20004eb0
 8007668:	20004eb8 	.word	0x20004eb8
 800766c:	20004ec0 	.word	0x20004ec0
 8007670:	20004ebc 	.word	0x20004ebc
 8007674:	20004ecc 	.word	0x20004ecc

08007678 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007678:	b480      	push	{r7}
 800767a:	b085      	sub	sp, #20
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007680:	4b28      	ldr	r3, [pc, #160]	; (8007724 <prvInsertBlockIntoFreeList+0xac>)
 8007682:	60fb      	str	r3, [r7, #12]
 8007684:	e002      	b.n	800768c <prvInsertBlockIntoFreeList+0x14>
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	681b      	ldr	r3, [r3, #0]
 800768a:	60fb      	str	r3, [r7, #12]
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	429a      	cmp	r2, r3
 8007694:	d8f7      	bhi.n	8007686 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	4413      	add	r3, r2
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	429a      	cmp	r2, r3
 80076a6:	d108      	bne.n	80076ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	685a      	ldr	r2, [r3, #4]
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	441a      	add	r2, r3
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	685b      	ldr	r3, [r3, #4]
 80076c2:	68ba      	ldr	r2, [r7, #8]
 80076c4:	441a      	add	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d118      	bne.n	8007700 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681a      	ldr	r2, [r3, #0]
 80076d2:	4b15      	ldr	r3, [pc, #84]	; (8007728 <prvInsertBlockIntoFreeList+0xb0>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d00d      	beq.n	80076f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	685a      	ldr	r2, [r3, #4]
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	441a      	add	r2, r3
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	681a      	ldr	r2, [r3, #0]
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	e008      	b.n	8007708 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076f6:	4b0c      	ldr	r3, [pc, #48]	; (8007728 <prvInsertBlockIntoFreeList+0xb0>)
 80076f8:	681a      	ldr	r2, [r3, #0]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	601a      	str	r2, [r3, #0]
 80076fe:	e003      	b.n	8007708 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	681a      	ldr	r2, [r3, #0]
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007708:	68fa      	ldr	r2, [r7, #12]
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	429a      	cmp	r2, r3
 800770e:	d002      	beq.n	8007716 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	687a      	ldr	r2, [r7, #4]
 8007714:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007716:	bf00      	nop
 8007718:	3714      	adds	r7, #20
 800771a:	46bd      	mov	sp, r7
 800771c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007720:	4770      	bx	lr
 8007722:	bf00      	nop
 8007724:	20004eb0 	.word	0x20004eb0
 8007728:	20004eb8 	.word	0x20004eb8

0800772c <__itoa>:
 800772c:	1e93      	subs	r3, r2, #2
 800772e:	2b22      	cmp	r3, #34	; 0x22
 8007730:	b510      	push	{r4, lr}
 8007732:	460c      	mov	r4, r1
 8007734:	d904      	bls.n	8007740 <__itoa+0x14>
 8007736:	2300      	movs	r3, #0
 8007738:	700b      	strb	r3, [r1, #0]
 800773a:	461c      	mov	r4, r3
 800773c:	4620      	mov	r0, r4
 800773e:	bd10      	pop	{r4, pc}
 8007740:	2a0a      	cmp	r2, #10
 8007742:	d109      	bne.n	8007758 <__itoa+0x2c>
 8007744:	2800      	cmp	r0, #0
 8007746:	da07      	bge.n	8007758 <__itoa+0x2c>
 8007748:	232d      	movs	r3, #45	; 0x2d
 800774a:	700b      	strb	r3, [r1, #0]
 800774c:	4240      	negs	r0, r0
 800774e:	2101      	movs	r1, #1
 8007750:	4421      	add	r1, r4
 8007752:	f000 f805 	bl	8007760 <__utoa>
 8007756:	e7f1      	b.n	800773c <__itoa+0x10>
 8007758:	2100      	movs	r1, #0
 800775a:	e7f9      	b.n	8007750 <__itoa+0x24>

0800775c <itoa>:
 800775c:	f7ff bfe6 	b.w	800772c <__itoa>

08007760 <__utoa>:
 8007760:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007762:	4c1f      	ldr	r4, [pc, #124]	; (80077e0 <__utoa+0x80>)
 8007764:	b08b      	sub	sp, #44	; 0x2c
 8007766:	4605      	mov	r5, r0
 8007768:	460b      	mov	r3, r1
 800776a:	466e      	mov	r6, sp
 800776c:	f104 0c20 	add.w	ip, r4, #32
 8007770:	6820      	ldr	r0, [r4, #0]
 8007772:	6861      	ldr	r1, [r4, #4]
 8007774:	4637      	mov	r7, r6
 8007776:	c703      	stmia	r7!, {r0, r1}
 8007778:	3408      	adds	r4, #8
 800777a:	4564      	cmp	r4, ip
 800777c:	463e      	mov	r6, r7
 800777e:	d1f7      	bne.n	8007770 <__utoa+0x10>
 8007780:	7921      	ldrb	r1, [r4, #4]
 8007782:	7139      	strb	r1, [r7, #4]
 8007784:	1e91      	subs	r1, r2, #2
 8007786:	6820      	ldr	r0, [r4, #0]
 8007788:	6038      	str	r0, [r7, #0]
 800778a:	2922      	cmp	r1, #34	; 0x22
 800778c:	f04f 0100 	mov.w	r1, #0
 8007790:	d904      	bls.n	800779c <__utoa+0x3c>
 8007792:	7019      	strb	r1, [r3, #0]
 8007794:	460b      	mov	r3, r1
 8007796:	4618      	mov	r0, r3
 8007798:	b00b      	add	sp, #44	; 0x2c
 800779a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800779c:	1e58      	subs	r0, r3, #1
 800779e:	4684      	mov	ip, r0
 80077a0:	fbb5 f7f2 	udiv	r7, r5, r2
 80077a4:	fb02 5617 	mls	r6, r2, r7, r5
 80077a8:	3628      	adds	r6, #40	; 0x28
 80077aa:	446e      	add	r6, sp
 80077ac:	460c      	mov	r4, r1
 80077ae:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80077b2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80077b6:	462e      	mov	r6, r5
 80077b8:	42b2      	cmp	r2, r6
 80077ba:	f101 0101 	add.w	r1, r1, #1
 80077be:	463d      	mov	r5, r7
 80077c0:	d9ee      	bls.n	80077a0 <__utoa+0x40>
 80077c2:	2200      	movs	r2, #0
 80077c4:	545a      	strb	r2, [r3, r1]
 80077c6:	1919      	adds	r1, r3, r4
 80077c8:	1aa5      	subs	r5, r4, r2
 80077ca:	42aa      	cmp	r2, r5
 80077cc:	dae3      	bge.n	8007796 <__utoa+0x36>
 80077ce:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80077d2:	780e      	ldrb	r6, [r1, #0]
 80077d4:	7006      	strb	r6, [r0, #0]
 80077d6:	3201      	adds	r2, #1
 80077d8:	f801 5901 	strb.w	r5, [r1], #-1
 80077dc:	e7f4      	b.n	80077c8 <__utoa+0x68>
 80077de:	bf00      	nop
 80077e0:	08008c44 	.word	0x08008c44

080077e4 <memset>:
 80077e4:	4402      	add	r2, r0
 80077e6:	4603      	mov	r3, r0
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d100      	bne.n	80077ee <memset+0xa>
 80077ec:	4770      	bx	lr
 80077ee:	f803 1b01 	strb.w	r1, [r3], #1
 80077f2:	e7f9      	b.n	80077e8 <memset+0x4>

080077f4 <__libc_init_array>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	4d0d      	ldr	r5, [pc, #52]	; (800782c <__libc_init_array+0x38>)
 80077f8:	4c0d      	ldr	r4, [pc, #52]	; (8007830 <__libc_init_array+0x3c>)
 80077fa:	1b64      	subs	r4, r4, r5
 80077fc:	10a4      	asrs	r4, r4, #2
 80077fe:	2600      	movs	r6, #0
 8007800:	42a6      	cmp	r6, r4
 8007802:	d109      	bne.n	8007818 <__libc_init_array+0x24>
 8007804:	4d0b      	ldr	r5, [pc, #44]	; (8007834 <__libc_init_array+0x40>)
 8007806:	4c0c      	ldr	r4, [pc, #48]	; (8007838 <__libc_init_array+0x44>)
 8007808:	f000 f826 	bl	8007858 <_init>
 800780c:	1b64      	subs	r4, r4, r5
 800780e:	10a4      	asrs	r4, r4, #2
 8007810:	2600      	movs	r6, #0
 8007812:	42a6      	cmp	r6, r4
 8007814:	d105      	bne.n	8007822 <__libc_init_array+0x2e>
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	f855 3b04 	ldr.w	r3, [r5], #4
 800781c:	4798      	blx	r3
 800781e:	3601      	adds	r6, #1
 8007820:	e7ee      	b.n	8007800 <__libc_init_array+0xc>
 8007822:	f855 3b04 	ldr.w	r3, [r5], #4
 8007826:	4798      	blx	r3
 8007828:	3601      	adds	r6, #1
 800782a:	e7f2      	b.n	8007812 <__libc_init_array+0x1e>
 800782c:	08008c74 	.word	0x08008c74
 8007830:	08008c74 	.word	0x08008c74
 8007834:	08008c74 	.word	0x08008c74
 8007838:	08008c78 	.word	0x08008c78

0800783c <memcpy>:
 800783c:	440a      	add	r2, r1
 800783e:	4291      	cmp	r1, r2
 8007840:	f100 33ff 	add.w	r3, r0, #4294967295
 8007844:	d100      	bne.n	8007848 <memcpy+0xc>
 8007846:	4770      	bx	lr
 8007848:	b510      	push	{r4, lr}
 800784a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800784e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007852:	4291      	cmp	r1, r2
 8007854:	d1f9      	bne.n	800784a <memcpy+0xe>
 8007856:	bd10      	pop	{r4, pc}

08007858 <_init>:
 8007858:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800785a:	bf00      	nop
 800785c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800785e:	bc08      	pop	{r3}
 8007860:	469e      	mov	lr, r3
 8007862:	4770      	bx	lr

08007864 <_fini>:
 8007864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007866:	bf00      	nop
 8007868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800786a:	bc08      	pop	{r3}
 800786c:	469e      	mov	lr, r3
 800786e:	4770      	bx	lr
