
guitarPedal2Threads.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000075d8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002088  080077a8  080077a8  000177a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009830  08009830  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08009830  08009830  00019830  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009838  08009838  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009838  08009838  00019838  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800983c  0800983c  0001983c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08009840  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004eb4  20000010  08009850  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004ec4  08009850  00024ec4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001bbe9  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003abb  00000000  00000000  0003bc6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001850  00000000  00000000  0003f728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001317  00000000  00000000  00040f78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0000440f  00000000  00000000  0004228f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001c617  00000000  00000000  0004669e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de3a2  00000000  00000000  00062cb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000067dc  00000000  00000000  00141058  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005b  00000000  00000000  00147834  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000010 	.word	0x20000010
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08007790 	.word	0x08007790

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000014 	.word	0x20000014
 800020c:	08007790 	.word	0x08007790

08000210 <__aeabi_uldivmod>:
 8000210:	b953      	cbnz	r3, 8000228 <__aeabi_uldivmod+0x18>
 8000212:	b94a      	cbnz	r2, 8000228 <__aeabi_uldivmod+0x18>
 8000214:	2900      	cmp	r1, #0
 8000216:	bf08      	it	eq
 8000218:	2800      	cmpeq	r0, #0
 800021a:	bf1c      	itt	ne
 800021c:	f04f 31ff 	movne.w	r1, #4294967295
 8000220:	f04f 30ff 	movne.w	r0, #4294967295
 8000224:	f000 b970 	b.w	8000508 <__aeabi_idiv0>
 8000228:	f1ad 0c08 	sub.w	ip, sp, #8
 800022c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000230:	f000 f806 	bl	8000240 <__udivmoddi4>
 8000234:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000238:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800023c:	b004      	add	sp, #16
 800023e:	4770      	bx	lr

08000240 <__udivmoddi4>:
 8000240:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000244:	9e08      	ldr	r6, [sp, #32]
 8000246:	460d      	mov	r5, r1
 8000248:	4604      	mov	r4, r0
 800024a:	460f      	mov	r7, r1
 800024c:	2b00      	cmp	r3, #0
 800024e:	d14a      	bne.n	80002e6 <__udivmoddi4+0xa6>
 8000250:	428a      	cmp	r2, r1
 8000252:	4694      	mov	ip, r2
 8000254:	d965      	bls.n	8000322 <__udivmoddi4+0xe2>
 8000256:	fab2 f382 	clz	r3, r2
 800025a:	b143      	cbz	r3, 800026e <__udivmoddi4+0x2e>
 800025c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000260:	f1c3 0220 	rsb	r2, r3, #32
 8000264:	409f      	lsls	r7, r3
 8000266:	fa20 f202 	lsr.w	r2, r0, r2
 800026a:	4317      	orrs	r7, r2
 800026c:	409c      	lsls	r4, r3
 800026e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000272:	fa1f f58c 	uxth.w	r5, ip
 8000276:	fbb7 f1fe 	udiv	r1, r7, lr
 800027a:	0c22      	lsrs	r2, r4, #16
 800027c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000280:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000284:	fb01 f005 	mul.w	r0, r1, r5
 8000288:	4290      	cmp	r0, r2
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x62>
 800028c:	eb1c 0202 	adds.w	r2, ip, r2
 8000290:	f101 37ff 	add.w	r7, r1, #4294967295
 8000294:	f080 811c 	bcs.w	80004d0 <__udivmoddi4+0x290>
 8000298:	4290      	cmp	r0, r2
 800029a:	f240 8119 	bls.w	80004d0 <__udivmoddi4+0x290>
 800029e:	3902      	subs	r1, #2
 80002a0:	4462      	add	r2, ip
 80002a2:	1a12      	subs	r2, r2, r0
 80002a4:	b2a4      	uxth	r4, r4
 80002a6:	fbb2 f0fe 	udiv	r0, r2, lr
 80002aa:	fb0e 2210 	mls	r2, lr, r0, r2
 80002ae:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002b2:	fb00 f505 	mul.w	r5, r0, r5
 80002b6:	42a5      	cmp	r5, r4
 80002b8:	d90a      	bls.n	80002d0 <__udivmoddi4+0x90>
 80002ba:	eb1c 0404 	adds.w	r4, ip, r4
 80002be:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c2:	f080 8107 	bcs.w	80004d4 <__udivmoddi4+0x294>
 80002c6:	42a5      	cmp	r5, r4
 80002c8:	f240 8104 	bls.w	80004d4 <__udivmoddi4+0x294>
 80002cc:	4464      	add	r4, ip
 80002ce:	3802      	subs	r0, #2
 80002d0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002d4:	1b64      	subs	r4, r4, r5
 80002d6:	2100      	movs	r1, #0
 80002d8:	b11e      	cbz	r6, 80002e2 <__udivmoddi4+0xa2>
 80002da:	40dc      	lsrs	r4, r3
 80002dc:	2300      	movs	r3, #0
 80002de:	e9c6 4300 	strd	r4, r3, [r6]
 80002e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d908      	bls.n	80002fc <__udivmoddi4+0xbc>
 80002ea:	2e00      	cmp	r6, #0
 80002ec:	f000 80ed 	beq.w	80004ca <__udivmoddi4+0x28a>
 80002f0:	2100      	movs	r1, #0
 80002f2:	e9c6 0500 	strd	r0, r5, [r6]
 80002f6:	4608      	mov	r0, r1
 80002f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002fc:	fab3 f183 	clz	r1, r3
 8000300:	2900      	cmp	r1, #0
 8000302:	d149      	bne.n	8000398 <__udivmoddi4+0x158>
 8000304:	42ab      	cmp	r3, r5
 8000306:	d302      	bcc.n	800030e <__udivmoddi4+0xce>
 8000308:	4282      	cmp	r2, r0
 800030a:	f200 80f8 	bhi.w	80004fe <__udivmoddi4+0x2be>
 800030e:	1a84      	subs	r4, r0, r2
 8000310:	eb65 0203 	sbc.w	r2, r5, r3
 8000314:	2001      	movs	r0, #1
 8000316:	4617      	mov	r7, r2
 8000318:	2e00      	cmp	r6, #0
 800031a:	d0e2      	beq.n	80002e2 <__udivmoddi4+0xa2>
 800031c:	e9c6 4700 	strd	r4, r7, [r6]
 8000320:	e7df      	b.n	80002e2 <__udivmoddi4+0xa2>
 8000322:	b902      	cbnz	r2, 8000326 <__udivmoddi4+0xe6>
 8000324:	deff      	udf	#255	; 0xff
 8000326:	fab2 f382 	clz	r3, r2
 800032a:	2b00      	cmp	r3, #0
 800032c:	f040 8090 	bne.w	8000450 <__udivmoddi4+0x210>
 8000330:	1a8a      	subs	r2, r1, r2
 8000332:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000336:	fa1f fe8c 	uxth.w	lr, ip
 800033a:	2101      	movs	r1, #1
 800033c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000340:	fb07 2015 	mls	r0, r7, r5, r2
 8000344:	0c22      	lsrs	r2, r4, #16
 8000346:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800034a:	fb0e f005 	mul.w	r0, lr, r5
 800034e:	4290      	cmp	r0, r2
 8000350:	d908      	bls.n	8000364 <__udivmoddi4+0x124>
 8000352:	eb1c 0202 	adds.w	r2, ip, r2
 8000356:	f105 38ff 	add.w	r8, r5, #4294967295
 800035a:	d202      	bcs.n	8000362 <__udivmoddi4+0x122>
 800035c:	4290      	cmp	r0, r2
 800035e:	f200 80cb 	bhi.w	80004f8 <__udivmoddi4+0x2b8>
 8000362:	4645      	mov	r5, r8
 8000364:	1a12      	subs	r2, r2, r0
 8000366:	b2a4      	uxth	r4, r4
 8000368:	fbb2 f0f7 	udiv	r0, r2, r7
 800036c:	fb07 2210 	mls	r2, r7, r0, r2
 8000370:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000374:	fb0e fe00 	mul.w	lr, lr, r0
 8000378:	45a6      	cmp	lr, r4
 800037a:	d908      	bls.n	800038e <__udivmoddi4+0x14e>
 800037c:	eb1c 0404 	adds.w	r4, ip, r4
 8000380:	f100 32ff 	add.w	r2, r0, #4294967295
 8000384:	d202      	bcs.n	800038c <__udivmoddi4+0x14c>
 8000386:	45a6      	cmp	lr, r4
 8000388:	f200 80bb 	bhi.w	8000502 <__udivmoddi4+0x2c2>
 800038c:	4610      	mov	r0, r2
 800038e:	eba4 040e 	sub.w	r4, r4, lr
 8000392:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000396:	e79f      	b.n	80002d8 <__udivmoddi4+0x98>
 8000398:	f1c1 0720 	rsb	r7, r1, #32
 800039c:	408b      	lsls	r3, r1
 800039e:	fa22 fc07 	lsr.w	ip, r2, r7
 80003a2:	ea4c 0c03 	orr.w	ip, ip, r3
 80003a6:	fa05 f401 	lsl.w	r4, r5, r1
 80003aa:	fa20 f307 	lsr.w	r3, r0, r7
 80003ae:	40fd      	lsrs	r5, r7
 80003b0:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003b4:	4323      	orrs	r3, r4
 80003b6:	fbb5 f8f9 	udiv	r8, r5, r9
 80003ba:	fa1f fe8c 	uxth.w	lr, ip
 80003be:	fb09 5518 	mls	r5, r9, r8, r5
 80003c2:	0c1c      	lsrs	r4, r3, #16
 80003c4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003c8:	fb08 f50e 	mul.w	r5, r8, lr
 80003cc:	42a5      	cmp	r5, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	fa00 f001 	lsl.w	r0, r0, r1
 80003d6:	d90b      	bls.n	80003f0 <__udivmoddi4+0x1b0>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e0:	f080 8088 	bcs.w	80004f4 <__udivmoddi4+0x2b4>
 80003e4:	42a5      	cmp	r5, r4
 80003e6:	f240 8085 	bls.w	80004f4 <__udivmoddi4+0x2b4>
 80003ea:	f1a8 0802 	sub.w	r8, r8, #2
 80003ee:	4464      	add	r4, ip
 80003f0:	1b64      	subs	r4, r4, r5
 80003f2:	b29d      	uxth	r5, r3
 80003f4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f8:	fb09 4413 	mls	r4, r9, r3, r4
 80003fc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000400:	fb03 fe0e 	mul.w	lr, r3, lr
 8000404:	45a6      	cmp	lr, r4
 8000406:	d908      	bls.n	800041a <__udivmoddi4+0x1da>
 8000408:	eb1c 0404 	adds.w	r4, ip, r4
 800040c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000410:	d26c      	bcs.n	80004ec <__udivmoddi4+0x2ac>
 8000412:	45a6      	cmp	lr, r4
 8000414:	d96a      	bls.n	80004ec <__udivmoddi4+0x2ac>
 8000416:	3b02      	subs	r3, #2
 8000418:	4464      	add	r4, ip
 800041a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800041e:	fba3 9502 	umull	r9, r5, r3, r2
 8000422:	eba4 040e 	sub.w	r4, r4, lr
 8000426:	42ac      	cmp	r4, r5
 8000428:	46c8      	mov	r8, r9
 800042a:	46ae      	mov	lr, r5
 800042c:	d356      	bcc.n	80004dc <__udivmoddi4+0x29c>
 800042e:	d053      	beq.n	80004d8 <__udivmoddi4+0x298>
 8000430:	b156      	cbz	r6, 8000448 <__udivmoddi4+0x208>
 8000432:	ebb0 0208 	subs.w	r2, r0, r8
 8000436:	eb64 040e 	sbc.w	r4, r4, lr
 800043a:	fa04 f707 	lsl.w	r7, r4, r7
 800043e:	40ca      	lsrs	r2, r1
 8000440:	40cc      	lsrs	r4, r1
 8000442:	4317      	orrs	r7, r2
 8000444:	e9c6 7400 	strd	r7, r4, [r6]
 8000448:	4618      	mov	r0, r3
 800044a:	2100      	movs	r1, #0
 800044c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000450:	f1c3 0120 	rsb	r1, r3, #32
 8000454:	fa02 fc03 	lsl.w	ip, r2, r3
 8000458:	fa20 f201 	lsr.w	r2, r0, r1
 800045c:	fa25 f101 	lsr.w	r1, r5, r1
 8000460:	409d      	lsls	r5, r3
 8000462:	432a      	orrs	r2, r5
 8000464:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000470:	fb07 1510 	mls	r5, r7, r0, r1
 8000474:	0c11      	lsrs	r1, r2, #16
 8000476:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800047a:	fb00 f50e 	mul.w	r5, r0, lr
 800047e:	428d      	cmp	r5, r1
 8000480:	fa04 f403 	lsl.w	r4, r4, r3
 8000484:	d908      	bls.n	8000498 <__udivmoddi4+0x258>
 8000486:	eb1c 0101 	adds.w	r1, ip, r1
 800048a:	f100 38ff 	add.w	r8, r0, #4294967295
 800048e:	d22f      	bcs.n	80004f0 <__udivmoddi4+0x2b0>
 8000490:	428d      	cmp	r5, r1
 8000492:	d92d      	bls.n	80004f0 <__udivmoddi4+0x2b0>
 8000494:	3802      	subs	r0, #2
 8000496:	4461      	add	r1, ip
 8000498:	1b49      	subs	r1, r1, r5
 800049a:	b292      	uxth	r2, r2
 800049c:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a0:	fb07 1115 	mls	r1, r7, r5, r1
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	fb05 f10e 	mul.w	r1, r5, lr
 80004ac:	4291      	cmp	r1, r2
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x282>
 80004b0:	eb1c 0202 	adds.w	r2, ip, r2
 80004b4:	f105 38ff 	add.w	r8, r5, #4294967295
 80004b8:	d216      	bcs.n	80004e8 <__udivmoddi4+0x2a8>
 80004ba:	4291      	cmp	r1, r2
 80004bc:	d914      	bls.n	80004e8 <__udivmoddi4+0x2a8>
 80004be:	3d02      	subs	r5, #2
 80004c0:	4462      	add	r2, ip
 80004c2:	1a52      	subs	r2, r2, r1
 80004c4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004c8:	e738      	b.n	800033c <__udivmoddi4+0xfc>
 80004ca:	4631      	mov	r1, r6
 80004cc:	4630      	mov	r0, r6
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xa2>
 80004d0:	4639      	mov	r1, r7
 80004d2:	e6e6      	b.n	80002a2 <__udivmoddi4+0x62>
 80004d4:	4610      	mov	r0, r2
 80004d6:	e6fb      	b.n	80002d0 <__udivmoddi4+0x90>
 80004d8:	4548      	cmp	r0, r9
 80004da:	d2a9      	bcs.n	8000430 <__udivmoddi4+0x1f0>
 80004dc:	ebb9 0802 	subs.w	r8, r9, r2
 80004e0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004e4:	3b01      	subs	r3, #1
 80004e6:	e7a3      	b.n	8000430 <__udivmoddi4+0x1f0>
 80004e8:	4645      	mov	r5, r8
 80004ea:	e7ea      	b.n	80004c2 <__udivmoddi4+0x282>
 80004ec:	462b      	mov	r3, r5
 80004ee:	e794      	b.n	800041a <__udivmoddi4+0x1da>
 80004f0:	4640      	mov	r0, r8
 80004f2:	e7d1      	b.n	8000498 <__udivmoddi4+0x258>
 80004f4:	46d0      	mov	r8, sl
 80004f6:	e77b      	b.n	80003f0 <__udivmoddi4+0x1b0>
 80004f8:	3d02      	subs	r5, #2
 80004fa:	4462      	add	r2, ip
 80004fc:	e732      	b.n	8000364 <__udivmoddi4+0x124>
 80004fe:	4608      	mov	r0, r1
 8000500:	e70a      	b.n	8000318 <__udivmoddi4+0xd8>
 8000502:	4464      	add	r4, ip
 8000504:	3802      	subs	r0, #2
 8000506:	e742      	b.n	800038e <__udivmoddi4+0x14e>

08000508 <__aeabi_idiv0>:
 8000508:	4770      	bx	lr
 800050a:	bf00      	nop

0800050c <HAL_GPIO_EXTI_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800050c:	b580      	push	{r7, lr}
 800050e:	b082      	sub	sp, #8
 8000510:	af00      	add	r7, sp, #0
 8000512:	4603      	mov	r3, r0
 8000514:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
  if(GPIO_Pin==interruptButton_Pin){
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	2b40      	cmp	r3, #64	; 0x40
 800051a:	d117      	bne.n	800054c <HAL_GPIO_EXTI_Callback+0x40>
	  modeNum++;
 800051c:	4b1b      	ldr	r3, [pc, #108]	; (800058c <HAL_GPIO_EXTI_Callback+0x80>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	b2da      	uxtb	r2, r3
 8000524:	4b19      	ldr	r3, [pc, #100]	; (800058c <HAL_GPIO_EXTI_Callback+0x80>)
 8000526:	701a      	strb	r2, [r3, #0]
	  if(modeNum>1)modeNum=0;
 8000528:	4b18      	ldr	r3, [pc, #96]	; (800058c <HAL_GPIO_EXTI_Callback+0x80>)
 800052a:	781b      	ldrb	r3, [r3, #0]
 800052c:	2b01      	cmp	r3, #1
 800052e:	d902      	bls.n	8000536 <HAL_GPIO_EXTI_Callback+0x2a>
 8000530:	4b16      	ldr	r3, [pc, #88]	; (800058c <HAL_GPIO_EXTI_Callback+0x80>)
 8000532:	2200      	movs	r2, #0
 8000534:	701a      	strb	r2, [r3, #0]

	  HAL_GPIO_TogglePin(interruptLED_GPIO_Port, interruptLED_Pin);
 8000536:	2110      	movs	r1, #16
 8000538:	4815      	ldr	r0, [pc, #84]	; (8000590 <HAL_GPIO_EXTI_Callback+0x84>)
 800053a:	f001 fa32 	bl	80019a2 <HAL_GPIO_TogglePin>
      xSemaphoreGiveFromISR(screenChangeSem, NULL); // Give semaphore from interrupt
 800053e:	4b15      	ldr	r3, [pc, #84]	; (8000594 <HAL_GPIO_EXTI_Callback+0x88>)
 8000540:	681b      	ldr	r3, [r3, #0]
 8000542:	2100      	movs	r1, #0
 8000544:	4618      	mov	r0, r3
 8000546:	f004 fd66 	bl	8005016 <xQueueGiveFromISR>
	  	  HAL_GPIO_TogglePin(interruptButton2_GPIO_Port, interruptLED2_Pin);
	        xSemaphoreGiveFromISR(screenChangeSem, NULL); // Give semaphore from interrupt

  }

}
 800054a:	e01a      	b.n	8000582 <HAL_GPIO_EXTI_Callback+0x76>
  }else if(GPIO_Pin==interruptButton2_Pin){
 800054c:	88fb      	ldrh	r3, [r7, #6]
 800054e:	2b80      	cmp	r3, #128	; 0x80
 8000550:	d117      	bne.n	8000582 <HAL_GPIO_EXTI_Callback+0x76>
	  modeNum2++;
 8000552:	4b11      	ldr	r3, [pc, #68]	; (8000598 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000554:	781b      	ldrb	r3, [r3, #0]
 8000556:	3301      	adds	r3, #1
 8000558:	b2da      	uxtb	r2, r3
 800055a:	4b0f      	ldr	r3, [pc, #60]	; (8000598 <HAL_GPIO_EXTI_Callback+0x8c>)
 800055c:	701a      	strb	r2, [r3, #0]
	  	  if(modeNum2>1)modeNum2=0;
 800055e:	4b0e      	ldr	r3, [pc, #56]	; (8000598 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000560:	781b      	ldrb	r3, [r3, #0]
 8000562:	2b01      	cmp	r3, #1
 8000564:	d902      	bls.n	800056c <HAL_GPIO_EXTI_Callback+0x60>
 8000566:	4b0c      	ldr	r3, [pc, #48]	; (8000598 <HAL_GPIO_EXTI_Callback+0x8c>)
 8000568:	2200      	movs	r2, #0
 800056a:	701a      	strb	r2, [r3, #0]
	  	  HAL_GPIO_TogglePin(interruptButton2_GPIO_Port, interruptLED2_Pin);
 800056c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000570:	4807      	ldr	r0, [pc, #28]	; (8000590 <HAL_GPIO_EXTI_Callback+0x84>)
 8000572:	f001 fa16 	bl	80019a2 <HAL_GPIO_TogglePin>
	        xSemaphoreGiveFromISR(screenChangeSem, NULL); // Give semaphore from interrupt
 8000576:	4b07      	ldr	r3, [pc, #28]	; (8000594 <HAL_GPIO_EXTI_Callback+0x88>)
 8000578:	681b      	ldr	r3, [r3, #0]
 800057a:	2100      	movs	r1, #0
 800057c:	4618      	mov	r0, r3
 800057e:	f004 fd4a 	bl	8005016 <xQueueGiveFromISR>
}
 8000582:	bf00      	nop
 8000584:	3708      	adds	r7, #8
 8000586:	46bd      	mov	sp, r7
 8000588:	bd80      	pop	{r7, pc}
 800058a:	bf00      	nop
 800058c:	2000011c 	.word	0x2000011c
 8000590:	40020000 	.word	0x40020000
 8000594:	20000118 	.word	0x20000118
 8000598:	2000011d 	.word	0x2000011d

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 ff0a 	bl	80013b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f83c 	bl	8000620 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f000 f978 	bl	800089c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 f94c 	bl	8000848 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80005b0:	f000 f8a8 	bl	8000704 <MX_I2C1_Init>
  MX_TIM2_Init();
 80005b4:	f000 f8d4 	bl	8000760 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  ssd1306_Init();
 80005b8:	f000 fb76 	bl	8000ca8 <ssd1306_Init>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80005bc:	2100      	movs	r1, #0
 80005be:	4810      	ldr	r0, [pc, #64]	; (8000600 <main+0x64>)
 80005c0:	f002 fe54 	bl	800326c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80005c4:	f004 f870 	bl	80046a8 <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  screenChangeSem = xSemaphoreCreateBinary();
 80005c8:	2203      	movs	r2, #3
 80005ca:	2100      	movs	r1, #0
 80005cc:	2001      	movs	r0, #1
 80005ce:	f004 fb2b 	bl	8004c28 <xQueueGenericCreate>
 80005d2:	4603      	mov	r3, r0
 80005d4:	4a0b      	ldr	r2, [pc, #44]	; (8000604 <main+0x68>)
 80005d6:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of blinker */
  blinkerHandle = osThreadNew(StartBlinker, NULL, &blinker_attributes);
 80005d8:	4a0b      	ldr	r2, [pc, #44]	; (8000608 <main+0x6c>)
 80005da:	2100      	movs	r1, #0
 80005dc:	480b      	ldr	r0, [pc, #44]	; (800060c <main+0x70>)
 80005de:	f004 f8ad 	bl	800473c <osThreadNew>
 80005e2:	4603      	mov	r3, r0
 80005e4:	4a0a      	ldr	r2, [pc, #40]	; (8000610 <main+0x74>)
 80005e6:	6013      	str	r3, [r2, #0]

  /* creation of oled */
  oledHandle = osThreadNew(StartOled, NULL, &oled_attributes);
 80005e8:	4a0a      	ldr	r2, [pc, #40]	; (8000614 <main+0x78>)
 80005ea:	2100      	movs	r1, #0
 80005ec:	480a      	ldr	r0, [pc, #40]	; (8000618 <main+0x7c>)
 80005ee:	f004 f8a5 	bl	800473c <osThreadNew>
 80005f2:	4603      	mov	r3, r0
 80005f4:	4a09      	ldr	r2, [pc, #36]	; (800061c <main+0x80>)
 80005f6:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005f8:	f004 f87a 	bl	80046f0 <osKernelStart>
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  while (1)
 80005fc:	e7fe      	b.n	80005fc <main+0x60>
 80005fe:	bf00      	nop
 8000600:	20000080 	.word	0x20000080
 8000604:	20000118 	.word	0x20000118
 8000608:	080077d0 	.word	0x080077d0
 800060c:	080009d5 	.word	0x080009d5
 8000610:	20000110 	.word	0x20000110
 8000614:	080077f4 	.word	0x080077f4
 8000618:	08000a09 	.word	0x08000a09
 800061c:	20000114 	.word	0x20000114

08000620 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b094      	sub	sp, #80	; 0x50
 8000624:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000626:	f107 031c 	add.w	r3, r7, #28
 800062a:	2234      	movs	r2, #52	; 0x34
 800062c:	2100      	movs	r1, #0
 800062e:	4618      	mov	r0, r3
 8000630:	f007 f874 	bl	800771c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000634:	f107 0308 	add.w	r3, r7, #8
 8000638:	2200      	movs	r2, #0
 800063a:	601a      	str	r2, [r3, #0]
 800063c:	605a      	str	r2, [r3, #4]
 800063e:	609a      	str	r2, [r3, #8]
 8000640:	60da      	str	r2, [r3, #12]
 8000642:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000644:	2300      	movs	r3, #0
 8000646:	607b      	str	r3, [r7, #4]
 8000648:	4b2c      	ldr	r3, [pc, #176]	; (80006fc <SystemClock_Config+0xdc>)
 800064a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800064c:	4a2b      	ldr	r2, [pc, #172]	; (80006fc <SystemClock_Config+0xdc>)
 800064e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000652:	6413      	str	r3, [r2, #64]	; 0x40
 8000654:	4b29      	ldr	r3, [pc, #164]	; (80006fc <SystemClock_Config+0xdc>)
 8000656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000658:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800065c:	607b      	str	r3, [r7, #4]
 800065e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000660:	2300      	movs	r3, #0
 8000662:	603b      	str	r3, [r7, #0]
 8000664:	4b26      	ldr	r3, [pc, #152]	; (8000700 <SystemClock_Config+0xe0>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a25      	ldr	r2, [pc, #148]	; (8000700 <SystemClock_Config+0xe0>)
 800066a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800066e:	6013      	str	r3, [r2, #0]
 8000670:	4b23      	ldr	r3, [pc, #140]	; (8000700 <SystemClock_Config+0xe0>)
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000678:	603b      	str	r3, [r7, #0]
 800067a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800067c:	2302      	movs	r3, #2
 800067e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000680:	2301      	movs	r3, #1
 8000682:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000684:	2310      	movs	r3, #16
 8000686:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000688:	2302      	movs	r3, #2
 800068a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800068c:	2300      	movs	r3, #0
 800068e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000690:	2308      	movs	r3, #8
 8000692:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 180;
 8000694:	23b4      	movs	r3, #180	; 0xb4
 8000696:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000698:	2302      	movs	r3, #2
 800069a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800069c:	2302      	movs	r3, #2
 800069e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80006a0:	2302      	movs	r3, #2
 80006a2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a4:	f107 031c 	add.w	r3, r7, #28
 80006a8:	4618      	mov	r0, r3
 80006aa:	f002 fa27 	bl	8002afc <HAL_RCC_OscConfig>
 80006ae:	4603      	mov	r3, r0
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d001      	beq.n	80006b8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80006b4:	f000 faba 	bl	8000c2c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006b8:	f001 fe54 	bl	8002364 <HAL_PWREx_EnableOverDrive>
 80006bc:	4603      	mov	r3, r0
 80006be:	2b00      	cmp	r3, #0
 80006c0:	d001      	beq.n	80006c6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 80006c2:	f000 fab3 	bl	8000c2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006c6:	230f      	movs	r3, #15
 80006c8:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006ca:	2302      	movs	r3, #2
 80006cc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006ce:	2300      	movs	r3, #0
 80006d0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80006d2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80006d6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80006d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006dc:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006de:	f107 0308 	add.w	r3, r7, #8
 80006e2:	2105      	movs	r1, #5
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fe8d 	bl	8002404 <HAL_RCC_ClockConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 80006f0:	f000 fa9c 	bl	8000c2c <Error_Handler>
  }
}
 80006f4:	bf00      	nop
 80006f6:	3750      	adds	r7, #80	; 0x50
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40007000 	.word	0x40007000

08000704 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000708:	4b12      	ldr	r3, [pc, #72]	; (8000754 <MX_I2C1_Init+0x50>)
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <MX_I2C1_Init+0x54>)
 800070c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <MX_I2C1_Init+0x50>)
 8000710:	4a12      	ldr	r2, [pc, #72]	; (800075c <MX_I2C1_Init+0x58>)
 8000712:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000714:	4b0f      	ldr	r3, [pc, #60]	; (8000754 <MX_I2C1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <MX_I2C1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000720:	4b0c      	ldr	r3, [pc, #48]	; (8000754 <MX_I2C1_Init+0x50>)
 8000722:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000726:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000728:	4b0a      	ldr	r3, [pc, #40]	; (8000754 <MX_I2C1_Init+0x50>)
 800072a:	2200      	movs	r2, #0
 800072c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800072e:	4b09      	ldr	r3, [pc, #36]	; (8000754 <MX_I2C1_Init+0x50>)
 8000730:	2200      	movs	r2, #0
 8000732:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000734:	4b07      	ldr	r3, [pc, #28]	; (8000754 <MX_I2C1_Init+0x50>)
 8000736:	2200      	movs	r2, #0
 8000738:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800073a:	4b06      	ldr	r3, [pc, #24]	; (8000754 <MX_I2C1_Init+0x50>)
 800073c:	2200      	movs	r2, #0
 800073e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000740:	4804      	ldr	r0, [pc, #16]	; (8000754 <MX_I2C1_Init+0x50>)
 8000742:	f001 f961 	bl	8001a08 <HAL_I2C_Init>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d001      	beq.n	8000750 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800074c:	f000 fa6e 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000750:	bf00      	nop
 8000752:	bd80      	pop	{r7, pc}
 8000754:	2000002c 	.word	0x2000002c
 8000758:	40005400 	.word	0x40005400
 800075c:	00061a80 	.word	0x00061a80

08000760 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	b08e      	sub	sp, #56	; 0x38
 8000764:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000766:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
 800076e:	605a      	str	r2, [r3, #4]
 8000770:	609a      	str	r2, [r3, #8]
 8000772:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000774:	f107 0320 	add.w	r3, r7, #32
 8000778:	2200      	movs	r2, #0
 800077a:	601a      	str	r2, [r3, #0]
 800077c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800077e:	1d3b      	adds	r3, r7, #4
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]
 800078c:	615a      	str	r2, [r3, #20]
 800078e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000790:	4b2c      	ldr	r3, [pc, #176]	; (8000844 <MX_TIM2_Init+0xe4>)
 8000792:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000796:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000798:	4b2a      	ldr	r3, [pc, #168]	; (8000844 <MX_TIM2_Init+0xe4>)
 800079a:	2200      	movs	r2, #0
 800079c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800079e:	4b29      	ldr	r3, [pc, #164]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 255;
 80007a4:	4b27      	ldr	r3, [pc, #156]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007a6:	22ff      	movs	r2, #255	; 0xff
 80007a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80007aa:	4b26      	ldr	r3, [pc, #152]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80007b0:	4b24      	ldr	r3, [pc, #144]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007b2:	2280      	movs	r2, #128	; 0x80
 80007b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80007b6:	4823      	ldr	r0, [pc, #140]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007b8:	f002 fc3e 	bl	8003038 <HAL_TIM_Base_Init>
 80007bc:	4603      	mov	r3, r0
 80007be:	2b00      	cmp	r3, #0
 80007c0:	d001      	beq.n	80007c6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80007c2:	f000 fa33 	bl	8000c2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007c6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80007cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007d0:	4619      	mov	r1, r3
 80007d2:	481c      	ldr	r0, [pc, #112]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007d4:	f002 ffc4 	bl	8003760 <HAL_TIM_ConfigClockSource>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80007de:	f000 fa25 	bl	8000c2c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007e2:	4818      	ldr	r0, [pc, #96]	; (8000844 <MX_TIM2_Init+0xe4>)
 80007e4:	f002 fce8 	bl	80031b8 <HAL_TIM_PWM_Init>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80007ee:	f000 fa1d 	bl	8000c2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007f2:	2300      	movs	r3, #0
 80007f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007f6:	2300      	movs	r3, #0
 80007f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007fa:	f107 0320 	add.w	r3, r7, #32
 80007fe:	4619      	mov	r1, r3
 8000800:	4810      	ldr	r0, [pc, #64]	; (8000844 <MX_TIM2_Init+0xe4>)
 8000802:	f003 fbb9 	bl	8003f78 <HAL_TIMEx_MasterConfigSynchronization>
 8000806:	4603      	mov	r3, r0
 8000808:	2b00      	cmp	r3, #0
 800080a:	d001      	beq.n	8000810 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800080c:	f000 fa0e 	bl	8000c2c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000810:	2360      	movs	r3, #96	; 0x60
 8000812:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 123;
 8000814:	237b      	movs	r3, #123	; 0x7b
 8000816:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000818:	2300      	movs	r3, #0
 800081a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000820:	1d3b      	adds	r3, r7, #4
 8000822:	2200      	movs	r2, #0
 8000824:	4619      	mov	r1, r3
 8000826:	4807      	ldr	r0, [pc, #28]	; (8000844 <MX_TIM2_Init+0xe4>)
 8000828:	f002 fed8 	bl	80035dc <HAL_TIM_PWM_ConfigChannel>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000832:	f000 f9fb 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000836:	4803      	ldr	r0, [pc, #12]	; (8000844 <MX_TIM2_Init+0xe4>)
 8000838:	f000 fc54 	bl	80010e4 <HAL_TIM_MspPostInit>

}
 800083c:	bf00      	nop
 800083e:	3738      	adds	r7, #56	; 0x38
 8000840:	46bd      	mov	sp, r7
 8000842:	bd80      	pop	{r7, pc}
 8000844:	20000080 	.word	0x20000080

08000848 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800084e:	4a12      	ldr	r2, [pc, #72]	; (8000898 <MX_USART2_UART_Init+0x50>)
 8000850:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000852:	4b10      	ldr	r3, [pc, #64]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000854:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000858:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800085a:	4b0e      	ldr	r3, [pc, #56]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000862:	2200      	movs	r2, #0
 8000864:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000866:	4b0b      	ldr	r3, [pc, #44]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800086c:	4b09      	ldr	r3, [pc, #36]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800086e:	220c      	movs	r2, #12
 8000870:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000872:	4b08      	ldr	r3, [pc, #32]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000874:	2200      	movs	r2, #0
 8000876:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000878:	4b06      	ldr	r3, [pc, #24]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 800087a:	2200      	movs	r2, #0
 800087c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800087e:	4805      	ldr	r0, [pc, #20]	; (8000894 <MX_USART2_UART_Init+0x4c>)
 8000880:	f003 fc0a 	bl	8004098 <HAL_UART_Init>
 8000884:	4603      	mov	r3, r0
 8000886:	2b00      	cmp	r3, #0
 8000888:	d001      	beq.n	800088e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800088a:	f000 f9cf 	bl	8000c2c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	200000c8 	.word	0x200000c8
 8000898:	40004400 	.word	0x40004400

0800089c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a2:	f107 0314 	add.w	r3, r7, #20
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
 80008ae:	60da      	str	r2, [r3, #12]
 80008b0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	613b      	str	r3, [r7, #16]
 80008b6:	4b43      	ldr	r3, [pc, #268]	; (80009c4 <MX_GPIO_Init+0x128>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a42      	ldr	r2, [pc, #264]	; (80009c4 <MX_GPIO_Init+0x128>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b40      	ldr	r3, [pc, #256]	; (80009c4 <MX_GPIO_Init+0x128>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	613b      	str	r3, [r7, #16]
 80008cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	4b3c      	ldr	r3, [pc, #240]	; (80009c4 <MX_GPIO_Init+0x128>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d6:	4a3b      	ldr	r2, [pc, #236]	; (80009c4 <MX_GPIO_Init+0x128>)
 80008d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008dc:	6313      	str	r3, [r2, #48]	; 0x30
 80008de:	4b39      	ldr	r3, [pc, #228]	; (80009c4 <MX_GPIO_Init+0x128>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e6:	60fb      	str	r3, [r7, #12]
 80008e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60bb      	str	r3, [r7, #8]
 80008ee:	4b35      	ldr	r3, [pc, #212]	; (80009c4 <MX_GPIO_Init+0x128>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f2:	4a34      	ldr	r2, [pc, #208]	; (80009c4 <MX_GPIO_Init+0x128>)
 80008f4:	f043 0301 	orr.w	r3, r3, #1
 80008f8:	6313      	str	r3, [r2, #48]	; 0x30
 80008fa:	4b32      	ldr	r3, [pc, #200]	; (80009c4 <MX_GPIO_Init+0x128>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fe:	f003 0301 	and.w	r3, r3, #1
 8000902:	60bb      	str	r3, [r7, #8]
 8000904:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	607b      	str	r3, [r7, #4]
 800090a:	4b2e      	ldr	r3, [pc, #184]	; (80009c4 <MX_GPIO_Init+0x128>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	4a2d      	ldr	r2, [pc, #180]	; (80009c4 <MX_GPIO_Init+0x128>)
 8000910:	f043 0302 	orr.w	r3, r3, #2
 8000914:	6313      	str	r3, [r2, #48]	; 0x30
 8000916:	4b2b      	ldr	r3, [pc, #172]	; (80009c4 <MX_GPIO_Init+0x128>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	f003 0302 	and.w	r3, r3, #2
 800091e:	607b      	str	r3, [r7, #4]
 8000920:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, interruptLED_Pin|LD2_Pin|GPIO_PIN_8|interruptLED2_Pin, GPIO_PIN_RESET);
 8000922:	2200      	movs	r2, #0
 8000924:	f241 1130 	movw	r1, #4400	; 0x1130
 8000928:	4827      	ldr	r0, [pc, #156]	; (80009c8 <MX_GPIO_Init+0x12c>)
 800092a:	f001 f821 	bl	8001970 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800092e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000932:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000934:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000938:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 0314 	add.w	r3, r7, #20
 8000942:	4619      	mov	r1, r3
 8000944:	4821      	ldr	r0, [pc, #132]	; (80009cc <MX_GPIO_Init+0x130>)
 8000946:	f000 fe7f 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : interruptLED_Pin LD2_Pin PA8 interruptLED2_Pin */
  GPIO_InitStruct.Pin = interruptLED_Pin|LD2_Pin|GPIO_PIN_8|interruptLED2_Pin;
 800094a:	f241 1330 	movw	r3, #4400	; 0x1130
 800094e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000950:	2301      	movs	r3, #1
 8000952:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000954:	2300      	movs	r3, #0
 8000956:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800095c:	f107 0314 	add.w	r3, r7, #20
 8000960:	4619      	mov	r1, r3
 8000962:	4819      	ldr	r0, [pc, #100]	; (80009c8 <MX_GPIO_Init+0x12c>)
 8000964:	f000 fe70 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pins : interruptButton_Pin interruptButton2_Pin */
  GPIO_InitStruct.Pin = interruptButton_Pin|interruptButton2_Pin;
 8000968:	23c0      	movs	r3, #192	; 0xc0
 800096a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800096c:	f44f 1344 	mov.w	r3, #3211264	; 0x310000
 8000970:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000972:	2300      	movs	r3, #0
 8000974:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000976:	f107 0314 	add.w	r3, r7, #20
 800097a:	4619      	mov	r1, r3
 800097c:	4812      	ldr	r0, [pc, #72]	; (80009c8 <MX_GPIO_Init+0x12c>)
 800097e:	f000 fe63 	bl	8001648 <HAL_GPIO_Init>

  /*Configure GPIO pin : myButtonPin2_Pin */
  GPIO_InitStruct.Pin = myButtonPin2_Pin;
 8000982:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800098c:	2301      	movs	r3, #1
 800098e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(myButtonPin2_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	480e      	ldr	r0, [pc, #56]	; (80009d0 <MX_GPIO_Init+0x134>)
 8000998:	f000 fe56 	bl	8001648 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 5, 0);
 800099c:	2200      	movs	r2, #0
 800099e:	2105      	movs	r1, #5
 80009a0:	2017      	movs	r0, #23
 80009a2:	f000 fe27 	bl	80015f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80009a6:	2017      	movs	r0, #23
 80009a8:	f000 fe40 	bl	800162c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 80009ac:	2200      	movs	r2, #0
 80009ae:	2105      	movs	r1, #5
 80009b0:	2028      	movs	r0, #40	; 0x28
 80009b2:	f000 fe1f 	bl	80015f4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009b6:	2028      	movs	r0, #40	; 0x28
 80009b8:	f000 fe38 	bl	800162c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80009bc:	bf00      	nop
 80009be:	3728      	adds	r7, #40	; 0x28
 80009c0:	46bd      	mov	sp, r7
 80009c2:	bd80      	pop	{r7, pc}
 80009c4:	40023800 	.word	0x40023800
 80009c8:	40020000 	.word	0x40020000
 80009cc:	40020800 	.word	0x40020800
 80009d0:	40020400 	.word	0x40020400

080009d4 <StartBlinker>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartBlinker */
void StartBlinker(void *argument)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b084      	sub	sp, #16
 80009d8:	af00      	add	r7, sp, #0
 80009da:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	int pulse=0;
 80009dc:	2300      	movs	r3, #0
 80009de:	60fb      	str	r3, [r7, #12]
//	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
//	      osDelay(500);
//	      HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 0);
//	  	  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8, 0);
//	  	  osDelay(500);
	        pulse++;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	3301      	adds	r3, #1
 80009e4:	60fb      	str	r3, [r7, #12]
	        if(pulse/256==1)pulse=0;
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 80009ec:	2bff      	cmp	r3, #255	; 0xff
 80009ee:	d801      	bhi.n	80009f4 <StartBlinker+0x20>
 80009f0:	2300      	movs	r3, #0
 80009f2:	60fb      	str	r3, [r7, #12]
	        __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,pulse);
 80009f4:	4b03      	ldr	r3, [pc, #12]	; (8000a04 <StartBlinker+0x30>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	68fa      	ldr	r2, [r7, #12]
 80009fa:	635a      	str	r2, [r3, #52]	; 0x34
	        osDelay(10);
 80009fc:	200a      	movs	r0, #10
 80009fe:	f003 ff2f 	bl	8004860 <osDelay>
	        pulse++;
 8000a02:	e7ed      	b.n	80009e0 <StartBlinker+0xc>
 8000a04:	20000080 	.word	0x20000080

08000a08 <StartOled>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartOled */
void StartOled(void *argument)
{
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b084      	sub	sp, #16
 8000a0c:	af02      	add	r7, sp, #8
 8000a0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartOled */
  /* Infinite loop */
  for(;;)
  {
	  if (xSemaphoreTake(screenChangeSem, portMAX_DELAY)){
 8000a10:	4b74      	ldr	r3, [pc, #464]	; (8000be4 <StartOled+0x1dc>)
 8000a12:	681b      	ldr	r3, [r3, #0]
 8000a14:	f04f 31ff 	mov.w	r1, #4294967295
 8000a18:	4618      	mov	r0, r3
 8000a1a:	f004 fc69 	bl	80052f0 <xQueueSemaphoreTake>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d011      	beq.n	8000a48 <StartOled+0x40>
	  ssd1306_Fill(Black);
 8000a24:	2000      	movs	r0, #0
 8000a26:	f000 f9a9 	bl	8000d7c <ssd1306_Fill>
	      ssd1306_DrawBitmap(0,0,epd_bitmap_catFrame0,128,64,White);
 8000a2a:	2301      	movs	r3, #1
 8000a2c:	9301      	str	r3, [sp, #4]
 8000a2e:	2340      	movs	r3, #64	; 0x40
 8000a30:	9300      	str	r3, [sp, #0]
 8000a32:	2380      	movs	r3, #128	; 0x80
 8000a34:	4a6c      	ldr	r2, [pc, #432]	; (8000be8 <StartOled+0x1e0>)
 8000a36:	2100      	movs	r1, #0
 8000a38:	2000      	movs	r0, #0
 8000a3a:	f000 fa33 	bl	8000ea4 <ssd1306_DrawBitmap>
	      osDelay(10);
 8000a3e:	200a      	movs	r0, #10
 8000a40:	f003 ff0e 	bl	8004860 <osDelay>
	      ssd1306_UpdateScreen();
 8000a44:	f000 f9b2 	bl	8000dac <ssd1306_UpdateScreen>
	  }if (xSemaphoreTake(screenChangeSem, portMAX_DELAY)){
 8000a48:	4b66      	ldr	r3, [pc, #408]	; (8000be4 <StartOled+0x1dc>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8000a50:	4618      	mov	r0, r3
 8000a52:	f004 fc4d 	bl	80052f0 <xQueueSemaphoreTake>
 8000a56:	4603      	mov	r3, r0
 8000a58:	2b00      	cmp	r3, #0
 8000a5a:	d018      	beq.n	8000a8e <StartOled+0x86>
	      xSemaphoreTake(screenChangeSem, portMAX_DELAY);
 8000a5c:	4b61      	ldr	r3, [pc, #388]	; (8000be4 <StartOled+0x1dc>)
 8000a5e:	681b      	ldr	r3, [r3, #0]
 8000a60:	f04f 31ff 	mov.w	r1, #4294967295
 8000a64:	4618      	mov	r0, r3
 8000a66:	f004 fc43 	bl	80052f0 <xQueueSemaphoreTake>
	      ssd1306_Fill(Black);
 8000a6a:	2000      	movs	r0, #0
 8000a6c:	f000 f986 	bl	8000d7c <ssd1306_Fill>
	          ssd1306_DrawBitmap(0,0,epd_bitmap_catFrame1,128,64,White);
 8000a70:	2301      	movs	r3, #1
 8000a72:	9301      	str	r3, [sp, #4]
 8000a74:	2340      	movs	r3, #64	; 0x40
 8000a76:	9300      	str	r3, [sp, #0]
 8000a78:	2380      	movs	r3, #128	; 0x80
 8000a7a:	4a5c      	ldr	r2, [pc, #368]	; (8000bec <StartOled+0x1e4>)
 8000a7c:	2100      	movs	r1, #0
 8000a7e:	2000      	movs	r0, #0
 8000a80:	f000 fa10 	bl	8000ea4 <ssd1306_DrawBitmap>
	          osDelay(10);
 8000a84:	200a      	movs	r0, #10
 8000a86:	f003 feeb 	bl	8004860 <osDelay>
	          ssd1306_UpdateScreen();
 8000a8a:	f000 f98f 	bl	8000dac <ssd1306_UpdateScreen>

	  }if (xSemaphoreTake(screenChangeSem, portMAX_DELAY)){
 8000a8e:	4b55      	ldr	r3, [pc, #340]	; (8000be4 <StartOled+0x1dc>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f04f 31ff 	mov.w	r1, #4294967295
 8000a96:	4618      	mov	r0, r3
 8000a98:	f004 fc2a 	bl	80052f0 <xQueueSemaphoreTake>
 8000a9c:	4603      	mov	r3, r0
 8000a9e:	2b00      	cmp	r3, #0
 8000aa0:	d011      	beq.n	8000ac6 <StartOled+0xbe>
	          ssd1306_Fill(Black);
 8000aa2:	2000      	movs	r0, #0
 8000aa4:	f000 f96a 	bl	8000d7c <ssd1306_Fill>
	              ssd1306_DrawBitmap(0,0,epd_bitmap_catFrame2,128,64,White);
 8000aa8:	2301      	movs	r3, #1
 8000aaa:	9301      	str	r3, [sp, #4]
 8000aac:	2340      	movs	r3, #64	; 0x40
 8000aae:	9300      	str	r3, [sp, #0]
 8000ab0:	2380      	movs	r3, #128	; 0x80
 8000ab2:	4a4f      	ldr	r2, [pc, #316]	; (8000bf0 <StartOled+0x1e8>)
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f000 f9f4 	bl	8000ea4 <ssd1306_DrawBitmap>
	              osDelay(10);
 8000abc:	200a      	movs	r0, #10
 8000abe:	f003 fecf 	bl	8004860 <osDelay>
	              ssd1306_UpdateScreen();
 8000ac2:	f000 f973 	bl	8000dac <ssd1306_UpdateScreen>

	  }if (xSemaphoreTake(screenChangeSem, portMAX_DELAY)){
 8000ac6:	4b47      	ldr	r3, [pc, #284]	; (8000be4 <StartOled+0x1dc>)
 8000ac8:	681b      	ldr	r3, [r3, #0]
 8000aca:	f04f 31ff 	mov.w	r1, #4294967295
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f004 fc0e 	bl	80052f0 <xQueueSemaphoreTake>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d011      	beq.n	8000afe <StartOled+0xf6>
	              ssd1306_Fill(Black);
 8000ada:	2000      	movs	r0, #0
 8000adc:	f000 f94e 	bl	8000d7c <ssd1306_Fill>
	                  ssd1306_DrawBitmap(0,0,epd_bitmap_catFrame3,128,64,White);
 8000ae0:	2301      	movs	r3, #1
 8000ae2:	9301      	str	r3, [sp, #4]
 8000ae4:	2340      	movs	r3, #64	; 0x40
 8000ae6:	9300      	str	r3, [sp, #0]
 8000ae8:	2380      	movs	r3, #128	; 0x80
 8000aea:	4a42      	ldr	r2, [pc, #264]	; (8000bf4 <StartOled+0x1ec>)
 8000aec:	2100      	movs	r1, #0
 8000aee:	2000      	movs	r0, #0
 8000af0:	f000 f9d8 	bl	8000ea4 <ssd1306_DrawBitmap>
	                  osDelay(10);
 8000af4:	200a      	movs	r0, #10
 8000af6:	f003 feb3 	bl	8004860 <osDelay>
	                  ssd1306_UpdateScreen();
 8000afa:	f000 f957 	bl	8000dac <ssd1306_UpdateScreen>

	  }if (xSemaphoreTake(screenChangeSem, portMAX_DELAY)){
 8000afe:	4b39      	ldr	r3, [pc, #228]	; (8000be4 <StartOled+0x1dc>)
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	f04f 31ff 	mov.w	r1, #4294967295
 8000b06:	4618      	mov	r0, r3
 8000b08:	f004 fbf2 	bl	80052f0 <xQueueSemaphoreTake>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b00      	cmp	r3, #0
 8000b10:	d011      	beq.n	8000b36 <StartOled+0x12e>
	                  ssd1306_Fill(Black);
 8000b12:	2000      	movs	r0, #0
 8000b14:	f000 f932 	bl	8000d7c <ssd1306_Fill>
	                      ssd1306_DrawBitmap(0,0,epd_bitmap_catFrame4,128,64,White);
 8000b18:	2301      	movs	r3, #1
 8000b1a:	9301      	str	r3, [sp, #4]
 8000b1c:	2340      	movs	r3, #64	; 0x40
 8000b1e:	9300      	str	r3, [sp, #0]
 8000b20:	2380      	movs	r3, #128	; 0x80
 8000b22:	4a35      	ldr	r2, [pc, #212]	; (8000bf8 <StartOled+0x1f0>)
 8000b24:	2100      	movs	r1, #0
 8000b26:	2000      	movs	r0, #0
 8000b28:	f000 f9bc 	bl	8000ea4 <ssd1306_DrawBitmap>
	                      osDelay(10);
 8000b2c:	200a      	movs	r0, #10
 8000b2e:	f003 fe97 	bl	8004860 <osDelay>
	                      ssd1306_UpdateScreen();
 8000b32:	f000 f93b 	bl	8000dac <ssd1306_UpdateScreen>
	  }if (xSemaphoreTake(screenChangeSem, portMAX_DELAY)){
 8000b36:	4b2b      	ldr	r3, [pc, #172]	; (8000be4 <StartOled+0x1dc>)
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	f04f 31ff 	mov.w	r1, #4294967295
 8000b3e:	4618      	mov	r0, r3
 8000b40:	f004 fbd6 	bl	80052f0 <xQueueSemaphoreTake>
 8000b44:	4603      	mov	r3, r0
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d011      	beq.n	8000b6e <StartOled+0x166>
	                      ssd1306_Fill(Black);
 8000b4a:	2000      	movs	r0, #0
 8000b4c:	f000 f916 	bl	8000d7c <ssd1306_Fill>
	                          ssd1306_DrawBitmap(0,0,epd_bitmap_catFrame5,128,64,White);
 8000b50:	2301      	movs	r3, #1
 8000b52:	9301      	str	r3, [sp, #4]
 8000b54:	2340      	movs	r3, #64	; 0x40
 8000b56:	9300      	str	r3, [sp, #0]
 8000b58:	2380      	movs	r3, #128	; 0x80
 8000b5a:	4a28      	ldr	r2, [pc, #160]	; (8000bfc <StartOled+0x1f4>)
 8000b5c:	2100      	movs	r1, #0
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f000 f9a0 	bl	8000ea4 <ssd1306_DrawBitmap>
	                          osDelay(100);
 8000b64:	2064      	movs	r0, #100	; 0x64
 8000b66:	f003 fe7b 	bl	8004860 <osDelay>
	                          ssd1306_UpdateScreen();
 8000b6a:	f000 f91f 	bl	8000dac <ssd1306_UpdateScreen>
	  }if (xSemaphoreTake(screenChangeSem, portMAX_DELAY)){
 8000b6e:	4b1d      	ldr	r3, [pc, #116]	; (8000be4 <StartOled+0x1dc>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	f04f 31ff 	mov.w	r1, #4294967295
 8000b76:	4618      	mov	r0, r3
 8000b78:	f004 fbba 	bl	80052f0 <xQueueSemaphoreTake>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d011      	beq.n	8000ba6 <StartOled+0x19e>
	                          ssd1306_Fill(Black);
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 f8fa 	bl	8000d7c <ssd1306_Fill>
	                              ssd1306_DrawBitmap(0,0,epd_bitmap_catFrame6,128,64,White);
 8000b88:	2301      	movs	r3, #1
 8000b8a:	9301      	str	r3, [sp, #4]
 8000b8c:	2340      	movs	r3, #64	; 0x40
 8000b8e:	9300      	str	r3, [sp, #0]
 8000b90:	2380      	movs	r3, #128	; 0x80
 8000b92:	4a1b      	ldr	r2, [pc, #108]	; (8000c00 <StartOled+0x1f8>)
 8000b94:	2100      	movs	r1, #0
 8000b96:	2000      	movs	r0, #0
 8000b98:	f000 f984 	bl	8000ea4 <ssd1306_DrawBitmap>
	                              osDelay(100);
 8000b9c:	2064      	movs	r0, #100	; 0x64
 8000b9e:	f003 fe5f 	bl	8004860 <osDelay>
	                              ssd1306_UpdateScreen();
 8000ba2:	f000 f903 	bl	8000dac <ssd1306_UpdateScreen>
	  }if (xSemaphoreTake(screenChangeSem, portMAX_DELAY)){
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <StartOled+0x1dc>)
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	f04f 31ff 	mov.w	r1, #4294967295
 8000bae:	4618      	mov	r0, r3
 8000bb0:	f004 fb9e 	bl	80052f0 <xQueueSemaphoreTake>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	f43f af2a 	beq.w	8000a10 <StartOled+0x8>
	                              ssd1306_Fill(Black);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 f8dd 	bl	8000d7c <ssd1306_Fill>
	                                  ssd1306_DrawBitmap(0,0,epd_bitmap_catFrame7,128,64,White);
 8000bc2:	2301      	movs	r3, #1
 8000bc4:	9301      	str	r3, [sp, #4]
 8000bc6:	2340      	movs	r3, #64	; 0x40
 8000bc8:	9300      	str	r3, [sp, #0]
 8000bca:	2380      	movs	r3, #128	; 0x80
 8000bcc:	4a0d      	ldr	r2, [pc, #52]	; (8000c04 <StartOled+0x1fc>)
 8000bce:	2100      	movs	r1, #0
 8000bd0:	2000      	movs	r0, #0
 8000bd2:	f000 f967 	bl	8000ea4 <ssd1306_DrawBitmap>
	                                  osDelay(100);
 8000bd6:	2064      	movs	r0, #100	; 0x64
 8000bd8:	f003 fe42 	bl	8004860 <osDelay>
	                                  ssd1306_UpdateScreen();
 8000bdc:	f000 f8e6 	bl	8000dac <ssd1306_UpdateScreen>
	  if (xSemaphoreTake(screenChangeSem, portMAX_DELAY)){
 8000be0:	e716      	b.n	8000a10 <StartOled+0x8>
 8000be2:	bf00      	nop
 8000be4:	20000118 	.word	0x20000118
 8000be8:	08007818 	.word	0x08007818
 8000bec:	08007c18 	.word	0x08007c18
 8000bf0:	08008418 	.word	0x08008418
 8000bf4:	08008018 	.word	0x08008018
 8000bf8:	08008818 	.word	0x08008818
 8000bfc:	08009418 	.word	0x08009418
 8000c00:	08009018 	.word	0x08009018
 8000c04:	08008c18 	.word	0x08008c18

08000c08 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b082      	sub	sp, #8
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	681b      	ldr	r3, [r3, #0]
 8000c14:	4a04      	ldr	r2, [pc, #16]	; (8000c28 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c16:	4293      	cmp	r3, r2
 8000c18:	d101      	bne.n	8000c1e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c1a:	f000 fbef 	bl	80013fc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	3708      	adds	r7, #8
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	40001000 	.word	0x40001000

08000c2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c30:	b672      	cpsid	i
}
 8000c32:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c34:	e7fe      	b.n	8000c34 <Error_Handler+0x8>

08000c36 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8000c36:	b480      	push	{r7}
 8000c38:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8000c3a:	bf00      	nop
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c42:	4770      	bx	lr

08000c44 <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	b086      	sub	sp, #24
 8000c48:	af04      	add	r7, sp, #16
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8000c4e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c52:	9302      	str	r3, [sp, #8]
 8000c54:	2301      	movs	r3, #1
 8000c56:	9301      	str	r3, [sp, #4]
 8000c58:	1dfb      	adds	r3, r7, #7
 8000c5a:	9300      	str	r3, [sp, #0]
 8000c5c:	2301      	movs	r3, #1
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2178      	movs	r1, #120	; 0x78
 8000c62:	4803      	ldr	r0, [pc, #12]	; (8000c70 <ssd1306_WriteCommand+0x2c>)
 8000c64:	f001 f814 	bl	8001c90 <HAL_I2C_Mem_Write>
}
 8000c68:	bf00      	nop
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	2000002c 	.word	0x2000002c

08000c74 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b086      	sub	sp, #24
 8000c78:	af04      	add	r7, sp, #16
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	b29b      	uxth	r3, r3
 8000c82:	f04f 32ff 	mov.w	r2, #4294967295
 8000c86:	9202      	str	r2, [sp, #8]
 8000c88:	9301      	str	r3, [sp, #4]
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	9300      	str	r3, [sp, #0]
 8000c8e:	2301      	movs	r3, #1
 8000c90:	2240      	movs	r2, #64	; 0x40
 8000c92:	2178      	movs	r1, #120	; 0x78
 8000c94:	4803      	ldr	r0, [pc, #12]	; (8000ca4 <ssd1306_WriteData+0x30>)
 8000c96:	f000 fffb 	bl	8001c90 <HAL_I2C_Mem_Write>
}
 8000c9a:	bf00      	nop
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
 8000ca2:	bf00      	nop
 8000ca4:	2000002c 	.word	0x2000002c

08000ca8 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8000cac:	f7ff ffc3 	bl	8000c36 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8000cb0:	2064      	movs	r0, #100	; 0x64
 8000cb2:	f000 fbc3 	bl	800143c <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	f000 f962 	bl	8000f80 <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8000cbc:	2020      	movs	r0, #32
 8000cbe:	f7ff ffc1 	bl	8000c44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8000cc2:	2000      	movs	r0, #0
 8000cc4:	f7ff ffbe 	bl	8000c44 <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8000cc8:	20b0      	movs	r0, #176	; 0xb0
 8000cca:	f7ff ffbb 	bl	8000c44 <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
 8000cce:	20c8      	movs	r0, #200	; 0xc8
 8000cd0:	f7ff ffb8 	bl	8000c44 <ssd1306_WriteCommand>
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8000cd4:	2000      	movs	r0, #0
 8000cd6:	f7ff ffb5 	bl	8000c44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8000cda:	2010      	movs	r0, #16
 8000cdc:	f7ff ffb2 	bl	8000c44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8000ce0:	2040      	movs	r0, #64	; 0x40
 8000ce2:	f7ff ffaf 	bl	8000c44 <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8000ce6:	20ff      	movs	r0, #255	; 0xff
 8000ce8:	f000 f937 	bl	8000f5a <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
#else
    ssd1306_WriteCommand(0xA1); //--set segment re-map 0 to 127 - CHECK
 8000cec:	20a1      	movs	r0, #161	; 0xa1
 8000cee:	f7ff ffa9 	bl	8000c44 <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8000cf2:	20a6      	movs	r0, #166	; 0xa6
 8000cf4:	f7ff ffa6 	bl	8000c44 <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8000cf8:	20a8      	movs	r0, #168	; 0xa8
 8000cfa:	f7ff ffa3 	bl	8000c44 <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x3F); //
 8000cfe:	203f      	movs	r0, #63	; 0x3f
 8000d00:	f7ff ffa0 	bl	8000c44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8000d04:	20a4      	movs	r0, #164	; 0xa4
 8000d06:	f7ff ff9d 	bl	8000c44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8000d0a:	20d3      	movs	r0, #211	; 0xd3
 8000d0c:	f7ff ff9a 	bl	8000c44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8000d10:	2000      	movs	r0, #0
 8000d12:	f7ff ff97 	bl	8000c44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 8000d16:	20d5      	movs	r0, #213	; 0xd5
 8000d18:	f7ff ff94 	bl	8000c44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8000d1c:	20f0      	movs	r0, #240	; 0xf0
 8000d1e:	f7ff ff91 	bl	8000c44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 8000d22:	20d9      	movs	r0, #217	; 0xd9
 8000d24:	f7ff ff8e 	bl	8000c44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8000d28:	2022      	movs	r0, #34	; 0x22
 8000d2a:	f7ff ff8b 	bl	8000c44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8000d2e:	20da      	movs	r0, #218	; 0xda
 8000d30:	f7ff ff88 	bl	8000c44 <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
#elif (SSD1306_HEIGHT == 64)
    ssd1306_WriteCommand(0x12);
 8000d34:	2012      	movs	r0, #18
 8000d36:	f7ff ff85 	bl	8000c44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8000d3a:	20db      	movs	r0, #219	; 0xdb
 8000d3c:	f7ff ff82 	bl	8000c44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8000d40:	2020      	movs	r0, #32
 8000d42:	f7ff ff7f 	bl	8000c44 <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 8000d46:	208d      	movs	r0, #141	; 0x8d
 8000d48:	f7ff ff7c 	bl	8000c44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8000d4c:	2014      	movs	r0, #20
 8000d4e:	f7ff ff79 	bl	8000c44 <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 8000d52:	2001      	movs	r0, #1
 8000d54:	f000 f914 	bl	8000f80 <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8000d58:	2000      	movs	r0, #0
 8000d5a:	f000 f80f 	bl	8000d7c <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8000d5e:	f000 f825 	bl	8000dac <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 8000d62:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <ssd1306_Init+0xd0>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8000d68:	4b03      	ldr	r3, [pc, #12]	; (8000d78 <ssd1306_Init+0xd0>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8000d6e:	4b02      	ldr	r3, [pc, #8]	; (8000d78 <ssd1306_Init+0xd0>)
 8000d70:	2201      	movs	r2, #1
 8000d72:	711a      	strb	r2, [r3, #4]
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000520 	.word	0x20000520

08000d7c <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8000d86:	79fb      	ldrb	r3, [r7, #7]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d101      	bne.n	8000d90 <ssd1306_Fill+0x14>
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	e000      	b.n	8000d92 <ssd1306_Fill+0x16>
 8000d90:	23ff      	movs	r3, #255	; 0xff
 8000d92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000d96:	4619      	mov	r1, r3
 8000d98:	4803      	ldr	r0, [pc, #12]	; (8000da8 <ssd1306_Fill+0x2c>)
 8000d9a:	f006 fcbf 	bl	800771c <memset>
}
 8000d9e:	bf00      	nop
 8000da0:	3708      	adds	r7, #8
 8000da2:	46bd      	mov	sp, r7
 8000da4:	bd80      	pop	{r7, pc}
 8000da6:	bf00      	nop
 8000da8:	20000120 	.word	0x20000120

08000dac <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b082      	sub	sp, #8
 8000db0:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000db2:	2300      	movs	r3, #0
 8000db4:	71fb      	strb	r3, [r7, #7]
 8000db6:	e016      	b.n	8000de6 <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 8000db8:	79fb      	ldrb	r3, [r7, #7]
 8000dba:	3b50      	subs	r3, #80	; 0x50
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f7ff ff40 	bl	8000c44 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 8000dc4:	2000      	movs	r0, #0
 8000dc6:	f7ff ff3d 	bl	8000c44 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 8000dca:	2010      	movs	r0, #16
 8000dcc:	f7ff ff3a 	bl	8000c44 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 8000dd0:	79fb      	ldrb	r3, [r7, #7]
 8000dd2:	01db      	lsls	r3, r3, #7
 8000dd4:	4a08      	ldr	r2, [pc, #32]	; (8000df8 <ssd1306_UpdateScreen+0x4c>)
 8000dd6:	4413      	add	r3, r2
 8000dd8:	2180      	movs	r1, #128	; 0x80
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff ff4a 	bl	8000c74 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 8000de0:	79fb      	ldrb	r3, [r7, #7]
 8000de2:	3301      	adds	r3, #1
 8000de4:	71fb      	strb	r3, [r7, #7]
 8000de6:	79fb      	ldrb	r3, [r7, #7]
 8000de8:	2b07      	cmp	r3, #7
 8000dea:	d9e5      	bls.n	8000db8 <ssd1306_UpdateScreen+0xc>
    }
}
 8000dec:	bf00      	nop
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	20000120 	.word	0x20000120

08000dfc <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8000dfc:	b480      	push	{r7}
 8000dfe:	b083      	sub	sp, #12
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	4603      	mov	r3, r0
 8000e04:	71fb      	strb	r3, [r7, #7]
 8000e06:	460b      	mov	r3, r1
 8000e08:	71bb      	strb	r3, [r7, #6]
 8000e0a:	4613      	mov	r3, r2
 8000e0c:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	db3d      	blt.n	8000e92 <ssd1306_DrawPixel+0x96>
 8000e16:	79bb      	ldrb	r3, [r7, #6]
 8000e18:	2b3f      	cmp	r3, #63	; 0x3f
 8000e1a:	d83a      	bhi.n	8000e92 <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8000e1c:	797b      	ldrb	r3, [r7, #5]
 8000e1e:	2b01      	cmp	r3, #1
 8000e20:	d11a      	bne.n	8000e58 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8000e22:	79fa      	ldrb	r2, [r7, #7]
 8000e24:	79bb      	ldrb	r3, [r7, #6]
 8000e26:	08db      	lsrs	r3, r3, #3
 8000e28:	b2d8      	uxtb	r0, r3
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	01db      	lsls	r3, r3, #7
 8000e2e:	4413      	add	r3, r2
 8000e30:	4a1b      	ldr	r2, [pc, #108]	; (8000ea0 <ssd1306_DrawPixel+0xa4>)
 8000e32:	5cd3      	ldrb	r3, [r2, r3]
 8000e34:	b25a      	sxtb	r2, r3
 8000e36:	79bb      	ldrb	r3, [r7, #6]
 8000e38:	f003 0307 	and.w	r3, r3, #7
 8000e3c:	2101      	movs	r1, #1
 8000e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8000e42:	b25b      	sxtb	r3, r3
 8000e44:	4313      	orrs	r3, r2
 8000e46:	b259      	sxtb	r1, r3
 8000e48:	79fa      	ldrb	r2, [r7, #7]
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	01db      	lsls	r3, r3, #7
 8000e4e:	4413      	add	r3, r2
 8000e50:	b2c9      	uxtb	r1, r1
 8000e52:	4a13      	ldr	r2, [pc, #76]	; (8000ea0 <ssd1306_DrawPixel+0xa4>)
 8000e54:	54d1      	strb	r1, [r2, r3]
 8000e56:	e01d      	b.n	8000e94 <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8000e58:	79fa      	ldrb	r2, [r7, #7]
 8000e5a:	79bb      	ldrb	r3, [r7, #6]
 8000e5c:	08db      	lsrs	r3, r3, #3
 8000e5e:	b2d8      	uxtb	r0, r3
 8000e60:	4603      	mov	r3, r0
 8000e62:	01db      	lsls	r3, r3, #7
 8000e64:	4413      	add	r3, r2
 8000e66:	4a0e      	ldr	r2, [pc, #56]	; (8000ea0 <ssd1306_DrawPixel+0xa4>)
 8000e68:	5cd3      	ldrb	r3, [r2, r3]
 8000e6a:	b25a      	sxtb	r2, r3
 8000e6c:	79bb      	ldrb	r3, [r7, #6]
 8000e6e:	f003 0307 	and.w	r3, r3, #7
 8000e72:	2101      	movs	r1, #1
 8000e74:	fa01 f303 	lsl.w	r3, r1, r3
 8000e78:	b25b      	sxtb	r3, r3
 8000e7a:	43db      	mvns	r3, r3
 8000e7c:	b25b      	sxtb	r3, r3
 8000e7e:	4013      	ands	r3, r2
 8000e80:	b259      	sxtb	r1, r3
 8000e82:	79fa      	ldrb	r2, [r7, #7]
 8000e84:	4603      	mov	r3, r0
 8000e86:	01db      	lsls	r3, r3, #7
 8000e88:	4413      	add	r3, r2
 8000e8a:	b2c9      	uxtb	r1, r1
 8000e8c:	4a04      	ldr	r2, [pc, #16]	; (8000ea0 <ssd1306_DrawPixel+0xa4>)
 8000e8e:	54d1      	strb	r1, [r2, r3]
 8000e90:	e000      	b.n	8000e94 <ssd1306_DrawPixel+0x98>
        return;
 8000e92:	bf00      	nop
    }
}
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr
 8000e9e:	bf00      	nop
 8000ea0:	20000120 	.word	0x20000120

08000ea4 <ssd1306_DrawBitmap>:
    }
    return;
}

/* Draw a bitmap */
void ssd1306_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, SSD1306_COLOR color) {
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	603a      	str	r2, [r7, #0]
 8000eac:	461a      	mov	r2, r3
 8000eae:	4603      	mov	r3, r0
 8000eb0:	71fb      	strb	r3, [r7, #7]
 8000eb2:	460b      	mov	r3, r1
 8000eb4:	71bb      	strb	r3, [r7, #6]
 8000eb6:	4613      	mov	r3, r2
 8000eb8:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8000eba:	797b      	ldrb	r3, [r7, #5]
 8000ebc:	3307      	adds	r3, #7
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	da00      	bge.n	8000ec4 <ssd1306_DrawBitmap+0x20>
 8000ec2:	3307      	adds	r3, #7
 8000ec4:	10db      	asrs	r3, r3, #3
 8000ec6:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	73fb      	strb	r3, [r7, #15]

    if (x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	db3e      	blt.n	8000f52 <ssd1306_DrawBitmap+0xae>
 8000ed4:	79bb      	ldrb	r3, [r7, #6]
 8000ed6:	2b3f      	cmp	r3, #63	; 0x3f
 8000ed8:	d83b      	bhi.n	8000f52 <ssd1306_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8000eda:	2300      	movs	r3, #0
 8000edc:	73bb      	strb	r3, [r7, #14]
 8000ede:	e033      	b.n	8000f48 <ssd1306_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	737b      	strb	r3, [r7, #13]
 8000ee4:	e026      	b.n	8000f34 <ssd1306_DrawBitmap+0x90>
            if (i & 7) {
 8000ee6:	7b7b      	ldrb	r3, [r7, #13]
 8000ee8:	f003 0307 	and.w	r3, r3, #7
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d003      	beq.n	8000ef8 <ssd1306_DrawBitmap+0x54>
                byte <<= 1;
 8000ef0:	7bfb      	ldrb	r3, [r7, #15]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	73fb      	strb	r3, [r7, #15]
 8000ef6:	e00d      	b.n	8000f14 <ssd1306_DrawBitmap+0x70>
            } else {
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8000ef8:	7bbb      	ldrb	r3, [r7, #14]
 8000efa:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000efe:	fb02 f303 	mul.w	r3, r2, r3
 8000f02:	7b7a      	ldrb	r2, [r7, #13]
 8000f04:	08d2      	lsrs	r2, r2, #3
 8000f06:	b2d2      	uxtb	r2, r2
 8000f08:	4413      	add	r3, r2
 8000f0a:	461a      	mov	r2, r3
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	4413      	add	r3, r2
 8000f10:	781b      	ldrb	r3, [r3, #0]
 8000f12:	73fb      	strb	r3, [r7, #15]
            }

            if (byte & 0x80) {
 8000f14:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000f18:	2b00      	cmp	r3, #0
 8000f1a:	da08      	bge.n	8000f2e <ssd1306_DrawBitmap+0x8a>
                ssd1306_DrawPixel(x + i, y, color);
 8000f1c:	79fa      	ldrb	r2, [r7, #7]
 8000f1e:	7b7b      	ldrb	r3, [r7, #13]
 8000f20:	4413      	add	r3, r2
 8000f22:	b2db      	uxtb	r3, r3
 8000f24:	7f3a      	ldrb	r2, [r7, #28]
 8000f26:	79b9      	ldrb	r1, [r7, #6]
 8000f28:	4618      	mov	r0, r3
 8000f2a:	f7ff ff67 	bl	8000dfc <ssd1306_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8000f2e:	7b7b      	ldrb	r3, [r7, #13]
 8000f30:	3301      	adds	r3, #1
 8000f32:	737b      	strb	r3, [r7, #13]
 8000f34:	7b7a      	ldrb	r2, [r7, #13]
 8000f36:	797b      	ldrb	r3, [r7, #5]
 8000f38:	429a      	cmp	r2, r3
 8000f3a:	d3d4      	bcc.n	8000ee6 <ssd1306_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8000f3c:	7bbb      	ldrb	r3, [r7, #14]
 8000f3e:	3301      	adds	r3, #1
 8000f40:	73bb      	strb	r3, [r7, #14]
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	3301      	adds	r3, #1
 8000f46:	71bb      	strb	r3, [r7, #6]
 8000f48:	7bba      	ldrb	r2, [r7, #14]
 8000f4a:	7e3b      	ldrb	r3, [r7, #24]
 8000f4c:	429a      	cmp	r2, r3
 8000f4e:	d3c7      	bcc.n	8000ee0 <ssd1306_DrawBitmap+0x3c>
            }
        }
    }
    return;
 8000f50:	e000      	b.n	8000f54 <ssd1306_DrawBitmap+0xb0>
        return;
 8000f52:	bf00      	nop
}
 8000f54:	3710      	adds	r7, #16
 8000f56:	46bd      	mov	sp, r7
 8000f58:	bd80      	pop	{r7, pc}

08000f5a <ssd1306_SetContrast>:

void ssd1306_SetContrast(const uint8_t value) {
 8000f5a:	b580      	push	{r7, lr}
 8000f5c:	b084      	sub	sp, #16
 8000f5e:	af00      	add	r7, sp, #0
 8000f60:	4603      	mov	r3, r0
 8000f62:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 8000f64:	2381      	movs	r3, #129	; 0x81
 8000f66:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8000f68:	7bfb      	ldrb	r3, [r7, #15]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fe6a 	bl	8000c44 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 8000f70:	79fb      	ldrb	r3, [r7, #7]
 8000f72:	4618      	mov	r0, r3
 8000f74:	f7ff fe66 	bl	8000c44 <ssd1306_WriteCommand>
}
 8000f78:	bf00      	nop
 8000f7a:	3710      	adds	r7, #16
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}

08000f80 <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	4603      	mov	r3, r0
 8000f88:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8000f8a:	79fb      	ldrb	r3, [r7, #7]
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d005      	beq.n	8000f9c <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 8000f90:	23af      	movs	r3, #175	; 0xaf
 8000f92:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8000f94:	4b08      	ldr	r3, [pc, #32]	; (8000fb8 <ssd1306_SetDisplayOn+0x38>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	715a      	strb	r2, [r3, #5]
 8000f9a:	e004      	b.n	8000fa6 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8000f9c:	23ae      	movs	r3, #174	; 0xae
 8000f9e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 8000fa0:	4b05      	ldr	r3, [pc, #20]	; (8000fb8 <ssd1306_SetDisplayOn+0x38>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	4618      	mov	r0, r3
 8000faa:	f7ff fe4b 	bl	8000c44 <ssd1306_WriteCommand>
}
 8000fae:	bf00      	nop
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	20000520 	.word	0x20000520

08000fbc <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	607b      	str	r3, [r7, #4]
 8000fc6:	4b12      	ldr	r3, [pc, #72]	; (8001010 <HAL_MspInit+0x54>)
 8000fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fca:	4a11      	ldr	r2, [pc, #68]	; (8001010 <HAL_MspInit+0x54>)
 8000fcc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fd0:	6453      	str	r3, [r2, #68]	; 0x44
 8000fd2:	4b0f      	ldr	r3, [pc, #60]	; (8001010 <HAL_MspInit+0x54>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fda:	607b      	str	r3, [r7, #4]
 8000fdc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
 8000fe2:	4b0b      	ldr	r3, [pc, #44]	; (8001010 <HAL_MspInit+0x54>)
 8000fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe6:	4a0a      	ldr	r2, [pc, #40]	; (8001010 <HAL_MspInit+0x54>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fec:	6413      	str	r3, [r2, #64]	; 0x40
 8000fee:	4b08      	ldr	r3, [pc, #32]	; (8001010 <HAL_MspInit+0x54>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ff6:	603b      	str	r3, [r7, #0]
 8000ff8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	210f      	movs	r1, #15
 8000ffe:	f06f 0001 	mvn.w	r0, #1
 8001002:	f000 faf7 	bl	80015f4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b08a      	sub	sp, #40	; 0x28
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101c:	f107 0314 	add.w	r3, r7, #20
 8001020:	2200      	movs	r2, #0
 8001022:	601a      	str	r2, [r3, #0]
 8001024:	605a      	str	r2, [r3, #4]
 8001026:	609a      	str	r2, [r3, #8]
 8001028:	60da      	str	r2, [r3, #12]
 800102a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	4a19      	ldr	r2, [pc, #100]	; (8001098 <HAL_I2C_MspInit+0x84>)
 8001032:	4293      	cmp	r3, r2
 8001034:	d12b      	bne.n	800108e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001036:	2300      	movs	r3, #0
 8001038:	613b      	str	r3, [r7, #16]
 800103a:	4b18      	ldr	r3, [pc, #96]	; (800109c <HAL_I2C_MspInit+0x88>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	4a17      	ldr	r2, [pc, #92]	; (800109c <HAL_I2C_MspInit+0x88>)
 8001040:	f043 0302 	orr.w	r3, r3, #2
 8001044:	6313      	str	r3, [r2, #48]	; 0x30
 8001046:	4b15      	ldr	r3, [pc, #84]	; (800109c <HAL_I2C_MspInit+0x88>)
 8001048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104a:	f003 0302 	and.w	r3, r3, #2
 800104e:	613b      	str	r3, [r7, #16]
 8001050:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001052:	23c0      	movs	r3, #192	; 0xc0
 8001054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001056:	2312      	movs	r3, #18
 8001058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800105a:	2300      	movs	r3, #0
 800105c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800105e:	2303      	movs	r3, #3
 8001060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001062:	2304      	movs	r3, #4
 8001064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001066:	f107 0314 	add.w	r3, r7, #20
 800106a:	4619      	mov	r1, r3
 800106c:	480c      	ldr	r0, [pc, #48]	; (80010a0 <HAL_I2C_MspInit+0x8c>)
 800106e:	f000 faeb 	bl	8001648 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b09      	ldr	r3, [pc, #36]	; (800109c <HAL_I2C_MspInit+0x88>)
 8001078:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107a:	4a08      	ldr	r2, [pc, #32]	; (800109c <HAL_I2C_MspInit+0x88>)
 800107c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001080:	6413      	str	r3, [r2, #64]	; 0x40
 8001082:	4b06      	ldr	r3, [pc, #24]	; (800109c <HAL_I2C_MspInit+0x88>)
 8001084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001086:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800108e:	bf00      	nop
 8001090:	3728      	adds	r7, #40	; 0x28
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40005400 	.word	0x40005400
 800109c:	40023800 	.word	0x40023800
 80010a0:	40020400 	.word	0x40020400

080010a4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80010a4:	b480      	push	{r7}
 80010a6:	b085      	sub	sp, #20
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80010b4:	d10d      	bne.n	80010d2 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80010b6:	2300      	movs	r3, #0
 80010b8:	60fb      	str	r3, [r7, #12]
 80010ba:	4b09      	ldr	r3, [pc, #36]	; (80010e0 <HAL_TIM_Base_MspInit+0x3c>)
 80010bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010be:	4a08      	ldr	r2, [pc, #32]	; (80010e0 <HAL_TIM_Base_MspInit+0x3c>)
 80010c0:	f043 0301 	orr.w	r3, r3, #1
 80010c4:	6413      	str	r3, [r2, #64]	; 0x40
 80010c6:	4b06      	ldr	r3, [pc, #24]	; (80010e0 <HAL_TIM_Base_MspInit+0x3c>)
 80010c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ca:	f003 0301 	and.w	r3, r3, #1
 80010ce:	60fb      	str	r3, [r7, #12]
 80010d0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80010d2:	bf00      	nop
 80010d4:	3714      	adds	r7, #20
 80010d6:	46bd      	mov	sp, r7
 80010d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010dc:	4770      	bx	lr
 80010de:	bf00      	nop
 80010e0:	40023800 	.word	0x40023800

080010e4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80010e4:	b580      	push	{r7, lr}
 80010e6:	b088      	sub	sp, #32
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010ec:	f107 030c 	add.w	r3, r7, #12
 80010f0:	2200      	movs	r2, #0
 80010f2:	601a      	str	r2, [r3, #0]
 80010f4:	605a      	str	r2, [r3, #4]
 80010f6:	609a      	str	r2, [r3, #8]
 80010f8:	60da      	str	r2, [r3, #12]
 80010fa:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001104:	d11d      	bne.n	8001142 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60bb      	str	r3, [r7, #8]
 800110a:	4b10      	ldr	r3, [pc, #64]	; (800114c <HAL_TIM_MspPostInit+0x68>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a0f      	ldr	r2, [pc, #60]	; (800114c <HAL_TIM_MspPostInit+0x68>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b0d      	ldr	r3, [pc, #52]	; (800114c <HAL_TIM_MspPostInit+0x68>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60bb      	str	r3, [r7, #8]
 8001120:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001122:	2301      	movs	r3, #1
 8001124:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001126:	2302      	movs	r3, #2
 8001128:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800112e:	2300      	movs	r3, #0
 8001130:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001132:	2301      	movs	r3, #1
 8001134:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001136:	f107 030c 	add.w	r3, r7, #12
 800113a:	4619      	mov	r1, r3
 800113c:	4804      	ldr	r0, [pc, #16]	; (8001150 <HAL_TIM_MspPostInit+0x6c>)
 800113e:	f000 fa83 	bl	8001648 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001142:	bf00      	nop
 8001144:	3720      	adds	r7, #32
 8001146:	46bd      	mov	sp, r7
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	40023800 	.word	0x40023800
 8001150:	40020000 	.word	0x40020000

08001154 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b08a      	sub	sp, #40	; 0x28
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800115c:	f107 0314 	add.w	r3, r7, #20
 8001160:	2200      	movs	r2, #0
 8001162:	601a      	str	r2, [r3, #0]
 8001164:	605a      	str	r2, [r3, #4]
 8001166:	609a      	str	r2, [r3, #8]
 8001168:	60da      	str	r2, [r3, #12]
 800116a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <HAL_UART_MspInit+0x84>)
 8001172:	4293      	cmp	r3, r2
 8001174:	d12b      	bne.n	80011ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	613b      	str	r3, [r7, #16]
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <HAL_UART_MspInit+0x88>)
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	4a17      	ldr	r2, [pc, #92]	; (80011dc <HAL_UART_MspInit+0x88>)
 8001180:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001184:	6413      	str	r3, [r2, #64]	; 0x40
 8001186:	4b15      	ldr	r3, [pc, #84]	; (80011dc <HAL_UART_MspInit+0x88>)
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800118e:	613b      	str	r3, [r7, #16]
 8001190:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	60fb      	str	r3, [r7, #12]
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <HAL_UART_MspInit+0x88>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a10      	ldr	r2, [pc, #64]	; (80011dc <HAL_UART_MspInit+0x88>)
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b0e      	ldr	r3, [pc, #56]	; (80011dc <HAL_UART_MspInit+0x88>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0301 	and.w	r3, r3, #1
 80011aa:	60fb      	str	r3, [r7, #12]
 80011ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80011ae:	230c      	movs	r3, #12
 80011b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011b2:	2302      	movs	r3, #2
 80011b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b6:	2300      	movs	r3, #0
 80011b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011ba:	2303      	movs	r3, #3
 80011bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011be:	2307      	movs	r3, #7
 80011c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c2:	f107 0314 	add.w	r3, r7, #20
 80011c6:	4619      	mov	r1, r3
 80011c8:	4805      	ldr	r0, [pc, #20]	; (80011e0 <HAL_UART_MspInit+0x8c>)
 80011ca:	f000 fa3d 	bl	8001648 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011ce:	bf00      	nop
 80011d0:	3728      	adds	r7, #40	; 0x28
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40004400 	.word	0x40004400
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40020000 	.word	0x40020000

080011e4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b08e      	sub	sp, #56	; 0x38
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 80011ec:	2300      	movs	r3, #0
 80011ee:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 80011f0:	2300      	movs	r3, #0
 80011f2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80011f4:	2300      	movs	r3, #0
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	4b33      	ldr	r3, [pc, #204]	; (80012c8 <HAL_InitTick+0xe4>)
 80011fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fc:	4a32      	ldr	r2, [pc, #200]	; (80012c8 <HAL_InitTick+0xe4>)
 80011fe:	f043 0310 	orr.w	r3, r3, #16
 8001202:	6413      	str	r3, [r2, #64]	; 0x40
 8001204:	4b30      	ldr	r3, [pc, #192]	; (80012c8 <HAL_InitTick+0xe4>)
 8001206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001208:	f003 0310 	and.w	r3, r3, #16
 800120c:	60fb      	str	r3, [r7, #12]
 800120e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001210:	f107 0210 	add.w	r2, r7, #16
 8001214:	f107 0314 	add.w	r3, r7, #20
 8001218:	4611      	mov	r1, r2
 800121a:	4618      	mov	r0, r3
 800121c:	f001 fa0c 	bl	8002638 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8001220:	6a3b      	ldr	r3, [r7, #32]
 8001222:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001224:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001226:	2b00      	cmp	r3, #0
 8001228:	d103      	bne.n	8001232 <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800122a:	f001 f9dd 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 800122e:	6378      	str	r0, [r7, #52]	; 0x34
 8001230:	e004      	b.n	800123c <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001232:	f001 f9d9 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 8001236:	4603      	mov	r3, r0
 8001238:	005b      	lsls	r3, r3, #1
 800123a:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800123c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800123e:	4a23      	ldr	r2, [pc, #140]	; (80012cc <HAL_InitTick+0xe8>)
 8001240:	fba2 2303 	umull	r2, r3, r2, r3
 8001244:	0c9b      	lsrs	r3, r3, #18
 8001246:	3b01      	subs	r3, #1
 8001248:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <HAL_InitTick+0xec>)
 800124c:	4a21      	ldr	r2, [pc, #132]	; (80012d4 <HAL_InitTick+0xf0>)
 800124e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001250:	4b1f      	ldr	r3, [pc, #124]	; (80012d0 <HAL_InitTick+0xec>)
 8001252:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001256:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001258:	4a1d      	ldr	r2, [pc, #116]	; (80012d0 <HAL_InitTick+0xec>)
 800125a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800125c:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800125e:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <HAL_InitTick+0xec>)
 8001260:	2200      	movs	r2, #0
 8001262:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001264:	4b1a      	ldr	r3, [pc, #104]	; (80012d0 <HAL_InitTick+0xec>)
 8001266:	2200      	movs	r2, #0
 8001268:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800126a:	4b19      	ldr	r3, [pc, #100]	; (80012d0 <HAL_InitTick+0xec>)
 800126c:	2200      	movs	r2, #0
 800126e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8001270:	4817      	ldr	r0, [pc, #92]	; (80012d0 <HAL_InitTick+0xec>)
 8001272:	f001 fee1 	bl	8003038 <HAL_TIM_Base_Init>
 8001276:	4603      	mov	r3, r0
 8001278:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800127c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001280:	2b00      	cmp	r3, #0
 8001282:	d11b      	bne.n	80012bc <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001284:	4812      	ldr	r0, [pc, #72]	; (80012d0 <HAL_InitTick+0xec>)
 8001286:	f001 ff27 	bl	80030d8 <HAL_TIM_Base_Start_IT>
 800128a:	4603      	mov	r3, r0
 800128c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8001290:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001294:	2b00      	cmp	r3, #0
 8001296:	d111      	bne.n	80012bc <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001298:	2036      	movs	r0, #54	; 0x36
 800129a:	f000 f9c7 	bl	800162c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	2b0f      	cmp	r3, #15
 80012a2:	d808      	bhi.n	80012b6 <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80012a4:	2200      	movs	r2, #0
 80012a6:	6879      	ldr	r1, [r7, #4]
 80012a8:	2036      	movs	r0, #54	; 0x36
 80012aa:	f000 f9a3 	bl	80015f4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80012ae:	4a0a      	ldr	r2, [pc, #40]	; (80012d8 <HAL_InitTick+0xf4>)
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6013      	str	r3, [r2, #0]
 80012b4:	e002      	b.n	80012bc <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 80012b6:	2301      	movs	r3, #1
 80012b8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80012bc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3738      	adds	r7, #56	; 0x38
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	40023800 	.word	0x40023800
 80012cc:	431bde83 	.word	0x431bde83
 80012d0:	20000528 	.word	0x20000528
 80012d4:	40001000 	.word	0x40001000
 80012d8:	20000004 	.word	0x20000004

080012dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012dc:	b480      	push	{r7}
 80012de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e0:	e7fe      	b.n	80012e0 <NMI_Handler+0x4>

080012e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e2:	b480      	push	{r7}
 80012e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <HardFault_Handler+0x4>

080012e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012ec:	e7fe      	b.n	80012ec <MemManage_Handler+0x4>

080012ee <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ee:	b480      	push	{r7}
 80012f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012f2:	e7fe      	b.n	80012f2 <BusFault_Handler+0x4>

080012f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012f4:	b480      	push	{r7}
 80012f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012f8:	e7fe      	b.n	80012f8 <UsageFault_Handler+0x4>

080012fa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012fa:	b480      	push	{r7}
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012fe:	bf00      	nop
 8001300:	46bd      	mov	sp, r7
 8001302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001306:	4770      	bx	lr

08001308 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(interruptButton_Pin);
 800130c:	2040      	movs	r0, #64	; 0x40
 800130e:	f000 fb63 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(interruptButton2_Pin);
 8001312:	2080      	movs	r0, #128	; 0x80
 8001314:	f000 fb60 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}

0800131c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001320:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001324:	f000 fb58 	bl	80019d8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001328:	bf00      	nop
 800132a:	bd80      	pop	{r7, pc}

0800132c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001330:	4802      	ldr	r0, [pc, #8]	; (800133c <TIM6_DAC_IRQHandler+0x10>)
 8001332:	f002 f863 	bl	80033fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001336:	bf00      	nop
 8001338:	bd80      	pop	{r7, pc}
 800133a:	bf00      	nop
 800133c:	20000528 	.word	0x20000528

08001340 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001340:	b480      	push	{r7}
 8001342:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <SystemInit+0x20>)
 8001346:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800134a:	4a05      	ldr	r2, [pc, #20]	; (8001360 <SystemInit+0x20>)
 800134c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001350:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001354:	bf00      	nop
 8001356:	46bd      	mov	sp, r7
 8001358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135c:	4770      	bx	lr
 800135e:	bf00      	nop
 8001360:	e000ed00 	.word	0xe000ed00

08001364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800139c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001368:	f7ff ffea 	bl	8001340 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800136c:	480c      	ldr	r0, [pc, #48]	; (80013a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800136e:	490d      	ldr	r1, [pc, #52]	; (80013a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001370:	4a0d      	ldr	r2, [pc, #52]	; (80013a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001372:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001374:	e002      	b.n	800137c <LoopCopyDataInit>

08001376 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001376:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001378:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800137a:	3304      	adds	r3, #4

0800137c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800137c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800137e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001380:	d3f9      	bcc.n	8001376 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001382:	4a0a      	ldr	r2, [pc, #40]	; (80013ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001384:	4c0a      	ldr	r4, [pc, #40]	; (80013b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001386:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001388:	e001      	b.n	800138e <LoopFillZerobss>

0800138a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800138a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800138c:	3204      	adds	r2, #4

0800138e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800138e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001390:	d3fb      	bcc.n	800138a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001392:	f006 f9cb 	bl	800772c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001396:	f7ff f901 	bl	800059c <main>
  bx  lr    
 800139a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800139c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80013a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80013a4:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 80013a8:	08009840 	.word	0x08009840
  ldr r2, =_sbss
 80013ac:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 80013b0:	20004ec4 	.word	0x20004ec4

080013b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80013b4:	e7fe      	b.n	80013b4 <ADC_IRQHandler>
	...

080013b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80013bc:	4b0e      	ldr	r3, [pc, #56]	; (80013f8 <HAL_Init+0x40>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a0d      	ldr	r2, [pc, #52]	; (80013f8 <HAL_Init+0x40>)
 80013c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80013c6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80013c8:	4b0b      	ldr	r3, [pc, #44]	; (80013f8 <HAL_Init+0x40>)
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	4a0a      	ldr	r2, [pc, #40]	; (80013f8 <HAL_Init+0x40>)
 80013ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80013d2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013d4:	4b08      	ldr	r3, [pc, #32]	; (80013f8 <HAL_Init+0x40>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	4a07      	ldr	r2, [pc, #28]	; (80013f8 <HAL_Init+0x40>)
 80013da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013de:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013e0:	2003      	movs	r0, #3
 80013e2:	f000 f8fc 	bl	80015de <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013e6:	200f      	movs	r0, #15
 80013e8:	f7ff fefc 	bl	80011e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013ec:	f7ff fde6 	bl	8000fbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013f0:	2300      	movs	r3, #0
}
 80013f2:	4618      	mov	r0, r3
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40023c00 	.word	0x40023c00

080013fc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001400:	4b06      	ldr	r3, [pc, #24]	; (800141c <HAL_IncTick+0x20>)
 8001402:	781b      	ldrb	r3, [r3, #0]
 8001404:	461a      	mov	r2, r3
 8001406:	4b06      	ldr	r3, [pc, #24]	; (8001420 <HAL_IncTick+0x24>)
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4413      	add	r3, r2
 800140c:	4a04      	ldr	r2, [pc, #16]	; (8001420 <HAL_IncTick+0x24>)
 800140e:	6013      	str	r3, [r2, #0]
}
 8001410:	bf00      	nop
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	20000008 	.word	0x20000008
 8001420:	20000570 	.word	0x20000570

08001424 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001424:	b480      	push	{r7}
 8001426:	af00      	add	r7, sp, #0
  return uwTick;
 8001428:	4b03      	ldr	r3, [pc, #12]	; (8001438 <HAL_GetTick+0x14>)
 800142a:	681b      	ldr	r3, [r3, #0]
}
 800142c:	4618      	mov	r0, r3
 800142e:	46bd      	mov	sp, r7
 8001430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	20000570 	.word	0x20000570

0800143c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	b084      	sub	sp, #16
 8001440:	af00      	add	r7, sp, #0
 8001442:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001444:	f7ff ffee 	bl	8001424 <HAL_GetTick>
 8001448:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001454:	d005      	beq.n	8001462 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001456:	4b0a      	ldr	r3, [pc, #40]	; (8001480 <HAL_Delay+0x44>)
 8001458:	781b      	ldrb	r3, [r3, #0]
 800145a:	461a      	mov	r2, r3
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	4413      	add	r3, r2
 8001460:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001462:	bf00      	nop
 8001464:	f7ff ffde 	bl	8001424 <HAL_GetTick>
 8001468:	4602      	mov	r2, r0
 800146a:	68bb      	ldr	r3, [r7, #8]
 800146c:	1ad3      	subs	r3, r2, r3
 800146e:	68fa      	ldr	r2, [r7, #12]
 8001470:	429a      	cmp	r2, r3
 8001472:	d8f7      	bhi.n	8001464 <HAL_Delay+0x28>
  {
  }
}
 8001474:	bf00      	nop
 8001476:	bf00      	nop
 8001478:	3710      	adds	r7, #16
 800147a:	46bd      	mov	sp, r7
 800147c:	bd80      	pop	{r7, pc}
 800147e:	bf00      	nop
 8001480:	20000008 	.word	0x20000008

08001484 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001484:	b480      	push	{r7}
 8001486:	b085      	sub	sp, #20
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	f003 0307 	and.w	r3, r3, #7
 8001492:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001494:	4b0c      	ldr	r3, [pc, #48]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 8001496:	68db      	ldr	r3, [r3, #12]
 8001498:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800149a:	68ba      	ldr	r2, [r7, #8]
 800149c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014a0:	4013      	ands	r3, r2
 80014a2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014a8:	68bb      	ldr	r3, [r7, #8]
 80014aa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014ac:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014b0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014b6:	4a04      	ldr	r2, [pc, #16]	; (80014c8 <__NVIC_SetPriorityGrouping+0x44>)
 80014b8:	68bb      	ldr	r3, [r7, #8]
 80014ba:	60d3      	str	r3, [r2, #12]
}
 80014bc:	bf00      	nop
 80014be:	3714      	adds	r7, #20
 80014c0:	46bd      	mov	sp, r7
 80014c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c6:	4770      	bx	lr
 80014c8:	e000ed00 	.word	0xe000ed00

080014cc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014d0:	4b04      	ldr	r3, [pc, #16]	; (80014e4 <__NVIC_GetPriorityGrouping+0x18>)
 80014d2:	68db      	ldr	r3, [r3, #12]
 80014d4:	0a1b      	lsrs	r3, r3, #8
 80014d6:	f003 0307 	and.w	r3, r3, #7
}
 80014da:	4618      	mov	r0, r3
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	e000ed00 	.word	0xe000ed00

080014e8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80014e8:	b480      	push	{r7}
 80014ea:	b083      	sub	sp, #12
 80014ec:	af00      	add	r7, sp, #0
 80014ee:	4603      	mov	r3, r0
 80014f0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	db0b      	blt.n	8001512 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80014fa:	79fb      	ldrb	r3, [r7, #7]
 80014fc:	f003 021f 	and.w	r2, r3, #31
 8001500:	4907      	ldr	r1, [pc, #28]	; (8001520 <__NVIC_EnableIRQ+0x38>)
 8001502:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001506:	095b      	lsrs	r3, r3, #5
 8001508:	2001      	movs	r0, #1
 800150a:	fa00 f202 	lsl.w	r2, r0, r2
 800150e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001512:	bf00      	nop
 8001514:	370c      	adds	r7, #12
 8001516:	46bd      	mov	sp, r7
 8001518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151c:	4770      	bx	lr
 800151e:	bf00      	nop
 8001520:	e000e100 	.word	0xe000e100

08001524 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	6039      	str	r1, [r7, #0]
 800152e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001530:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001534:	2b00      	cmp	r3, #0
 8001536:	db0a      	blt.n	800154e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001538:	683b      	ldr	r3, [r7, #0]
 800153a:	b2da      	uxtb	r2, r3
 800153c:	490c      	ldr	r1, [pc, #48]	; (8001570 <__NVIC_SetPriority+0x4c>)
 800153e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001542:	0112      	lsls	r2, r2, #4
 8001544:	b2d2      	uxtb	r2, r2
 8001546:	440b      	add	r3, r1
 8001548:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800154c:	e00a      	b.n	8001564 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	b2da      	uxtb	r2, r3
 8001552:	4908      	ldr	r1, [pc, #32]	; (8001574 <__NVIC_SetPriority+0x50>)
 8001554:	79fb      	ldrb	r3, [r7, #7]
 8001556:	f003 030f 	and.w	r3, r3, #15
 800155a:	3b04      	subs	r3, #4
 800155c:	0112      	lsls	r2, r2, #4
 800155e:	b2d2      	uxtb	r2, r2
 8001560:	440b      	add	r3, r1
 8001562:	761a      	strb	r2, [r3, #24]
}
 8001564:	bf00      	nop
 8001566:	370c      	adds	r7, #12
 8001568:	46bd      	mov	sp, r7
 800156a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156e:	4770      	bx	lr
 8001570:	e000e100 	.word	0xe000e100
 8001574:	e000ed00 	.word	0xe000ed00

08001578 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001578:	b480      	push	{r7}
 800157a:	b089      	sub	sp, #36	; 0x24
 800157c:	af00      	add	r7, sp, #0
 800157e:	60f8      	str	r0, [r7, #12]
 8001580:	60b9      	str	r1, [r7, #8]
 8001582:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001584:	68fb      	ldr	r3, [r7, #12]
 8001586:	f003 0307 	and.w	r3, r3, #7
 800158a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800158c:	69fb      	ldr	r3, [r7, #28]
 800158e:	f1c3 0307 	rsb	r3, r3, #7
 8001592:	2b04      	cmp	r3, #4
 8001594:	bf28      	it	cs
 8001596:	2304      	movcs	r3, #4
 8001598:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	3304      	adds	r3, #4
 800159e:	2b06      	cmp	r3, #6
 80015a0:	d902      	bls.n	80015a8 <NVIC_EncodePriority+0x30>
 80015a2:	69fb      	ldr	r3, [r7, #28]
 80015a4:	3b03      	subs	r3, #3
 80015a6:	e000      	b.n	80015aa <NVIC_EncodePriority+0x32>
 80015a8:	2300      	movs	r3, #0
 80015aa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015ac:	f04f 32ff 	mov.w	r2, #4294967295
 80015b0:	69bb      	ldr	r3, [r7, #24]
 80015b2:	fa02 f303 	lsl.w	r3, r2, r3
 80015b6:	43da      	mvns	r2, r3
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	401a      	ands	r2, r3
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015c0:	f04f 31ff 	mov.w	r1, #4294967295
 80015c4:	697b      	ldr	r3, [r7, #20]
 80015c6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ca:	43d9      	mvns	r1, r3
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015d0:	4313      	orrs	r3, r2
         );
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3724      	adds	r7, #36	; 0x24
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015de:	b580      	push	{r7, lr}
 80015e0:	b082      	sub	sp, #8
 80015e2:	af00      	add	r7, sp, #0
 80015e4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f7ff ff4c 	bl	8001484 <__NVIC_SetPriorityGrouping>
}
 80015ec:	bf00      	nop
 80015ee:	3708      	adds	r7, #8
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}

080015f4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b086      	sub	sp, #24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	4603      	mov	r3, r0
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
 8001600:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001602:	2300      	movs	r3, #0
 8001604:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001606:	f7ff ff61 	bl	80014cc <__NVIC_GetPriorityGrouping>
 800160a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800160c:	687a      	ldr	r2, [r7, #4]
 800160e:	68b9      	ldr	r1, [r7, #8]
 8001610:	6978      	ldr	r0, [r7, #20]
 8001612:	f7ff ffb1 	bl	8001578 <NVIC_EncodePriority>
 8001616:	4602      	mov	r2, r0
 8001618:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800161c:	4611      	mov	r1, r2
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff ff80 	bl	8001524 <__NVIC_SetPriority>
}
 8001624:	bf00      	nop
 8001626:	3718      	adds	r7, #24
 8001628:	46bd      	mov	sp, r7
 800162a:	bd80      	pop	{r7, pc}

0800162c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b082      	sub	sp, #8
 8001630:	af00      	add	r7, sp, #0
 8001632:	4603      	mov	r3, r0
 8001634:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001636:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff54 	bl	80014e8 <__NVIC_EnableIRQ>
}
 8001640:	bf00      	nop
 8001642:	3708      	adds	r7, #8
 8001644:	46bd      	mov	sp, r7
 8001646:	bd80      	pop	{r7, pc}

08001648 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001648:	b480      	push	{r7}
 800164a:	b089      	sub	sp, #36	; 0x24
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
 8001650:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001652:	2300      	movs	r3, #0
 8001654:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001656:	2300      	movs	r3, #0
 8001658:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800165a:	2300      	movs	r3, #0
 800165c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800165e:	2300      	movs	r3, #0
 8001660:	61fb      	str	r3, [r7, #28]
 8001662:	e165      	b.n	8001930 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001664:	2201      	movs	r2, #1
 8001666:	69fb      	ldr	r3, [r7, #28]
 8001668:	fa02 f303 	lsl.w	r3, r2, r3
 800166c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	697a      	ldr	r2, [r7, #20]
 8001674:	4013      	ands	r3, r2
 8001676:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001678:	693a      	ldr	r2, [r7, #16]
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	429a      	cmp	r2, r3
 800167e:	f040 8154 	bne.w	800192a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001682:	683b      	ldr	r3, [r7, #0]
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f003 0303 	and.w	r3, r3, #3
 800168a:	2b01      	cmp	r3, #1
 800168c:	d005      	beq.n	800169a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001696:	2b02      	cmp	r3, #2
 8001698:	d130      	bne.n	80016fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	689b      	ldr	r3, [r3, #8]
 800169e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016a0:	69fb      	ldr	r3, [r7, #28]
 80016a2:	005b      	lsls	r3, r3, #1
 80016a4:	2203      	movs	r2, #3
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	69ba      	ldr	r2, [r7, #24]
 80016ae:	4013      	ands	r3, r2
 80016b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	68da      	ldr	r2, [r3, #12]
 80016b6:	69fb      	ldr	r3, [r7, #28]
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	fa02 f303 	lsl.w	r3, r2, r3
 80016be:	69ba      	ldr	r2, [r7, #24]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	69ba      	ldr	r2, [r7, #24]
 80016c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80016d0:	2201      	movs	r2, #1
 80016d2:	69fb      	ldr	r3, [r7, #28]
 80016d4:	fa02 f303 	lsl.w	r3, r2, r3
 80016d8:	43db      	mvns	r3, r3
 80016da:	69ba      	ldr	r2, [r7, #24]
 80016dc:	4013      	ands	r3, r2
 80016de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	685b      	ldr	r3, [r3, #4]
 80016e4:	091b      	lsrs	r3, r3, #4
 80016e6:	f003 0201 	and.w	r2, r3, #1
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	fa02 f303 	lsl.w	r3, r2, r3
 80016f0:	69ba      	ldr	r2, [r7, #24]
 80016f2:	4313      	orrs	r3, r2
 80016f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	69ba      	ldr	r2, [r7, #24]
 80016fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80016fc:	683b      	ldr	r3, [r7, #0]
 80016fe:	685b      	ldr	r3, [r3, #4]
 8001700:	f003 0303 	and.w	r3, r3, #3
 8001704:	2b03      	cmp	r3, #3
 8001706:	d017      	beq.n	8001738 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	68db      	ldr	r3, [r3, #12]
 800170c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800170e:	69fb      	ldr	r3, [r7, #28]
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	2203      	movs	r2, #3
 8001714:	fa02 f303 	lsl.w	r3, r2, r3
 8001718:	43db      	mvns	r3, r3
 800171a:	69ba      	ldr	r2, [r7, #24]
 800171c:	4013      	ands	r3, r2
 800171e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001720:	683b      	ldr	r3, [r7, #0]
 8001722:	689a      	ldr	r2, [r3, #8]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	fa02 f303 	lsl.w	r3, r2, r3
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	4313      	orrs	r3, r2
 8001730:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	69ba      	ldr	r2, [r7, #24]
 8001736:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001738:	683b      	ldr	r3, [r7, #0]
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f003 0303 	and.w	r3, r3, #3
 8001740:	2b02      	cmp	r3, #2
 8001742:	d123      	bne.n	800178c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001744:	69fb      	ldr	r3, [r7, #28]
 8001746:	08da      	lsrs	r2, r3, #3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	3208      	adds	r2, #8
 800174c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001750:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001752:	69fb      	ldr	r3, [r7, #28]
 8001754:	f003 0307 	and.w	r3, r3, #7
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	220f      	movs	r2, #15
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	43db      	mvns	r3, r3
 8001762:	69ba      	ldr	r2, [r7, #24]
 8001764:	4013      	ands	r3, r2
 8001766:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	69fb      	ldr	r3, [r7, #28]
 800176e:	f003 0307 	and.w	r3, r3, #7
 8001772:	009b      	lsls	r3, r3, #2
 8001774:	fa02 f303 	lsl.w	r3, r2, r3
 8001778:	69ba      	ldr	r2, [r7, #24]
 800177a:	4313      	orrs	r3, r2
 800177c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	08da      	lsrs	r2, r3, #3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	3208      	adds	r2, #8
 8001786:	69b9      	ldr	r1, [r7, #24]
 8001788:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	2203      	movs	r2, #3
 8001798:	fa02 f303 	lsl.w	r3, r2, r3
 800179c:	43db      	mvns	r3, r3
 800179e:	69ba      	ldr	r2, [r7, #24]
 80017a0:	4013      	ands	r3, r2
 80017a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	685b      	ldr	r3, [r3, #4]
 80017a8:	f003 0203 	and.w	r2, r3, #3
 80017ac:	69fb      	ldr	r3, [r7, #28]
 80017ae:	005b      	lsls	r3, r3, #1
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	69ba      	ldr	r2, [r7, #24]
 80017b6:	4313      	orrs	r3, r2
 80017b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69ba      	ldr	r2, [r7, #24]
 80017be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017c0:	683b      	ldr	r3, [r7, #0]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	f000 80ae 	beq.w	800192a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017ce:	2300      	movs	r3, #0
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	4b5d      	ldr	r3, [pc, #372]	; (8001948 <HAL_GPIO_Init+0x300>)
 80017d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d6:	4a5c      	ldr	r2, [pc, #368]	; (8001948 <HAL_GPIO_Init+0x300>)
 80017d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017dc:	6453      	str	r3, [r2, #68]	; 0x44
 80017de:	4b5a      	ldr	r3, [pc, #360]	; (8001948 <HAL_GPIO_Init+0x300>)
 80017e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e6:	60fb      	str	r3, [r7, #12]
 80017e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80017ea:	4a58      	ldr	r2, [pc, #352]	; (800194c <HAL_GPIO_Init+0x304>)
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	089b      	lsrs	r3, r3, #2
 80017f0:	3302      	adds	r3, #2
 80017f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80017f8:	69fb      	ldr	r3, [r7, #28]
 80017fa:	f003 0303 	and.w	r3, r3, #3
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	220f      	movs	r2, #15
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43db      	mvns	r3, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4013      	ands	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	4a4f      	ldr	r2, [pc, #316]	; (8001950 <HAL_GPIO_Init+0x308>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d025      	beq.n	8001862 <HAL_GPIO_Init+0x21a>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	4a4e      	ldr	r2, [pc, #312]	; (8001954 <HAL_GPIO_Init+0x30c>)
 800181a:	4293      	cmp	r3, r2
 800181c:	d01f      	beq.n	800185e <HAL_GPIO_Init+0x216>
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	4a4d      	ldr	r2, [pc, #308]	; (8001958 <HAL_GPIO_Init+0x310>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d019      	beq.n	800185a <HAL_GPIO_Init+0x212>
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4a4c      	ldr	r2, [pc, #304]	; (800195c <HAL_GPIO_Init+0x314>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d013      	beq.n	8001856 <HAL_GPIO_Init+0x20e>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4a4b      	ldr	r2, [pc, #300]	; (8001960 <HAL_GPIO_Init+0x318>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d00d      	beq.n	8001852 <HAL_GPIO_Init+0x20a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	4a4a      	ldr	r2, [pc, #296]	; (8001964 <HAL_GPIO_Init+0x31c>)
 800183a:	4293      	cmp	r3, r2
 800183c:	d007      	beq.n	800184e <HAL_GPIO_Init+0x206>
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	4a49      	ldr	r2, [pc, #292]	; (8001968 <HAL_GPIO_Init+0x320>)
 8001842:	4293      	cmp	r3, r2
 8001844:	d101      	bne.n	800184a <HAL_GPIO_Init+0x202>
 8001846:	2306      	movs	r3, #6
 8001848:	e00c      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 800184a:	2307      	movs	r3, #7
 800184c:	e00a      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 800184e:	2305      	movs	r3, #5
 8001850:	e008      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 8001852:	2304      	movs	r3, #4
 8001854:	e006      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 8001856:	2303      	movs	r3, #3
 8001858:	e004      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 800185a:	2302      	movs	r3, #2
 800185c:	e002      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 800185e:	2301      	movs	r3, #1
 8001860:	e000      	b.n	8001864 <HAL_GPIO_Init+0x21c>
 8001862:	2300      	movs	r3, #0
 8001864:	69fa      	ldr	r2, [r7, #28]
 8001866:	f002 0203 	and.w	r2, r2, #3
 800186a:	0092      	lsls	r2, r2, #2
 800186c:	4093      	lsls	r3, r2
 800186e:	69ba      	ldr	r2, [r7, #24]
 8001870:	4313      	orrs	r3, r2
 8001872:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001874:	4935      	ldr	r1, [pc, #212]	; (800194c <HAL_GPIO_Init+0x304>)
 8001876:	69fb      	ldr	r3, [r7, #28]
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	3302      	adds	r3, #2
 800187c:	69ba      	ldr	r2, [r7, #24]
 800187e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001882:	4b3a      	ldr	r3, [pc, #232]	; (800196c <HAL_GPIO_Init+0x324>)
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	43db      	mvns	r3, r3
 800188c:	69ba      	ldr	r2, [r7, #24]
 800188e:	4013      	ands	r3, r2
 8001890:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001892:	683b      	ldr	r3, [r7, #0]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800189a:	2b00      	cmp	r3, #0
 800189c:	d003      	beq.n	80018a6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800189e:	69ba      	ldr	r2, [r7, #24]
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	4313      	orrs	r3, r2
 80018a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018a6:	4a31      	ldr	r2, [pc, #196]	; (800196c <HAL_GPIO_Init+0x324>)
 80018a8:	69bb      	ldr	r3, [r7, #24]
 80018aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018ac:	4b2f      	ldr	r3, [pc, #188]	; (800196c <HAL_GPIO_Init+0x324>)
 80018ae:	68db      	ldr	r3, [r3, #12]
 80018b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018b2:	693b      	ldr	r3, [r7, #16]
 80018b4:	43db      	mvns	r3, r3
 80018b6:	69ba      	ldr	r2, [r7, #24]
 80018b8:	4013      	ands	r3, r2
 80018ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018bc:	683b      	ldr	r3, [r7, #0]
 80018be:	685b      	ldr	r3, [r3, #4]
 80018c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d003      	beq.n	80018d0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80018c8:	69ba      	ldr	r2, [r7, #24]
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018d0:	4a26      	ldr	r2, [pc, #152]	; (800196c <HAL_GPIO_Init+0x324>)
 80018d2:	69bb      	ldr	r3, [r7, #24]
 80018d4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018d6:	4b25      	ldr	r3, [pc, #148]	; (800196c <HAL_GPIO_Init+0x324>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	43db      	mvns	r3, r3
 80018e0:	69ba      	ldr	r2, [r7, #24]
 80018e2:	4013      	ands	r3, r2
 80018e4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	685b      	ldr	r3, [r3, #4]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d003      	beq.n	80018fa <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80018f2:	69ba      	ldr	r2, [r7, #24]
 80018f4:	693b      	ldr	r3, [r7, #16]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80018fa:	4a1c      	ldr	r2, [pc, #112]	; (800196c <HAL_GPIO_Init+0x324>)
 80018fc:	69bb      	ldr	r3, [r7, #24]
 80018fe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001900:	4b1a      	ldr	r3, [pc, #104]	; (800196c <HAL_GPIO_Init+0x324>)
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	43db      	mvns	r3, r3
 800190a:	69ba      	ldr	r2, [r7, #24]
 800190c:	4013      	ands	r3, r2
 800190e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001910:	683b      	ldr	r3, [r7, #0]
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001918:	2b00      	cmp	r3, #0
 800191a:	d003      	beq.n	8001924 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800191c:	69ba      	ldr	r2, [r7, #24]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	4313      	orrs	r3, r2
 8001922:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001924:	4a11      	ldr	r2, [pc, #68]	; (800196c <HAL_GPIO_Init+0x324>)
 8001926:	69bb      	ldr	r3, [r7, #24]
 8001928:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	3301      	adds	r3, #1
 800192e:	61fb      	str	r3, [r7, #28]
 8001930:	69fb      	ldr	r3, [r7, #28]
 8001932:	2b0f      	cmp	r3, #15
 8001934:	f67f ae96 	bls.w	8001664 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	3724      	adds	r7, #36	; 0x24
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	40023800 	.word	0x40023800
 800194c:	40013800 	.word	0x40013800
 8001950:	40020000 	.word	0x40020000
 8001954:	40020400 	.word	0x40020400
 8001958:	40020800 	.word	0x40020800
 800195c:	40020c00 	.word	0x40020c00
 8001960:	40021000 	.word	0x40021000
 8001964:	40021400 	.word	0x40021400
 8001968:	40021800 	.word	0x40021800
 800196c:	40013c00 	.word	0x40013c00

08001970 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001970:	b480      	push	{r7}
 8001972:	b083      	sub	sp, #12
 8001974:	af00      	add	r7, sp, #0
 8001976:	6078      	str	r0, [r7, #4]
 8001978:	460b      	mov	r3, r1
 800197a:	807b      	strh	r3, [r7, #2]
 800197c:	4613      	mov	r3, r2
 800197e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001980:	787b      	ldrb	r3, [r7, #1]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d003      	beq.n	800198e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001986:	887a      	ldrh	r2, [r7, #2]
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800198c:	e003      	b.n	8001996 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800198e:	887b      	ldrh	r3, [r7, #2]
 8001990:	041a      	lsls	r2, r3, #16
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	619a      	str	r2, [r3, #24]
}
 8001996:	bf00      	nop
 8001998:	370c      	adds	r7, #12
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr

080019a2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80019a2:	b480      	push	{r7}
 80019a4:	b085      	sub	sp, #20
 80019a6:	af00      	add	r7, sp, #0
 80019a8:	6078      	str	r0, [r7, #4]
 80019aa:	460b      	mov	r3, r1
 80019ac:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	695b      	ldr	r3, [r3, #20]
 80019b2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80019b4:	887a      	ldrh	r2, [r7, #2]
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	4013      	ands	r3, r2
 80019ba:	041a      	lsls	r2, r3, #16
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	43d9      	mvns	r1, r3
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	400b      	ands	r3, r1
 80019c4:	431a      	orrs	r2, r3
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	619a      	str	r2, [r3, #24]
}
 80019ca:	bf00      	nop
 80019cc:	3714      	adds	r7, #20
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr
	...

080019d8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80019e2:	4b08      	ldr	r3, [pc, #32]	; (8001a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019e4:	695a      	ldr	r2, [r3, #20]
 80019e6:	88fb      	ldrh	r3, [r7, #6]
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d006      	beq.n	80019fc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019ee:	4a05      	ldr	r2, [pc, #20]	; (8001a04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019f0:	88fb      	ldrh	r3, [r7, #6]
 80019f2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019f4:	88fb      	ldrh	r3, [r7, #6]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fd88 	bl	800050c <HAL_GPIO_EXTI_Callback>
  }
}
 80019fc:	bf00      	nop
 80019fe:	3708      	adds	r7, #8
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	40013c00 	.word	0x40013c00

08001a08 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	b084      	sub	sp, #16
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d101      	bne.n	8001a1a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	e12b      	b.n	8001c72 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	d106      	bne.n	8001a34 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	2200      	movs	r2, #0
 8001a2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	f7ff faf0 	bl	8001014 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2224      	movs	r2, #36	; 0x24
 8001a38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f022 0201 	bic.w	r2, r2, #1
 8001a4a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	681a      	ldr	r2, [r3, #0]
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a5a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	681a      	ldr	r2, [r3, #0]
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a6a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a6c:	f000 fdbc 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 8001a70:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	4a81      	ldr	r2, [pc, #516]	; (8001c7c <HAL_I2C_Init+0x274>)
 8001a78:	4293      	cmp	r3, r2
 8001a7a:	d807      	bhi.n	8001a8c <HAL_I2C_Init+0x84>
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	4a80      	ldr	r2, [pc, #512]	; (8001c80 <HAL_I2C_Init+0x278>)
 8001a80:	4293      	cmp	r3, r2
 8001a82:	bf94      	ite	ls
 8001a84:	2301      	movls	r3, #1
 8001a86:	2300      	movhi	r3, #0
 8001a88:	b2db      	uxtb	r3, r3
 8001a8a:	e006      	b.n	8001a9a <HAL_I2C_Init+0x92>
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	4a7d      	ldr	r2, [pc, #500]	; (8001c84 <HAL_I2C_Init+0x27c>)
 8001a90:	4293      	cmp	r3, r2
 8001a92:	bf94      	ite	ls
 8001a94:	2301      	movls	r3, #1
 8001a96:	2300      	movhi	r3, #0
 8001a98:	b2db      	uxtb	r3, r3
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d001      	beq.n	8001aa2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e0e7      	b.n	8001c72 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001aa2:	68fb      	ldr	r3, [r7, #12]
 8001aa4:	4a78      	ldr	r2, [pc, #480]	; (8001c88 <HAL_I2C_Init+0x280>)
 8001aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aaa:	0c9b      	lsrs	r3, r3, #18
 8001aac:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	68ba      	ldr	r2, [r7, #8]
 8001abe:	430a      	orrs	r2, r1
 8001ac0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6a1b      	ldr	r3, [r3, #32]
 8001ac8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4a6a      	ldr	r2, [pc, #424]	; (8001c7c <HAL_I2C_Init+0x274>)
 8001ad2:	4293      	cmp	r3, r2
 8001ad4:	d802      	bhi.n	8001adc <HAL_I2C_Init+0xd4>
 8001ad6:	68bb      	ldr	r3, [r7, #8]
 8001ad8:	3301      	adds	r3, #1
 8001ada:	e009      	b.n	8001af0 <HAL_I2C_Init+0xe8>
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	4a69      	ldr	r2, [pc, #420]	; (8001c8c <HAL_I2C_Init+0x284>)
 8001ae8:	fba2 2303 	umull	r2, r3, r2, r3
 8001aec:	099b      	lsrs	r3, r3, #6
 8001aee:	3301      	adds	r3, #1
 8001af0:	687a      	ldr	r2, [r7, #4]
 8001af2:	6812      	ldr	r2, [r2, #0]
 8001af4:	430b      	orrs	r3, r1
 8001af6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	69db      	ldr	r3, [r3, #28]
 8001afe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001b02:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	685b      	ldr	r3, [r3, #4]
 8001b0a:	495c      	ldr	r1, [pc, #368]	; (8001c7c <HAL_I2C_Init+0x274>)
 8001b0c:	428b      	cmp	r3, r1
 8001b0e:	d819      	bhi.n	8001b44 <HAL_I2C_Init+0x13c>
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	1e59      	subs	r1, r3, #1
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	005b      	lsls	r3, r3, #1
 8001b1a:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b1e:	1c59      	adds	r1, r3, #1
 8001b20:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001b24:	400b      	ands	r3, r1
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00a      	beq.n	8001b40 <HAL_I2C_Init+0x138>
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	1e59      	subs	r1, r3, #1
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	005b      	lsls	r3, r3, #1
 8001b34:	fbb1 f3f3 	udiv	r3, r1, r3
 8001b38:	3301      	adds	r3, #1
 8001b3a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3e:	e051      	b.n	8001be4 <HAL_I2C_Init+0x1dc>
 8001b40:	2304      	movs	r3, #4
 8001b42:	e04f      	b.n	8001be4 <HAL_I2C_Init+0x1dc>
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	689b      	ldr	r3, [r3, #8]
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d111      	bne.n	8001b70 <HAL_I2C_Init+0x168>
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	1e58      	subs	r0, r3, #1
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	6859      	ldr	r1, [r3, #4]
 8001b54:	460b      	mov	r3, r1
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	440b      	add	r3, r1
 8001b5a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b5e:	3301      	adds	r3, #1
 8001b60:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	bf0c      	ite	eq
 8001b68:	2301      	moveq	r3, #1
 8001b6a:	2300      	movne	r3, #0
 8001b6c:	b2db      	uxtb	r3, r3
 8001b6e:	e012      	b.n	8001b96 <HAL_I2C_Init+0x18e>
 8001b70:	68fb      	ldr	r3, [r7, #12]
 8001b72:	1e58      	subs	r0, r3, #1
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6859      	ldr	r1, [r3, #4]
 8001b78:	460b      	mov	r3, r1
 8001b7a:	009b      	lsls	r3, r3, #2
 8001b7c:	440b      	add	r3, r1
 8001b7e:	0099      	lsls	r1, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b86:	3301      	adds	r3, #1
 8001b88:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	bf0c      	ite	eq
 8001b90:	2301      	moveq	r3, #1
 8001b92:	2300      	movne	r3, #0
 8001b94:	b2db      	uxtb	r3, r3
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d001      	beq.n	8001b9e <HAL_I2C_Init+0x196>
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	e022      	b.n	8001be4 <HAL_I2C_Init+0x1dc>
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	689b      	ldr	r3, [r3, #8]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d10e      	bne.n	8001bc4 <HAL_I2C_Init+0x1bc>
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	1e58      	subs	r0, r3, #1
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6859      	ldr	r1, [r3, #4]
 8001bae:	460b      	mov	r3, r1
 8001bb0:	005b      	lsls	r3, r3, #1
 8001bb2:	440b      	add	r3, r1
 8001bb4:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bb8:	3301      	adds	r3, #1
 8001bba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001bbe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc2:	e00f      	b.n	8001be4 <HAL_I2C_Init+0x1dc>
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	1e58      	subs	r0, r3, #1
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6859      	ldr	r1, [r3, #4]
 8001bcc:	460b      	mov	r3, r1
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	440b      	add	r3, r1
 8001bd2:	0099      	lsls	r1, r3, #2
 8001bd4:	440b      	add	r3, r1
 8001bd6:	fbb0 f3f3 	udiv	r3, r0, r3
 8001bda:	3301      	adds	r3, #1
 8001bdc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001be0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001be4:	6879      	ldr	r1, [r7, #4]
 8001be6:	6809      	ldr	r1, [r1, #0]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	69da      	ldr	r2, [r3, #28]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6a1b      	ldr	r3, [r3, #32]
 8001bfe:	431a      	orrs	r2, r3
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	430a      	orrs	r2, r1
 8001c06:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	689b      	ldr	r3, [r3, #8]
 8001c0e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001c12:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001c16:	687a      	ldr	r2, [r7, #4]
 8001c18:	6911      	ldr	r1, [r2, #16]
 8001c1a:	687a      	ldr	r2, [r7, #4]
 8001c1c:	68d2      	ldr	r2, [r2, #12]
 8001c1e:	4311      	orrs	r1, r2
 8001c20:	687a      	ldr	r2, [r7, #4]
 8001c22:	6812      	ldr	r2, [r2, #0]
 8001c24:	430b      	orrs	r3, r1
 8001c26:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	68db      	ldr	r3, [r3, #12]
 8001c2e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	695a      	ldr	r2, [r3, #20]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	699b      	ldr	r3, [r3, #24]
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	430a      	orrs	r2, r1
 8001c42:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f042 0201 	orr.w	r2, r2, #1
 8001c52:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	2200      	movs	r2, #0
 8001c58:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2220      	movs	r2, #32
 8001c5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	2200      	movs	r2, #0
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2200      	movs	r2, #0
 8001c6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c70:	2300      	movs	r3, #0
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	3710      	adds	r7, #16
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bd80      	pop	{r7, pc}
 8001c7a:	bf00      	nop
 8001c7c:	000186a0 	.word	0x000186a0
 8001c80:	001e847f 	.word	0x001e847f
 8001c84:	003d08ff 	.word	0x003d08ff
 8001c88:	431bde83 	.word	0x431bde83
 8001c8c:	10624dd3 	.word	0x10624dd3

08001c90 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b088      	sub	sp, #32
 8001c94:	af02      	add	r7, sp, #8
 8001c96:	60f8      	str	r0, [r7, #12]
 8001c98:	4608      	mov	r0, r1
 8001c9a:	4611      	mov	r1, r2
 8001c9c:	461a      	mov	r2, r3
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	817b      	strh	r3, [r7, #10]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	813b      	strh	r3, [r7, #8]
 8001ca6:	4613      	mov	r3, r2
 8001ca8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001caa:	f7ff fbbb 	bl	8001424 <HAL_GetTick>
 8001cae:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cb6:	b2db      	uxtb	r3, r3
 8001cb8:	2b20      	cmp	r3, #32
 8001cba:	f040 80d9 	bne.w	8001e70 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	9300      	str	r3, [sp, #0]
 8001cc2:	2319      	movs	r3, #25
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	496d      	ldr	r1, [pc, #436]	; (8001e7c <HAL_I2C_Mem_Write+0x1ec>)
 8001cc8:	68f8      	ldr	r0, [r7, #12]
 8001cca:	f000 f971 	bl	8001fb0 <I2C_WaitOnFlagUntilTimeout>
 8001cce:	4603      	mov	r3, r0
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d001      	beq.n	8001cd8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	e0cc      	b.n	8001e72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001cde:	2b01      	cmp	r3, #1
 8001ce0:	d101      	bne.n	8001ce6 <HAL_I2C_Mem_Write+0x56>
 8001ce2:	2302      	movs	r3, #2
 8001ce4:	e0c5      	b.n	8001e72 <HAL_I2C_Mem_Write+0x1e2>
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2201      	movs	r2, #1
 8001cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d007      	beq.n	8001d0c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001cfc:	68fb      	ldr	r3, [r7, #12]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	f042 0201 	orr.w	r2, r2, #1
 8001d0a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001d1a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	2221      	movs	r2, #33	; 0x21
 8001d20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	2240      	movs	r2, #64	; 0x40
 8001d28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	2200      	movs	r2, #0
 8001d30:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001d32:	68fb      	ldr	r3, [r7, #12]
 8001d34:	6a3a      	ldr	r2, [r7, #32]
 8001d36:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001d3c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d42:	b29a      	uxth	r2, r3
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	4a4d      	ldr	r2, [pc, #308]	; (8001e80 <HAL_I2C_Mem_Write+0x1f0>)
 8001d4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001d4e:	88f8      	ldrh	r0, [r7, #6]
 8001d50:	893a      	ldrh	r2, [r7, #8]
 8001d52:	8979      	ldrh	r1, [r7, #10]
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	9301      	str	r3, [sp, #4]
 8001d58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	68f8      	ldr	r0, [r7, #12]
 8001d60:	f000 f890 	bl	8001e84 <I2C_RequestMemoryWrite>
 8001d64:	4603      	mov	r3, r0
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d052      	beq.n	8001e10 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e081      	b.n	8001e72 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d6e:	697a      	ldr	r2, [r7, #20]
 8001d70:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 fa36 	bl	80021e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d00d      	beq.n	8001d9a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d82:	2b04      	cmp	r3, #4
 8001d84:	d107      	bne.n	8001d96 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d86:	68fb      	ldr	r3, [r7, #12]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d94:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d96:	2301      	movs	r3, #1
 8001d98:	e06b      	b.n	8001e72 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d9a:	68fb      	ldr	r3, [r7, #12]
 8001d9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9e:	781a      	ldrb	r2, [r3, #0]
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001daa:	1c5a      	adds	r2, r3, #1
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	3b01      	subs	r3, #1
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	695b      	ldr	r3, [r3, #20]
 8001dd0:	f003 0304 	and.w	r3, r3, #4
 8001dd4:	2b04      	cmp	r3, #4
 8001dd6:	d11b      	bne.n	8001e10 <HAL_I2C_Mem_Write+0x180>
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d017      	beq.n	8001e10 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de4:	781a      	ldrb	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dfa:	3b01      	subs	r3, #1
 8001dfc:	b29a      	uxth	r2, r3
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001e06:	b29b      	uxth	r3, r3
 8001e08:	3b01      	subs	r3, #1
 8001e0a:	b29a      	uxth	r2, r3
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d1aa      	bne.n	8001d6e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001e18:	697a      	ldr	r2, [r7, #20]
 8001e1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001e1c:	68f8      	ldr	r0, [r7, #12]
 8001e1e:	f000 fa29 	bl	8002274 <I2C_WaitOnBTFFlagUntilTimeout>
 8001e22:	4603      	mov	r3, r0
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d00d      	beq.n	8001e44 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2c:	2b04      	cmp	r3, #4
 8001e2e:	d107      	bne.n	8001e40 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	681a      	ldr	r2, [r3, #0]
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e3e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001e40:	2301      	movs	r3, #1
 8001e42:	e016      	b.n	8001e72 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	2220      	movs	r2, #32
 8001e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	2200      	movs	r2, #0
 8001e68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	e000      	b.n	8001e72 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8001e70:	2302      	movs	r3, #2
  }
}
 8001e72:	4618      	mov	r0, r3
 8001e74:	3718      	adds	r7, #24
 8001e76:	46bd      	mov	sp, r7
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	00100002 	.word	0x00100002
 8001e80:	ffff0000 	.word	0xffff0000

08001e84 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b088      	sub	sp, #32
 8001e88:	af02      	add	r7, sp, #8
 8001e8a:	60f8      	str	r0, [r7, #12]
 8001e8c:	4608      	mov	r0, r1
 8001e8e:	4611      	mov	r1, r2
 8001e90:	461a      	mov	r2, r3
 8001e92:	4603      	mov	r3, r0
 8001e94:	817b      	strh	r3, [r7, #10]
 8001e96:	460b      	mov	r3, r1
 8001e98:	813b      	strh	r3, [r7, #8]
 8001e9a:	4613      	mov	r3, r2
 8001e9c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681a      	ldr	r2, [r3, #0]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001eac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001eb0:	9300      	str	r3, [sp, #0]
 8001eb2:	6a3b      	ldr	r3, [r7, #32]
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001eba:	68f8      	ldr	r0, [r7, #12]
 8001ebc:	f000 f878 	bl	8001fb0 <I2C_WaitOnFlagUntilTimeout>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d00d      	beq.n	8001ee2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ed0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001ed4:	d103      	bne.n	8001ede <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001edc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e05f      	b.n	8001fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ee2:	897b      	ldrh	r3, [r7, #10]
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001ef0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ef2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef4:	6a3a      	ldr	r2, [r7, #32]
 8001ef6:	492d      	ldr	r1, [pc, #180]	; (8001fac <I2C_RequestMemoryWrite+0x128>)
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	f000 f8d3 	bl	80020a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d001      	beq.n	8001f08 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	e04c      	b.n	8001fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	695b      	ldr	r3, [r3, #20]
 8001f12:	617b      	str	r3, [r7, #20]
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	699b      	ldr	r3, [r3, #24]
 8001f1a:	617b      	str	r3, [r7, #20]
 8001f1c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f20:	6a39      	ldr	r1, [r7, #32]
 8001f22:	68f8      	ldr	r0, [r7, #12]
 8001f24:	f000 f95e 	bl	80021e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d00d      	beq.n	8001f4a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f32:	2b04      	cmp	r3, #4
 8001f34:	d107      	bne.n	8001f46 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	681a      	ldr	r2, [r3, #0]
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f44:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e02b      	b.n	8001fa2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001f4a:	88fb      	ldrh	r3, [r7, #6]
 8001f4c:	2b01      	cmp	r3, #1
 8001f4e:	d105      	bne.n	8001f5c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f50:	893b      	ldrh	r3, [r7, #8]
 8001f52:	b2da      	uxtb	r2, r3
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	611a      	str	r2, [r3, #16]
 8001f5a:	e021      	b.n	8001fa0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8001f5c:	893b      	ldrh	r3, [r7, #8]
 8001f5e:	0a1b      	lsrs	r3, r3, #8
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f6c:	6a39      	ldr	r1, [r7, #32]
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 f938 	bl	80021e4 <I2C_WaitOnTXEFlagUntilTimeout>
 8001f74:	4603      	mov	r3, r0
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d00d      	beq.n	8001f96 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	2b04      	cmp	r3, #4
 8001f80:	d107      	bne.n	8001f92 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	681a      	ldr	r2, [r3, #0]
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001f90:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e005      	b.n	8001fa2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8001f96:	893b      	ldrh	r3, [r7, #8]
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8001fa0:	2300      	movs	r3, #0
}
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	3718      	adds	r7, #24
 8001fa6:	46bd      	mov	sp, r7
 8001fa8:	bd80      	pop	{r7, pc}
 8001faa:	bf00      	nop
 8001fac:	00010002 	.word	0x00010002

08001fb0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	b084      	sub	sp, #16
 8001fb4:	af00      	add	r7, sp, #0
 8001fb6:	60f8      	str	r0, [r7, #12]
 8001fb8:	60b9      	str	r1, [r7, #8]
 8001fba:	603b      	str	r3, [r7, #0]
 8001fbc:	4613      	mov	r3, r2
 8001fbe:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001fc0:	e048      	b.n	8002054 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001fc8:	d044      	beq.n	8002054 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fca:	f7ff fa2b 	bl	8001424 <HAL_GetTick>
 8001fce:	4602      	mov	r2, r0
 8001fd0:	69bb      	ldr	r3, [r7, #24]
 8001fd2:	1ad3      	subs	r3, r2, r3
 8001fd4:	683a      	ldr	r2, [r7, #0]
 8001fd6:	429a      	cmp	r2, r3
 8001fd8:	d302      	bcc.n	8001fe0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d139      	bne.n	8002054 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	0c1b      	lsrs	r3, r3, #16
 8001fe4:	b2db      	uxtb	r3, r3
 8001fe6:	2b01      	cmp	r3, #1
 8001fe8:	d10d      	bne.n	8002006 <I2C_WaitOnFlagUntilTimeout+0x56>
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	695b      	ldr	r3, [r3, #20]
 8001ff0:	43da      	mvns	r2, r3
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	b29b      	uxth	r3, r3
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	bf0c      	ite	eq
 8001ffc:	2301      	moveq	r3, #1
 8001ffe:	2300      	movne	r3, #0
 8002000:	b2db      	uxtb	r3, r3
 8002002:	461a      	mov	r2, r3
 8002004:	e00c      	b.n	8002020 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002006:	68fb      	ldr	r3, [r7, #12]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	43da      	mvns	r2, r3
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	4013      	ands	r3, r2
 8002012:	b29b      	uxth	r3, r3
 8002014:	2b00      	cmp	r3, #0
 8002016:	bf0c      	ite	eq
 8002018:	2301      	moveq	r3, #1
 800201a:	2300      	movne	r3, #0
 800201c:	b2db      	uxtb	r3, r3
 800201e:	461a      	mov	r2, r3
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	429a      	cmp	r2, r3
 8002024:	d116      	bne.n	8002054 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2200      	movs	r2, #0
 800202a:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	2220      	movs	r2, #32
 8002030:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	2200      	movs	r2, #0
 8002038:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800203c:	68fb      	ldr	r3, [r7, #12]
 800203e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002040:	f043 0220 	orr.w	r2, r3, #32
 8002044:	68fb      	ldr	r3, [r7, #12]
 8002046:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002050:	2301      	movs	r3, #1
 8002052:	e023      	b.n	800209c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	0c1b      	lsrs	r3, r3, #16
 8002058:	b2db      	uxtb	r3, r3
 800205a:	2b01      	cmp	r3, #1
 800205c:	d10d      	bne.n	800207a <I2C_WaitOnFlagUntilTimeout+0xca>
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	681b      	ldr	r3, [r3, #0]
 8002062:	695b      	ldr	r3, [r3, #20]
 8002064:	43da      	mvns	r2, r3
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	4013      	ands	r3, r2
 800206a:	b29b      	uxth	r3, r3
 800206c:	2b00      	cmp	r3, #0
 800206e:	bf0c      	ite	eq
 8002070:	2301      	moveq	r3, #1
 8002072:	2300      	movne	r3, #0
 8002074:	b2db      	uxtb	r3, r3
 8002076:	461a      	mov	r2, r3
 8002078:	e00c      	b.n	8002094 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	699b      	ldr	r3, [r3, #24]
 8002080:	43da      	mvns	r2, r3
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	4013      	ands	r3, r2
 8002086:	b29b      	uxth	r3, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	bf0c      	ite	eq
 800208c:	2301      	moveq	r3, #1
 800208e:	2300      	movne	r3, #0
 8002090:	b2db      	uxtb	r3, r3
 8002092:	461a      	mov	r2, r3
 8002094:	79fb      	ldrb	r3, [r7, #7]
 8002096:	429a      	cmp	r2, r3
 8002098:	d093      	beq.n	8001fc2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800209a:	2300      	movs	r3, #0
}
 800209c:	4618      	mov	r0, r3
 800209e:	3710      	adds	r7, #16
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}

080020a4 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80020a4:	b580      	push	{r7, lr}
 80020a6:	b084      	sub	sp, #16
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	60f8      	str	r0, [r7, #12]
 80020ac:	60b9      	str	r1, [r7, #8]
 80020ae:	607a      	str	r2, [r7, #4]
 80020b0:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020b2:	e071      	b.n	8002198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	695b      	ldr	r3, [r3, #20]
 80020ba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80020c2:	d123      	bne.n	800210c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	681a      	ldr	r2, [r3, #0]
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020d2:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80020dc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	2200      	movs	r2, #0
 80020e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80020f4:	68fb      	ldr	r3, [r7, #12]
 80020f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020f8:	f043 0204 	orr.w	r2, r3, #4
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	e067      	b.n	80021dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002112:	d041      	beq.n	8002198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002114:	f7ff f986 	bl	8001424 <HAL_GetTick>
 8002118:	4602      	mov	r2, r0
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	1ad3      	subs	r3, r2, r3
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	429a      	cmp	r2, r3
 8002122:	d302      	bcc.n	800212a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d136      	bne.n	8002198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	0c1b      	lsrs	r3, r3, #16
 800212e:	b2db      	uxtb	r3, r3
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10c      	bne.n	800214e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	43da      	mvns	r2, r3
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4013      	ands	r3, r2
 8002140:	b29b      	uxth	r3, r3
 8002142:	2b00      	cmp	r3, #0
 8002144:	bf14      	ite	ne
 8002146:	2301      	movne	r3, #1
 8002148:	2300      	moveq	r3, #0
 800214a:	b2db      	uxtb	r3, r3
 800214c:	e00b      	b.n	8002166 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	681b      	ldr	r3, [r3, #0]
 8002152:	699b      	ldr	r3, [r3, #24]
 8002154:	43da      	mvns	r2, r3
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	4013      	ands	r3, r2
 800215a:	b29b      	uxth	r3, r3
 800215c:	2b00      	cmp	r3, #0
 800215e:	bf14      	ite	ne
 8002160:	2301      	movne	r3, #1
 8002162:	2300      	moveq	r3, #0
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b00      	cmp	r3, #0
 8002168:	d016      	beq.n	8002198 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	2200      	movs	r2, #0
 800216e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	2220      	movs	r2, #32
 8002174:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002184:	f043 0220 	orr.w	r2, r3, #32
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800218c:	68fb      	ldr	r3, [r7, #12]
 800218e:	2200      	movs	r2, #0
 8002190:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002194:	2301      	movs	r3, #1
 8002196:	e021      	b.n	80021dc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002198:	68bb      	ldr	r3, [r7, #8]
 800219a:	0c1b      	lsrs	r3, r3, #16
 800219c:	b2db      	uxtb	r3, r3
 800219e:	2b01      	cmp	r3, #1
 80021a0:	d10c      	bne.n	80021bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	695b      	ldr	r3, [r3, #20]
 80021a8:	43da      	mvns	r2, r3
 80021aa:	68bb      	ldr	r3, [r7, #8]
 80021ac:	4013      	ands	r3, r2
 80021ae:	b29b      	uxth	r3, r3
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	bf14      	ite	ne
 80021b4:	2301      	movne	r3, #1
 80021b6:	2300      	moveq	r3, #0
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	e00b      	b.n	80021d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	699b      	ldr	r3, [r3, #24]
 80021c2:	43da      	mvns	r2, r3
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4013      	ands	r3, r2
 80021c8:	b29b      	uxth	r3, r3
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	bf14      	ite	ne
 80021ce:	2301      	movne	r3, #1
 80021d0:	2300      	moveq	r3, #0
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	f47f af6d 	bne.w	80020b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80021da:	2300      	movs	r3, #0
}
 80021dc:	4618      	mov	r0, r3
 80021de:	3710      	adds	r7, #16
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}

080021e4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80021f0:	e034      	b.n	800225c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80021f2:	68f8      	ldr	r0, [r7, #12]
 80021f4:	f000 f886 	bl	8002304 <I2C_IsAcknowledgeFailed>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80021fe:	2301      	movs	r3, #1
 8002200:	e034      	b.n	800226c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002202:	68bb      	ldr	r3, [r7, #8]
 8002204:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002208:	d028      	beq.n	800225c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800220a:	f7ff f90b 	bl	8001424 <HAL_GetTick>
 800220e:	4602      	mov	r2, r0
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	1ad3      	subs	r3, r2, r3
 8002214:	68ba      	ldr	r2, [r7, #8]
 8002216:	429a      	cmp	r2, r3
 8002218:	d302      	bcc.n	8002220 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800221a:	68bb      	ldr	r3, [r7, #8]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d11d      	bne.n	800225c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	695b      	ldr	r3, [r3, #20]
 8002226:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800222a:	2b80      	cmp	r3, #128	; 0x80
 800222c:	d016      	beq.n	800225c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2220      	movs	r2, #32
 8002238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	2200      	movs	r2, #0
 8002240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002248:	f043 0220 	orr.w	r2, r3, #32
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	2200      	movs	r2, #0
 8002254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002258:	2301      	movs	r3, #1
 800225a:	e007      	b.n	800226c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002266:	2b80      	cmp	r3, #128	; 0x80
 8002268:	d1c3      	bne.n	80021f2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800226a:	2300      	movs	r3, #0
}
 800226c:	4618      	mov	r0, r3
 800226e:	3710      	adds	r7, #16
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002274:	b580      	push	{r7, lr}
 8002276:	b084      	sub	sp, #16
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002280:	e034      	b.n	80022ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002282:	68f8      	ldr	r0, [r7, #12]
 8002284:	f000 f83e 	bl	8002304 <I2C_IsAcknowledgeFailed>
 8002288:	4603      	mov	r3, r0
 800228a:	2b00      	cmp	r3, #0
 800228c:	d001      	beq.n	8002292 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800228e:	2301      	movs	r3, #1
 8002290:	e034      	b.n	80022fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002292:	68bb      	ldr	r3, [r7, #8]
 8002294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002298:	d028      	beq.n	80022ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800229a:	f7ff f8c3 	bl	8001424 <HAL_GetTick>
 800229e:	4602      	mov	r2, r0
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	1ad3      	subs	r3, r2, r3
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d302      	bcc.n	80022b0 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d11d      	bne.n	80022ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	f003 0304 	and.w	r3, r3, #4
 80022ba:	2b04      	cmp	r3, #4
 80022bc:	d016      	beq.n	80022ec <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	2200      	movs	r2, #0
 80022c2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	2220      	movs	r2, #32
 80022c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	f043 0220 	orr.w	r2, r3, #32
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	2200      	movs	r2, #0
 80022e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e007      	b.n	80022fc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	695b      	ldr	r3, [r3, #20]
 80022f2:	f003 0304 	and.w	r3, r3, #4
 80022f6:	2b04      	cmp	r3, #4
 80022f8:	d1c3      	bne.n	8002282 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80022fa:	2300      	movs	r3, #0
}
 80022fc:	4618      	mov	r0, r3
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	695b      	ldr	r3, [r3, #20]
 8002312:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800231a:	d11b      	bne.n	8002354 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002324:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2220      	movs	r2, #32
 8002330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002340:	f043 0204 	orr.w	r2, r3, #4
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2200      	movs	r2, #0
 800234c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002350:	2301      	movs	r3, #1
 8002352:	e000      	b.n	8002356 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002354:	2300      	movs	r3, #0
}
 8002356:	4618      	mov	r0, r3
 8002358:	370c      	adds	r7, #12
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800236a:	2300      	movs	r3, #0
 800236c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800236e:	2300      	movs	r3, #0
 8002370:	603b      	str	r3, [r7, #0]
 8002372:	4b20      	ldr	r3, [pc, #128]	; (80023f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002376:	4a1f      	ldr	r2, [pc, #124]	; (80023f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002378:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800237c:	6413      	str	r3, [r2, #64]	; 0x40
 800237e:	4b1d      	ldr	r3, [pc, #116]	; (80023f4 <HAL_PWREx_EnableOverDrive+0x90>)
 8002380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002382:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002386:	603b      	str	r3, [r7, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800238a:	4b1b      	ldr	r3, [pc, #108]	; (80023f8 <HAL_PWREx_EnableOverDrive+0x94>)
 800238c:	2201      	movs	r2, #1
 800238e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002390:	f7ff f848 	bl	8001424 <HAL_GetTick>
 8002394:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002396:	e009      	b.n	80023ac <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002398:	f7ff f844 	bl	8001424 <HAL_GetTick>
 800239c:	4602      	mov	r2, r0
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	1ad3      	subs	r3, r2, r3
 80023a2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023a6:	d901      	bls.n	80023ac <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80023a8:	2303      	movs	r3, #3
 80023aa:	e01f      	b.n	80023ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023ac:	4b13      	ldr	r3, [pc, #76]	; (80023fc <HAL_PWREx_EnableOverDrive+0x98>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b8:	d1ee      	bne.n	8002398 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023ba:	4b11      	ldr	r3, [pc, #68]	; (8002400 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023bc:	2201      	movs	r2, #1
 80023be:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023c0:	f7ff f830 	bl	8001424 <HAL_GetTick>
 80023c4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023c6:	e009      	b.n	80023dc <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023c8:	f7ff f82c 	bl	8001424 <HAL_GetTick>
 80023cc:	4602      	mov	r2, r0
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	1ad3      	subs	r3, r2, r3
 80023d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023d6:	d901      	bls.n	80023dc <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e007      	b.n	80023ec <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023dc:	4b07      	ldr	r3, [pc, #28]	; (80023fc <HAL_PWREx_EnableOverDrive+0x98>)
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023e4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023e8:	d1ee      	bne.n	80023c8 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80023ea:	2300      	movs	r3, #0
}
 80023ec:	4618      	mov	r0, r3
 80023ee:	3708      	adds	r7, #8
 80023f0:	46bd      	mov	sp, r7
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	420e0040 	.word	0x420e0040
 80023fc:	40007000 	.word	0x40007000
 8002400:	420e0044 	.word	0x420e0044

08002404 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	b084      	sub	sp, #16
 8002408:	af00      	add	r7, sp, #0
 800240a:	6078      	str	r0, [r7, #4]
 800240c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e0cc      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002418:	4b68      	ldr	r3, [pc, #416]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 030f 	and.w	r3, r3, #15
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	429a      	cmp	r2, r3
 8002424:	d90c      	bls.n	8002440 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002426:	4b65      	ldr	r3, [pc, #404]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 8002428:	683a      	ldr	r2, [r7, #0]
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800242e:	4b63      	ldr	r3, [pc, #396]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 030f 	and.w	r3, r3, #15
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	429a      	cmp	r2, r3
 800243a:	d001      	beq.n	8002440 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800243c:	2301      	movs	r3, #1
 800243e:	e0b8      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d020      	beq.n	800248e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d005      	beq.n	8002464 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002458:	4b59      	ldr	r3, [pc, #356]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	4a58      	ldr	r2, [pc, #352]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800245e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002462:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0308 	and.w	r3, r3, #8
 800246c:	2b00      	cmp	r3, #0
 800246e:	d005      	beq.n	800247c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002470:	4b53      	ldr	r3, [pc, #332]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002472:	689b      	ldr	r3, [r3, #8]
 8002474:	4a52      	ldr	r2, [pc, #328]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002476:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800247a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800247c:	4b50      	ldr	r3, [pc, #320]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	494d      	ldr	r1, [pc, #308]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800248a:	4313      	orrs	r3, r2
 800248c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f003 0301 	and.w	r3, r3, #1
 8002496:	2b00      	cmp	r3, #0
 8002498:	d044      	beq.n	8002524 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d107      	bne.n	80024b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024a2:	4b47      	ldr	r3, [pc, #284]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d119      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ae:	2301      	movs	r3, #1
 80024b0:	e07f      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	685b      	ldr	r3, [r3, #4]
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d003      	beq.n	80024c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024be:	2b03      	cmp	r3, #3
 80024c0:	d107      	bne.n	80024d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024c2:	4b3f      	ldr	r3, [pc, #252]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d109      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024ce:	2301      	movs	r3, #1
 80024d0:	e06f      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024d2:	4b3b      	ldr	r3, [pc, #236]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f003 0302 	and.w	r3, r3, #2
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d101      	bne.n	80024e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e067      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024e2:	4b37      	ldr	r3, [pc, #220]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024e4:	689b      	ldr	r3, [r3, #8]
 80024e6:	f023 0203 	bic.w	r2, r3, #3
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	4934      	ldr	r1, [pc, #208]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024f4:	f7fe ff96 	bl	8001424 <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024fa:	e00a      	b.n	8002512 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024fc:	f7fe ff92 	bl	8001424 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	f241 3288 	movw	r2, #5000	; 0x1388
 800250a:	4293      	cmp	r3, r2
 800250c:	d901      	bls.n	8002512 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800250e:	2303      	movs	r3, #3
 8002510:	e04f      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002512:	4b2b      	ldr	r3, [pc, #172]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 020c 	and.w	r2, r3, #12
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	009b      	lsls	r3, r3, #2
 8002520:	429a      	cmp	r2, r3
 8002522:	d1eb      	bne.n	80024fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002524:	4b25      	ldr	r3, [pc, #148]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 030f 	and.w	r3, r3, #15
 800252c:	683a      	ldr	r2, [r7, #0]
 800252e:	429a      	cmp	r2, r3
 8002530:	d20c      	bcs.n	800254c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002532:	4b22      	ldr	r3, [pc, #136]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	b2d2      	uxtb	r2, r2
 8002538:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800253a:	4b20      	ldr	r3, [pc, #128]	; (80025bc <HAL_RCC_ClockConfig+0x1b8>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	683a      	ldr	r2, [r7, #0]
 8002544:	429a      	cmp	r2, r3
 8002546:	d001      	beq.n	800254c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002548:	2301      	movs	r3, #1
 800254a:	e032      	b.n	80025b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	f003 0304 	and.w	r3, r3, #4
 8002554:	2b00      	cmp	r3, #0
 8002556:	d008      	beq.n	800256a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002558:	4b19      	ldr	r3, [pc, #100]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	4916      	ldr	r1, [pc, #88]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002566:	4313      	orrs	r3, r2
 8002568:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f003 0308 	and.w	r3, r3, #8
 8002572:	2b00      	cmp	r3, #0
 8002574:	d009      	beq.n	800258a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002576:	4b12      	ldr	r3, [pc, #72]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002578:	689b      	ldr	r3, [r3, #8]
 800257a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	691b      	ldr	r3, [r3, #16]
 8002582:	00db      	lsls	r3, r3, #3
 8002584:	490e      	ldr	r1, [pc, #56]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	4313      	orrs	r3, r2
 8002588:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800258a:	f000 f887 	bl	800269c <HAL_RCC_GetSysClockFreq>
 800258e:	4602      	mov	r2, r0
 8002590:	4b0b      	ldr	r3, [pc, #44]	; (80025c0 <HAL_RCC_ClockConfig+0x1bc>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	490a      	ldr	r1, [pc, #40]	; (80025c4 <HAL_RCC_ClockConfig+0x1c0>)
 800259c:	5ccb      	ldrb	r3, [r1, r3]
 800259e:	fa22 f303 	lsr.w	r3, r2, r3
 80025a2:	4a09      	ldr	r2, [pc, #36]	; (80025c8 <HAL_RCC_ClockConfig+0x1c4>)
 80025a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025a6:	4b09      	ldr	r3, [pc, #36]	; (80025cc <HAL_RCC_ClockConfig+0x1c8>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4618      	mov	r0, r3
 80025ac:	f7fe fe1a 	bl	80011e4 <HAL_InitTick>

  return HAL_OK;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40023c00 	.word	0x40023c00
 80025c0:	40023800 	.word	0x40023800
 80025c4:	08009818 	.word	0x08009818
 80025c8:	20000000 	.word	0x20000000
 80025cc:	20000004 	.word	0x20000004

080025d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d0:	b480      	push	{r7}
 80025d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025d4:	4b03      	ldr	r3, [pc, #12]	; (80025e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80025d6:	681b      	ldr	r3, [r3, #0]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	46bd      	mov	sp, r7
 80025dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e0:	4770      	bx	lr
 80025e2:	bf00      	nop
 80025e4:	20000000 	.word	0x20000000

080025e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025ec:	f7ff fff0 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 80025f0:	4602      	mov	r2, r0
 80025f2:	4b05      	ldr	r3, [pc, #20]	; (8002608 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	0a9b      	lsrs	r3, r3, #10
 80025f8:	f003 0307 	and.w	r3, r3, #7
 80025fc:	4903      	ldr	r1, [pc, #12]	; (800260c <HAL_RCC_GetPCLK1Freq+0x24>)
 80025fe:	5ccb      	ldrb	r3, [r1, r3]
 8002600:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002604:	4618      	mov	r0, r3
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40023800 	.word	0x40023800
 800260c:	08009828 	.word	0x08009828

08002610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002614:	f7ff ffdc 	bl	80025d0 <HAL_RCC_GetHCLKFreq>
 8002618:	4602      	mov	r2, r0
 800261a:	4b05      	ldr	r3, [pc, #20]	; (8002630 <HAL_RCC_GetPCLK2Freq+0x20>)
 800261c:	689b      	ldr	r3, [r3, #8]
 800261e:	0b5b      	lsrs	r3, r3, #13
 8002620:	f003 0307 	and.w	r3, r3, #7
 8002624:	4903      	ldr	r1, [pc, #12]	; (8002634 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	fa22 f303 	lsr.w	r3, r2, r3
}
 800262c:	4618      	mov	r0, r3
 800262e:	bd80      	pop	{r7, pc}
 8002630:	40023800 	.word	0x40023800
 8002634:	08009828 	.word	0x08009828

08002638 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002638:	b480      	push	{r7}
 800263a:	b083      	sub	sp, #12
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	220f      	movs	r2, #15
 8002646:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002648:	4b12      	ldr	r3, [pc, #72]	; (8002694 <HAL_RCC_GetClockConfig+0x5c>)
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0203 	and.w	r2, r3, #3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002654:	4b0f      	ldr	r3, [pc, #60]	; (8002694 <HAL_RCC_GetClockConfig+0x5c>)
 8002656:	689b      	ldr	r3, [r3, #8]
 8002658:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <HAL_RCC_GetClockConfig+0x5c>)
 8002662:	689b      	ldr	r3, [r3, #8]
 8002664:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800266c:	4b09      	ldr	r3, [pc, #36]	; (8002694 <HAL_RCC_GetClockConfig+0x5c>)
 800266e:	689b      	ldr	r3, [r3, #8]
 8002670:	08db      	lsrs	r3, r3, #3
 8002672:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_RCC_GetClockConfig+0x60>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 020f 	and.w	r2, r3, #15
 8002682:	683b      	ldr	r3, [r7, #0]
 8002684:	601a      	str	r2, [r3, #0]
}
 8002686:	bf00      	nop
 8002688:	370c      	adds	r7, #12
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40023800 	.word	0x40023800
 8002698:	40023c00 	.word	0x40023c00

0800269c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800269c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80026a0:	b0ae      	sub	sp, #184	; 0xb8
 80026a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  uint32_t pllvco = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  uint32_t pllp = 0U;
 80026b0:	2300      	movs	r3, #0
 80026b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  uint32_t pllr = 0U;
 80026b6:	2300      	movs	r3, #0
 80026b8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  uint32_t sysclockfreq = 0U;
 80026bc:	2300      	movs	r3, #0
 80026be:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026c2:	4bcb      	ldr	r3, [pc, #812]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80026c4:	689b      	ldr	r3, [r3, #8]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b0c      	cmp	r3, #12
 80026cc:	f200 8206 	bhi.w	8002adc <HAL_RCC_GetSysClockFreq+0x440>
 80026d0:	a201      	add	r2, pc, #4	; (adr r2, 80026d8 <HAL_RCC_GetSysClockFreq+0x3c>)
 80026d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d6:	bf00      	nop
 80026d8:	0800270d 	.word	0x0800270d
 80026dc:	08002add 	.word	0x08002add
 80026e0:	08002add 	.word	0x08002add
 80026e4:	08002add 	.word	0x08002add
 80026e8:	08002715 	.word	0x08002715
 80026ec:	08002add 	.word	0x08002add
 80026f0:	08002add 	.word	0x08002add
 80026f4:	08002add 	.word	0x08002add
 80026f8:	0800271d 	.word	0x0800271d
 80026fc:	08002add 	.word	0x08002add
 8002700:	08002add 	.word	0x08002add
 8002704:	08002add 	.word	0x08002add
 8002708:	0800290d 	.word	0x0800290d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800270c:	4bb9      	ldr	r3, [pc, #740]	; (80029f4 <HAL_RCC_GetSysClockFreq+0x358>)
 800270e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
       break;
 8002712:	e1e7      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002714:	4bb8      	ldr	r3, [pc, #736]	; (80029f8 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002716:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800271a:	e1e3      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800271c:	4bb4      	ldr	r3, [pc, #720]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002724:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002728:	4bb1      	ldr	r3, [pc, #708]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002730:	2b00      	cmp	r3, #0
 8002732:	d071      	beq.n	8002818 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002734:	4bae      	ldr	r3, [pc, #696]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	099b      	lsrs	r3, r3, #6
 800273a:	2200      	movs	r2, #0
 800273c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002740:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 8002744:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002748:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800274c:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002750:	2300      	movs	r3, #0
 8002752:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002756:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800275a:	4622      	mov	r2, r4
 800275c:	462b      	mov	r3, r5
 800275e:	f04f 0000 	mov.w	r0, #0
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	0159      	lsls	r1, r3, #5
 8002768:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800276c:	0150      	lsls	r0, r2, #5
 800276e:	4602      	mov	r2, r0
 8002770:	460b      	mov	r3, r1
 8002772:	4621      	mov	r1, r4
 8002774:	1a51      	subs	r1, r2, r1
 8002776:	6439      	str	r1, [r7, #64]	; 0x40
 8002778:	4629      	mov	r1, r5
 800277a:	eb63 0301 	sbc.w	r3, r3, r1
 800277e:	647b      	str	r3, [r7, #68]	; 0x44
 8002780:	f04f 0200 	mov.w	r2, #0
 8002784:	f04f 0300 	mov.w	r3, #0
 8002788:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	; 0x40
 800278c:	4649      	mov	r1, r9
 800278e:	018b      	lsls	r3, r1, #6
 8002790:	4641      	mov	r1, r8
 8002792:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002796:	4641      	mov	r1, r8
 8002798:	018a      	lsls	r2, r1, #6
 800279a:	4641      	mov	r1, r8
 800279c:	1a51      	subs	r1, r2, r1
 800279e:	63b9      	str	r1, [r7, #56]	; 0x38
 80027a0:	4649      	mov	r1, r9
 80027a2:	eb63 0301 	sbc.w	r3, r3, r1
 80027a6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027a8:	f04f 0200 	mov.w	r2, #0
 80027ac:	f04f 0300 	mov.w	r3, #0
 80027b0:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	; 0x38
 80027b4:	4649      	mov	r1, r9
 80027b6:	00cb      	lsls	r3, r1, #3
 80027b8:	4641      	mov	r1, r8
 80027ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027be:	4641      	mov	r1, r8
 80027c0:	00ca      	lsls	r2, r1, #3
 80027c2:	4610      	mov	r0, r2
 80027c4:	4619      	mov	r1, r3
 80027c6:	4603      	mov	r3, r0
 80027c8:	4622      	mov	r2, r4
 80027ca:	189b      	adds	r3, r3, r2
 80027cc:	633b      	str	r3, [r7, #48]	; 0x30
 80027ce:	462b      	mov	r3, r5
 80027d0:	460a      	mov	r2, r1
 80027d2:	eb42 0303 	adc.w	r3, r2, r3
 80027d6:	637b      	str	r3, [r7, #52]	; 0x34
 80027d8:	f04f 0200 	mov.w	r2, #0
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80027e4:	4629      	mov	r1, r5
 80027e6:	024b      	lsls	r3, r1, #9
 80027e8:	4621      	mov	r1, r4
 80027ea:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ee:	4621      	mov	r1, r4
 80027f0:	024a      	lsls	r2, r1, #9
 80027f2:	4610      	mov	r0, r2
 80027f4:	4619      	mov	r1, r3
 80027f6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80027fa:	2200      	movs	r2, #0
 80027fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8002800:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8002804:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 8002808:	f7fd fd02 	bl	8000210 <__aeabi_uldivmod>
 800280c:	4602      	mov	r2, r0
 800280e:	460b      	mov	r3, r1
 8002810:	4613      	mov	r3, r2
 8002812:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002816:	e067      	b.n	80028e8 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002818:	4b75      	ldr	r3, [pc, #468]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	099b      	lsrs	r3, r3, #6
 800281e:	2200      	movs	r2, #0
 8002820:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002824:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8002828:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800282c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002830:	67bb      	str	r3, [r7, #120]	; 0x78
 8002832:	2300      	movs	r3, #0
 8002834:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002836:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	; 0x78
 800283a:	4622      	mov	r2, r4
 800283c:	462b      	mov	r3, r5
 800283e:	f04f 0000 	mov.w	r0, #0
 8002842:	f04f 0100 	mov.w	r1, #0
 8002846:	0159      	lsls	r1, r3, #5
 8002848:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800284c:	0150      	lsls	r0, r2, #5
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4621      	mov	r1, r4
 8002854:	1a51      	subs	r1, r2, r1
 8002856:	62b9      	str	r1, [r7, #40]	; 0x28
 8002858:	4629      	mov	r1, r5
 800285a:	eb63 0301 	sbc.w	r3, r3, r1
 800285e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002860:	f04f 0200 	mov.w	r2, #0
 8002864:	f04f 0300 	mov.w	r3, #0
 8002868:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	; 0x28
 800286c:	4649      	mov	r1, r9
 800286e:	018b      	lsls	r3, r1, #6
 8002870:	4641      	mov	r1, r8
 8002872:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002876:	4641      	mov	r1, r8
 8002878:	018a      	lsls	r2, r1, #6
 800287a:	4641      	mov	r1, r8
 800287c:	ebb2 0a01 	subs.w	sl, r2, r1
 8002880:	4649      	mov	r1, r9
 8002882:	eb63 0b01 	sbc.w	fp, r3, r1
 8002886:	f04f 0200 	mov.w	r2, #0
 800288a:	f04f 0300 	mov.w	r3, #0
 800288e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002892:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002896:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800289a:	4692      	mov	sl, r2
 800289c:	469b      	mov	fp, r3
 800289e:	4623      	mov	r3, r4
 80028a0:	eb1a 0303 	adds.w	r3, sl, r3
 80028a4:	623b      	str	r3, [r7, #32]
 80028a6:	462b      	mov	r3, r5
 80028a8:	eb4b 0303 	adc.w	r3, fp, r3
 80028ac:	627b      	str	r3, [r7, #36]	; 0x24
 80028ae:	f04f 0200 	mov.w	r2, #0
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028ba:	4629      	mov	r1, r5
 80028bc:	028b      	lsls	r3, r1, #10
 80028be:	4621      	mov	r1, r4
 80028c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028c4:	4621      	mov	r1, r4
 80028c6:	028a      	lsls	r2, r1, #10
 80028c8:	4610      	mov	r0, r2
 80028ca:	4619      	mov	r1, r3
 80028cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80028d0:	2200      	movs	r2, #0
 80028d2:	673b      	str	r3, [r7, #112]	; 0x70
 80028d4:	677a      	str	r2, [r7, #116]	; 0x74
 80028d6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 80028da:	f7fd fc99 	bl	8000210 <__aeabi_uldivmod>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4613      	mov	r3, r2
 80028e4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80028e8:	4b41      	ldr	r3, [pc, #260]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x354>)
 80028ea:	685b      	ldr	r3, [r3, #4]
 80028ec:	0c1b      	lsrs	r3, r3, #16
 80028ee:	f003 0303 	and.w	r3, r3, #3
 80028f2:	3301      	adds	r3, #1
 80028f4:	005b      	lsls	r3, r3, #1
 80028f6:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

      sysclockfreq = pllvco/pllp;
 80028fa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80028fe:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002902:	fbb2 f3f3 	udiv	r3, r2, r3
 8002906:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 800290a:	e0eb      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800290c:	4b38      	ldr	r3, [pc, #224]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002914:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002918:	4b35      	ldr	r3, [pc, #212]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x354>)
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002920:	2b00      	cmp	r3, #0
 8002922:	d06b      	beq.n	80029fc <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002924:	4b32      	ldr	r3, [pc, #200]	; (80029f0 <HAL_RCC_GetSysClockFreq+0x354>)
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	099b      	lsrs	r3, r3, #6
 800292a:	2200      	movs	r2, #0
 800292c:	66bb      	str	r3, [r7, #104]	; 0x68
 800292e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002930:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002932:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002936:	663b      	str	r3, [r7, #96]	; 0x60
 8002938:	2300      	movs	r3, #0
 800293a:	667b      	str	r3, [r7, #100]	; 0x64
 800293c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	; 0x60
 8002940:	4622      	mov	r2, r4
 8002942:	462b      	mov	r3, r5
 8002944:	f04f 0000 	mov.w	r0, #0
 8002948:	f04f 0100 	mov.w	r1, #0
 800294c:	0159      	lsls	r1, r3, #5
 800294e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002952:	0150      	lsls	r0, r2, #5
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4621      	mov	r1, r4
 800295a:	1a51      	subs	r1, r2, r1
 800295c:	61b9      	str	r1, [r7, #24]
 800295e:	4629      	mov	r1, r5
 8002960:	eb63 0301 	sbc.w	r3, r3, r1
 8002964:	61fb      	str	r3, [r7, #28]
 8002966:	f04f 0200 	mov.w	r2, #0
 800296a:	f04f 0300 	mov.w	r3, #0
 800296e:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002972:	4659      	mov	r1, fp
 8002974:	018b      	lsls	r3, r1, #6
 8002976:	4651      	mov	r1, sl
 8002978:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800297c:	4651      	mov	r1, sl
 800297e:	018a      	lsls	r2, r1, #6
 8002980:	4651      	mov	r1, sl
 8002982:	ebb2 0801 	subs.w	r8, r2, r1
 8002986:	4659      	mov	r1, fp
 8002988:	eb63 0901 	sbc.w	r9, r3, r1
 800298c:	f04f 0200 	mov.w	r2, #0
 8002990:	f04f 0300 	mov.w	r3, #0
 8002994:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002998:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800299c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029a0:	4690      	mov	r8, r2
 80029a2:	4699      	mov	r9, r3
 80029a4:	4623      	mov	r3, r4
 80029a6:	eb18 0303 	adds.w	r3, r8, r3
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	462b      	mov	r3, r5
 80029ae:	eb49 0303 	adc.w	r3, r9, r3
 80029b2:	617b      	str	r3, [r7, #20]
 80029b4:	f04f 0200 	mov.w	r2, #0
 80029b8:	f04f 0300 	mov.w	r3, #0
 80029bc:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029c0:	4629      	mov	r1, r5
 80029c2:	024b      	lsls	r3, r1, #9
 80029c4:	4621      	mov	r1, r4
 80029c6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029ca:	4621      	mov	r1, r4
 80029cc:	024a      	lsls	r2, r1, #9
 80029ce:	4610      	mov	r0, r2
 80029d0:	4619      	mov	r1, r3
 80029d2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80029d6:	2200      	movs	r2, #0
 80029d8:	65bb      	str	r3, [r7, #88]	; 0x58
 80029da:	65fa      	str	r2, [r7, #92]	; 0x5c
 80029dc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80029e0:	f7fd fc16 	bl	8000210 <__aeabi_uldivmod>
 80029e4:	4602      	mov	r2, r0
 80029e6:	460b      	mov	r3, r1
 80029e8:	4613      	mov	r3, r2
 80029ea:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80029ee:	e065      	b.n	8002abc <HAL_RCC_GetSysClockFreq+0x420>
 80029f0:	40023800 	.word	0x40023800
 80029f4:	00f42400 	.word	0x00f42400
 80029f8:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fc:	4b3d      	ldr	r3, [pc, #244]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x458>)
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	099b      	lsrs	r3, r3, #6
 8002a02:	2200      	movs	r2, #0
 8002a04:	4618      	mov	r0, r3
 8002a06:	4611      	mov	r1, r2
 8002a08:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a0c:	653b      	str	r3, [r7, #80]	; 0x50
 8002a0e:	2300      	movs	r3, #0
 8002a10:	657b      	str	r3, [r7, #84]	; 0x54
 8002a12:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	; 0x50
 8002a16:	4642      	mov	r2, r8
 8002a18:	464b      	mov	r3, r9
 8002a1a:	f04f 0000 	mov.w	r0, #0
 8002a1e:	f04f 0100 	mov.w	r1, #0
 8002a22:	0159      	lsls	r1, r3, #5
 8002a24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a28:	0150      	lsls	r0, r2, #5
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4641      	mov	r1, r8
 8002a30:	1a51      	subs	r1, r2, r1
 8002a32:	60b9      	str	r1, [r7, #8]
 8002a34:	4649      	mov	r1, r9
 8002a36:	eb63 0301 	sbc.w	r3, r3, r1
 8002a3a:	60fb      	str	r3, [r7, #12]
 8002a3c:	f04f 0200 	mov.w	r2, #0
 8002a40:	f04f 0300 	mov.w	r3, #0
 8002a44:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a48:	4659      	mov	r1, fp
 8002a4a:	018b      	lsls	r3, r1, #6
 8002a4c:	4651      	mov	r1, sl
 8002a4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a52:	4651      	mov	r1, sl
 8002a54:	018a      	lsls	r2, r1, #6
 8002a56:	4651      	mov	r1, sl
 8002a58:	1a54      	subs	r4, r2, r1
 8002a5a:	4659      	mov	r1, fp
 8002a5c:	eb63 0501 	sbc.w	r5, r3, r1
 8002a60:	f04f 0200 	mov.w	r2, #0
 8002a64:	f04f 0300 	mov.w	r3, #0
 8002a68:	00eb      	lsls	r3, r5, #3
 8002a6a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a6e:	00e2      	lsls	r2, r4, #3
 8002a70:	4614      	mov	r4, r2
 8002a72:	461d      	mov	r5, r3
 8002a74:	4643      	mov	r3, r8
 8002a76:	18e3      	adds	r3, r4, r3
 8002a78:	603b      	str	r3, [r7, #0]
 8002a7a:	464b      	mov	r3, r9
 8002a7c:	eb45 0303 	adc.w	r3, r5, r3
 8002a80:	607b      	str	r3, [r7, #4]
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a8e:	4629      	mov	r1, r5
 8002a90:	028b      	lsls	r3, r1, #10
 8002a92:	4621      	mov	r1, r4
 8002a94:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a98:	4621      	mov	r1, r4
 8002a9a:	028a      	lsls	r2, r1, #10
 8002a9c:	4610      	mov	r0, r2
 8002a9e:	4619      	mov	r1, r3
 8002aa0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8002aa8:	64fa      	str	r2, [r7, #76]	; 0x4c
 8002aaa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8002aae:	f7fd fbaf 	bl	8000210 <__aeabi_uldivmod>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	460b      	mov	r3, r1
 8002ab6:	4613      	mov	r3, r2
 8002ab8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002abc:	4b0d      	ldr	r3, [pc, #52]	; (8002af4 <HAL_RCC_GetSysClockFreq+0x458>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	0f1b      	lsrs	r3, r3, #28
 8002ac2:	f003 0307 	and.w	r3, r3, #7
 8002ac6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

      sysclockfreq = pllvco/pllr;
 8002aca:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002ace:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8002ad2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ada:	e003      	b.n	8002ae4 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ade:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
      break;
 8002ae2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ae4:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	37b8      	adds	r7, #184	; 0xb8
 8002aec:	46bd      	mov	sp, r7
 8002aee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002af2:	bf00      	nop
 8002af4:	40023800 	.word	0x40023800
 8002af8:	00f42400 	.word	0x00f42400

08002afc <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b086      	sub	sp, #24
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e28d      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	f003 0301 	and.w	r3, r3, #1
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	f000 8083 	beq.w	8002c22 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b1c:	4b94      	ldr	r3, [pc, #592]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 030c 	and.w	r3, r3, #12
 8002b24:	2b04      	cmp	r3, #4
 8002b26:	d019      	beq.n	8002b5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b28:	4b91      	ldr	r3, [pc, #580]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8002b30:	2b08      	cmp	r3, #8
 8002b32:	d106      	bne.n	8002b42 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b34:	4b8e      	ldr	r3, [pc, #568]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b36:	685b      	ldr	r3, [r3, #4]
 8002b38:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b3c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b40:	d00c      	beq.n	8002b5c <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b42:	4b8b      	ldr	r3, [pc, #556]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b44:	689b      	ldr	r3, [r3, #8]
 8002b46:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8002b4a:	2b0c      	cmp	r3, #12
 8002b4c:	d112      	bne.n	8002b74 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4e:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b56:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002b5a:	d10b      	bne.n	8002b74 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b5c:	4b84      	ldr	r3, [pc, #528]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d05b      	beq.n	8002c20 <HAL_RCC_OscConfig+0x124>
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d157      	bne.n	8002c20 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	e25a      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	685b      	ldr	r3, [r3, #4]
 8002b78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b7c:	d106      	bne.n	8002b8c <HAL_RCC_OscConfig+0x90>
 8002b7e:	4b7c      	ldr	r3, [pc, #496]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	4a7b      	ldr	r2, [pc, #492]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b84:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002b88:	6013      	str	r3, [r2, #0]
 8002b8a:	e01d      	b.n	8002bc8 <HAL_RCC_OscConfig+0xcc>
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002b94:	d10c      	bne.n	8002bb0 <HAL_RCC_OscConfig+0xb4>
 8002b96:	4b76      	ldr	r3, [pc, #472]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	4a75      	ldr	r2, [pc, #468]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002b9c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002ba0:	6013      	str	r3, [r2, #0]
 8002ba2:	4b73      	ldr	r3, [pc, #460]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	4a72      	ldr	r2, [pc, #456]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002bac:	6013      	str	r3, [r2, #0]
 8002bae:	e00b      	b.n	8002bc8 <HAL_RCC_OscConfig+0xcc>
 8002bb0:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a6e      	ldr	r2, [pc, #440]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002bb6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002bba:	6013      	str	r3, [r2, #0]
 8002bbc:	4b6c      	ldr	r3, [pc, #432]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a6b      	ldr	r2, [pc, #428]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002bc2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002bc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d013      	beq.n	8002bf8 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bd0:	f7fe fc28 	bl	8001424 <HAL_GetTick>
 8002bd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd6:	e008      	b.n	8002bea <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002bd8:	f7fe fc24 	bl	8001424 <HAL_GetTick>
 8002bdc:	4602      	mov	r2, r0
 8002bde:	693b      	ldr	r3, [r7, #16]
 8002be0:	1ad3      	subs	r3, r2, r3
 8002be2:	2b64      	cmp	r3, #100	; 0x64
 8002be4:	d901      	bls.n	8002bea <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002be6:	2303      	movs	r3, #3
 8002be8:	e21f      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bea:	4b61      	ldr	r3, [pc, #388]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0f0      	beq.n	8002bd8 <HAL_RCC_OscConfig+0xdc>
 8002bf6:	e014      	b.n	8002c22 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf8:	f7fe fc14 	bl	8001424 <HAL_GetTick>
 8002bfc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfe:	e008      	b.n	8002c12 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002c00:	f7fe fc10 	bl	8001424 <HAL_GetTick>
 8002c04:	4602      	mov	r2, r0
 8002c06:	693b      	ldr	r3, [r7, #16]
 8002c08:	1ad3      	subs	r3, r2, r3
 8002c0a:	2b64      	cmp	r3, #100	; 0x64
 8002c0c:	d901      	bls.n	8002c12 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c0e:	2303      	movs	r3, #3
 8002c10:	e20b      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c12:	4b57      	ldr	r3, [pc, #348]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d1f0      	bne.n	8002c00 <HAL_RCC_OscConfig+0x104>
 8002c1e:	e000      	b.n	8002c22 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c20:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d06f      	beq.n	8002d0e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c2e:	4b50      	ldr	r3, [pc, #320]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	f003 030c 	and.w	r3, r3, #12
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d017      	beq.n	8002c6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c3a:	4b4d      	ldr	r3, [pc, #308]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c3c:	689b      	ldr	r3, [r3, #8]
 8002c3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8002c42:	2b08      	cmp	r3, #8
 8002c44:	d105      	bne.n	8002c52 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c46:	4b4a      	ldr	r3, [pc, #296]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c48:	685b      	ldr	r3, [r3, #4]
 8002c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d00b      	beq.n	8002c6a <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c52:	4b47      	ldr	r3, [pc, #284]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c54:	689b      	ldr	r3, [r3, #8]
 8002c56:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8002c5a:	2b0c      	cmp	r3, #12
 8002c5c:	d11c      	bne.n	8002c98 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5e:	4b44      	ldr	r3, [pc, #272]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c60:	685b      	ldr	r3, [r3, #4]
 8002c62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d116      	bne.n	8002c98 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c6a:	4b41      	ldr	r3, [pc, #260]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0302 	and.w	r3, r3, #2
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d005      	beq.n	8002c82 <HAL_RCC_OscConfig+0x186>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68db      	ldr	r3, [r3, #12]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d001      	beq.n	8002c82 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	e1d3      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c82:	4b3b      	ldr	r3, [pc, #236]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	00db      	lsls	r3, r3, #3
 8002c90:	4937      	ldr	r1, [pc, #220]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002c92:	4313      	orrs	r3, r2
 8002c94:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c96:	e03a      	b.n	8002d0e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d020      	beq.n	8002ce2 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ca0:	4b34      	ldr	r3, [pc, #208]	; (8002d74 <HAL_RCC_OscConfig+0x278>)
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca6:	f7fe fbbd 	bl	8001424 <HAL_GetTick>
 8002caa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cac:	e008      	b.n	8002cc0 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cae:	f7fe fbb9 	bl	8001424 <HAL_GetTick>
 8002cb2:	4602      	mov	r2, r0
 8002cb4:	693b      	ldr	r3, [r7, #16]
 8002cb6:	1ad3      	subs	r3, r2, r3
 8002cb8:	2b02      	cmp	r3, #2
 8002cba:	d901      	bls.n	8002cc0 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cbc:	2303      	movs	r3, #3
 8002cbe:	e1b4      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cc0:	4b2b      	ldr	r3, [pc, #172]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f003 0302 	and.w	r3, r3, #2
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d0f0      	beq.n	8002cae <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ccc:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	691b      	ldr	r3, [r3, #16]
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	4925      	ldr	r1, [pc, #148]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002cdc:	4313      	orrs	r3, r2
 8002cde:	600b      	str	r3, [r1, #0]
 8002ce0:	e015      	b.n	8002d0e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ce2:	4b24      	ldr	r3, [pc, #144]	; (8002d74 <HAL_RCC_OscConfig+0x278>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce8:	f7fe fb9c 	bl	8001424 <HAL_GetTick>
 8002cec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cee:	e008      	b.n	8002d02 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002cf0:	f7fe fb98 	bl	8001424 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d901      	bls.n	8002d02 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e193      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002d02:	4b1b      	ldr	r3, [pc, #108]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0302 	and.w	r3, r3, #2
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d1f0      	bne.n	8002cf0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 0308 	and.w	r3, r3, #8
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d036      	beq.n	8002d88 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	695b      	ldr	r3, [r3, #20]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d016      	beq.n	8002d50 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d22:	4b15      	ldr	r3, [pc, #84]	; (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d28:	f7fe fb7c 	bl	8001424 <HAL_GetTick>
 8002d2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2e:	e008      	b.n	8002d42 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d30:	f7fe fb78 	bl	8001424 <HAL_GetTick>
 8002d34:	4602      	mov	r2, r0
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	2b02      	cmp	r3, #2
 8002d3c:	d901      	bls.n	8002d42 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d3e:	2303      	movs	r3, #3
 8002d40:	e173      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d42:	4b0b      	ldr	r3, [pc, #44]	; (8002d70 <HAL_RCC_OscConfig+0x274>)
 8002d44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d46:	f003 0302 	and.w	r3, r3, #2
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d0f0      	beq.n	8002d30 <HAL_RCC_OscConfig+0x234>
 8002d4e:	e01b      	b.n	8002d88 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d50:	4b09      	ldr	r3, [pc, #36]	; (8002d78 <HAL_RCC_OscConfig+0x27c>)
 8002d52:	2200      	movs	r2, #0
 8002d54:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d56:	f7fe fb65 	bl	8001424 <HAL_GetTick>
 8002d5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d5c:	e00e      	b.n	8002d7c <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002d5e:	f7fe fb61 	bl	8001424 <HAL_GetTick>
 8002d62:	4602      	mov	r2, r0
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	1ad3      	subs	r3, r2, r3
 8002d68:	2b02      	cmp	r3, #2
 8002d6a:	d907      	bls.n	8002d7c <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d6c:	2303      	movs	r3, #3
 8002d6e:	e15c      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
 8002d70:	40023800 	.word	0x40023800
 8002d74:	42470000 	.word	0x42470000
 8002d78:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d7c:	4b8a      	ldr	r3, [pc, #552]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d80:	f003 0302 	and.w	r3, r3, #2
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d1ea      	bne.n	8002d5e <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f003 0304 	and.w	r3, r3, #4
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	f000 8097 	beq.w	8002ec4 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d96:	2300      	movs	r3, #0
 8002d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d9a:	4b83      	ldr	r3, [pc, #524]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d10f      	bne.n	8002dc6 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da6:	2300      	movs	r3, #0
 8002da8:	60bb      	str	r3, [r7, #8]
 8002daa:	4b7f      	ldr	r3, [pc, #508]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dae:	4a7e      	ldr	r2, [pc, #504]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002db4:	6413      	str	r3, [r2, #64]	; 0x40
 8002db6:	4b7c      	ldr	r3, [pc, #496]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dbe:	60bb      	str	r3, [r7, #8]
 8002dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dc2:	2301      	movs	r3, #1
 8002dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc6:	4b79      	ldr	r3, [pc, #484]	; (8002fac <HAL_RCC_OscConfig+0x4b0>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d118      	bne.n	8002e04 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dd2:	4b76      	ldr	r3, [pc, #472]	; (8002fac <HAL_RCC_OscConfig+0x4b0>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a75      	ldr	r2, [pc, #468]	; (8002fac <HAL_RCC_OscConfig+0x4b0>)
 8002dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dde:	f7fe fb21 	bl	8001424 <HAL_GetTick>
 8002de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de4:	e008      	b.n	8002df8 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de6:	f7fe fb1d 	bl	8001424 <HAL_GetTick>
 8002dea:	4602      	mov	r2, r0
 8002dec:	693b      	ldr	r3, [r7, #16]
 8002dee:	1ad3      	subs	r3, r2, r3
 8002df0:	2b02      	cmp	r3, #2
 8002df2:	d901      	bls.n	8002df8 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002df4:	2303      	movs	r3, #3
 8002df6:	e118      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df8:	4b6c      	ldr	r3, [pc, #432]	; (8002fac <HAL_RCC_OscConfig+0x4b0>)
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d0f0      	beq.n	8002de6 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	689b      	ldr	r3, [r3, #8]
 8002e08:	2b01      	cmp	r3, #1
 8002e0a:	d106      	bne.n	8002e1a <HAL_RCC_OscConfig+0x31e>
 8002e0c:	4b66      	ldr	r3, [pc, #408]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002e0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e10:	4a65      	ldr	r2, [pc, #404]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002e12:	f043 0301 	orr.w	r3, r3, #1
 8002e16:	6713      	str	r3, [r2, #112]	; 0x70
 8002e18:	e01c      	b.n	8002e54 <HAL_RCC_OscConfig+0x358>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	2b05      	cmp	r3, #5
 8002e20:	d10c      	bne.n	8002e3c <HAL_RCC_OscConfig+0x340>
 8002e22:	4b61      	ldr	r3, [pc, #388]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002e24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e26:	4a60      	ldr	r2, [pc, #384]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002e28:	f043 0304 	orr.w	r3, r3, #4
 8002e2c:	6713      	str	r3, [r2, #112]	; 0x70
 8002e2e:	4b5e      	ldr	r3, [pc, #376]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e32:	4a5d      	ldr	r2, [pc, #372]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002e34:	f043 0301 	orr.w	r3, r3, #1
 8002e38:	6713      	str	r3, [r2, #112]	; 0x70
 8002e3a:	e00b      	b.n	8002e54 <HAL_RCC_OscConfig+0x358>
 8002e3c:	4b5a      	ldr	r3, [pc, #360]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e40:	4a59      	ldr	r2, [pc, #356]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002e42:	f023 0301 	bic.w	r3, r3, #1
 8002e46:	6713      	str	r3, [r2, #112]	; 0x70
 8002e48:	4b57      	ldr	r3, [pc, #348]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e4c:	4a56      	ldr	r2, [pc, #344]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002e4e:	f023 0304 	bic.w	r3, r3, #4
 8002e52:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d015      	beq.n	8002e88 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e5c:	f7fe fae2 	bl	8001424 <HAL_GetTick>
 8002e60:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e62:	e00a      	b.n	8002e7a <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e64:	f7fe fade 	bl	8001424 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	693b      	ldr	r3, [r7, #16]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d901      	bls.n	8002e7a <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e76:	2303      	movs	r3, #3
 8002e78:	e0d7      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e7a:	4b4b      	ldr	r3, [pc, #300]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002e7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d0ee      	beq.n	8002e64 <HAL_RCC_OscConfig+0x368>
 8002e86:	e014      	b.n	8002eb2 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e88:	f7fe facc 	bl	8001424 <HAL_GetTick>
 8002e8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8e:	e00a      	b.n	8002ea6 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002e90:	f7fe fac8 	bl	8001424 <HAL_GetTick>
 8002e94:	4602      	mov	r2, r0
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	1ad3      	subs	r3, r2, r3
 8002e9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d901      	bls.n	8002ea6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002ea2:	2303      	movs	r3, #3
 8002ea4:	e0c1      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea6:	4b40      	ldr	r3, [pc, #256]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002eaa:	f003 0302 	and.w	r3, r3, #2
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d1ee      	bne.n	8002e90 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002eb2:	7dfb      	ldrb	r3, [r7, #23]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d105      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb8:	4b3b      	ldr	r3, [pc, #236]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ebc:	4a3a      	ldr	r2, [pc, #232]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002ebe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ec2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	699b      	ldr	r3, [r3, #24]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80ad 	beq.w	8003028 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ece:	4b36      	ldr	r3, [pc, #216]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 030c 	and.w	r3, r3, #12
 8002ed6:	2b08      	cmp	r3, #8
 8002ed8:	d060      	beq.n	8002f9c <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	699b      	ldr	r3, [r3, #24]
 8002ede:	2b02      	cmp	r3, #2
 8002ee0:	d145      	bne.n	8002f6e <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ee2:	4b33      	ldr	r3, [pc, #204]	; (8002fb0 <HAL_RCC_OscConfig+0x4b4>)
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee8:	f7fe fa9c 	bl	8001424 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ef0:	f7fe fa98 	bl	8001424 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e093      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f02:	4b29      	ldr	r3, [pc, #164]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d1f0      	bne.n	8002ef0 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	6a1b      	ldr	r3, [r3, #32]
 8002f16:	431a      	orrs	r2, r3
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f1c:	019b      	lsls	r3, r3, #6
 8002f1e:	431a      	orrs	r2, r3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f24:	085b      	lsrs	r3, r3, #1
 8002f26:	3b01      	subs	r3, #1
 8002f28:	041b      	lsls	r3, r3, #16
 8002f2a:	431a      	orrs	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f30:	061b      	lsls	r3, r3, #24
 8002f32:	431a      	orrs	r2, r3
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	071b      	lsls	r3, r3, #28
 8002f3a:	491b      	ldr	r1, [pc, #108]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f40:	4b1b      	ldr	r3, [pc, #108]	; (8002fb0 <HAL_RCC_OscConfig+0x4b4>)
 8002f42:	2201      	movs	r2, #1
 8002f44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f46:	f7fe fa6d 	bl	8001424 <HAL_GetTick>
 8002f4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f4c:	e008      	b.n	8002f60 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f4e:	f7fe fa69 	bl	8001424 <HAL_GetTick>
 8002f52:	4602      	mov	r2, r0
 8002f54:	693b      	ldr	r3, [r7, #16]
 8002f56:	1ad3      	subs	r3, r2, r3
 8002f58:	2b02      	cmp	r3, #2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e064      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f60:	4b11      	ldr	r3, [pc, #68]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0f0      	beq.n	8002f4e <HAL_RCC_OscConfig+0x452>
 8002f6c:	e05c      	b.n	8003028 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6e:	4b10      	ldr	r3, [pc, #64]	; (8002fb0 <HAL_RCC_OscConfig+0x4b4>)
 8002f70:	2200      	movs	r2, #0
 8002f72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f74:	f7fe fa56 	bl	8001424 <HAL_GetTick>
 8002f78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f7a:	e008      	b.n	8002f8e <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f7c:	f7fe fa52 	bl	8001424 <HAL_GetTick>
 8002f80:	4602      	mov	r2, r0
 8002f82:	693b      	ldr	r3, [r7, #16]
 8002f84:	1ad3      	subs	r3, r2, r3
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d901      	bls.n	8002f8e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f8a:	2303      	movs	r3, #3
 8002f8c:	e04d      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8e:	4b06      	ldr	r3, [pc, #24]	; (8002fa8 <HAL_RCC_OscConfig+0x4ac>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d1f0      	bne.n	8002f7c <HAL_RCC_OscConfig+0x480>
 8002f9a:	e045      	b.n	8003028 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	699b      	ldr	r3, [r3, #24]
 8002fa0:	2b01      	cmp	r3, #1
 8002fa2:	d107      	bne.n	8002fb4 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fa4:	2301      	movs	r3, #1
 8002fa6:	e040      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
 8002fa8:	40023800 	.word	0x40023800
 8002fac:	40007000 	.word	0x40007000
 8002fb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb4:	4b1f      	ldr	r3, [pc, #124]	; (8003034 <HAL_RCC_OscConfig+0x538>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	699b      	ldr	r3, [r3, #24]
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d030      	beq.n	8003024 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fcc:	429a      	cmp	r2, r3
 8002fce:	d129      	bne.n	8003024 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fda:	429a      	cmp	r2, r3
 8002fdc:	d122      	bne.n	8003024 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fde:	68fa      	ldr	r2, [r7, #12]
 8002fe0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	687a      	ldr	r2, [r7, #4]
 8002fe8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002fea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fec:	4293      	cmp	r3, r2
 8002fee:	d119      	bne.n	8003024 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ffa:	085b      	lsrs	r3, r3, #1
 8002ffc:	3b01      	subs	r3, #1
 8002ffe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003000:	429a      	cmp	r2, r3
 8003002:	d10f      	bne.n	8003024 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800300e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003010:	429a      	cmp	r2, r3
 8003012:	d107      	bne.n	8003024 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800301e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003020:	429a      	cmp	r2, r3
 8003022:	d001      	beq.n	8003028 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8003024:	2301      	movs	r3, #1
 8003026:	e000      	b.n	800302a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003028:	2300      	movs	r3, #0
}
 800302a:	4618      	mov	r0, r3
 800302c:	3718      	adds	r7, #24
 800302e:	46bd      	mov	sp, r7
 8003030:	bd80      	pop	{r7, pc}
 8003032:	bf00      	nop
 8003034:	40023800 	.word	0x40023800

08003038 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	2b00      	cmp	r3, #0
 8003044:	d101      	bne.n	800304a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e041      	b.n	80030ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003050:	b2db      	uxtb	r3, r3
 8003052:	2b00      	cmp	r3, #0
 8003054:	d106      	bne.n	8003064 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2200      	movs	r2, #0
 800305a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f7fe f820 	bl	80010a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	2202      	movs	r2, #2
 8003068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681a      	ldr	r2, [r3, #0]
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	3304      	adds	r3, #4
 8003074:	4619      	mov	r1, r3
 8003076:	4610      	mov	r0, r2
 8003078:	f000 fc62 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	2201      	movs	r2, #1
 8003080:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2201      	movs	r2, #1
 8003088:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2201      	movs	r2, #1
 8003098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2201      	movs	r2, #1
 80030a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2201      	movs	r2, #1
 80030a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2201      	movs	r2, #1
 80030b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	2201      	movs	r2, #1
 80030b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	2201      	movs	r2, #1
 80030c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	2201      	movs	r2, #1
 80030c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80030cc:	2300      	movs	r3, #0
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3708      	adds	r7, #8
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
	...

080030d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80030d8:	b480      	push	{r7}
 80030da:	b085      	sub	sp, #20
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d001      	beq.n	80030f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80030ec:	2301      	movs	r3, #1
 80030ee:	e04e      	b.n	800318e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2202      	movs	r2, #2
 80030f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	68da      	ldr	r2, [r3, #12]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f042 0201 	orr.w	r2, r2, #1
 8003106:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a23      	ldr	r2, [pc, #140]	; (800319c <HAL_TIM_Base_Start_IT+0xc4>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d022      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x80>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800311a:	d01d      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x80>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1f      	ldr	r2, [pc, #124]	; (80031a0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d018      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x80>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1e      	ldr	r2, [pc, #120]	; (80031a4 <HAL_TIM_Base_Start_IT+0xcc>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d013      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x80>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a1c      	ldr	r2, [pc, #112]	; (80031a8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d00e      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x80>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a1b      	ldr	r2, [pc, #108]	; (80031ac <HAL_TIM_Base_Start_IT+0xd4>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d009      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x80>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a19      	ldr	r2, [pc, #100]	; (80031b0 <HAL_TIM_Base_Start_IT+0xd8>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d004      	beq.n	8003158 <HAL_TIM_Base_Start_IT+0x80>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4a18      	ldr	r2, [pc, #96]	; (80031b4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003154:	4293      	cmp	r3, r2
 8003156:	d111      	bne.n	800317c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	f003 0307 	and.w	r3, r3, #7
 8003162:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2b06      	cmp	r3, #6
 8003168:	d010      	beq.n	800318c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	681a      	ldr	r2, [r3, #0]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f042 0201 	orr.w	r2, r2, #1
 8003178:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800317a:	e007      	b.n	800318c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	681a      	ldr	r2, [r3, #0]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f042 0201 	orr.w	r2, r2, #1
 800318a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800318c:	2300      	movs	r3, #0
}
 800318e:	4618      	mov	r0, r3
 8003190:	3714      	adds	r7, #20
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr
 800319a:	bf00      	nop
 800319c:	40010000 	.word	0x40010000
 80031a0:	40000400 	.word	0x40000400
 80031a4:	40000800 	.word	0x40000800
 80031a8:	40000c00 	.word	0x40000c00
 80031ac:	40010400 	.word	0x40010400
 80031b0:	40014000 	.word	0x40014000
 80031b4:	40001800 	.word	0x40001800

080031b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80031b8:	b580      	push	{r7, lr}
 80031ba:	b082      	sub	sp, #8
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d101      	bne.n	80031ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80031c6:	2301      	movs	r3, #1
 80031c8:	e041      	b.n	800324e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031d0:	b2db      	uxtb	r3, r3
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d106      	bne.n	80031e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80031de:	6878      	ldr	r0, [r7, #4]
 80031e0:	f000 f839 	bl	8003256 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2202      	movs	r2, #2
 80031e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681a      	ldr	r2, [r3, #0]
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3304      	adds	r3, #4
 80031f4:	4619      	mov	r1, r3
 80031f6:	4610      	mov	r0, r2
 80031f8:	f000 fba2 	bl	8003940 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	2201      	movs	r2, #1
 8003200:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	2201      	movs	r2, #1
 8003208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	2201      	movs	r2, #1
 8003210:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2201      	movs	r2, #1
 8003218:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2201      	movs	r2, #1
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	2201      	movs	r2, #1
 8003230:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2201      	movs	r2, #1
 8003238:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800324c:	2300      	movs	r3, #0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003256:	b480      	push	{r7}
 8003258:	b083      	sub	sp, #12
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800325e:	bf00      	nop
 8003260:	370c      	adds	r7, #12
 8003262:	46bd      	mov	sp, r7
 8003264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003268:	4770      	bx	lr
	...

0800326c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b084      	sub	sp, #16
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d109      	bne.n	8003290 <HAL_TIM_PWM_Start+0x24>
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003282:	b2db      	uxtb	r3, r3
 8003284:	2b01      	cmp	r3, #1
 8003286:	bf14      	ite	ne
 8003288:	2301      	movne	r3, #1
 800328a:	2300      	moveq	r3, #0
 800328c:	b2db      	uxtb	r3, r3
 800328e:	e022      	b.n	80032d6 <HAL_TIM_PWM_Start+0x6a>
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	2b04      	cmp	r3, #4
 8003294:	d109      	bne.n	80032aa <HAL_TIM_PWM_Start+0x3e>
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800329c:	b2db      	uxtb	r3, r3
 800329e:	2b01      	cmp	r3, #1
 80032a0:	bf14      	ite	ne
 80032a2:	2301      	movne	r3, #1
 80032a4:	2300      	moveq	r3, #0
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	e015      	b.n	80032d6 <HAL_TIM_PWM_Start+0x6a>
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	2b08      	cmp	r3, #8
 80032ae:	d109      	bne.n	80032c4 <HAL_TIM_PWM_Start+0x58>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80032b6:	b2db      	uxtb	r3, r3
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	bf14      	ite	ne
 80032bc:	2301      	movne	r3, #1
 80032be:	2300      	moveq	r3, #0
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	e008      	b.n	80032d6 <HAL_TIM_PWM_Start+0x6a>
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	2b01      	cmp	r3, #1
 80032ce:	bf14      	ite	ne
 80032d0:	2301      	movne	r3, #1
 80032d2:	2300      	moveq	r3, #0
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d001      	beq.n	80032de <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80032da:	2301      	movs	r3, #1
 80032dc:	e07c      	b.n	80033d8 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80032de:	683b      	ldr	r3, [r7, #0]
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d104      	bne.n	80032ee <HAL_TIM_PWM_Start+0x82>
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2202      	movs	r2, #2
 80032e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032ec:	e013      	b.n	8003316 <HAL_TIM_PWM_Start+0xaa>
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	2b04      	cmp	r3, #4
 80032f2:	d104      	bne.n	80032fe <HAL_TIM_PWM_Start+0x92>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2202      	movs	r2, #2
 80032f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032fc:	e00b      	b.n	8003316 <HAL_TIM_PWM_Start+0xaa>
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	2b08      	cmp	r3, #8
 8003302:	d104      	bne.n	800330e <HAL_TIM_PWM_Start+0xa2>
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	2202      	movs	r2, #2
 8003308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800330c:	e003      	b.n	8003316 <HAL_TIM_PWM_Start+0xaa>
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	2202      	movs	r2, #2
 8003312:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	2201      	movs	r2, #1
 800331c:	6839      	ldr	r1, [r7, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f000 fe04 	bl	8003f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a2d      	ldr	r2, [pc, #180]	; (80033e0 <HAL_TIM_PWM_Start+0x174>)
 800332a:	4293      	cmp	r3, r2
 800332c:	d004      	beq.n	8003338 <HAL_TIM_PWM_Start+0xcc>
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a2c      	ldr	r2, [pc, #176]	; (80033e4 <HAL_TIM_PWM_Start+0x178>)
 8003334:	4293      	cmp	r3, r2
 8003336:	d101      	bne.n	800333c <HAL_TIM_PWM_Start+0xd0>
 8003338:	2301      	movs	r3, #1
 800333a:	e000      	b.n	800333e <HAL_TIM_PWM_Start+0xd2>
 800333c:	2300      	movs	r3, #0
 800333e:	2b00      	cmp	r3, #0
 8003340:	d007      	beq.n	8003352 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003350:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a22      	ldr	r2, [pc, #136]	; (80033e0 <HAL_TIM_PWM_Start+0x174>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d022      	beq.n	80033a2 <HAL_TIM_PWM_Start+0x136>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003364:	d01d      	beq.n	80033a2 <HAL_TIM_PWM_Start+0x136>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a1f      	ldr	r2, [pc, #124]	; (80033e8 <HAL_TIM_PWM_Start+0x17c>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d018      	beq.n	80033a2 <HAL_TIM_PWM_Start+0x136>
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	4a1d      	ldr	r2, [pc, #116]	; (80033ec <HAL_TIM_PWM_Start+0x180>)
 8003376:	4293      	cmp	r3, r2
 8003378:	d013      	beq.n	80033a2 <HAL_TIM_PWM_Start+0x136>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4a1c      	ldr	r2, [pc, #112]	; (80033f0 <HAL_TIM_PWM_Start+0x184>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d00e      	beq.n	80033a2 <HAL_TIM_PWM_Start+0x136>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	4a16      	ldr	r2, [pc, #88]	; (80033e4 <HAL_TIM_PWM_Start+0x178>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d009      	beq.n	80033a2 <HAL_TIM_PWM_Start+0x136>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	4a18      	ldr	r2, [pc, #96]	; (80033f4 <HAL_TIM_PWM_Start+0x188>)
 8003394:	4293      	cmp	r3, r2
 8003396:	d004      	beq.n	80033a2 <HAL_TIM_PWM_Start+0x136>
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a16      	ldr	r2, [pc, #88]	; (80033f8 <HAL_TIM_PWM_Start+0x18c>)
 800339e:	4293      	cmp	r3, r2
 80033a0:	d111      	bne.n	80033c6 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	689b      	ldr	r3, [r3, #8]
 80033a8:	f003 0307 	and.w	r3, r3, #7
 80033ac:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	2b06      	cmp	r3, #6
 80033b2:	d010      	beq.n	80033d6 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f042 0201 	orr.w	r2, r2, #1
 80033c2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033c4:	e007      	b.n	80033d6 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f042 0201 	orr.w	r2, r2, #1
 80033d4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3710      	adds	r7, #16
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40010000 	.word	0x40010000
 80033e4:	40010400 	.word	0x40010400
 80033e8:	40000400 	.word	0x40000400
 80033ec:	40000800 	.word	0x40000800
 80033f0:	40000c00 	.word	0x40000c00
 80033f4:	40014000 	.word	0x40014000
 80033f8:	40001800 	.word	0x40001800

080033fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b084      	sub	sp, #16
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	68db      	ldr	r3, [r3, #12]
 800340a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003414:	68bb      	ldr	r3, [r7, #8]
 8003416:	f003 0302 	and.w	r3, r3, #2
 800341a:	2b00      	cmp	r3, #0
 800341c:	d020      	beq.n	8003460 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	f003 0302 	and.w	r3, r3, #2
 8003424:	2b00      	cmp	r3, #0
 8003426:	d01b      	beq.n	8003460 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f06f 0202 	mvn.w	r2, #2
 8003430:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2201      	movs	r2, #1
 8003436:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	699b      	ldr	r3, [r3, #24]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b00      	cmp	r3, #0
 8003444:	d003      	beq.n	800344e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003446:	6878      	ldr	r0, [r7, #4]
 8003448:	f000 fa5b 	bl	8003902 <HAL_TIM_IC_CaptureCallback>
 800344c:	e005      	b.n	800345a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 fa4d 	bl	80038ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f000 fa5e 	bl	8003916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	2200      	movs	r2, #0
 800345e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003460:	68bb      	ldr	r3, [r7, #8]
 8003462:	f003 0304 	and.w	r3, r3, #4
 8003466:	2b00      	cmp	r3, #0
 8003468:	d020      	beq.n	80034ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f003 0304 	and.w	r3, r3, #4
 8003470:	2b00      	cmp	r3, #0
 8003472:	d01b      	beq.n	80034ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f06f 0204 	mvn.w	r2, #4
 800347c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2202      	movs	r2, #2
 8003482:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	699b      	ldr	r3, [r3, #24]
 800348a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800348e:	2b00      	cmp	r3, #0
 8003490:	d003      	beq.n	800349a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003492:	6878      	ldr	r0, [r7, #4]
 8003494:	f000 fa35 	bl	8003902 <HAL_TIM_IC_CaptureCallback>
 8003498:	e005      	b.n	80034a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800349a:	6878      	ldr	r0, [r7, #4]
 800349c:	f000 fa27 	bl	80038ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f000 fa38 	bl	8003916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2200      	movs	r2, #0
 80034aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d020      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	f003 0308 	and.w	r3, r3, #8
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d01b      	beq.n	80034f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f06f 0208 	mvn.w	r2, #8
 80034c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2204      	movs	r2, #4
 80034ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	69db      	ldr	r3, [r3, #28]
 80034d6:	f003 0303 	and.w	r3, r3, #3
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d003      	beq.n	80034e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 fa0f 	bl	8003902 <HAL_TIM_IC_CaptureCallback>
 80034e4:	e005      	b.n	80034f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fa01 	bl	80038ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fa12 	bl	8003916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	2200      	movs	r2, #0
 80034f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80034f8:	68bb      	ldr	r3, [r7, #8]
 80034fa:	f003 0310 	and.w	r3, r3, #16
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d020      	beq.n	8003544 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f003 0310 	and.w	r3, r3, #16
 8003508:	2b00      	cmp	r3, #0
 800350a:	d01b      	beq.n	8003544 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	f06f 0210 	mvn.w	r2, #16
 8003514:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2208      	movs	r2, #8
 800351a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	69db      	ldr	r3, [r3, #28]
 8003522:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003526:	2b00      	cmp	r3, #0
 8003528:	d003      	beq.n	8003532 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f000 f9e9 	bl	8003902 <HAL_TIM_IC_CaptureCallback>
 8003530:	e005      	b.n	800353e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003532:	6878      	ldr	r0, [r7, #4]
 8003534:	f000 f9db 	bl	80038ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	6878      	ldr	r0, [r7, #4]
 800353a:	f000 f9ec 	bl	8003916 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	2200      	movs	r2, #0
 8003542:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003544:	68bb      	ldr	r3, [r7, #8]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b00      	cmp	r3, #0
 800354c:	d00c      	beq.n	8003568 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	2b00      	cmp	r3, #0
 8003556:	d007      	beq.n	8003568 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f06f 0201 	mvn.w	r2, #1
 8003560:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003562:	6878      	ldr	r0, [r7, #4]
 8003564:	f7fd fb50 	bl	8000c08 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00c      	beq.n	800358c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003578:	2b00      	cmp	r3, #0
 800357a:	d007      	beq.n	800358c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003584:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003586:	6878      	ldr	r0, [r7, #4]
 8003588:	f000 fd7c 	bl	8004084 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800358c:	68bb      	ldr	r3, [r7, #8]
 800358e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003592:	2b00      	cmp	r3, #0
 8003594:	d00c      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800359c:	2b00      	cmp	r3, #0
 800359e:	d007      	beq.n	80035b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80035a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f9bd 	bl	800392a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80035b0:	68bb      	ldr	r3, [r7, #8]
 80035b2:	f003 0320 	and.w	r3, r3, #32
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00c      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	f003 0320 	and.w	r3, r3, #32
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d007      	beq.n	80035d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f06f 0220 	mvn.w	r2, #32
 80035cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 fd4e 	bl	8004070 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80035d4:	bf00      	nop
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80035e8:	2300      	movs	r3, #0
 80035ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035f2:	2b01      	cmp	r3, #1
 80035f4:	d101      	bne.n	80035fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80035f6:	2302      	movs	r3, #2
 80035f8:	e0ae      	b.n	8003758 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	2201      	movs	r2, #1
 80035fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	2b0c      	cmp	r3, #12
 8003606:	f200 809f 	bhi.w	8003748 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800360a:	a201      	add	r2, pc, #4	; (adr r2, 8003610 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800360c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003610:	08003645 	.word	0x08003645
 8003614:	08003749 	.word	0x08003749
 8003618:	08003749 	.word	0x08003749
 800361c:	08003749 	.word	0x08003749
 8003620:	08003685 	.word	0x08003685
 8003624:	08003749 	.word	0x08003749
 8003628:	08003749 	.word	0x08003749
 800362c:	08003749 	.word	0x08003749
 8003630:	080036c7 	.word	0x080036c7
 8003634:	08003749 	.word	0x08003749
 8003638:	08003749 	.word	0x08003749
 800363c:	08003749 	.word	0x08003749
 8003640:	08003707 	.word	0x08003707
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	68b9      	ldr	r1, [r7, #8]
 800364a:	4618      	mov	r0, r3
 800364c:	f000 fa24 	bl	8003a98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	699a      	ldr	r2, [r3, #24]
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f042 0208 	orr.w	r2, r2, #8
 800365e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	699a      	ldr	r2, [r3, #24]
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f022 0204 	bic.w	r2, r2, #4
 800366e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	6999      	ldr	r1, [r3, #24]
 8003676:	68bb      	ldr	r3, [r7, #8]
 8003678:	691a      	ldr	r2, [r3, #16]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	430a      	orrs	r2, r1
 8003680:	619a      	str	r2, [r3, #24]
      break;
 8003682:	e064      	b.n	800374e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	68b9      	ldr	r1, [r7, #8]
 800368a:	4618      	mov	r0, r3
 800368c:	f000 fa74 	bl	8003b78 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	699a      	ldr	r2, [r3, #24]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800369e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	699a      	ldr	r2, [r3, #24]
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80036ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	6999      	ldr	r1, [r3, #24]
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	691b      	ldr	r3, [r3, #16]
 80036ba:	021a      	lsls	r2, r3, #8
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	430a      	orrs	r2, r1
 80036c2:	619a      	str	r2, [r3, #24]
      break;
 80036c4:	e043      	b.n	800374e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	68b9      	ldr	r1, [r7, #8]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f000 fac9 	bl	8003c64 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	69da      	ldr	r2, [r3, #28]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	f042 0208 	orr.w	r2, r2, #8
 80036e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	69da      	ldr	r2, [r3, #28]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f022 0204 	bic.w	r2, r2, #4
 80036f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	69d9      	ldr	r1, [r3, #28]
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	691a      	ldr	r2, [r3, #16]
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	430a      	orrs	r2, r1
 8003702:	61da      	str	r2, [r3, #28]
      break;
 8003704:	e023      	b.n	800374e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	68b9      	ldr	r1, [r7, #8]
 800370c:	4618      	mov	r0, r3
 800370e:	f000 fb1d 	bl	8003d4c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	69da      	ldr	r2, [r3, #28]
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003720:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003722:	68fb      	ldr	r3, [r7, #12]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	69da      	ldr	r2, [r3, #28]
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003730:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	69d9      	ldr	r1, [r3, #28]
 8003738:	68bb      	ldr	r3, [r7, #8]
 800373a:	691b      	ldr	r3, [r3, #16]
 800373c:	021a      	lsls	r2, r3, #8
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	430a      	orrs	r2, r1
 8003744:	61da      	str	r2, [r3, #28]
      break;
 8003746:	e002      	b.n	800374e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003748:	2301      	movs	r3, #1
 800374a:	75fb      	strb	r3, [r7, #23]
      break;
 800374c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	2200      	movs	r2, #0
 8003752:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003756:	7dfb      	ldrb	r3, [r7, #23]
}
 8003758:	4618      	mov	r0, r3
 800375a:	3718      	adds	r7, #24
 800375c:	46bd      	mov	sp, r7
 800375e:	bd80      	pop	{r7, pc}

08003760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b084      	sub	sp, #16
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
 8003768:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800376a:	2300      	movs	r3, #0
 800376c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003774:	2b01      	cmp	r3, #1
 8003776:	d101      	bne.n	800377c <HAL_TIM_ConfigClockSource+0x1c>
 8003778:	2302      	movs	r3, #2
 800377a:	e0b4      	b.n	80038e6 <HAL_TIM_ConfigClockSource+0x186>
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2202      	movs	r2, #2
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	689b      	ldr	r3, [r3, #8]
 8003792:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003794:	68bb      	ldr	r3, [r7, #8]
 8003796:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800379a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80037a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037b4:	d03e      	beq.n	8003834 <HAL_TIM_ConfigClockSource+0xd4>
 80037b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80037ba:	f200 8087 	bhi.w	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037c2:	f000 8086 	beq.w	80038d2 <HAL_TIM_ConfigClockSource+0x172>
 80037c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80037ca:	d87f      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037cc:	2b70      	cmp	r3, #112	; 0x70
 80037ce:	d01a      	beq.n	8003806 <HAL_TIM_ConfigClockSource+0xa6>
 80037d0:	2b70      	cmp	r3, #112	; 0x70
 80037d2:	d87b      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037d4:	2b60      	cmp	r3, #96	; 0x60
 80037d6:	d050      	beq.n	800387a <HAL_TIM_ConfigClockSource+0x11a>
 80037d8:	2b60      	cmp	r3, #96	; 0x60
 80037da:	d877      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037dc:	2b50      	cmp	r3, #80	; 0x50
 80037de:	d03c      	beq.n	800385a <HAL_TIM_ConfigClockSource+0xfa>
 80037e0:	2b50      	cmp	r3, #80	; 0x50
 80037e2:	d873      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037e4:	2b40      	cmp	r3, #64	; 0x40
 80037e6:	d058      	beq.n	800389a <HAL_TIM_ConfigClockSource+0x13a>
 80037e8:	2b40      	cmp	r3, #64	; 0x40
 80037ea:	d86f      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037ec:	2b30      	cmp	r3, #48	; 0x30
 80037ee:	d064      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0x15a>
 80037f0:	2b30      	cmp	r3, #48	; 0x30
 80037f2:	d86b      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037f4:	2b20      	cmp	r3, #32
 80037f6:	d060      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0x15a>
 80037f8:	2b20      	cmp	r3, #32
 80037fa:	d867      	bhi.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d05c      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0x15a>
 8003800:	2b10      	cmp	r3, #16
 8003802:	d05a      	beq.n	80038ba <HAL_TIM_ConfigClockSource+0x15a>
 8003804:	e062      	b.n	80038cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800380e:	683b      	ldr	r3, [r7, #0]
 8003810:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003816:	f000 fb69 	bl	8003eec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	689b      	ldr	r3, [r3, #8]
 8003820:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003822:	68bb      	ldr	r3, [r7, #8]
 8003824:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003828:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	68ba      	ldr	r2, [r7, #8]
 8003830:	609a      	str	r2, [r3, #8]
      break;
 8003832:	e04f      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003844:	f000 fb52 	bl	8003eec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	689a      	ldr	r2, [r3, #8]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003856:	609a      	str	r2, [r3, #8]
      break;
 8003858:	e03c      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003866:	461a      	mov	r2, r3
 8003868:	f000 fac6 	bl	8003df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	2150      	movs	r1, #80	; 0x50
 8003872:	4618      	mov	r0, r3
 8003874:	f000 fb1f 	bl	8003eb6 <TIM_ITRx_SetConfig>
      break;
 8003878:	e02c      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003886:	461a      	mov	r2, r3
 8003888:	f000 fae5 	bl	8003e56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	681b      	ldr	r3, [r3, #0]
 8003890:	2160      	movs	r1, #96	; 0x60
 8003892:	4618      	mov	r0, r3
 8003894:	f000 fb0f 	bl	8003eb6 <TIM_ITRx_SetConfig>
      break;
 8003898:	e01c      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80038a6:	461a      	mov	r2, r3
 80038a8:	f000 faa6 	bl	8003df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	2140      	movs	r1, #64	; 0x40
 80038b2:	4618      	mov	r0, r3
 80038b4:	f000 faff 	bl	8003eb6 <TIM_ITRx_SetConfig>
      break;
 80038b8:	e00c      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681a      	ldr	r2, [r3, #0]
 80038be:	683b      	ldr	r3, [r7, #0]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4619      	mov	r1, r3
 80038c4:	4610      	mov	r0, r2
 80038c6:	f000 faf6 	bl	8003eb6 <TIM_ITRx_SetConfig>
      break;
 80038ca:	e003      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80038cc:	2301      	movs	r3, #1
 80038ce:	73fb      	strb	r3, [r7, #15]
      break;
 80038d0:	e000      	b.n	80038d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80038d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2201      	movs	r2, #1
 80038d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2200      	movs	r2, #0
 80038e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80038e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80038e6:	4618      	mov	r0, r3
 80038e8:	3710      	adds	r7, #16
 80038ea:	46bd      	mov	sp, r7
 80038ec:	bd80      	pop	{r7, pc}

080038ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80038ee:	b480      	push	{r7}
 80038f0:	b083      	sub	sp, #12
 80038f2:	af00      	add	r7, sp, #0
 80038f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80038f6:	bf00      	nop
 80038f8:	370c      	adds	r7, #12
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr

08003902 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003902:	b480      	push	{r7}
 8003904:	b083      	sub	sp, #12
 8003906:	af00      	add	r7, sp, #0
 8003908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800390a:	bf00      	nop
 800390c:	370c      	adds	r7, #12
 800390e:	46bd      	mov	sp, r7
 8003910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003914:	4770      	bx	lr

08003916 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003916:	b480      	push	{r7}
 8003918:	b083      	sub	sp, #12
 800391a:	af00      	add	r7, sp, #0
 800391c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800391e:	bf00      	nop
 8003920:	370c      	adds	r7, #12
 8003922:	46bd      	mov	sp, r7
 8003924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003928:	4770      	bx	lr

0800392a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800392a:	b480      	push	{r7}
 800392c:	b083      	sub	sp, #12
 800392e:	af00      	add	r7, sp, #0
 8003930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003932:	bf00      	nop
 8003934:	370c      	adds	r7, #12
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
	...

08003940 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003940:	b480      	push	{r7}
 8003942:	b085      	sub	sp, #20
 8003944:	af00      	add	r7, sp, #0
 8003946:	6078      	str	r0, [r7, #4]
 8003948:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	4a46      	ldr	r2, [pc, #280]	; (8003a6c <TIM_Base_SetConfig+0x12c>)
 8003954:	4293      	cmp	r3, r2
 8003956:	d013      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800395e:	d00f      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	4a43      	ldr	r2, [pc, #268]	; (8003a70 <TIM_Base_SetConfig+0x130>)
 8003964:	4293      	cmp	r3, r2
 8003966:	d00b      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	4a42      	ldr	r2, [pc, #264]	; (8003a74 <TIM_Base_SetConfig+0x134>)
 800396c:	4293      	cmp	r3, r2
 800396e:	d007      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	4a41      	ldr	r2, [pc, #260]	; (8003a78 <TIM_Base_SetConfig+0x138>)
 8003974:	4293      	cmp	r3, r2
 8003976:	d003      	beq.n	8003980 <TIM_Base_SetConfig+0x40>
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	4a40      	ldr	r2, [pc, #256]	; (8003a7c <TIM_Base_SetConfig+0x13c>)
 800397c:	4293      	cmp	r3, r2
 800397e:	d108      	bne.n	8003992 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003986:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	685b      	ldr	r3, [r3, #4]
 800398c:	68fa      	ldr	r2, [r7, #12]
 800398e:	4313      	orrs	r3, r2
 8003990:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	4a35      	ldr	r2, [pc, #212]	; (8003a6c <TIM_Base_SetConfig+0x12c>)
 8003996:	4293      	cmp	r3, r2
 8003998:	d02b      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80039a0:	d027      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	4a32      	ldr	r2, [pc, #200]	; (8003a70 <TIM_Base_SetConfig+0x130>)
 80039a6:	4293      	cmp	r3, r2
 80039a8:	d023      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	4a31      	ldr	r2, [pc, #196]	; (8003a74 <TIM_Base_SetConfig+0x134>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d01f      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	4a30      	ldr	r2, [pc, #192]	; (8003a78 <TIM_Base_SetConfig+0x138>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d01b      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	4a2f      	ldr	r2, [pc, #188]	; (8003a7c <TIM_Base_SetConfig+0x13c>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d017      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	4a2e      	ldr	r2, [pc, #184]	; (8003a80 <TIM_Base_SetConfig+0x140>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d013      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	4a2d      	ldr	r2, [pc, #180]	; (8003a84 <TIM_Base_SetConfig+0x144>)
 80039ce:	4293      	cmp	r3, r2
 80039d0:	d00f      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	4a2c      	ldr	r2, [pc, #176]	; (8003a88 <TIM_Base_SetConfig+0x148>)
 80039d6:	4293      	cmp	r3, r2
 80039d8:	d00b      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	4a2b      	ldr	r2, [pc, #172]	; (8003a8c <TIM_Base_SetConfig+0x14c>)
 80039de:	4293      	cmp	r3, r2
 80039e0:	d007      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	4a2a      	ldr	r2, [pc, #168]	; (8003a90 <TIM_Base_SetConfig+0x150>)
 80039e6:	4293      	cmp	r3, r2
 80039e8:	d003      	beq.n	80039f2 <TIM_Base_SetConfig+0xb2>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	4a29      	ldr	r2, [pc, #164]	; (8003a94 <TIM_Base_SetConfig+0x154>)
 80039ee:	4293      	cmp	r3, r2
 80039f0:	d108      	bne.n	8003a04 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68db      	ldr	r3, [r3, #12]
 80039fe:	68fa      	ldr	r2, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	695b      	ldr	r3, [r3, #20]
 8003a0e:	4313      	orrs	r3, r2
 8003a10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	68fa      	ldr	r2, [r7, #12]
 8003a16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a18:	683b      	ldr	r3, [r7, #0]
 8003a1a:	689a      	ldr	r2, [r3, #8]
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	681a      	ldr	r2, [r3, #0]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	4a10      	ldr	r2, [pc, #64]	; (8003a6c <TIM_Base_SetConfig+0x12c>)
 8003a2c:	4293      	cmp	r3, r2
 8003a2e:	d003      	beq.n	8003a38 <TIM_Base_SetConfig+0xf8>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	4a12      	ldr	r2, [pc, #72]	; (8003a7c <TIM_Base_SetConfig+0x13c>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d103      	bne.n	8003a40 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	691a      	ldr	r2, [r3, #16]
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	691b      	ldr	r3, [r3, #16]
 8003a4a:	f003 0301 	and.w	r3, r3, #1
 8003a4e:	2b01      	cmp	r3, #1
 8003a50:	d105      	bne.n	8003a5e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f023 0201 	bic.w	r2, r3, #1
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	611a      	str	r2, [r3, #16]
  }
}
 8003a5e:	bf00      	nop
 8003a60:	3714      	adds	r7, #20
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr
 8003a6a:	bf00      	nop
 8003a6c:	40010000 	.word	0x40010000
 8003a70:	40000400 	.word	0x40000400
 8003a74:	40000800 	.word	0x40000800
 8003a78:	40000c00 	.word	0x40000c00
 8003a7c:	40010400 	.word	0x40010400
 8003a80:	40014000 	.word	0x40014000
 8003a84:	40014400 	.word	0x40014400
 8003a88:	40014800 	.word	0x40014800
 8003a8c:	40001800 	.word	0x40001800
 8003a90:	40001c00 	.word	0x40001c00
 8003a94:	40002000 	.word	0x40002000

08003a98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b087      	sub	sp, #28
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
 8003aa0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	6a1b      	ldr	r3, [r3, #32]
 8003aac:	f023 0201 	bic.w	r2, r3, #1
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	685b      	ldr	r3, [r3, #4]
 8003ab8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	f023 0303 	bic.w	r3, r3, #3
 8003ace:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	68fa      	ldr	r2, [r7, #12]
 8003ad6:	4313      	orrs	r3, r2
 8003ad8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ada:	697b      	ldr	r3, [r7, #20]
 8003adc:	f023 0302 	bic.w	r3, r3, #2
 8003ae0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	689b      	ldr	r3, [r3, #8]
 8003ae6:	697a      	ldr	r2, [r7, #20]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	4a20      	ldr	r2, [pc, #128]	; (8003b70 <TIM_OC1_SetConfig+0xd8>)
 8003af0:	4293      	cmp	r3, r2
 8003af2:	d003      	beq.n	8003afc <TIM_OC1_SetConfig+0x64>
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <TIM_OC1_SetConfig+0xdc>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d10c      	bne.n	8003b16 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003afc:	697b      	ldr	r3, [r7, #20]
 8003afe:	f023 0308 	bic.w	r3, r3, #8
 8003b02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f023 0304 	bic.w	r3, r3, #4
 8003b14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <TIM_OC1_SetConfig+0xd8>)
 8003b1a:	4293      	cmp	r3, r2
 8003b1c:	d003      	beq.n	8003b26 <TIM_OC1_SetConfig+0x8e>
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	4a14      	ldr	r2, [pc, #80]	; (8003b74 <TIM_OC1_SetConfig+0xdc>)
 8003b22:	4293      	cmp	r3, r2
 8003b24:	d111      	bne.n	8003b4a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003b26:	693b      	ldr	r3, [r7, #16]
 8003b28:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b2c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003b34:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	695b      	ldr	r3, [r3, #20]
 8003b3a:	693a      	ldr	r2, [r7, #16]
 8003b3c:	4313      	orrs	r3, r2
 8003b3e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	699b      	ldr	r3, [r3, #24]
 8003b44:	693a      	ldr	r2, [r7, #16]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	693a      	ldr	r2, [r7, #16]
 8003b4e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68fa      	ldr	r2, [r7, #12]
 8003b54:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	685a      	ldr	r2, [r3, #4]
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	697a      	ldr	r2, [r7, #20]
 8003b62:	621a      	str	r2, [r3, #32]
}
 8003b64:	bf00      	nop
 8003b66:	371c      	adds	r7, #28
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr
 8003b70:	40010000 	.word	0x40010000
 8003b74:	40010400 	.word	0x40010400

08003b78 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b087      	sub	sp, #28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
 8003b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f023 0210 	bic.w	r2, r3, #16
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	699b      	ldr	r3, [r3, #24]
 8003b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003bae:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	021b      	lsls	r3, r3, #8
 8003bb6:	68fa      	ldr	r2, [r7, #12]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003bbc:	697b      	ldr	r3, [r7, #20]
 8003bbe:	f023 0320 	bic.w	r3, r3, #32
 8003bc2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	011b      	lsls	r3, r3, #4
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a22      	ldr	r2, [pc, #136]	; (8003c5c <TIM_OC2_SetConfig+0xe4>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d003      	beq.n	8003be0 <TIM_OC2_SetConfig+0x68>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a21      	ldr	r2, [pc, #132]	; (8003c60 <TIM_OC2_SetConfig+0xe8>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10d      	bne.n	8003bfc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	68db      	ldr	r3, [r3, #12]
 8003bec:	011b      	lsls	r3, r3, #4
 8003bee:	697a      	ldr	r2, [r7, #20]
 8003bf0:	4313      	orrs	r3, r2
 8003bf2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003bfa:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	4a17      	ldr	r2, [pc, #92]	; (8003c5c <TIM_OC2_SetConfig+0xe4>)
 8003c00:	4293      	cmp	r3, r2
 8003c02:	d003      	beq.n	8003c0c <TIM_OC2_SetConfig+0x94>
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	4a16      	ldr	r2, [pc, #88]	; (8003c60 <TIM_OC2_SetConfig+0xe8>)
 8003c08:	4293      	cmp	r3, r2
 8003c0a:	d113      	bne.n	8003c34 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003c12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003c1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	695b      	ldr	r3, [r3, #20]
 8003c20:	009b      	lsls	r3, r3, #2
 8003c22:	693a      	ldr	r2, [r7, #16]
 8003c24:	4313      	orrs	r3, r2
 8003c26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	009b      	lsls	r3, r3, #2
 8003c2e:	693a      	ldr	r2, [r7, #16]
 8003c30:	4313      	orrs	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	693a      	ldr	r2, [r7, #16]
 8003c38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68fa      	ldr	r2, [r7, #12]
 8003c3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	685a      	ldr	r2, [r3, #4]
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	697a      	ldr	r2, [r7, #20]
 8003c4c:	621a      	str	r2, [r3, #32]
}
 8003c4e:	bf00      	nop
 8003c50:	371c      	adds	r7, #28
 8003c52:	46bd      	mov	sp, r7
 8003c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop
 8003c5c:	40010000 	.word	0x40010000
 8003c60:	40010400 	.word	0x40010400

08003c64 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c64:	b480      	push	{r7}
 8003c66:	b087      	sub	sp, #28
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
 8003c6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	6a1b      	ldr	r3, [r3, #32]
 8003c72:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a1b      	ldr	r3, [r3, #32]
 8003c78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685b      	ldr	r3, [r3, #4]
 8003c84:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	69db      	ldr	r3, [r3, #28]
 8003c8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	f023 0303 	bic.w	r3, r3, #3
 8003c9a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68fa      	ldr	r2, [r7, #12]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003ca6:	697b      	ldr	r3, [r7, #20]
 8003ca8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003cac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	021b      	lsls	r3, r3, #8
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	4a21      	ldr	r2, [pc, #132]	; (8003d44 <TIM_OC3_SetConfig+0xe0>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d003      	beq.n	8003cca <TIM_OC3_SetConfig+0x66>
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	4a20      	ldr	r2, [pc, #128]	; (8003d48 <TIM_OC3_SetConfig+0xe4>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d10d      	bne.n	8003ce6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003cca:	697b      	ldr	r3, [r7, #20]
 8003ccc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003cd0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	68db      	ldr	r3, [r3, #12]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	697a      	ldr	r2, [r7, #20]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003ce4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	4a16      	ldr	r2, [pc, #88]	; (8003d44 <TIM_OC3_SetConfig+0xe0>)
 8003cea:	4293      	cmp	r3, r2
 8003cec:	d003      	beq.n	8003cf6 <TIM_OC3_SetConfig+0x92>
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	4a15      	ldr	r2, [pc, #84]	; (8003d48 <TIM_OC3_SetConfig+0xe4>)
 8003cf2:	4293      	cmp	r3, r2
 8003cf4:	d113      	bne.n	8003d1e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003cfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003cfe:	693b      	ldr	r3, [r7, #16]
 8003d00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003d06:	683b      	ldr	r3, [r7, #0]
 8003d08:	695b      	ldr	r3, [r3, #20]
 8003d0a:	011b      	lsls	r3, r3, #4
 8003d0c:	693a      	ldr	r2, [r7, #16]
 8003d0e:	4313      	orrs	r3, r2
 8003d10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	699b      	ldr	r3, [r3, #24]
 8003d16:	011b      	lsls	r3, r3, #4
 8003d18:	693a      	ldr	r2, [r7, #16]
 8003d1a:	4313      	orrs	r3, r2
 8003d1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	693a      	ldr	r2, [r7, #16]
 8003d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003d2a:	683b      	ldr	r3, [r7, #0]
 8003d2c:	685a      	ldr	r2, [r3, #4]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	697a      	ldr	r2, [r7, #20]
 8003d36:	621a      	str	r2, [r3, #32]
}
 8003d38:	bf00      	nop
 8003d3a:	371c      	adds	r7, #28
 8003d3c:	46bd      	mov	sp, r7
 8003d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d42:	4770      	bx	lr
 8003d44:	40010000 	.word	0x40010000
 8003d48:	40010400 	.word	0x40010400

08003d4c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003d4c:	b480      	push	{r7}
 8003d4e:	b087      	sub	sp, #28
 8003d50:	af00      	add	r7, sp, #0
 8003d52:	6078      	str	r0, [r7, #4]
 8003d54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	6a1b      	ldr	r3, [r3, #32]
 8003d5a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	6a1b      	ldr	r3, [r3, #32]
 8003d60:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	685b      	ldr	r3, [r3, #4]
 8003d6c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	69db      	ldr	r3, [r3, #28]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003d7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	021b      	lsls	r3, r3, #8
 8003d8a:	68fa      	ldr	r2, [r7, #12]
 8003d8c:	4313      	orrs	r3, r2
 8003d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d90:	693b      	ldr	r3, [r7, #16]
 8003d92:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003d96:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	689b      	ldr	r3, [r3, #8]
 8003d9c:	031b      	lsls	r3, r3, #12
 8003d9e:	693a      	ldr	r2, [r7, #16]
 8003da0:	4313      	orrs	r3, r2
 8003da2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	4a12      	ldr	r2, [pc, #72]	; (8003df0 <TIM_OC4_SetConfig+0xa4>)
 8003da8:	4293      	cmp	r3, r2
 8003daa:	d003      	beq.n	8003db4 <TIM_OC4_SetConfig+0x68>
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	4a11      	ldr	r2, [pc, #68]	; (8003df4 <TIM_OC4_SetConfig+0xa8>)
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d109      	bne.n	8003dc8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003db4:	697b      	ldr	r3, [r7, #20]
 8003db6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003dba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	695b      	ldr	r3, [r3, #20]
 8003dc0:	019b      	lsls	r3, r3, #6
 8003dc2:	697a      	ldr	r2, [r7, #20]
 8003dc4:	4313      	orrs	r3, r2
 8003dc6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	697a      	ldr	r2, [r7, #20]
 8003dcc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	68fa      	ldr	r2, [r7, #12]
 8003dd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003dd4:	683b      	ldr	r3, [r7, #0]
 8003dd6:	685a      	ldr	r2, [r3, #4]
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	693a      	ldr	r2, [r7, #16]
 8003de0:	621a      	str	r2, [r3, #32]
}
 8003de2:	bf00      	nop
 8003de4:	371c      	adds	r7, #28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dec:	4770      	bx	lr
 8003dee:	bf00      	nop
 8003df0:	40010000 	.word	0x40010000
 8003df4:	40010400 	.word	0x40010400

08003df8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003df8:	b480      	push	{r7}
 8003dfa:	b087      	sub	sp, #28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	60f8      	str	r0, [r7, #12]
 8003e00:	60b9      	str	r1, [r7, #8]
 8003e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	6a1b      	ldr	r3, [r3, #32]
 8003e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	6a1b      	ldr	r3, [r3, #32]
 8003e0e:	f023 0201 	bic.w	r2, r3, #1
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	699b      	ldr	r3, [r3, #24]
 8003e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	011b      	lsls	r3, r3, #4
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	4313      	orrs	r3, r2
 8003e2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e2e:	697b      	ldr	r3, [r7, #20]
 8003e30:	f023 030a 	bic.w	r3, r3, #10
 8003e34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e36:	697a      	ldr	r2, [r7, #20]
 8003e38:	68bb      	ldr	r3, [r7, #8]
 8003e3a:	4313      	orrs	r3, r2
 8003e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	693a      	ldr	r2, [r7, #16]
 8003e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	697a      	ldr	r2, [r7, #20]
 8003e48:	621a      	str	r2, [r3, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	371c      	adds	r7, #28
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr

08003e56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e56:	b480      	push	{r7}
 8003e58:	b087      	sub	sp, #28
 8003e5a:	af00      	add	r7, sp, #0
 8003e5c:	60f8      	str	r0, [r7, #12]
 8003e5e:	60b9      	str	r1, [r7, #8]
 8003e60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a1b      	ldr	r3, [r3, #32]
 8003e66:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	6a1b      	ldr	r3, [r3, #32]
 8003e6c:	f023 0210 	bic.w	r2, r3, #16
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	699b      	ldr	r3, [r3, #24]
 8003e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e80:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	031b      	lsls	r3, r3, #12
 8003e86:	693a      	ldr	r2, [r7, #16]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e8c:	697b      	ldr	r3, [r7, #20]
 8003e8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e92:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e94:	68bb      	ldr	r3, [r7, #8]
 8003e96:	011b      	lsls	r3, r3, #4
 8003e98:	697a      	ldr	r2, [r7, #20]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	693a      	ldr	r2, [r7, #16]
 8003ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	621a      	str	r2, [r3, #32]
}
 8003eaa:	bf00      	nop
 8003eac:	371c      	adds	r7, #28
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr

08003eb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003eb6:	b480      	push	{r7}
 8003eb8:	b085      	sub	sp, #20
 8003eba:	af00      	add	r7, sp, #0
 8003ebc:	6078      	str	r0, [r7, #4]
 8003ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	689b      	ldr	r3, [r3, #8]
 8003ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003ece:	683a      	ldr	r2, [r7, #0]
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4313      	orrs	r3, r2
 8003ed4:	f043 0307 	orr.w	r3, r3, #7
 8003ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	68fa      	ldr	r2, [r7, #12]
 8003ede:	609a      	str	r2, [r3, #8]
}
 8003ee0:	bf00      	nop
 8003ee2:	3714      	adds	r7, #20
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b087      	sub	sp, #28
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	60f8      	str	r0, [r7, #12]
 8003ef4:	60b9      	str	r1, [r7, #8]
 8003ef6:	607a      	str	r2, [r7, #4]
 8003ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f00:	697b      	ldr	r3, [r7, #20]
 8003f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	021a      	lsls	r2, r3, #8
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	68bb      	ldr	r3, [r7, #8]
 8003f12:	4313      	orrs	r3, r2
 8003f14:	697a      	ldr	r2, [r7, #20]
 8003f16:	4313      	orrs	r3, r2
 8003f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	609a      	str	r2, [r3, #8]
}
 8003f20:	bf00      	nop
 8003f22:	371c      	adds	r7, #28
 8003f24:	46bd      	mov	sp, r7
 8003f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2a:	4770      	bx	lr

08003f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f2c:	b480      	push	{r7}
 8003f2e:	b087      	sub	sp, #28
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	60b9      	str	r1, [r7, #8]
 8003f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	f003 031f 	and.w	r3, r3, #31
 8003f3e:	2201      	movs	r2, #1
 8003f40:	fa02 f303 	lsl.w	r3, r2, r3
 8003f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6a1a      	ldr	r2, [r3, #32]
 8003f4a:	697b      	ldr	r3, [r7, #20]
 8003f4c:	43db      	mvns	r3, r3
 8003f4e:	401a      	ands	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	6a1a      	ldr	r2, [r3, #32]
 8003f58:	68bb      	ldr	r3, [r7, #8]
 8003f5a:	f003 031f 	and.w	r3, r3, #31
 8003f5e:	6879      	ldr	r1, [r7, #4]
 8003f60:	fa01 f303 	lsl.w	r3, r1, r3
 8003f64:	431a      	orrs	r2, r3
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	621a      	str	r2, [r3, #32]
}
 8003f6a:	bf00      	nop
 8003f6c:	371c      	adds	r7, #28
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr
	...

08003f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b085      	sub	sp, #20
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
 8003f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d101      	bne.n	8003f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f8c:	2302      	movs	r3, #2
 8003f8e:	e05a      	b.n	8004046 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2201      	movs	r2, #1
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	2202      	movs	r2, #2
 8003f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fb8:	683b      	ldr	r3, [r7, #0]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	68fa      	ldr	r2, [r7, #12]
 8003fbe:	4313      	orrs	r3, r2
 8003fc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a21      	ldr	r2, [pc, #132]	; (8004054 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d022      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fdc:	d01d      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	4a1d      	ldr	r2, [pc, #116]	; (8004058 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d018      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a1b      	ldr	r2, [pc, #108]	; (800405c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d013      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a1a      	ldr	r2, [pc, #104]	; (8004060 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	d00e      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a18      	ldr	r2, [pc, #96]	; (8004064 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d009      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a17      	ldr	r2, [pc, #92]	; (8004068 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d004      	beq.n	800401a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4a15      	ldr	r2, [pc, #84]	; (800406c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d10c      	bne.n	8004034 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800401a:	68bb      	ldr	r3, [r7, #8]
 800401c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004020:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004022:	683b      	ldr	r3, [r7, #0]
 8004024:	685b      	ldr	r3, [r3, #4]
 8004026:	68ba      	ldr	r2, [r7, #8]
 8004028:	4313      	orrs	r3, r2
 800402a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	68ba      	ldr	r2, [r7, #8]
 8004032:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004044:	2300      	movs	r3, #0
}
 8004046:	4618      	mov	r0, r3
 8004048:	3714      	adds	r7, #20
 800404a:	46bd      	mov	sp, r7
 800404c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004050:	4770      	bx	lr
 8004052:	bf00      	nop
 8004054:	40010000 	.word	0x40010000
 8004058:	40000400 	.word	0x40000400
 800405c:	40000800 	.word	0x40000800
 8004060:	40000c00 	.word	0x40000c00
 8004064:	40010400 	.word	0x40010400
 8004068:	40014000 	.word	0x40014000
 800406c:	40001800 	.word	0x40001800

08004070 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
 8004076:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004078:	bf00      	nop
 800407a:	370c      	adds	r7, #12
 800407c:	46bd      	mov	sp, r7
 800407e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004082:	4770      	bx	lr

08004084 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004084:	b480      	push	{r7}
 8004086:	b083      	sub	sp, #12
 8004088:	af00      	add	r7, sp, #0
 800408a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800408c:	bf00      	nop
 800408e:	370c      	adds	r7, #12
 8004090:	46bd      	mov	sp, r7
 8004092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004096:	4770      	bx	lr

08004098 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b082      	sub	sp, #8
 800409c:	af00      	add	r7, sp, #0
 800409e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d101      	bne.n	80040aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040a6:	2301      	movs	r3, #1
 80040a8:	e042      	b.n	8004130 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d106      	bne.n	80040c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2200      	movs	r2, #0
 80040ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f7fd f848 	bl	8001154 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2224      	movs	r2, #36	; 0x24
 80040c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	68da      	ldr	r2, [r3, #12]
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80040da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80040dc:	6878      	ldr	r0, [r7, #4]
 80040de:	f000 f82b 	bl	8004138 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	691a      	ldr	r2, [r3, #16]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80040f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	695a      	ldr	r2, [r3, #20]
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004100:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	68da      	ldr	r2, [r3, #12]
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004110:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2200      	movs	r2, #0
 8004116:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2220      	movs	r2, #32
 800411c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	2220      	movs	r2, #32
 8004124:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	2200      	movs	r2, #0
 800412c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800412e:	2300      	movs	r3, #0
}
 8004130:	4618      	mov	r0, r3
 8004132:	3708      	adds	r7, #8
 8004134:	46bd      	mov	sp, r7
 8004136:	bd80      	pop	{r7, pc}

08004138 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004138:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800413c:	b0c0      	sub	sp, #256	; 0x100
 800413e:	af00      	add	r7, sp, #0
 8004140:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004144:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	691b      	ldr	r3, [r3, #16]
 800414c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004150:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004154:	68d9      	ldr	r1, [r3, #12]
 8004156:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800415a:	681a      	ldr	r2, [r3, #0]
 800415c:	ea40 0301 	orr.w	r3, r0, r1
 8004160:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004162:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004166:	689a      	ldr	r2, [r3, #8]
 8004168:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800416c:	691b      	ldr	r3, [r3, #16]
 800416e:	431a      	orrs	r2, r3
 8004170:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004174:	695b      	ldr	r3, [r3, #20]
 8004176:	431a      	orrs	r2, r3
 8004178:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417c:	69db      	ldr	r3, [r3, #28]
 800417e:	4313      	orrs	r3, r2
 8004180:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004184:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004190:	f021 010c 	bic.w	r1, r1, #12
 8004194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800419e:	430b      	orrs	r3, r1
 80041a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	695b      	ldr	r3, [r3, #20]
 80041aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80041ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b2:	6999      	ldr	r1, [r3, #24]
 80041b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b8:	681a      	ldr	r2, [r3, #0]
 80041ba:	ea40 0301 	orr.w	r3, r0, r1
 80041be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80041c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	4b8f      	ldr	r3, [pc, #572]	; (8004404 <UART_SetConfig+0x2cc>)
 80041c8:	429a      	cmp	r2, r3
 80041ca:	d005      	beq.n	80041d8 <UART_SetConfig+0xa0>
 80041cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	4b8d      	ldr	r3, [pc, #564]	; (8004408 <UART_SetConfig+0x2d0>)
 80041d4:	429a      	cmp	r2, r3
 80041d6:	d104      	bne.n	80041e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80041d8:	f7fe fa1a 	bl	8002610 <HAL_RCC_GetPCLK2Freq>
 80041dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80041e0:	e003      	b.n	80041ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80041e2:	f7fe fa01 	bl	80025e8 <HAL_RCC_GetPCLK1Freq>
 80041e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80041ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ee:	69db      	ldr	r3, [r3, #28]
 80041f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80041f4:	f040 810c 	bne.w	8004410 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80041f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041fc:	2200      	movs	r2, #0
 80041fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004202:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004206:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800420a:	4622      	mov	r2, r4
 800420c:	462b      	mov	r3, r5
 800420e:	1891      	adds	r1, r2, r2
 8004210:	65b9      	str	r1, [r7, #88]	; 0x58
 8004212:	415b      	adcs	r3, r3
 8004214:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004216:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800421a:	4621      	mov	r1, r4
 800421c:	eb12 0801 	adds.w	r8, r2, r1
 8004220:	4629      	mov	r1, r5
 8004222:	eb43 0901 	adc.w	r9, r3, r1
 8004226:	f04f 0200 	mov.w	r2, #0
 800422a:	f04f 0300 	mov.w	r3, #0
 800422e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004232:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004236:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800423a:	4690      	mov	r8, r2
 800423c:	4699      	mov	r9, r3
 800423e:	4623      	mov	r3, r4
 8004240:	eb18 0303 	adds.w	r3, r8, r3
 8004244:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004248:	462b      	mov	r3, r5
 800424a:	eb49 0303 	adc.w	r3, r9, r3
 800424e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004252:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004256:	685b      	ldr	r3, [r3, #4]
 8004258:	2200      	movs	r2, #0
 800425a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800425e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004262:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004266:	460b      	mov	r3, r1
 8004268:	18db      	adds	r3, r3, r3
 800426a:	653b      	str	r3, [r7, #80]	; 0x50
 800426c:	4613      	mov	r3, r2
 800426e:	eb42 0303 	adc.w	r3, r2, r3
 8004272:	657b      	str	r3, [r7, #84]	; 0x54
 8004274:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004278:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800427c:	f7fb ffc8 	bl	8000210 <__aeabi_uldivmod>
 8004280:	4602      	mov	r2, r0
 8004282:	460b      	mov	r3, r1
 8004284:	4b61      	ldr	r3, [pc, #388]	; (800440c <UART_SetConfig+0x2d4>)
 8004286:	fba3 2302 	umull	r2, r3, r3, r2
 800428a:	095b      	lsrs	r3, r3, #5
 800428c:	011c      	lsls	r4, r3, #4
 800428e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004292:	2200      	movs	r2, #0
 8004294:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004298:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800429c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80042a0:	4642      	mov	r2, r8
 80042a2:	464b      	mov	r3, r9
 80042a4:	1891      	adds	r1, r2, r2
 80042a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80042a8:	415b      	adcs	r3, r3
 80042aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80042b0:	4641      	mov	r1, r8
 80042b2:	eb12 0a01 	adds.w	sl, r2, r1
 80042b6:	4649      	mov	r1, r9
 80042b8:	eb43 0b01 	adc.w	fp, r3, r1
 80042bc:	f04f 0200 	mov.w	r2, #0
 80042c0:	f04f 0300 	mov.w	r3, #0
 80042c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80042c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80042cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80042d0:	4692      	mov	sl, r2
 80042d2:	469b      	mov	fp, r3
 80042d4:	4643      	mov	r3, r8
 80042d6:	eb1a 0303 	adds.w	r3, sl, r3
 80042da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80042de:	464b      	mov	r3, r9
 80042e0:	eb4b 0303 	adc.w	r3, fp, r3
 80042e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80042e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	2200      	movs	r2, #0
 80042f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80042f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80042f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80042fc:	460b      	mov	r3, r1
 80042fe:	18db      	adds	r3, r3, r3
 8004300:	643b      	str	r3, [r7, #64]	; 0x40
 8004302:	4613      	mov	r3, r2
 8004304:	eb42 0303 	adc.w	r3, r2, r3
 8004308:	647b      	str	r3, [r7, #68]	; 0x44
 800430a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800430e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004312:	f7fb ff7d 	bl	8000210 <__aeabi_uldivmod>
 8004316:	4602      	mov	r2, r0
 8004318:	460b      	mov	r3, r1
 800431a:	4611      	mov	r1, r2
 800431c:	4b3b      	ldr	r3, [pc, #236]	; (800440c <UART_SetConfig+0x2d4>)
 800431e:	fba3 2301 	umull	r2, r3, r3, r1
 8004322:	095b      	lsrs	r3, r3, #5
 8004324:	2264      	movs	r2, #100	; 0x64
 8004326:	fb02 f303 	mul.w	r3, r2, r3
 800432a:	1acb      	subs	r3, r1, r3
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004332:	4b36      	ldr	r3, [pc, #216]	; (800440c <UART_SetConfig+0x2d4>)
 8004334:	fba3 2302 	umull	r2, r3, r3, r2
 8004338:	095b      	lsrs	r3, r3, #5
 800433a:	005b      	lsls	r3, r3, #1
 800433c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004340:	441c      	add	r4, r3
 8004342:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004346:	2200      	movs	r2, #0
 8004348:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800434c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004350:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004354:	4642      	mov	r2, r8
 8004356:	464b      	mov	r3, r9
 8004358:	1891      	adds	r1, r2, r2
 800435a:	63b9      	str	r1, [r7, #56]	; 0x38
 800435c:	415b      	adcs	r3, r3
 800435e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004360:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004364:	4641      	mov	r1, r8
 8004366:	1851      	adds	r1, r2, r1
 8004368:	6339      	str	r1, [r7, #48]	; 0x30
 800436a:	4649      	mov	r1, r9
 800436c:	414b      	adcs	r3, r1
 800436e:	637b      	str	r3, [r7, #52]	; 0x34
 8004370:	f04f 0200 	mov.w	r2, #0
 8004374:	f04f 0300 	mov.w	r3, #0
 8004378:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800437c:	4659      	mov	r1, fp
 800437e:	00cb      	lsls	r3, r1, #3
 8004380:	4651      	mov	r1, sl
 8004382:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004386:	4651      	mov	r1, sl
 8004388:	00ca      	lsls	r2, r1, #3
 800438a:	4610      	mov	r0, r2
 800438c:	4619      	mov	r1, r3
 800438e:	4603      	mov	r3, r0
 8004390:	4642      	mov	r2, r8
 8004392:	189b      	adds	r3, r3, r2
 8004394:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004398:	464b      	mov	r3, r9
 800439a:	460a      	mov	r2, r1
 800439c:	eb42 0303 	adc.w	r3, r2, r3
 80043a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80043a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	2200      	movs	r2, #0
 80043ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80043b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80043b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80043b8:	460b      	mov	r3, r1
 80043ba:	18db      	adds	r3, r3, r3
 80043bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80043be:	4613      	mov	r3, r2
 80043c0:	eb42 0303 	adc.w	r3, r2, r3
 80043c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80043ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80043ce:	f7fb ff1f 	bl	8000210 <__aeabi_uldivmod>
 80043d2:	4602      	mov	r2, r0
 80043d4:	460b      	mov	r3, r1
 80043d6:	4b0d      	ldr	r3, [pc, #52]	; (800440c <UART_SetConfig+0x2d4>)
 80043d8:	fba3 1302 	umull	r1, r3, r3, r2
 80043dc:	095b      	lsrs	r3, r3, #5
 80043de:	2164      	movs	r1, #100	; 0x64
 80043e0:	fb01 f303 	mul.w	r3, r1, r3
 80043e4:	1ad3      	subs	r3, r2, r3
 80043e6:	00db      	lsls	r3, r3, #3
 80043e8:	3332      	adds	r3, #50	; 0x32
 80043ea:	4a08      	ldr	r2, [pc, #32]	; (800440c <UART_SetConfig+0x2d4>)
 80043ec:	fba2 2303 	umull	r2, r3, r2, r3
 80043f0:	095b      	lsrs	r3, r3, #5
 80043f2:	f003 0207 	and.w	r2, r3, #7
 80043f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4422      	add	r2, r4
 80043fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004400:	e106      	b.n	8004610 <UART_SetConfig+0x4d8>
 8004402:	bf00      	nop
 8004404:	40011000 	.word	0x40011000
 8004408:	40011400 	.word	0x40011400
 800440c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004410:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004414:	2200      	movs	r2, #0
 8004416:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800441a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800441e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004422:	4642      	mov	r2, r8
 8004424:	464b      	mov	r3, r9
 8004426:	1891      	adds	r1, r2, r2
 8004428:	6239      	str	r1, [r7, #32]
 800442a:	415b      	adcs	r3, r3
 800442c:	627b      	str	r3, [r7, #36]	; 0x24
 800442e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004432:	4641      	mov	r1, r8
 8004434:	1854      	adds	r4, r2, r1
 8004436:	4649      	mov	r1, r9
 8004438:	eb43 0501 	adc.w	r5, r3, r1
 800443c:	f04f 0200 	mov.w	r2, #0
 8004440:	f04f 0300 	mov.w	r3, #0
 8004444:	00eb      	lsls	r3, r5, #3
 8004446:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800444a:	00e2      	lsls	r2, r4, #3
 800444c:	4614      	mov	r4, r2
 800444e:	461d      	mov	r5, r3
 8004450:	4643      	mov	r3, r8
 8004452:	18e3      	adds	r3, r4, r3
 8004454:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004458:	464b      	mov	r3, r9
 800445a:	eb45 0303 	adc.w	r3, r5, r3
 800445e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004462:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004466:	685b      	ldr	r3, [r3, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800446e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004472:	f04f 0200 	mov.w	r2, #0
 8004476:	f04f 0300 	mov.w	r3, #0
 800447a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800447e:	4629      	mov	r1, r5
 8004480:	008b      	lsls	r3, r1, #2
 8004482:	4621      	mov	r1, r4
 8004484:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004488:	4621      	mov	r1, r4
 800448a:	008a      	lsls	r2, r1, #2
 800448c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004490:	f7fb febe 	bl	8000210 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4b60      	ldr	r3, [pc, #384]	; (800461c <UART_SetConfig+0x4e4>)
 800449a:	fba3 2302 	umull	r2, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	011c      	lsls	r4, r3, #4
 80044a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80044ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80044b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	1891      	adds	r1, r2, r2
 80044ba:	61b9      	str	r1, [r7, #24]
 80044bc:	415b      	adcs	r3, r3
 80044be:	61fb      	str	r3, [r7, #28]
 80044c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80044c4:	4641      	mov	r1, r8
 80044c6:	1851      	adds	r1, r2, r1
 80044c8:	6139      	str	r1, [r7, #16]
 80044ca:	4649      	mov	r1, r9
 80044cc:	414b      	adcs	r3, r1
 80044ce:	617b      	str	r3, [r7, #20]
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80044dc:	4659      	mov	r1, fp
 80044de:	00cb      	lsls	r3, r1, #3
 80044e0:	4651      	mov	r1, sl
 80044e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044e6:	4651      	mov	r1, sl
 80044e8:	00ca      	lsls	r2, r1, #3
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	4603      	mov	r3, r0
 80044f0:	4642      	mov	r2, r8
 80044f2:	189b      	adds	r3, r3, r2
 80044f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80044f8:	464b      	mov	r3, r9
 80044fa:	460a      	mov	r2, r1
 80044fc:	eb42 0303 	adc.w	r3, r2, r3
 8004500:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004504:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2200      	movs	r2, #0
 800450c:	67bb      	str	r3, [r7, #120]	; 0x78
 800450e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004510:	f04f 0200 	mov.w	r2, #0
 8004514:	f04f 0300 	mov.w	r3, #0
 8004518:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800451c:	4649      	mov	r1, r9
 800451e:	008b      	lsls	r3, r1, #2
 8004520:	4641      	mov	r1, r8
 8004522:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004526:	4641      	mov	r1, r8
 8004528:	008a      	lsls	r2, r1, #2
 800452a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800452e:	f7fb fe6f 	bl	8000210 <__aeabi_uldivmod>
 8004532:	4602      	mov	r2, r0
 8004534:	460b      	mov	r3, r1
 8004536:	4611      	mov	r1, r2
 8004538:	4b38      	ldr	r3, [pc, #224]	; (800461c <UART_SetConfig+0x4e4>)
 800453a:	fba3 2301 	umull	r2, r3, r3, r1
 800453e:	095b      	lsrs	r3, r3, #5
 8004540:	2264      	movs	r2, #100	; 0x64
 8004542:	fb02 f303 	mul.w	r3, r2, r3
 8004546:	1acb      	subs	r3, r1, r3
 8004548:	011b      	lsls	r3, r3, #4
 800454a:	3332      	adds	r3, #50	; 0x32
 800454c:	4a33      	ldr	r2, [pc, #204]	; (800461c <UART_SetConfig+0x4e4>)
 800454e:	fba2 2303 	umull	r2, r3, r2, r3
 8004552:	095b      	lsrs	r3, r3, #5
 8004554:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004558:	441c      	add	r4, r3
 800455a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800455e:	2200      	movs	r2, #0
 8004560:	673b      	str	r3, [r7, #112]	; 0x70
 8004562:	677a      	str	r2, [r7, #116]	; 0x74
 8004564:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004568:	4642      	mov	r2, r8
 800456a:	464b      	mov	r3, r9
 800456c:	1891      	adds	r1, r2, r2
 800456e:	60b9      	str	r1, [r7, #8]
 8004570:	415b      	adcs	r3, r3
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004578:	4641      	mov	r1, r8
 800457a:	1851      	adds	r1, r2, r1
 800457c:	6039      	str	r1, [r7, #0]
 800457e:	4649      	mov	r1, r9
 8004580:	414b      	adcs	r3, r1
 8004582:	607b      	str	r3, [r7, #4]
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004590:	4659      	mov	r1, fp
 8004592:	00cb      	lsls	r3, r1, #3
 8004594:	4651      	mov	r1, sl
 8004596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800459a:	4651      	mov	r1, sl
 800459c:	00ca      	lsls	r2, r1, #3
 800459e:	4610      	mov	r0, r2
 80045a0:	4619      	mov	r1, r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	4642      	mov	r2, r8
 80045a6:	189b      	adds	r3, r3, r2
 80045a8:	66bb      	str	r3, [r7, #104]	; 0x68
 80045aa:	464b      	mov	r3, r9
 80045ac:	460a      	mov	r2, r1
 80045ae:	eb42 0303 	adc.w	r3, r2, r3
 80045b2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80045b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	663b      	str	r3, [r7, #96]	; 0x60
 80045be:	667a      	str	r2, [r7, #100]	; 0x64
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	f04f 0300 	mov.w	r3, #0
 80045c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80045cc:	4649      	mov	r1, r9
 80045ce:	008b      	lsls	r3, r1, #2
 80045d0:	4641      	mov	r1, r8
 80045d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045d6:	4641      	mov	r1, r8
 80045d8:	008a      	lsls	r2, r1, #2
 80045da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80045de:	f7fb fe17 	bl	8000210 <__aeabi_uldivmod>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4b0d      	ldr	r3, [pc, #52]	; (800461c <UART_SetConfig+0x4e4>)
 80045e8:	fba3 1302 	umull	r1, r3, r3, r2
 80045ec:	095b      	lsrs	r3, r3, #5
 80045ee:	2164      	movs	r1, #100	; 0x64
 80045f0:	fb01 f303 	mul.w	r3, r1, r3
 80045f4:	1ad3      	subs	r3, r2, r3
 80045f6:	011b      	lsls	r3, r3, #4
 80045f8:	3332      	adds	r3, #50	; 0x32
 80045fa:	4a08      	ldr	r2, [pc, #32]	; (800461c <UART_SetConfig+0x4e4>)
 80045fc:	fba2 2303 	umull	r2, r3, r2, r3
 8004600:	095b      	lsrs	r3, r3, #5
 8004602:	f003 020f 	and.w	r2, r3, #15
 8004606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4422      	add	r2, r4
 800460e:	609a      	str	r2, [r3, #8]
}
 8004610:	bf00      	nop
 8004612:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004616:	46bd      	mov	sp, r7
 8004618:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800461c:	51eb851f 	.word	0x51eb851f

08004620 <__NVIC_SetPriority>:
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	4603      	mov	r3, r0
 8004628:	6039      	str	r1, [r7, #0]
 800462a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800462c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004630:	2b00      	cmp	r3, #0
 8004632:	db0a      	blt.n	800464a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004634:	683b      	ldr	r3, [r7, #0]
 8004636:	b2da      	uxtb	r2, r3
 8004638:	490c      	ldr	r1, [pc, #48]	; (800466c <__NVIC_SetPriority+0x4c>)
 800463a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800463e:	0112      	lsls	r2, r2, #4
 8004640:	b2d2      	uxtb	r2, r2
 8004642:	440b      	add	r3, r1
 8004644:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004648:	e00a      	b.n	8004660 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	b2da      	uxtb	r2, r3
 800464e:	4908      	ldr	r1, [pc, #32]	; (8004670 <__NVIC_SetPriority+0x50>)
 8004650:	79fb      	ldrb	r3, [r7, #7]
 8004652:	f003 030f 	and.w	r3, r3, #15
 8004656:	3b04      	subs	r3, #4
 8004658:	0112      	lsls	r2, r2, #4
 800465a:	b2d2      	uxtb	r2, r2
 800465c:	440b      	add	r3, r1
 800465e:	761a      	strb	r2, [r3, #24]
}
 8004660:	bf00      	nop
 8004662:	370c      	adds	r7, #12
 8004664:	46bd      	mov	sp, r7
 8004666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800466a:	4770      	bx	lr
 800466c:	e000e100 	.word	0xe000e100
 8004670:	e000ed00 	.word	0xe000ed00

08004674 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004674:	b580      	push	{r7, lr}
 8004676:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004678:	4b05      	ldr	r3, [pc, #20]	; (8004690 <SysTick_Handler+0x1c>)
 800467a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800467c:	f001 fee8 	bl	8006450 <xTaskGetSchedulerState>
 8004680:	4603      	mov	r3, r0
 8004682:	2b01      	cmp	r3, #1
 8004684:	d001      	beq.n	800468a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004686:	f002 fdcf 	bl	8007228 <xPortSysTickHandler>
  }
}
 800468a:	bf00      	nop
 800468c:	bd80      	pop	{r7, pc}
 800468e:	bf00      	nop
 8004690:	e000e010 	.word	0xe000e010

08004694 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004694:	b580      	push	{r7, lr}
 8004696:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004698:	2100      	movs	r1, #0
 800469a:	f06f 0004 	mvn.w	r0, #4
 800469e:	f7ff ffbf 	bl	8004620 <__NVIC_SetPriority>
#endif
}
 80046a2:	bf00      	nop
 80046a4:	bd80      	pop	{r7, pc}
	...

080046a8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80046a8:	b480      	push	{r7}
 80046aa:	b083      	sub	sp, #12
 80046ac:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ae:	f3ef 8305 	mrs	r3, IPSR
 80046b2:	603b      	str	r3, [r7, #0]
  return(result);
 80046b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80046ba:	f06f 0305 	mvn.w	r3, #5
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	e00c      	b.n	80046dc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80046c2:	4b0a      	ldr	r3, [pc, #40]	; (80046ec <osKernelInitialize+0x44>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d105      	bne.n	80046d6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80046ca:	4b08      	ldr	r3, [pc, #32]	; (80046ec <osKernelInitialize+0x44>)
 80046cc:	2201      	movs	r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80046d0:	2300      	movs	r3, #0
 80046d2:	607b      	str	r3, [r7, #4]
 80046d4:	e002      	b.n	80046dc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80046d6:	f04f 33ff 	mov.w	r3, #4294967295
 80046da:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046dc:	687b      	ldr	r3, [r7, #4]
}
 80046de:	4618      	mov	r0, r3
 80046e0:	370c      	adds	r7, #12
 80046e2:	46bd      	mov	sp, r7
 80046e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046e8:	4770      	bx	lr
 80046ea:	bf00      	nop
 80046ec:	20000574 	.word	0x20000574

080046f0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b082      	sub	sp, #8
 80046f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046f6:	f3ef 8305 	mrs	r3, IPSR
 80046fa:	603b      	str	r3, [r7, #0]
  return(result);
 80046fc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d003      	beq.n	800470a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004702:	f06f 0305 	mvn.w	r3, #5
 8004706:	607b      	str	r3, [r7, #4]
 8004708:	e010      	b.n	800472c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800470a:	4b0b      	ldr	r3, [pc, #44]	; (8004738 <osKernelStart+0x48>)
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	2b01      	cmp	r3, #1
 8004710:	d109      	bne.n	8004726 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004712:	f7ff ffbf 	bl	8004694 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004716:	4b08      	ldr	r3, [pc, #32]	; (8004738 <osKernelStart+0x48>)
 8004718:	2202      	movs	r2, #2
 800471a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800471c:	f001 fa50 	bl	8005bc0 <vTaskStartScheduler>
      stat = osOK;
 8004720:	2300      	movs	r3, #0
 8004722:	607b      	str	r3, [r7, #4]
 8004724:	e002      	b.n	800472c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004726:	f04f 33ff 	mov.w	r3, #4294967295
 800472a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800472c:	687b      	ldr	r3, [r7, #4]
}
 800472e:	4618      	mov	r0, r3
 8004730:	3708      	adds	r7, #8
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000574 	.word	0x20000574

0800473c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800473c:	b580      	push	{r7, lr}
 800473e:	b08e      	sub	sp, #56	; 0x38
 8004740:	af04      	add	r7, sp, #16
 8004742:	60f8      	str	r0, [r7, #12]
 8004744:	60b9      	str	r1, [r7, #8]
 8004746:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004748:	2300      	movs	r3, #0
 800474a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800474c:	f3ef 8305 	mrs	r3, IPSR
 8004750:	617b      	str	r3, [r7, #20]
  return(result);
 8004752:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004754:	2b00      	cmp	r3, #0
 8004756:	d17e      	bne.n	8004856 <osThreadNew+0x11a>
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d07b      	beq.n	8004856 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800475e:	2380      	movs	r3, #128	; 0x80
 8004760:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004762:	2318      	movs	r3, #24
 8004764:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004766:	2300      	movs	r3, #0
 8004768:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800476a:	f04f 33ff 	mov.w	r3, #4294967295
 800476e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d045      	beq.n	8004802 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d002      	beq.n	8004784 <osThreadNew+0x48>
        name = attr->name;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	699b      	ldr	r3, [r3, #24]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004792:	69fb      	ldr	r3, [r7, #28]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d008      	beq.n	80047aa <osThreadNew+0x6e>
 8004798:	69fb      	ldr	r3, [r7, #28]
 800479a:	2b38      	cmp	r3, #56	; 0x38
 800479c:	d805      	bhi.n	80047aa <osThreadNew+0x6e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	685b      	ldr	r3, [r3, #4]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <osThreadNew+0x72>
        return (NULL);
 80047aa:	2300      	movs	r3, #0
 80047ac:	e054      	b.n	8004858 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d003      	beq.n	80047be <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	695b      	ldr	r3, [r3, #20]
 80047ba:	089b      	lsrs	r3, r3, #2
 80047bc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00e      	beq.n	80047e4 <osThreadNew+0xa8>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	2b5b      	cmp	r3, #91	; 0x5b
 80047cc:	d90a      	bls.n	80047e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d006      	beq.n	80047e4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	695b      	ldr	r3, [r3, #20]
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d002      	beq.n	80047e4 <osThreadNew+0xa8>
        mem = 1;
 80047de:	2301      	movs	r3, #1
 80047e0:	61bb      	str	r3, [r7, #24]
 80047e2:	e010      	b.n	8004806 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	689b      	ldr	r3, [r3, #8]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d10c      	bne.n	8004806 <osThreadNew+0xca>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d108      	bne.n	8004806 <osThreadNew+0xca>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d104      	bne.n	8004806 <osThreadNew+0xca>
          mem = 0;
 80047fc:	2300      	movs	r3, #0
 80047fe:	61bb      	str	r3, [r7, #24]
 8004800:	e001      	b.n	8004806 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004802:	2300      	movs	r3, #0
 8004804:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	2b01      	cmp	r3, #1
 800480a:	d110      	bne.n	800482e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004810:	687a      	ldr	r2, [r7, #4]
 8004812:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004814:	9202      	str	r2, [sp, #8]
 8004816:	9301      	str	r3, [sp, #4]
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	9300      	str	r3, [sp, #0]
 800481c:	68bb      	ldr	r3, [r7, #8]
 800481e:	6a3a      	ldr	r2, [r7, #32]
 8004820:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004822:	68f8      	ldr	r0, [r7, #12]
 8004824:	f000 fff6 	bl	8005814 <xTaskCreateStatic>
 8004828:	4603      	mov	r3, r0
 800482a:	613b      	str	r3, [r7, #16]
 800482c:	e013      	b.n	8004856 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800482e:	69bb      	ldr	r3, [r7, #24]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d110      	bne.n	8004856 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004834:	6a3b      	ldr	r3, [r7, #32]
 8004836:	b29a      	uxth	r2, r3
 8004838:	f107 0310 	add.w	r3, r7, #16
 800483c:	9301      	str	r3, [sp, #4]
 800483e:	69fb      	ldr	r3, [r7, #28]
 8004840:	9300      	str	r3, [sp, #0]
 8004842:	68bb      	ldr	r3, [r7, #8]
 8004844:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004846:	68f8      	ldr	r0, [r7, #12]
 8004848:	f001 f841 	bl	80058ce <xTaskCreate>
 800484c:	4603      	mov	r3, r0
 800484e:	2b01      	cmp	r3, #1
 8004850:	d001      	beq.n	8004856 <osThreadNew+0x11a>
            hTask = NULL;
 8004852:	2300      	movs	r3, #0
 8004854:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004856:	693b      	ldr	r3, [r7, #16]
}
 8004858:	4618      	mov	r0, r3
 800485a:	3728      	adds	r7, #40	; 0x28
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004860:	b580      	push	{r7, lr}
 8004862:	b084      	sub	sp, #16
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004868:	f3ef 8305 	mrs	r3, IPSR
 800486c:	60bb      	str	r3, [r7, #8]
  return(result);
 800486e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004870:	2b00      	cmp	r3, #0
 8004872:	d003      	beq.n	800487c <osDelay+0x1c>
    stat = osErrorISR;
 8004874:	f06f 0305 	mvn.w	r3, #5
 8004878:	60fb      	str	r3, [r7, #12]
 800487a:	e007      	b.n	800488c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800487c:	2300      	movs	r3, #0
 800487e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d002      	beq.n	800488c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f001 f966 	bl	8005b58 <vTaskDelay>
    }
  }

  return (stat);
 800488c:	68fb      	ldr	r3, [r7, #12]
}
 800488e:	4618      	mov	r0, r3
 8004890:	3710      	adds	r7, #16
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
	...

08004898 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004898:	b480      	push	{r7}
 800489a:	b085      	sub	sp, #20
 800489c:	af00      	add	r7, sp, #0
 800489e:	60f8      	str	r0, [r7, #12]
 80048a0:	60b9      	str	r1, [r7, #8]
 80048a2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	4a07      	ldr	r2, [pc, #28]	; (80048c4 <vApplicationGetIdleTaskMemory+0x2c>)
 80048a8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80048aa:	68bb      	ldr	r3, [r7, #8]
 80048ac:	4a06      	ldr	r2, [pc, #24]	; (80048c8 <vApplicationGetIdleTaskMemory+0x30>)
 80048ae:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2280      	movs	r2, #128	; 0x80
 80048b4:	601a      	str	r2, [r3, #0]
}
 80048b6:	bf00      	nop
 80048b8:	3714      	adds	r7, #20
 80048ba:	46bd      	mov	sp, r7
 80048bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c0:	4770      	bx	lr
 80048c2:	bf00      	nop
 80048c4:	20000578 	.word	0x20000578
 80048c8:	200005d4 	.word	0x200005d4

080048cc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	60f8      	str	r0, [r7, #12]
 80048d4:	60b9      	str	r1, [r7, #8]
 80048d6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	4a07      	ldr	r2, [pc, #28]	; (80048f8 <vApplicationGetTimerTaskMemory+0x2c>)
 80048dc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80048de:	68bb      	ldr	r3, [r7, #8]
 80048e0:	4a06      	ldr	r2, [pc, #24]	; (80048fc <vApplicationGetTimerTaskMemory+0x30>)
 80048e2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80048ea:	601a      	str	r2, [r3, #0]
}
 80048ec:	bf00      	nop
 80048ee:	3714      	adds	r7, #20
 80048f0:	46bd      	mov	sp, r7
 80048f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f6:	4770      	bx	lr
 80048f8:	200007d4 	.word	0x200007d4
 80048fc:	20000830 	.word	0x20000830

08004900 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004900:	b480      	push	{r7}
 8004902:	b083      	sub	sp, #12
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f103 0208 	add.w	r2, r3, #8
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f04f 32ff 	mov.w	r2, #4294967295
 8004918:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	f103 0208 	add.w	r2, r3, #8
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f103 0208 	add.w	r2, r3, #8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004934:	bf00      	nop
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	2200      	movs	r2, #0
 800494c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800494e:	bf00      	nop
 8004950:	370c      	adds	r7, #12
 8004952:	46bd      	mov	sp, r7
 8004954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004958:	4770      	bx	lr

0800495a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800495a:	b480      	push	{r7}
 800495c:	b085      	sub	sp, #20
 800495e:	af00      	add	r7, sp, #0
 8004960:	6078      	str	r0, [r7, #4]
 8004962:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	685b      	ldr	r3, [r3, #4]
 8004968:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	689a      	ldr	r2, [r3, #8]
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	683a      	ldr	r2, [r7, #0]
 800497e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	687a      	ldr	r2, [r7, #4]
 800498a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	1c5a      	adds	r2, r3, #1
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	601a      	str	r2, [r3, #0]
}
 8004996:	bf00      	nop
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr

080049a2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80049a2:	b480      	push	{r7}
 80049a4:	b085      	sub	sp, #20
 80049a6:	af00      	add	r7, sp, #0
 80049a8:	6078      	str	r0, [r7, #4]
 80049aa:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049b8:	d103      	bne.n	80049c2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	691b      	ldr	r3, [r3, #16]
 80049be:	60fb      	str	r3, [r7, #12]
 80049c0:	e00c      	b.n	80049dc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	3308      	adds	r3, #8
 80049c6:	60fb      	str	r3, [r7, #12]
 80049c8:	e002      	b.n	80049d0 <vListInsert+0x2e>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	60fb      	str	r3, [r7, #12]
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	685b      	ldr	r3, [r3, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68ba      	ldr	r2, [r7, #8]
 80049d8:	429a      	cmp	r2, r3
 80049da:	d2f6      	bcs.n	80049ca <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	685a      	ldr	r2, [r3, #4]
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	685b      	ldr	r3, [r3, #4]
 80049e8:	683a      	ldr	r2, [r7, #0]
 80049ea:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80049ec:	683b      	ldr	r3, [r7, #0]
 80049ee:	68fa      	ldr	r2, [r7, #12]
 80049f0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	683a      	ldr	r2, [r7, #0]
 80049f6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	687a      	ldr	r2, [r7, #4]
 80049fc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	1c5a      	adds	r2, r3, #1
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	601a      	str	r2, [r3, #0]
}
 8004a08:	bf00      	nop
 8004a0a:	3714      	adds	r7, #20
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a12:	4770      	bx	lr

08004a14 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004a14:	b480      	push	{r7}
 8004a16:	b085      	sub	sp, #20
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	691b      	ldr	r3, [r3, #16]
 8004a20:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	687a      	ldr	r2, [r7, #4]
 8004a28:	6892      	ldr	r2, [r2, #8]
 8004a2a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	687a      	ldr	r2, [r7, #4]
 8004a32:	6852      	ldr	r2, [r2, #4]
 8004a34:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	687a      	ldr	r2, [r7, #4]
 8004a3c:	429a      	cmp	r2, r3
 8004a3e:	d103      	bne.n	8004a48 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	689a      	ldr	r2, [r3, #8]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	2200      	movs	r2, #0
 8004a4c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004a4e:	68fb      	ldr	r3, [r7, #12]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	1e5a      	subs	r2, r3, #1
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3714      	adds	r7, #20
 8004a60:	46bd      	mov	sp, r7
 8004a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a66:	4770      	bx	lr

08004a68 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b084      	sub	sp, #16
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
 8004a70:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004a92:	f002 fb37 	bl	8007104 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681a      	ldr	r2, [r3, #0]
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9e:	68f9      	ldr	r1, [r7, #12]
 8004aa0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004aa2:	fb01 f303 	mul.w	r3, r1, r3
 8004aa6:	441a      	add	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	2200      	movs	r2, #0
 8004ab0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681a      	ldr	r2, [r3, #0]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	681a      	ldr	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	68f9      	ldr	r1, [r7, #12]
 8004ac6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004ac8:	fb01 f303 	mul.w	r3, r1, r3
 8004acc:	441a      	add	r2, r3
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	22ff      	movs	r2, #255	; 0xff
 8004ad6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	22ff      	movs	r2, #255	; 0xff
 8004ade:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d114      	bne.n	8004b12 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004ae8:	68fb      	ldr	r3, [r7, #12]
 8004aea:	691b      	ldr	r3, [r3, #16]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d01a      	beq.n	8004b26 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	3310      	adds	r3, #16
 8004af4:	4618      	mov	r0, r3
 8004af6:	f001 faed 	bl	80060d4 <xTaskRemoveFromEventList>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d012      	beq.n	8004b26 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004b00:	4b0c      	ldr	r3, [pc, #48]	; (8004b34 <xQueueGenericReset+0xcc>)
 8004b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	f3bf 8f6f 	isb	sy
 8004b10:	e009      	b.n	8004b26 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	3310      	adds	r3, #16
 8004b16:	4618      	mov	r0, r3
 8004b18:	f7ff fef2 	bl	8004900 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	3324      	adds	r3, #36	; 0x24
 8004b20:	4618      	mov	r0, r3
 8004b22:	f7ff feed 	bl	8004900 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004b26:	f002 fb1d 	bl	8007164 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004b2a:	2301      	movs	r3, #1
}
 8004b2c:	4618      	mov	r0, r3
 8004b2e:	3710      	adds	r7, #16
 8004b30:	46bd      	mov	sp, r7
 8004b32:	bd80      	pop	{r7, pc}
 8004b34:	e000ed04 	.word	0xe000ed04

08004b38 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004b38:	b580      	push	{r7, lr}
 8004b3a:	b08e      	sub	sp, #56	; 0x38
 8004b3c:	af02      	add	r7, sp, #8
 8004b3e:	60f8      	str	r0, [r7, #12]
 8004b40:	60b9      	str	r1, [r7, #8]
 8004b42:	607a      	str	r2, [r7, #4]
 8004b44:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10a      	bne.n	8004b62 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004b5e:	bf00      	nop
 8004b60:	e7fe      	b.n	8004b60 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d10a      	bne.n	8004b7e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004b68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6c:	f383 8811 	msr	BASEPRI, r3
 8004b70:	f3bf 8f6f 	isb	sy
 8004b74:	f3bf 8f4f 	dsb	sy
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004b7a:	bf00      	nop
 8004b7c:	e7fe      	b.n	8004b7c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d002      	beq.n	8004b8a <xQueueGenericCreateStatic+0x52>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d001      	beq.n	8004b8e <xQueueGenericCreateStatic+0x56>
 8004b8a:	2301      	movs	r3, #1
 8004b8c:	e000      	b.n	8004b90 <xQueueGenericCreateStatic+0x58>
 8004b8e:	2300      	movs	r3, #0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10a      	bne.n	8004baa <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b98:	f383 8811 	msr	BASEPRI, r3
 8004b9c:	f3bf 8f6f 	isb	sy
 8004ba0:	f3bf 8f4f 	dsb	sy
 8004ba4:	623b      	str	r3, [r7, #32]
}
 8004ba6:	bf00      	nop
 8004ba8:	e7fe      	b.n	8004ba8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d102      	bne.n	8004bb6 <xQueueGenericCreateStatic+0x7e>
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <xQueueGenericCreateStatic+0x82>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <xQueueGenericCreateStatic+0x84>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10a      	bne.n	8004bd6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	61fb      	str	r3, [r7, #28]
}
 8004bd2:	bf00      	nop
 8004bd4:	e7fe      	b.n	8004bd4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004bd6:	2350      	movs	r3, #80	; 0x50
 8004bd8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004bda:	697b      	ldr	r3, [r7, #20]
 8004bdc:	2b50      	cmp	r3, #80	; 0x50
 8004bde:	d00a      	beq.n	8004bf6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	61bb      	str	r3, [r7, #24]
}
 8004bf2:	bf00      	nop
 8004bf4:	e7fe      	b.n	8004bf4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004bf6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004bfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d00d      	beq.n	8004c1e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c0a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004c0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c10:	9300      	str	r3, [sp, #0]
 8004c12:	4613      	mov	r3, r2
 8004c14:	687a      	ldr	r2, [r7, #4]
 8004c16:	68b9      	ldr	r1, [r7, #8]
 8004c18:	68f8      	ldr	r0, [r7, #12]
 8004c1a:	f000 f83f 	bl	8004c9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3730      	adds	r7, #48	; 0x30
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b08a      	sub	sp, #40	; 0x28
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60f8      	str	r0, [r7, #12]
 8004c30:	60b9      	str	r1, [r7, #8]
 8004c32:	4613      	mov	r3, r2
 8004c34:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d10a      	bne.n	8004c52 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c40:	f383 8811 	msr	BASEPRI, r3
 8004c44:	f3bf 8f6f 	isb	sy
 8004c48:	f3bf 8f4f 	dsb	sy
 8004c4c:	613b      	str	r3, [r7, #16]
}
 8004c4e:	bf00      	nop
 8004c50:	e7fe      	b.n	8004c50 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	fb02 f303 	mul.w	r3, r2, r3
 8004c5a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	3350      	adds	r3, #80	; 0x50
 8004c60:	4618      	mov	r0, r3
 8004c62:	f002 fb71 	bl	8007348 <pvPortMalloc>
 8004c66:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004c68:	69bb      	ldr	r3, [r7, #24]
 8004c6a:	2b00      	cmp	r3, #0
 8004c6c:	d011      	beq.n	8004c92 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004c6e:	69bb      	ldr	r3, [r7, #24]
 8004c70:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	3350      	adds	r3, #80	; 0x50
 8004c76:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004c78:	69bb      	ldr	r3, [r7, #24]
 8004c7a:	2200      	movs	r2, #0
 8004c7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004c80:	79fa      	ldrb	r2, [r7, #7]
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	9300      	str	r3, [sp, #0]
 8004c86:	4613      	mov	r3, r2
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	68b9      	ldr	r1, [r7, #8]
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f805 	bl	8004c9c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004c92:	69bb      	ldr	r3, [r7, #24]
	}
 8004c94:	4618      	mov	r0, r3
 8004c96:	3720      	adds	r7, #32
 8004c98:	46bd      	mov	sp, r7
 8004c9a:	bd80      	pop	{r7, pc}

08004c9c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004c9c:	b580      	push	{r7, lr}
 8004c9e:	b084      	sub	sp, #16
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	60f8      	str	r0, [r7, #12]
 8004ca4:	60b9      	str	r1, [r7, #8]
 8004ca6:	607a      	str	r2, [r7, #4]
 8004ca8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d103      	bne.n	8004cb8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004cb0:	69bb      	ldr	r3, [r7, #24]
 8004cb2:	69ba      	ldr	r2, [r7, #24]
 8004cb4:	601a      	str	r2, [r3, #0]
 8004cb6:	e002      	b.n	8004cbe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004cb8:	69bb      	ldr	r3, [r7, #24]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004cbe:	69bb      	ldr	r3, [r7, #24]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004cc4:	69bb      	ldr	r3, [r7, #24]
 8004cc6:	68ba      	ldr	r2, [r7, #8]
 8004cc8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004cca:	2101      	movs	r1, #1
 8004ccc:	69b8      	ldr	r0, [r7, #24]
 8004cce:	f7ff fecb 	bl	8004a68 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	78fa      	ldrb	r2, [r7, #3]
 8004cd6:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004cda:	bf00      	nop
 8004cdc:	3710      	adds	r7, #16
 8004cde:	46bd      	mov	sp, r7
 8004ce0:	bd80      	pop	{r7, pc}
	...

08004ce4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b08e      	sub	sp, #56	; 0x38
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	60f8      	str	r0, [r7, #12]
 8004cec:	60b9      	str	r1, [r7, #8]
 8004cee:	607a      	str	r2, [r7, #4]
 8004cf0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004cf2:	2300      	movs	r3, #0
 8004cf4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004cfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004cfc:	2b00      	cmp	r3, #0
 8004cfe:	d10a      	bne.n	8004d16 <xQueueGenericSend+0x32>
	__asm volatile
 8004d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d04:	f383 8811 	msr	BASEPRI, r3
 8004d08:	f3bf 8f6f 	isb	sy
 8004d0c:	f3bf 8f4f 	dsb	sy
 8004d10:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d12:	bf00      	nop
 8004d14:	e7fe      	b.n	8004d14 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d16:	68bb      	ldr	r3, [r7, #8]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d103      	bne.n	8004d24 <xQueueGenericSend+0x40>
 8004d1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d101      	bne.n	8004d28 <xQueueGenericSend+0x44>
 8004d24:	2301      	movs	r3, #1
 8004d26:	e000      	b.n	8004d2a <xQueueGenericSend+0x46>
 8004d28:	2300      	movs	r3, #0
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10a      	bne.n	8004d44 <xQueueGenericSend+0x60>
	__asm volatile
 8004d2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d32:	f383 8811 	msr	BASEPRI, r3
 8004d36:	f3bf 8f6f 	isb	sy
 8004d3a:	f3bf 8f4f 	dsb	sy
 8004d3e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d40:	bf00      	nop
 8004d42:	e7fe      	b.n	8004d42 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d103      	bne.n	8004d52 <xQueueGenericSend+0x6e>
 8004d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d101      	bne.n	8004d56 <xQueueGenericSend+0x72>
 8004d52:	2301      	movs	r3, #1
 8004d54:	e000      	b.n	8004d58 <xQueueGenericSend+0x74>
 8004d56:	2300      	movs	r3, #0
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d10a      	bne.n	8004d72 <xQueueGenericSend+0x8e>
	__asm volatile
 8004d5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d60:	f383 8811 	msr	BASEPRI, r3
 8004d64:	f3bf 8f6f 	isb	sy
 8004d68:	f3bf 8f4f 	dsb	sy
 8004d6c:	623b      	str	r3, [r7, #32]
}
 8004d6e:	bf00      	nop
 8004d70:	e7fe      	b.n	8004d70 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004d72:	f001 fb6d 	bl	8006450 <xTaskGetSchedulerState>
 8004d76:	4603      	mov	r3, r0
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <xQueueGenericSend+0x9e>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d101      	bne.n	8004d86 <xQueueGenericSend+0xa2>
 8004d82:	2301      	movs	r3, #1
 8004d84:	e000      	b.n	8004d88 <xQueueGenericSend+0xa4>
 8004d86:	2300      	movs	r3, #0
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <xQueueGenericSend+0xbe>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	61fb      	str	r3, [r7, #28]
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004da2:	f002 f9af 	bl	8007104 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004daa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004dae:	429a      	cmp	r2, r3
 8004db0:	d302      	bcc.n	8004db8 <xQueueGenericSend+0xd4>
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	2b02      	cmp	r3, #2
 8004db6:	d129      	bne.n	8004e0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004db8:	683a      	ldr	r2, [r7, #0]
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004dbe:	f000 fbbb 	bl	8005538 <prvCopyDataToQueue>
 8004dc2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d010      	beq.n	8004dee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dcc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dce:	3324      	adds	r3, #36	; 0x24
 8004dd0:	4618      	mov	r0, r3
 8004dd2:	f001 f97f 	bl	80060d4 <xTaskRemoveFromEventList>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d013      	beq.n	8004e04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004ddc:	4b3f      	ldr	r3, [pc, #252]	; (8004edc <xQueueGenericSend+0x1f8>)
 8004dde:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	e00a      	b.n	8004e04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d007      	beq.n	8004e04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004df4:	4b39      	ldr	r3, [pc, #228]	; (8004edc <xQueueGenericSend+0x1f8>)
 8004df6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dfa:	601a      	str	r2, [r3, #0]
 8004dfc:	f3bf 8f4f 	dsb	sy
 8004e00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004e04:	f002 f9ae 	bl	8007164 <vPortExitCritical>
				return pdPASS;
 8004e08:	2301      	movs	r3, #1
 8004e0a:	e063      	b.n	8004ed4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d103      	bne.n	8004e1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004e12:	f002 f9a7 	bl	8007164 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004e16:	2300      	movs	r3, #0
 8004e18:	e05c      	b.n	8004ed4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004e1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d106      	bne.n	8004e2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004e20:	f107 0314 	add.w	r3, r7, #20
 8004e24:	4618      	mov	r0, r3
 8004e26:	f001 f9b9 	bl	800619c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004e2e:	f002 f999 	bl	8007164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004e32:	f000 ff2b 	bl	8005c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004e36:	f002 f965 	bl	8007104 <vPortEnterCritical>
 8004e3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e40:	b25b      	sxtb	r3, r3
 8004e42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e46:	d103      	bne.n	8004e50 <xQueueGenericSend+0x16c>
 8004e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e56:	b25b      	sxtb	r3, r3
 8004e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e5c:	d103      	bne.n	8004e66 <xQueueGenericSend+0x182>
 8004e5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e60:	2200      	movs	r2, #0
 8004e62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004e66:	f002 f97d 	bl	8007164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004e6a:	1d3a      	adds	r2, r7, #4
 8004e6c:	f107 0314 	add.w	r3, r7, #20
 8004e70:	4611      	mov	r1, r2
 8004e72:	4618      	mov	r0, r3
 8004e74:	f001 f9a8 	bl	80061c8 <xTaskCheckForTimeOut>
 8004e78:	4603      	mov	r3, r0
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d124      	bne.n	8004ec8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004e7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e80:	f000 fc52 	bl	8005728 <prvIsQueueFull>
 8004e84:	4603      	mov	r3, r0
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d018      	beq.n	8004ebc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e8c:	3310      	adds	r3, #16
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	4611      	mov	r1, r2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f001 f8ce 	bl	8006034 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004e98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004e9a:	f000 fbdd 	bl	8005658 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004e9e:	f000 ff03 	bl	8005ca8 <xTaskResumeAll>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	f47f af7c 	bne.w	8004da2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004eaa:	4b0c      	ldr	r3, [pc, #48]	; (8004edc <xQueueGenericSend+0x1f8>)
 8004eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb0:	601a      	str	r2, [r3, #0]
 8004eb2:	f3bf 8f4f 	dsb	sy
 8004eb6:	f3bf 8f6f 	isb	sy
 8004eba:	e772      	b.n	8004da2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004ebc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004ebe:	f000 fbcb 	bl	8005658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ec2:	f000 fef1 	bl	8005ca8 <xTaskResumeAll>
 8004ec6:	e76c      	b.n	8004da2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004ec8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004eca:	f000 fbc5 	bl	8005658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004ece:	f000 feeb 	bl	8005ca8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004ed2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3738      	adds	r7, #56	; 0x38
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	e000ed04 	.word	0xe000ed04

08004ee0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b090      	sub	sp, #64	; 0x40
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	60f8      	str	r0, [r7, #12]
 8004ee8:	60b9      	str	r1, [r7, #8]
 8004eea:	607a      	str	r2, [r7, #4]
 8004eec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004ef2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d103      	bne.n	8004f1c <xQueueGenericSendFromISR+0x3c>
 8004f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d101      	bne.n	8004f20 <xQueueGenericSendFromISR+0x40>
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e000      	b.n	8004f22 <xQueueGenericSendFromISR+0x42>
 8004f20:	2300      	movs	r3, #0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d10a      	bne.n	8004f3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004f26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2a:	f383 8811 	msr	BASEPRI, r3
 8004f2e:	f3bf 8f6f 	isb	sy
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f38:	bf00      	nop
 8004f3a:	e7fe      	b.n	8004f3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	2b02      	cmp	r3, #2
 8004f40:	d103      	bne.n	8004f4a <xQueueGenericSendFromISR+0x6a>
 8004f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f46:	2b01      	cmp	r3, #1
 8004f48:	d101      	bne.n	8004f4e <xQueueGenericSendFromISR+0x6e>
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e000      	b.n	8004f50 <xQueueGenericSendFromISR+0x70>
 8004f4e:	2300      	movs	r3, #0
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d10a      	bne.n	8004f6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004f54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f58:	f383 8811 	msr	BASEPRI, r3
 8004f5c:	f3bf 8f6f 	isb	sy
 8004f60:	f3bf 8f4f 	dsb	sy
 8004f64:	623b      	str	r3, [r7, #32]
}
 8004f66:	bf00      	nop
 8004f68:	e7fe      	b.n	8004f68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004f6a:	f002 f9ad 	bl	80072c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004f6e:	f3ef 8211 	mrs	r2, BASEPRI
 8004f72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f76:	f383 8811 	msr	BASEPRI, r3
 8004f7a:	f3bf 8f6f 	isb	sy
 8004f7e:	f3bf 8f4f 	dsb	sy
 8004f82:	61fa      	str	r2, [r7, #28]
 8004f84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004f86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004f88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f92:	429a      	cmp	r2, r3
 8004f94:	d302      	bcc.n	8004f9c <xQueueGenericSendFromISR+0xbc>
 8004f96:	683b      	ldr	r3, [r7, #0]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d12f      	bne.n	8004ffc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004f9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004f9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fa2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004faa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fac:	683a      	ldr	r2, [r7, #0]
 8004fae:	68b9      	ldr	r1, [r7, #8]
 8004fb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004fb2:	f000 fac1 	bl	8005538 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004fb6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004fba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fbe:	d112      	bne.n	8004fe6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	d016      	beq.n	8004ff6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004fc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fca:	3324      	adds	r3, #36	; 0x24
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f001 f881 	bl	80060d4 <xTaskRemoveFromEventList>
 8004fd2:	4603      	mov	r3, r0
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00e      	beq.n	8004ff6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d00b      	beq.n	8004ff6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2201      	movs	r2, #1
 8004fe2:	601a      	str	r2, [r3, #0]
 8004fe4:	e007      	b.n	8004ff6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004fe6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004fea:	3301      	adds	r3, #1
 8004fec:	b2db      	uxtb	r3, r3
 8004fee:	b25a      	sxtb	r2, r3
 8004ff0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ff2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004ffa:	e001      	b.n	8005000 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ffc:	2300      	movs	r3, #0
 8004ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005002:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005004:	697b      	ldr	r3, [r7, #20]
 8005006:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800500a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800500c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800500e:	4618      	mov	r0, r3
 8005010:	3740      	adds	r7, #64	; 0x40
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b08e      	sub	sp, #56	; 0x38
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
 800501e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8005024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	623b      	str	r3, [r7, #32]
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005044:	2b00      	cmp	r3, #0
 8005046:	d00a      	beq.n	800505e <xQueueGiveFromISR+0x48>
	__asm volatile
 8005048:	f04f 0350 	mov.w	r3, #80	; 0x50
 800504c:	f383 8811 	msr	BASEPRI, r3
 8005050:	f3bf 8f6f 	isb	sy
 8005054:	f3bf 8f4f 	dsb	sy
 8005058:	61fb      	str	r3, [r7, #28]
}
 800505a:	bf00      	nop
 800505c:	e7fe      	b.n	800505c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d103      	bne.n	800506e <xQueueGiveFromISR+0x58>
 8005066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005068:	689b      	ldr	r3, [r3, #8]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d101      	bne.n	8005072 <xQueueGiveFromISR+0x5c>
 800506e:	2301      	movs	r3, #1
 8005070:	e000      	b.n	8005074 <xQueueGiveFromISR+0x5e>
 8005072:	2300      	movs	r3, #0
 8005074:	2b00      	cmp	r3, #0
 8005076:	d10a      	bne.n	800508e <xQueueGiveFromISR+0x78>
	__asm volatile
 8005078:	f04f 0350 	mov.w	r3, #80	; 0x50
 800507c:	f383 8811 	msr	BASEPRI, r3
 8005080:	f3bf 8f6f 	isb	sy
 8005084:	f3bf 8f4f 	dsb	sy
 8005088:	61bb      	str	r3, [r7, #24]
}
 800508a:	bf00      	nop
 800508c:	e7fe      	b.n	800508c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800508e:	f002 f91b 	bl	80072c8 <vPortValidateInterruptPriority>
	__asm volatile
 8005092:	f3ef 8211 	mrs	r2, BASEPRI
 8005096:	f04f 0350 	mov.w	r3, #80	; 0x50
 800509a:	f383 8811 	msr	BASEPRI, r3
 800509e:	f3bf 8f6f 	isb	sy
 80050a2:	f3bf 8f4f 	dsb	sy
 80050a6:	617a      	str	r2, [r7, #20]
 80050a8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80050aa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80050ac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80050b2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80050b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050b8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80050ba:	429a      	cmp	r2, r3
 80050bc:	d22b      	bcs.n	8005116 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80050be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050c0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80050c4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80050c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050ca:	1c5a      	adds	r2, r3, #1
 80050cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050ce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80050d0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d112      	bne.n	8005100 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80050da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d016      	beq.n	8005110 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80050e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e4:	3324      	adds	r3, #36	; 0x24
 80050e6:	4618      	mov	r0, r3
 80050e8:	f000 fff4 	bl	80060d4 <xTaskRemoveFromEventList>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d00e      	beq.n	8005110 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d00b      	beq.n	8005110 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80050f8:	683b      	ldr	r3, [r7, #0]
 80050fa:	2201      	movs	r2, #1
 80050fc:	601a      	str	r2, [r3, #0]
 80050fe:	e007      	b.n	8005110 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005100:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005104:	3301      	adds	r3, #1
 8005106:	b2db      	uxtb	r3, r3
 8005108:	b25a      	sxtb	r2, r3
 800510a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800510c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005110:	2301      	movs	r3, #1
 8005112:	637b      	str	r3, [r7, #52]	; 0x34
 8005114:	e001      	b.n	800511a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005116:	2300      	movs	r3, #0
 8005118:	637b      	str	r3, [r7, #52]	; 0x34
 800511a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800511c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	f383 8811 	msr	BASEPRI, r3
}
 8005124:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8005128:	4618      	mov	r0, r3
 800512a:	3738      	adds	r7, #56	; 0x38
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b08c      	sub	sp, #48	; 0x30
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800513c:	2300      	movs	r3, #0
 800513e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <xQueueReceive+0x30>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	623b      	str	r3, [r7, #32]
}
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	2b00      	cmp	r3, #0
 8005164:	d103      	bne.n	800516e <xQueueReceive+0x3e>
 8005166:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800516a:	2b00      	cmp	r3, #0
 800516c:	d101      	bne.n	8005172 <xQueueReceive+0x42>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <xQueueReceive+0x44>
 8005172:	2300      	movs	r3, #0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <xQueueReceive+0x5e>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	61fb      	str	r3, [r7, #28]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800518e:	f001 f95f 	bl	8006450 <xTaskGetSchedulerState>
 8005192:	4603      	mov	r3, r0
 8005194:	2b00      	cmp	r3, #0
 8005196:	d102      	bne.n	800519e <xQueueReceive+0x6e>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	2b00      	cmp	r3, #0
 800519c:	d101      	bne.n	80051a2 <xQueueReceive+0x72>
 800519e:	2301      	movs	r3, #1
 80051a0:	e000      	b.n	80051a4 <xQueueReceive+0x74>
 80051a2:	2300      	movs	r3, #0
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d10a      	bne.n	80051be <xQueueReceive+0x8e>
	__asm volatile
 80051a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ac:	f383 8811 	msr	BASEPRI, r3
 80051b0:	f3bf 8f6f 	isb	sy
 80051b4:	f3bf 8f4f 	dsb	sy
 80051b8:	61bb      	str	r3, [r7, #24]
}
 80051ba:	bf00      	nop
 80051bc:	e7fe      	b.n	80051bc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80051be:	f001 ffa1 	bl	8007104 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051c6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80051c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d01f      	beq.n	800520e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80051ce:	68b9      	ldr	r1, [r7, #8]
 80051d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80051d2:	f000 fa1b 	bl	800560c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80051d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051d8:	1e5a      	subs	r2, r3, #1
 80051da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051dc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e0:	691b      	ldr	r3, [r3, #16]
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d00f      	beq.n	8005206 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051e8:	3310      	adds	r3, #16
 80051ea:	4618      	mov	r0, r3
 80051ec:	f000 ff72 	bl	80060d4 <xTaskRemoveFromEventList>
 80051f0:	4603      	mov	r3, r0
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d007      	beq.n	8005206 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80051f6:	4b3d      	ldr	r3, [pc, #244]	; (80052ec <xQueueReceive+0x1bc>)
 80051f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051fc:	601a      	str	r2, [r3, #0]
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005206:	f001 ffad 	bl	8007164 <vPortExitCritical>
				return pdPASS;
 800520a:	2301      	movs	r3, #1
 800520c:	e069      	b.n	80052e2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d103      	bne.n	800521c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005214:	f001 ffa6 	bl	8007164 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005218:	2300      	movs	r3, #0
 800521a:	e062      	b.n	80052e2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800521c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800521e:	2b00      	cmp	r3, #0
 8005220:	d106      	bne.n	8005230 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005222:	f107 0310 	add.w	r3, r7, #16
 8005226:	4618      	mov	r0, r3
 8005228:	f000 ffb8 	bl	800619c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800522c:	2301      	movs	r3, #1
 800522e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005230:	f001 ff98 	bl	8007164 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005234:	f000 fd2a 	bl	8005c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005238:	f001 ff64 	bl	8007104 <vPortEnterCritical>
 800523c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800523e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005242:	b25b      	sxtb	r3, r3
 8005244:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005248:	d103      	bne.n	8005252 <xQueueReceive+0x122>
 800524a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800524c:	2200      	movs	r2, #0
 800524e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005252:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005254:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005258:	b25b      	sxtb	r3, r3
 800525a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800525e:	d103      	bne.n	8005268 <xQueueReceive+0x138>
 8005260:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005262:	2200      	movs	r2, #0
 8005264:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005268:	f001 ff7c 	bl	8007164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800526c:	1d3a      	adds	r2, r7, #4
 800526e:	f107 0310 	add.w	r3, r7, #16
 8005272:	4611      	mov	r1, r2
 8005274:	4618      	mov	r0, r3
 8005276:	f000 ffa7 	bl	80061c8 <xTaskCheckForTimeOut>
 800527a:	4603      	mov	r3, r0
 800527c:	2b00      	cmp	r3, #0
 800527e:	d123      	bne.n	80052c8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005280:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005282:	f000 fa3b 	bl	80056fc <prvIsQueueEmpty>
 8005286:	4603      	mov	r3, r0
 8005288:	2b00      	cmp	r3, #0
 800528a:	d017      	beq.n	80052bc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800528c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800528e:	3324      	adds	r3, #36	; 0x24
 8005290:	687a      	ldr	r2, [r7, #4]
 8005292:	4611      	mov	r1, r2
 8005294:	4618      	mov	r0, r3
 8005296:	f000 fecd 	bl	8006034 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800529a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800529c:	f000 f9dc 	bl	8005658 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80052a0:	f000 fd02 	bl	8005ca8 <xTaskResumeAll>
 80052a4:	4603      	mov	r3, r0
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d189      	bne.n	80051be <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80052aa:	4b10      	ldr	r3, [pc, #64]	; (80052ec <xQueueReceive+0x1bc>)
 80052ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052b0:	601a      	str	r2, [r3, #0]
 80052b2:	f3bf 8f4f 	dsb	sy
 80052b6:	f3bf 8f6f 	isb	sy
 80052ba:	e780      	b.n	80051be <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80052bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052be:	f000 f9cb 	bl	8005658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80052c2:	f000 fcf1 	bl	8005ca8 <xTaskResumeAll>
 80052c6:	e77a      	b.n	80051be <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80052c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052ca:	f000 f9c5 	bl	8005658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80052ce:	f000 fceb 	bl	8005ca8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80052d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052d4:	f000 fa12 	bl	80056fc <prvIsQueueEmpty>
 80052d8:	4603      	mov	r3, r0
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f43f af6f 	beq.w	80051be <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80052e0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80052e2:	4618      	mov	r0, r3
 80052e4:	3730      	adds	r7, #48	; 0x30
 80052e6:	46bd      	mov	sp, r7
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	e000ed04 	.word	0xe000ed04

080052f0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	b08e      	sub	sp, #56	; 0x38
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
 80052f8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80052fa:	2300      	movs	r3, #0
 80052fc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8005302:	2300      	movs	r3, #0
 8005304:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005306:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005308:	2b00      	cmp	r3, #0
 800530a:	d10a      	bne.n	8005322 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800530c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005310:	f383 8811 	msr	BASEPRI, r3
 8005314:	f3bf 8f6f 	isb	sy
 8005318:	f3bf 8f4f 	dsb	sy
 800531c:	623b      	str	r3, [r7, #32]
}
 800531e:	bf00      	nop
 8005320:	e7fe      	b.n	8005320 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8005322:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005326:	2b00      	cmp	r3, #0
 8005328:	d00a      	beq.n	8005340 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	61fb      	str	r3, [r7, #28]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005340:	f001 f886 	bl	8006450 <xTaskGetSchedulerState>
 8005344:	4603      	mov	r3, r0
 8005346:	2b00      	cmp	r3, #0
 8005348:	d102      	bne.n	8005350 <xQueueSemaphoreTake+0x60>
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d101      	bne.n	8005354 <xQueueSemaphoreTake+0x64>
 8005350:	2301      	movs	r3, #1
 8005352:	e000      	b.n	8005356 <xQueueSemaphoreTake+0x66>
 8005354:	2300      	movs	r3, #0
 8005356:	2b00      	cmp	r3, #0
 8005358:	d10a      	bne.n	8005370 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800535a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535e:	f383 8811 	msr	BASEPRI, r3
 8005362:	f3bf 8f6f 	isb	sy
 8005366:	f3bf 8f4f 	dsb	sy
 800536a:	61bb      	str	r3, [r7, #24]
}
 800536c:	bf00      	nop
 800536e:	e7fe      	b.n	800536e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005370:	f001 fec8 	bl	8007104 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005374:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005378:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	2b00      	cmp	r3, #0
 800537e:	d024      	beq.n	80053ca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8005380:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005382:	1e5a      	subs	r2, r3, #1
 8005384:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005386:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d104      	bne.n	800539a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8005390:	f001 f9d4 	bl	800673c <pvTaskIncrementMutexHeldCount>
 8005394:	4602      	mov	r2, r0
 8005396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005398:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800539a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800539c:	691b      	ldr	r3, [r3, #16]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d00f      	beq.n	80053c2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80053a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053a4:	3310      	adds	r3, #16
 80053a6:	4618      	mov	r0, r3
 80053a8:	f000 fe94 	bl	80060d4 <xTaskRemoveFromEventList>
 80053ac:	4603      	mov	r3, r0
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d007      	beq.n	80053c2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80053b2:	4b54      	ldr	r3, [pc, #336]	; (8005504 <xQueueSemaphoreTake+0x214>)
 80053b4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053b8:	601a      	str	r2, [r3, #0]
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053c2:	f001 fecf 	bl	8007164 <vPortExitCritical>
				return pdPASS;
 80053c6:	2301      	movs	r3, #1
 80053c8:	e097      	b.n	80054fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053ca:	683b      	ldr	r3, [r7, #0]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d111      	bne.n	80053f4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80053d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d00a      	beq.n	80053ec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	617b      	str	r3, [r7, #20]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80053ec:	f001 feba 	bl	8007164 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053f0:	2300      	movs	r3, #0
 80053f2:	e082      	b.n	80054fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053fa:	f107 030c 	add.w	r3, r7, #12
 80053fe:	4618      	mov	r0, r3
 8005400:	f000 fecc 	bl	800619c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005404:	2301      	movs	r3, #1
 8005406:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005408:	f001 feac 	bl	8007164 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800540c:	f000 fc3e 	bl	8005c8c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005410:	f001 fe78 	bl	8007104 <vPortEnterCritical>
 8005414:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005416:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800541a:	b25b      	sxtb	r3, r3
 800541c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005420:	d103      	bne.n	800542a <xQueueSemaphoreTake+0x13a>
 8005422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005424:	2200      	movs	r2, #0
 8005426:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800542a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800542c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005430:	b25b      	sxtb	r3, r3
 8005432:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005436:	d103      	bne.n	8005440 <xQueueSemaphoreTake+0x150>
 8005438:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800543a:	2200      	movs	r2, #0
 800543c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005440:	f001 fe90 	bl	8007164 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005444:	463a      	mov	r2, r7
 8005446:	f107 030c 	add.w	r3, r7, #12
 800544a:	4611      	mov	r1, r2
 800544c:	4618      	mov	r0, r3
 800544e:	f000 febb 	bl	80061c8 <xTaskCheckForTimeOut>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d132      	bne.n	80054be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005458:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800545a:	f000 f94f 	bl	80056fc <prvIsQueueEmpty>
 800545e:	4603      	mov	r3, r0
 8005460:	2b00      	cmp	r3, #0
 8005462:	d026      	beq.n	80054b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	2b00      	cmp	r3, #0
 800546a:	d109      	bne.n	8005480 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800546c:	f001 fe4a 	bl	8007104 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005472:	689b      	ldr	r3, [r3, #8]
 8005474:	4618      	mov	r0, r3
 8005476:	f001 f809 	bl	800648c <xTaskPriorityInherit>
 800547a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800547c:	f001 fe72 	bl	8007164 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005480:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005482:	3324      	adds	r3, #36	; 0x24
 8005484:	683a      	ldr	r2, [r7, #0]
 8005486:	4611      	mov	r1, r2
 8005488:	4618      	mov	r0, r3
 800548a:	f000 fdd3 	bl	8006034 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800548e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005490:	f000 f8e2 	bl	8005658 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005494:	f000 fc08 	bl	8005ca8 <xTaskResumeAll>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	f47f af68 	bne.w	8005370 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80054a0:	4b18      	ldr	r3, [pc, #96]	; (8005504 <xQueueSemaphoreTake+0x214>)
 80054a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80054a6:	601a      	str	r2, [r3, #0]
 80054a8:	f3bf 8f4f 	dsb	sy
 80054ac:	f3bf 8f6f 	isb	sy
 80054b0:	e75e      	b.n	8005370 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80054b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054b4:	f000 f8d0 	bl	8005658 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80054b8:	f000 fbf6 	bl	8005ca8 <xTaskResumeAll>
 80054bc:	e758      	b.n	8005370 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80054be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054c0:	f000 f8ca 	bl	8005658 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80054c4:	f000 fbf0 	bl	8005ca8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80054c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054ca:	f000 f917 	bl	80056fc <prvIsQueueEmpty>
 80054ce:	4603      	mov	r3, r0
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	f43f af4d 	beq.w	8005370 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d00d      	beq.n	80054f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80054dc:	f001 fe12 	bl	8007104 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80054e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80054e2:	f000 f811 	bl	8005508 <prvGetDisinheritPriorityAfterTimeout>
 80054e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80054e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80054ee:	4618      	mov	r0, r3
 80054f0:	f001 f8a2 	bl	8006638 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80054f4:	f001 fe36 	bl	8007164 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80054f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3738      	adds	r7, #56	; 0x38
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
 8005502:	bf00      	nop
 8005504:	e000ed04 	.word	0xe000ed04

08005508 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8005508:	b480      	push	{r7}
 800550a:	b085      	sub	sp, #20
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005514:	2b00      	cmp	r3, #0
 8005516:	d006      	beq.n	8005526 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005522:	60fb      	str	r3, [r7, #12]
 8005524:	e001      	b.n	800552a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005526:	2300      	movs	r3, #0
 8005528:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800552a:	68fb      	ldr	r3, [r7, #12]
	}
 800552c:	4618      	mov	r0, r3
 800552e:	3714      	adds	r7, #20
 8005530:	46bd      	mov	sp, r7
 8005532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005536:	4770      	bx	lr

08005538 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b086      	sub	sp, #24
 800553c:	af00      	add	r7, sp, #0
 800553e:	60f8      	str	r0, [r7, #12]
 8005540:	60b9      	str	r1, [r7, #8]
 8005542:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005544:	2300      	movs	r3, #0
 8005546:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800554c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005552:	2b00      	cmp	r3, #0
 8005554:	d10d      	bne.n	8005572 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d14d      	bne.n	80055fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	4618      	mov	r0, r3
 8005564:	f000 fffa 	bl	800655c <xTaskPriorityDisinherit>
 8005568:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	2200      	movs	r2, #0
 800556e:	609a      	str	r2, [r3, #8]
 8005570:	e043      	b.n	80055fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	2b00      	cmp	r3, #0
 8005576:	d119      	bne.n	80055ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005578:	68fb      	ldr	r3, [r7, #12]
 800557a:	6858      	ldr	r0, [r3, #4]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005580:	461a      	mov	r2, r3
 8005582:	68b9      	ldr	r1, [r7, #8]
 8005584:	f002 f8f6 	bl	8007774 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	685a      	ldr	r2, [r3, #4]
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005590:	441a      	add	r2, r3
 8005592:	68fb      	ldr	r3, [r7, #12]
 8005594:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	685a      	ldr	r2, [r3, #4]
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	429a      	cmp	r2, r3
 80055a0:	d32b      	bcc.n	80055fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	605a      	str	r2, [r3, #4]
 80055aa:	e026      	b.n	80055fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	68d8      	ldr	r0, [r3, #12]
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055b4:	461a      	mov	r2, r3
 80055b6:	68b9      	ldr	r1, [r7, #8]
 80055b8:	f002 f8dc 	bl	8007774 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	68da      	ldr	r2, [r3, #12]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055c4:	425b      	negs	r3, r3
 80055c6:	441a      	add	r2, r3
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	68da      	ldr	r2, [r3, #12]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	429a      	cmp	r2, r3
 80055d6:	d207      	bcs.n	80055e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	689a      	ldr	r2, [r3, #8]
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055e0:	425b      	negs	r3, r3
 80055e2:	441a      	add	r2, r3
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	2b02      	cmp	r3, #2
 80055ec:	d105      	bne.n	80055fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d002      	beq.n	80055fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	3b01      	subs	r3, #1
 80055f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055fa:	693b      	ldr	r3, [r7, #16]
 80055fc:	1c5a      	adds	r2, r3, #1
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8005602:	697b      	ldr	r3, [r7, #20]
}
 8005604:	4618      	mov	r0, r3
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800560c:	b580      	push	{r7, lr}
 800560e:	b082      	sub	sp, #8
 8005610:	af00      	add	r7, sp, #0
 8005612:	6078      	str	r0, [r7, #4]
 8005614:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800561a:	2b00      	cmp	r3, #0
 800561c:	d018      	beq.n	8005650 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	68da      	ldr	r2, [r3, #12]
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005626:	441a      	add	r2, r3
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68da      	ldr	r2, [r3, #12]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	689b      	ldr	r3, [r3, #8]
 8005634:	429a      	cmp	r2, r3
 8005636:	d303      	bcc.n	8005640 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	68d9      	ldr	r1, [r3, #12]
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005648:	461a      	mov	r2, r3
 800564a:	6838      	ldr	r0, [r7, #0]
 800564c:	f002 f892 	bl	8007774 <memcpy>
	}
}
 8005650:	bf00      	nop
 8005652:	3708      	adds	r7, #8
 8005654:	46bd      	mov	sp, r7
 8005656:	bd80      	pop	{r7, pc}

08005658 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b084      	sub	sp, #16
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005660:	f001 fd50 	bl	8007104 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800566a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800566c:	e011      	b.n	8005692 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005672:	2b00      	cmp	r3, #0
 8005674:	d012      	beq.n	800569c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	3324      	adds	r3, #36	; 0x24
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fd2a 	bl	80060d4 <xTaskRemoveFromEventList>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d001      	beq.n	800568a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005686:	f000 fe01 	bl	800628c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800568a:	7bfb      	ldrb	r3, [r7, #15]
 800568c:	3b01      	subs	r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005692:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005696:	2b00      	cmp	r3, #0
 8005698:	dce9      	bgt.n	800566e <prvUnlockQueue+0x16>
 800569a:	e000      	b.n	800569e <prvUnlockQueue+0x46>
					break;
 800569c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	22ff      	movs	r2, #255	; 0xff
 80056a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80056a6:	f001 fd5d 	bl	8007164 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80056aa:	f001 fd2b 	bl	8007104 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80056b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056b6:	e011      	b.n	80056dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	691b      	ldr	r3, [r3, #16]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d012      	beq.n	80056e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	3310      	adds	r3, #16
 80056c4:	4618      	mov	r0, r3
 80056c6:	f000 fd05 	bl	80060d4 <xTaskRemoveFromEventList>
 80056ca:	4603      	mov	r3, r0
 80056cc:	2b00      	cmp	r3, #0
 80056ce:	d001      	beq.n	80056d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80056d0:	f000 fddc 	bl	800628c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80056d4:	7bbb      	ldrb	r3, [r7, #14]
 80056d6:	3b01      	subs	r3, #1
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056e0:	2b00      	cmp	r3, #0
 80056e2:	dce9      	bgt.n	80056b8 <prvUnlockQueue+0x60>
 80056e4:	e000      	b.n	80056e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	22ff      	movs	r2, #255	; 0xff
 80056ec:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056f0:	f001 fd38 	bl	8007164 <vPortExitCritical>
}
 80056f4:	bf00      	nop
 80056f6:	3710      	adds	r7, #16
 80056f8:	46bd      	mov	sp, r7
 80056fa:	bd80      	pop	{r7, pc}

080056fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b084      	sub	sp, #16
 8005700:	af00      	add	r7, sp, #0
 8005702:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005704:	f001 fcfe 	bl	8007104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800570c:	2b00      	cmp	r3, #0
 800570e:	d102      	bne.n	8005716 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005710:	2301      	movs	r3, #1
 8005712:	60fb      	str	r3, [r7, #12]
 8005714:	e001      	b.n	800571a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005716:	2300      	movs	r3, #0
 8005718:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800571a:	f001 fd23 	bl	8007164 <vPortExitCritical>

	return xReturn;
 800571e:	68fb      	ldr	r3, [r7, #12]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3710      	adds	r7, #16
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}

08005728 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005728:	b580      	push	{r7, lr}
 800572a:	b084      	sub	sp, #16
 800572c:	af00      	add	r7, sp, #0
 800572e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005730:	f001 fce8 	bl	8007104 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800573c:	429a      	cmp	r2, r3
 800573e:	d102      	bne.n	8005746 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005740:	2301      	movs	r3, #1
 8005742:	60fb      	str	r3, [r7, #12]
 8005744:	e001      	b.n	800574a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005746:	2300      	movs	r3, #0
 8005748:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800574a:	f001 fd0b 	bl	8007164 <vPortExitCritical>

	return xReturn;
 800574e:	68fb      	ldr	r3, [r7, #12]
}
 8005750:	4618      	mov	r0, r3
 8005752:	3710      	adds	r7, #16
 8005754:	46bd      	mov	sp, r7
 8005756:	bd80      	pop	{r7, pc}

08005758 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005758:	b480      	push	{r7}
 800575a:	b085      	sub	sp, #20
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
 8005760:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005762:	2300      	movs	r3, #0
 8005764:	60fb      	str	r3, [r7, #12]
 8005766:	e014      	b.n	8005792 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005768:	4a0f      	ldr	r2, [pc, #60]	; (80057a8 <vQueueAddToRegistry+0x50>)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d10b      	bne.n	800578c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005774:	490c      	ldr	r1, [pc, #48]	; (80057a8 <vQueueAddToRegistry+0x50>)
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	683a      	ldr	r2, [r7, #0]
 800577a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800577e:	4a0a      	ldr	r2, [pc, #40]	; (80057a8 <vQueueAddToRegistry+0x50>)
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	00db      	lsls	r3, r3, #3
 8005784:	4413      	add	r3, r2
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800578a:	e006      	b.n	800579a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	3301      	adds	r3, #1
 8005790:	60fb      	str	r3, [r7, #12]
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2b07      	cmp	r3, #7
 8005796:	d9e7      	bls.n	8005768 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	20000c30 	.word	0x20000c30

080057ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b086      	sub	sp, #24
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	60f8      	str	r0, [r7, #12]
 80057b4:	60b9      	str	r1, [r7, #8]
 80057b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80057bc:	f001 fca2 	bl	8007104 <vPortEnterCritical>
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80057c6:	b25b      	sxtb	r3, r3
 80057c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057cc:	d103      	bne.n	80057d6 <vQueueWaitForMessageRestricted+0x2a>
 80057ce:	697b      	ldr	r3, [r7, #20]
 80057d0:	2200      	movs	r2, #0
 80057d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057d6:	697b      	ldr	r3, [r7, #20]
 80057d8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057dc:	b25b      	sxtb	r3, r3
 80057de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057e2:	d103      	bne.n	80057ec <vQueueWaitForMessageRestricted+0x40>
 80057e4:	697b      	ldr	r3, [r7, #20]
 80057e6:	2200      	movs	r2, #0
 80057e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057ec:	f001 fcba 	bl	8007164 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057f0:	697b      	ldr	r3, [r7, #20]
 80057f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d106      	bne.n	8005806 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057f8:	697b      	ldr	r3, [r7, #20]
 80057fa:	3324      	adds	r3, #36	; 0x24
 80057fc:	687a      	ldr	r2, [r7, #4]
 80057fe:	68b9      	ldr	r1, [r7, #8]
 8005800:	4618      	mov	r0, r3
 8005802:	f000 fc3b 	bl	800607c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005806:	6978      	ldr	r0, [r7, #20]
 8005808:	f7ff ff26 	bl	8005658 <prvUnlockQueue>
	}
 800580c:	bf00      	nop
 800580e:	3718      	adds	r7, #24
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005814:	b580      	push	{r7, lr}
 8005816:	b08e      	sub	sp, #56	; 0x38
 8005818:	af04      	add	r7, sp, #16
 800581a:	60f8      	str	r0, [r7, #12]
 800581c:	60b9      	str	r1, [r7, #8]
 800581e:	607a      	str	r2, [r7, #4]
 8005820:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005824:	2b00      	cmp	r3, #0
 8005826:	d10a      	bne.n	800583e <xTaskCreateStatic+0x2a>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	623b      	str	r3, [r7, #32]
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800583e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005840:	2b00      	cmp	r3, #0
 8005842:	d10a      	bne.n	800585a <xTaskCreateStatic+0x46>
	__asm volatile
 8005844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005848:	f383 8811 	msr	BASEPRI, r3
 800584c:	f3bf 8f6f 	isb	sy
 8005850:	f3bf 8f4f 	dsb	sy
 8005854:	61fb      	str	r3, [r7, #28]
}
 8005856:	bf00      	nop
 8005858:	e7fe      	b.n	8005858 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800585a:	235c      	movs	r3, #92	; 0x5c
 800585c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800585e:	693b      	ldr	r3, [r7, #16]
 8005860:	2b5c      	cmp	r3, #92	; 0x5c
 8005862:	d00a      	beq.n	800587a <xTaskCreateStatic+0x66>
	__asm volatile
 8005864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005868:	f383 8811 	msr	BASEPRI, r3
 800586c:	f3bf 8f6f 	isb	sy
 8005870:	f3bf 8f4f 	dsb	sy
 8005874:	61bb      	str	r3, [r7, #24]
}
 8005876:	bf00      	nop
 8005878:	e7fe      	b.n	8005878 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800587a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800587c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800587e:	2b00      	cmp	r3, #0
 8005880:	d01e      	beq.n	80058c0 <xTaskCreateStatic+0xac>
 8005882:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005884:	2b00      	cmp	r3, #0
 8005886:	d01b      	beq.n	80058c0 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005888:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800588a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005890:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005892:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005894:	2202      	movs	r2, #2
 8005896:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800589a:	2300      	movs	r3, #0
 800589c:	9303      	str	r3, [sp, #12]
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	9302      	str	r3, [sp, #8]
 80058a2:	f107 0314 	add.w	r3, r7, #20
 80058a6:	9301      	str	r3, [sp, #4]
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	9300      	str	r3, [sp, #0]
 80058ac:	683b      	ldr	r3, [r7, #0]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	68b9      	ldr	r1, [r7, #8]
 80058b2:	68f8      	ldr	r0, [r7, #12]
 80058b4:	f000 f850 	bl	8005958 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80058b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80058ba:	f000 f8dd 	bl	8005a78 <prvAddNewTaskToReadyList>
 80058be:	e001      	b.n	80058c4 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80058c0:	2300      	movs	r3, #0
 80058c2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80058c4:	697b      	ldr	r3, [r7, #20]
	}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3728      	adds	r7, #40	; 0x28
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b08c      	sub	sp, #48	; 0x30
 80058d2:	af04      	add	r7, sp, #16
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	603b      	str	r3, [r7, #0]
 80058da:	4613      	mov	r3, r2
 80058dc:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058de:	88fb      	ldrh	r3, [r7, #6]
 80058e0:	009b      	lsls	r3, r3, #2
 80058e2:	4618      	mov	r0, r3
 80058e4:	f001 fd30 	bl	8007348 <pvPortMalloc>
 80058e8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058ea:	697b      	ldr	r3, [r7, #20]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d00e      	beq.n	800590e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058f0:	205c      	movs	r0, #92	; 0x5c
 80058f2:	f001 fd29 	bl	8007348 <pvPortMalloc>
 80058f6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d003      	beq.n	8005906 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058fe:	69fb      	ldr	r3, [r7, #28]
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	631a      	str	r2, [r3, #48]	; 0x30
 8005904:	e005      	b.n	8005912 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005906:	6978      	ldr	r0, [r7, #20]
 8005908:	f001 fdea 	bl	80074e0 <vPortFree>
 800590c:	e001      	b.n	8005912 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800590e:	2300      	movs	r3, #0
 8005910:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005912:	69fb      	ldr	r3, [r7, #28]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d017      	beq.n	8005948 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005918:	69fb      	ldr	r3, [r7, #28]
 800591a:	2200      	movs	r2, #0
 800591c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005920:	88fa      	ldrh	r2, [r7, #6]
 8005922:	2300      	movs	r3, #0
 8005924:	9303      	str	r3, [sp, #12]
 8005926:	69fb      	ldr	r3, [r7, #28]
 8005928:	9302      	str	r3, [sp, #8]
 800592a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592c:	9301      	str	r3, [sp, #4]
 800592e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005930:	9300      	str	r3, [sp, #0]
 8005932:	683b      	ldr	r3, [r7, #0]
 8005934:	68b9      	ldr	r1, [r7, #8]
 8005936:	68f8      	ldr	r0, [r7, #12]
 8005938:	f000 f80e 	bl	8005958 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800593c:	69f8      	ldr	r0, [r7, #28]
 800593e:	f000 f89b 	bl	8005a78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005942:	2301      	movs	r3, #1
 8005944:	61bb      	str	r3, [r7, #24]
 8005946:	e002      	b.n	800594e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005948:	f04f 33ff 	mov.w	r3, #4294967295
 800594c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800594e:	69bb      	ldr	r3, [r7, #24]
	}
 8005950:	4618      	mov	r0, r3
 8005952:	3720      	adds	r7, #32
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b088      	sub	sp, #32
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005966:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005968:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	009b      	lsls	r3, r3, #2
 800596e:	461a      	mov	r2, r3
 8005970:	21a5      	movs	r1, #165	; 0xa5
 8005972:	f001 fed3 	bl	800771c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005980:	3b01      	subs	r3, #1
 8005982:	009b      	lsls	r3, r3, #2
 8005984:	4413      	add	r3, r2
 8005986:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005988:	69bb      	ldr	r3, [r7, #24]
 800598a:	f023 0307 	bic.w	r3, r3, #7
 800598e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	f003 0307 	and.w	r3, r3, #7
 8005996:	2b00      	cmp	r3, #0
 8005998:	d00a      	beq.n	80059b0 <prvInitialiseNewTask+0x58>
	__asm volatile
 800599a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800599e:	f383 8811 	msr	BASEPRI, r3
 80059a2:	f3bf 8f6f 	isb	sy
 80059a6:	f3bf 8f4f 	dsb	sy
 80059aa:	617b      	str	r3, [r7, #20]
}
 80059ac:	bf00      	nop
 80059ae:	e7fe      	b.n	80059ae <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80059b0:	68bb      	ldr	r3, [r7, #8]
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d01f      	beq.n	80059f6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059b6:	2300      	movs	r3, #0
 80059b8:	61fb      	str	r3, [r7, #28]
 80059ba:	e012      	b.n	80059e2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80059bc:	68ba      	ldr	r2, [r7, #8]
 80059be:	69fb      	ldr	r3, [r7, #28]
 80059c0:	4413      	add	r3, r2
 80059c2:	7819      	ldrb	r1, [r3, #0]
 80059c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	4413      	add	r3, r2
 80059ca:	3334      	adds	r3, #52	; 0x34
 80059cc:	460a      	mov	r2, r1
 80059ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80059d0:	68ba      	ldr	r2, [r7, #8]
 80059d2:	69fb      	ldr	r3, [r7, #28]
 80059d4:	4413      	add	r3, r2
 80059d6:	781b      	ldrb	r3, [r3, #0]
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d006      	beq.n	80059ea <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	3301      	adds	r3, #1
 80059e0:	61fb      	str	r3, [r7, #28]
 80059e2:	69fb      	ldr	r3, [r7, #28]
 80059e4:	2b0f      	cmp	r3, #15
 80059e6:	d9e9      	bls.n	80059bc <prvInitialiseNewTask+0x64>
 80059e8:	e000      	b.n	80059ec <prvInitialiseNewTask+0x94>
			{
				break;
 80059ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ee:	2200      	movs	r2, #0
 80059f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059f4:	e003      	b.n	80059fe <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f8:	2200      	movs	r2, #0
 80059fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a00:	2b37      	cmp	r3, #55	; 0x37
 8005a02:	d901      	bls.n	8005a08 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005a04:	2337      	movs	r3, #55	; 0x37
 8005a06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005a0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005a12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005a14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a16:	2200      	movs	r2, #0
 8005a18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005a1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1c:	3304      	adds	r3, #4
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f7fe ff8e 	bl	8004940 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005a24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a26:	3318      	adds	r3, #24
 8005a28:	4618      	mov	r0, r3
 8005a2a:	f7fe ff89 	bl	8004940 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	2200      	movs	r2, #0
 8005a48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a52:	683a      	ldr	r2, [r7, #0]
 8005a54:	68f9      	ldr	r1, [r7, #12]
 8005a56:	69b8      	ldr	r0, [r7, #24]
 8005a58:	f001 fa26 	bl	8006ea8 <pxPortInitialiseStack>
 8005a5c:	4602      	mov	r2, r0
 8005a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d002      	beq.n	8005a6e <prvInitialiseNewTask+0x116>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a6e:	bf00      	nop
 8005a70:	3720      	adds	r7, #32
 8005a72:	46bd      	mov	sp, r7
 8005a74:	bd80      	pop	{r7, pc}
	...

08005a78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b082      	sub	sp, #8
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a80:	f001 fb40 	bl	8007104 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a84:	4b2d      	ldr	r3, [pc, #180]	; (8005b3c <prvAddNewTaskToReadyList+0xc4>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	3301      	adds	r3, #1
 8005a8a:	4a2c      	ldr	r2, [pc, #176]	; (8005b3c <prvAddNewTaskToReadyList+0xc4>)
 8005a8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a8e:	4b2c      	ldr	r3, [pc, #176]	; (8005b40 <prvAddNewTaskToReadyList+0xc8>)
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	d109      	bne.n	8005aaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a96:	4a2a      	ldr	r2, [pc, #168]	; (8005b40 <prvAddNewTaskToReadyList+0xc8>)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a9c:	4b27      	ldr	r3, [pc, #156]	; (8005b3c <prvAddNewTaskToReadyList+0xc4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d110      	bne.n	8005ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005aa4:	f000 fc16 	bl	80062d4 <prvInitialiseTaskLists>
 8005aa8:	e00d      	b.n	8005ac6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005aaa:	4b26      	ldr	r3, [pc, #152]	; (8005b44 <prvAddNewTaskToReadyList+0xcc>)
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	2b00      	cmp	r3, #0
 8005ab0:	d109      	bne.n	8005ac6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ab2:	4b23      	ldr	r3, [pc, #140]	; (8005b40 <prvAddNewTaskToReadyList+0xc8>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005abc:	429a      	cmp	r2, r3
 8005abe:	d802      	bhi.n	8005ac6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ac0:	4a1f      	ldr	r2, [pc, #124]	; (8005b40 <prvAddNewTaskToReadyList+0xc8>)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ac6:	4b20      	ldr	r3, [pc, #128]	; (8005b48 <prvAddNewTaskToReadyList+0xd0>)
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	3301      	adds	r3, #1
 8005acc:	4a1e      	ldr	r2, [pc, #120]	; (8005b48 <prvAddNewTaskToReadyList+0xd0>)
 8005ace:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ad0:	4b1d      	ldr	r3, [pc, #116]	; (8005b48 <prvAddNewTaskToReadyList+0xd0>)
 8005ad2:	681a      	ldr	r2, [r3, #0]
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005adc:	4b1b      	ldr	r3, [pc, #108]	; (8005b4c <prvAddNewTaskToReadyList+0xd4>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	429a      	cmp	r2, r3
 8005ae2:	d903      	bls.n	8005aec <prvAddNewTaskToReadyList+0x74>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ae8:	4a18      	ldr	r2, [pc, #96]	; (8005b4c <prvAddNewTaskToReadyList+0xd4>)
 8005aea:	6013      	str	r3, [r2, #0]
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005af0:	4613      	mov	r3, r2
 8005af2:	009b      	lsls	r3, r3, #2
 8005af4:	4413      	add	r3, r2
 8005af6:	009b      	lsls	r3, r3, #2
 8005af8:	4a15      	ldr	r2, [pc, #84]	; (8005b50 <prvAddNewTaskToReadyList+0xd8>)
 8005afa:	441a      	add	r2, r3
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	3304      	adds	r3, #4
 8005b00:	4619      	mov	r1, r3
 8005b02:	4610      	mov	r0, r2
 8005b04:	f7fe ff29 	bl	800495a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005b08:	f001 fb2c 	bl	8007164 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005b0c:	4b0d      	ldr	r3, [pc, #52]	; (8005b44 <prvAddNewTaskToReadyList+0xcc>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d00e      	beq.n	8005b32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b14:	4b0a      	ldr	r3, [pc, #40]	; (8005b40 <prvAddNewTaskToReadyList+0xc8>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b1e:	429a      	cmp	r2, r3
 8005b20:	d207      	bcs.n	8005b32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b22:	4b0c      	ldr	r3, [pc, #48]	; (8005b54 <prvAddNewTaskToReadyList+0xdc>)
 8005b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b28:	601a      	str	r2, [r3, #0]
 8005b2a:	f3bf 8f4f 	dsb	sy
 8005b2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b32:	bf00      	nop
 8005b34:	3708      	adds	r7, #8
 8005b36:	46bd      	mov	sp, r7
 8005b38:	bd80      	pop	{r7, pc}
 8005b3a:	bf00      	nop
 8005b3c:	20001144 	.word	0x20001144
 8005b40:	20000c70 	.word	0x20000c70
 8005b44:	20001150 	.word	0x20001150
 8005b48:	20001160 	.word	0x20001160
 8005b4c:	2000114c 	.word	0x2000114c
 8005b50:	20000c74 	.word	0x20000c74
 8005b54:	e000ed04 	.word	0xe000ed04

08005b58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005b58:	b580      	push	{r7, lr}
 8005b5a:	b084      	sub	sp, #16
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d017      	beq.n	8005b9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005b6a:	4b13      	ldr	r3, [pc, #76]	; (8005bb8 <vTaskDelay+0x60>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d00a      	beq.n	8005b88 <vTaskDelay+0x30>
	__asm volatile
 8005b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b76:	f383 8811 	msr	BASEPRI, r3
 8005b7a:	f3bf 8f6f 	isb	sy
 8005b7e:	f3bf 8f4f 	dsb	sy
 8005b82:	60bb      	str	r3, [r7, #8]
}
 8005b84:	bf00      	nop
 8005b86:	e7fe      	b.n	8005b86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005b88:	f000 f880 	bl	8005c8c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005b8c:	2100      	movs	r1, #0
 8005b8e:	6878      	ldr	r0, [r7, #4]
 8005b90:	f000 fde8 	bl	8006764 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005b94:	f000 f888 	bl	8005ca8 <xTaskResumeAll>
 8005b98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d107      	bne.n	8005bb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005ba0:	4b06      	ldr	r3, [pc, #24]	; (8005bbc <vTaskDelay+0x64>)
 8005ba2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ba6:	601a      	str	r2, [r3, #0]
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bb0:	bf00      	nop
 8005bb2:	3710      	adds	r7, #16
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	bd80      	pop	{r7, pc}
 8005bb8:	2000116c 	.word	0x2000116c
 8005bbc:	e000ed04 	.word	0xe000ed04

08005bc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005bc0:	b580      	push	{r7, lr}
 8005bc2:	b08a      	sub	sp, #40	; 0x28
 8005bc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005bca:	2300      	movs	r3, #0
 8005bcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005bce:	463a      	mov	r2, r7
 8005bd0:	1d39      	adds	r1, r7, #4
 8005bd2:	f107 0308 	add.w	r3, r7, #8
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7fe fe5e 	bl	8004898 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005bdc:	6839      	ldr	r1, [r7, #0]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68ba      	ldr	r2, [r7, #8]
 8005be2:	9202      	str	r2, [sp, #8]
 8005be4:	9301      	str	r3, [sp, #4]
 8005be6:	2300      	movs	r3, #0
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	2300      	movs	r3, #0
 8005bec:	460a      	mov	r2, r1
 8005bee:	4921      	ldr	r1, [pc, #132]	; (8005c74 <vTaskStartScheduler+0xb4>)
 8005bf0:	4821      	ldr	r0, [pc, #132]	; (8005c78 <vTaskStartScheduler+0xb8>)
 8005bf2:	f7ff fe0f 	bl	8005814 <xTaskCreateStatic>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4a20      	ldr	r2, [pc, #128]	; (8005c7c <vTaskStartScheduler+0xbc>)
 8005bfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005bfc:	4b1f      	ldr	r3, [pc, #124]	; (8005c7c <vTaskStartScheduler+0xbc>)
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d002      	beq.n	8005c0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005c04:	2301      	movs	r3, #1
 8005c06:	617b      	str	r3, [r7, #20]
 8005c08:	e001      	b.n	8005c0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005c0e:	697b      	ldr	r3, [r7, #20]
 8005c10:	2b01      	cmp	r3, #1
 8005c12:	d102      	bne.n	8005c1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005c14:	f000 fdfa 	bl	800680c <xTimerCreateTimerTask>
 8005c18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d116      	bne.n	8005c4e <vTaskStartScheduler+0x8e>
	__asm volatile
 8005c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c24:	f383 8811 	msr	BASEPRI, r3
 8005c28:	f3bf 8f6f 	isb	sy
 8005c2c:	f3bf 8f4f 	dsb	sy
 8005c30:	613b      	str	r3, [r7, #16]
}
 8005c32:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005c34:	4b12      	ldr	r3, [pc, #72]	; (8005c80 <vTaskStartScheduler+0xc0>)
 8005c36:	f04f 32ff 	mov.w	r2, #4294967295
 8005c3a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005c3c:	4b11      	ldr	r3, [pc, #68]	; (8005c84 <vTaskStartScheduler+0xc4>)
 8005c3e:	2201      	movs	r2, #1
 8005c40:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005c42:	4b11      	ldr	r3, [pc, #68]	; (8005c88 <vTaskStartScheduler+0xc8>)
 8005c44:	2200      	movs	r2, #0
 8005c46:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005c48:	f001 f9ba 	bl	8006fc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005c4c:	e00e      	b.n	8005c6c <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c54:	d10a      	bne.n	8005c6c <vTaskStartScheduler+0xac>
	__asm volatile
 8005c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5a:	f383 8811 	msr	BASEPRI, r3
 8005c5e:	f3bf 8f6f 	isb	sy
 8005c62:	f3bf 8f4f 	dsb	sy
 8005c66:	60fb      	str	r3, [r7, #12]
}
 8005c68:	bf00      	nop
 8005c6a:	e7fe      	b.n	8005c6a <vTaskStartScheduler+0xaa>
}
 8005c6c:	bf00      	nop
 8005c6e:	3718      	adds	r7, #24
 8005c70:	46bd      	mov	sp, r7
 8005c72:	bd80      	pop	{r7, pc}
 8005c74:	080077b8 	.word	0x080077b8
 8005c78:	080062a5 	.word	0x080062a5
 8005c7c:	20001168 	.word	0x20001168
 8005c80:	20001164 	.word	0x20001164
 8005c84:	20001150 	.word	0x20001150
 8005c88:	20001148 	.word	0x20001148

08005c8c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005c8c:	b480      	push	{r7}
 8005c8e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005c90:	4b04      	ldr	r3, [pc, #16]	; (8005ca4 <vTaskSuspendAll+0x18>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	3301      	adds	r3, #1
 8005c96:	4a03      	ldr	r2, [pc, #12]	; (8005ca4 <vTaskSuspendAll+0x18>)
 8005c98:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005c9a:	bf00      	nop
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr
 8005ca4:	2000116c 	.word	0x2000116c

08005ca8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005ca8:	b580      	push	{r7, lr}
 8005caa:	b084      	sub	sp, #16
 8005cac:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005cb6:	4b42      	ldr	r3, [pc, #264]	; (8005dc0 <xTaskResumeAll+0x118>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d10a      	bne.n	8005cd4 <xTaskResumeAll+0x2c>
	__asm volatile
 8005cbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc2:	f383 8811 	msr	BASEPRI, r3
 8005cc6:	f3bf 8f6f 	isb	sy
 8005cca:	f3bf 8f4f 	dsb	sy
 8005cce:	603b      	str	r3, [r7, #0]
}
 8005cd0:	bf00      	nop
 8005cd2:	e7fe      	b.n	8005cd2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005cd4:	f001 fa16 	bl	8007104 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005cd8:	4b39      	ldr	r3, [pc, #228]	; (8005dc0 <xTaskResumeAll+0x118>)
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	4a38      	ldr	r2, [pc, #224]	; (8005dc0 <xTaskResumeAll+0x118>)
 8005ce0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ce2:	4b37      	ldr	r3, [pc, #220]	; (8005dc0 <xTaskResumeAll+0x118>)
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d162      	bne.n	8005db0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005cea:	4b36      	ldr	r3, [pc, #216]	; (8005dc4 <xTaskResumeAll+0x11c>)
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d05e      	beq.n	8005db0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005cf2:	e02f      	b.n	8005d54 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005cf4:	4b34      	ldr	r3, [pc, #208]	; (8005dc8 <xTaskResumeAll+0x120>)
 8005cf6:	68db      	ldr	r3, [r3, #12]
 8005cf8:	68db      	ldr	r3, [r3, #12]
 8005cfa:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	3318      	adds	r3, #24
 8005d00:	4618      	mov	r0, r3
 8005d02:	f7fe fe87 	bl	8004a14 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	3304      	adds	r3, #4
 8005d0a:	4618      	mov	r0, r3
 8005d0c:	f7fe fe82 	bl	8004a14 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d14:	4b2d      	ldr	r3, [pc, #180]	; (8005dcc <xTaskResumeAll+0x124>)
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	429a      	cmp	r2, r3
 8005d1a:	d903      	bls.n	8005d24 <xTaskResumeAll+0x7c>
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d20:	4a2a      	ldr	r2, [pc, #168]	; (8005dcc <xTaskResumeAll+0x124>)
 8005d22:	6013      	str	r3, [r2, #0]
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d28:	4613      	mov	r3, r2
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4413      	add	r3, r2
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	4a27      	ldr	r2, [pc, #156]	; (8005dd0 <xTaskResumeAll+0x128>)
 8005d32:	441a      	add	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	3304      	adds	r3, #4
 8005d38:	4619      	mov	r1, r3
 8005d3a:	4610      	mov	r0, r2
 8005d3c:	f7fe fe0d 	bl	800495a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d44:	4b23      	ldr	r3, [pc, #140]	; (8005dd4 <xTaskResumeAll+0x12c>)
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d4a:	429a      	cmp	r2, r3
 8005d4c:	d302      	bcc.n	8005d54 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005d4e:	4b22      	ldr	r3, [pc, #136]	; (8005dd8 <xTaskResumeAll+0x130>)
 8005d50:	2201      	movs	r2, #1
 8005d52:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005d54:	4b1c      	ldr	r3, [pc, #112]	; (8005dc8 <xTaskResumeAll+0x120>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d1cb      	bne.n	8005cf4 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d001      	beq.n	8005d66 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005d62:	f000 fb55 	bl	8006410 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005d66:	4b1d      	ldr	r3, [pc, #116]	; (8005ddc <xTaskResumeAll+0x134>)
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d010      	beq.n	8005d94 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005d72:	f000 f847 	bl	8005e04 <xTaskIncrementTick>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d002      	beq.n	8005d82 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005d7c:	4b16      	ldr	r3, [pc, #88]	; (8005dd8 <xTaskResumeAll+0x130>)
 8005d7e:	2201      	movs	r2, #1
 8005d80:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	3b01      	subs	r3, #1
 8005d86:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d1f1      	bne.n	8005d72 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005d8e:	4b13      	ldr	r3, [pc, #76]	; (8005ddc <xTaskResumeAll+0x134>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005d94:	4b10      	ldr	r3, [pc, #64]	; (8005dd8 <xTaskResumeAll+0x130>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	2b00      	cmp	r3, #0
 8005d9a:	d009      	beq.n	8005db0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005d9c:	2301      	movs	r3, #1
 8005d9e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005da0:	4b0f      	ldr	r3, [pc, #60]	; (8005de0 <xTaskResumeAll+0x138>)
 8005da2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005da6:	601a      	str	r2, [r3, #0]
 8005da8:	f3bf 8f4f 	dsb	sy
 8005dac:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005db0:	f001 f9d8 	bl	8007164 <vPortExitCritical>

	return xAlreadyYielded;
 8005db4:	68bb      	ldr	r3, [r7, #8]
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3710      	adds	r7, #16
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	bd80      	pop	{r7, pc}
 8005dbe:	bf00      	nop
 8005dc0:	2000116c 	.word	0x2000116c
 8005dc4:	20001144 	.word	0x20001144
 8005dc8:	20001104 	.word	0x20001104
 8005dcc:	2000114c 	.word	0x2000114c
 8005dd0:	20000c74 	.word	0x20000c74
 8005dd4:	20000c70 	.word	0x20000c70
 8005dd8:	20001158 	.word	0x20001158
 8005ddc:	20001154 	.word	0x20001154
 8005de0:	e000ed04 	.word	0xe000ed04

08005de4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005de4:	b480      	push	{r7}
 8005de6:	b083      	sub	sp, #12
 8005de8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005dea:	4b05      	ldr	r3, [pc, #20]	; (8005e00 <xTaskGetTickCount+0x1c>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005df0:	687b      	ldr	r3, [r7, #4]
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	370c      	adds	r7, #12
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	20001148 	.word	0x20001148

08005e04 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005e04:	b580      	push	{r7, lr}
 8005e06:	b086      	sub	sp, #24
 8005e08:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e0e:	4b4f      	ldr	r3, [pc, #316]	; (8005f4c <xTaskIncrementTick+0x148>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	f040 808f 	bne.w	8005f36 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005e18:	4b4d      	ldr	r3, [pc, #308]	; (8005f50 <xTaskIncrementTick+0x14c>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	3301      	adds	r3, #1
 8005e1e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005e20:	4a4b      	ldr	r2, [pc, #300]	; (8005f50 <xTaskIncrementTick+0x14c>)
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d120      	bne.n	8005e6e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005e2c:	4b49      	ldr	r3, [pc, #292]	; (8005f54 <xTaskIncrementTick+0x150>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00a      	beq.n	8005e4c <xTaskIncrementTick+0x48>
	__asm volatile
 8005e36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e3a:	f383 8811 	msr	BASEPRI, r3
 8005e3e:	f3bf 8f6f 	isb	sy
 8005e42:	f3bf 8f4f 	dsb	sy
 8005e46:	603b      	str	r3, [r7, #0]
}
 8005e48:	bf00      	nop
 8005e4a:	e7fe      	b.n	8005e4a <xTaskIncrementTick+0x46>
 8005e4c:	4b41      	ldr	r3, [pc, #260]	; (8005f54 <xTaskIncrementTick+0x150>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	60fb      	str	r3, [r7, #12]
 8005e52:	4b41      	ldr	r3, [pc, #260]	; (8005f58 <xTaskIncrementTick+0x154>)
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	4a3f      	ldr	r2, [pc, #252]	; (8005f54 <xTaskIncrementTick+0x150>)
 8005e58:	6013      	str	r3, [r2, #0]
 8005e5a:	4a3f      	ldr	r2, [pc, #252]	; (8005f58 <xTaskIncrementTick+0x154>)
 8005e5c:	68fb      	ldr	r3, [r7, #12]
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	4b3e      	ldr	r3, [pc, #248]	; (8005f5c <xTaskIncrementTick+0x158>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	3301      	adds	r3, #1
 8005e66:	4a3d      	ldr	r2, [pc, #244]	; (8005f5c <xTaskIncrementTick+0x158>)
 8005e68:	6013      	str	r3, [r2, #0]
 8005e6a:	f000 fad1 	bl	8006410 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005e6e:	4b3c      	ldr	r3, [pc, #240]	; (8005f60 <xTaskIncrementTick+0x15c>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d349      	bcc.n	8005f0c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e78:	4b36      	ldr	r3, [pc, #216]	; (8005f54 <xTaskIncrementTick+0x150>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d104      	bne.n	8005e8c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e82:	4b37      	ldr	r3, [pc, #220]	; (8005f60 <xTaskIncrementTick+0x15c>)
 8005e84:	f04f 32ff 	mov.w	r2, #4294967295
 8005e88:	601a      	str	r2, [r3, #0]
					break;
 8005e8a:	e03f      	b.n	8005f0c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8c:	4b31      	ldr	r3, [pc, #196]	; (8005f54 <xTaskIncrementTick+0x150>)
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	68db      	ldr	r3, [r3, #12]
 8005e94:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005e96:	68bb      	ldr	r3, [r7, #8]
 8005e98:	685b      	ldr	r3, [r3, #4]
 8005e9a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	429a      	cmp	r2, r3
 8005ea2:	d203      	bcs.n	8005eac <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ea4:	4a2e      	ldr	r2, [pc, #184]	; (8005f60 <xTaskIncrementTick+0x15c>)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005eaa:	e02f      	b.n	8005f0c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005eac:	68bb      	ldr	r3, [r7, #8]
 8005eae:	3304      	adds	r3, #4
 8005eb0:	4618      	mov	r0, r3
 8005eb2:	f7fe fdaf 	bl	8004a14 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005eb6:	68bb      	ldr	r3, [r7, #8]
 8005eb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005eba:	2b00      	cmp	r3, #0
 8005ebc:	d004      	beq.n	8005ec8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	3318      	adds	r3, #24
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	f7fe fda6 	bl	8004a14 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005ec8:	68bb      	ldr	r3, [r7, #8]
 8005eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ecc:	4b25      	ldr	r3, [pc, #148]	; (8005f64 <xTaskIncrementTick+0x160>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	429a      	cmp	r2, r3
 8005ed2:	d903      	bls.n	8005edc <xTaskIncrementTick+0xd8>
 8005ed4:	68bb      	ldr	r3, [r7, #8]
 8005ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ed8:	4a22      	ldr	r2, [pc, #136]	; (8005f64 <xTaskIncrementTick+0x160>)
 8005eda:	6013      	str	r3, [r2, #0]
 8005edc:	68bb      	ldr	r3, [r7, #8]
 8005ede:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ee0:	4613      	mov	r3, r2
 8005ee2:	009b      	lsls	r3, r3, #2
 8005ee4:	4413      	add	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4a1f      	ldr	r2, [pc, #124]	; (8005f68 <xTaskIncrementTick+0x164>)
 8005eea:	441a      	add	r2, r3
 8005eec:	68bb      	ldr	r3, [r7, #8]
 8005eee:	3304      	adds	r3, #4
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	4610      	mov	r0, r2
 8005ef4:	f7fe fd31 	bl	800495a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efc:	4b1b      	ldr	r3, [pc, #108]	; (8005f6c <xTaskIncrementTick+0x168>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d3b8      	bcc.n	8005e78 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005f06:	2301      	movs	r3, #1
 8005f08:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f0a:	e7b5      	b.n	8005e78 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005f0c:	4b17      	ldr	r3, [pc, #92]	; (8005f6c <xTaskIncrementTick+0x168>)
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f12:	4915      	ldr	r1, [pc, #84]	; (8005f68 <xTaskIncrementTick+0x164>)
 8005f14:	4613      	mov	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4413      	add	r3, r2
 8005f1a:	009b      	lsls	r3, r3, #2
 8005f1c:	440b      	add	r3, r1
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	2b01      	cmp	r3, #1
 8005f22:	d901      	bls.n	8005f28 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005f24:	2301      	movs	r3, #1
 8005f26:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005f28:	4b11      	ldr	r3, [pc, #68]	; (8005f70 <xTaskIncrementTick+0x16c>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d007      	beq.n	8005f40 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005f30:	2301      	movs	r3, #1
 8005f32:	617b      	str	r3, [r7, #20]
 8005f34:	e004      	b.n	8005f40 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005f36:	4b0f      	ldr	r3, [pc, #60]	; (8005f74 <xTaskIncrementTick+0x170>)
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	3301      	adds	r3, #1
 8005f3c:	4a0d      	ldr	r2, [pc, #52]	; (8005f74 <xTaskIncrementTick+0x170>)
 8005f3e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005f40:	697b      	ldr	r3, [r7, #20]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	3718      	adds	r7, #24
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bd80      	pop	{r7, pc}
 8005f4a:	bf00      	nop
 8005f4c:	2000116c 	.word	0x2000116c
 8005f50:	20001148 	.word	0x20001148
 8005f54:	200010fc 	.word	0x200010fc
 8005f58:	20001100 	.word	0x20001100
 8005f5c:	2000115c 	.word	0x2000115c
 8005f60:	20001164 	.word	0x20001164
 8005f64:	2000114c 	.word	0x2000114c
 8005f68:	20000c74 	.word	0x20000c74
 8005f6c:	20000c70 	.word	0x20000c70
 8005f70:	20001158 	.word	0x20001158
 8005f74:	20001154 	.word	0x20001154

08005f78 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b085      	sub	sp, #20
 8005f7c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005f7e:	4b28      	ldr	r3, [pc, #160]	; (8006020 <vTaskSwitchContext+0xa8>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d003      	beq.n	8005f8e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005f86:	4b27      	ldr	r3, [pc, #156]	; (8006024 <vTaskSwitchContext+0xac>)
 8005f88:	2201      	movs	r2, #1
 8005f8a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005f8c:	e041      	b.n	8006012 <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8005f8e:	4b25      	ldr	r3, [pc, #148]	; (8006024 <vTaskSwitchContext+0xac>)
 8005f90:	2200      	movs	r2, #0
 8005f92:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f94:	4b24      	ldr	r3, [pc, #144]	; (8006028 <vTaskSwitchContext+0xb0>)
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	60fb      	str	r3, [r7, #12]
 8005f9a:	e010      	b.n	8005fbe <vTaskSwitchContext+0x46>
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d10a      	bne.n	8005fb8 <vTaskSwitchContext+0x40>
	__asm volatile
 8005fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fa6:	f383 8811 	msr	BASEPRI, r3
 8005faa:	f3bf 8f6f 	isb	sy
 8005fae:	f3bf 8f4f 	dsb	sy
 8005fb2:	607b      	str	r3, [r7, #4]
}
 8005fb4:	bf00      	nop
 8005fb6:	e7fe      	b.n	8005fb6 <vTaskSwitchContext+0x3e>
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	3b01      	subs	r3, #1
 8005fbc:	60fb      	str	r3, [r7, #12]
 8005fbe:	491b      	ldr	r1, [pc, #108]	; (800602c <vTaskSwitchContext+0xb4>)
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	009b      	lsls	r3, r3, #2
 8005fca:	440b      	add	r3, r1
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d0e4      	beq.n	8005f9c <vTaskSwitchContext+0x24>
 8005fd2:	68fa      	ldr	r2, [r7, #12]
 8005fd4:	4613      	mov	r3, r2
 8005fd6:	009b      	lsls	r3, r3, #2
 8005fd8:	4413      	add	r3, r2
 8005fda:	009b      	lsls	r3, r3, #2
 8005fdc:	4a13      	ldr	r2, [pc, #76]	; (800602c <vTaskSwitchContext+0xb4>)
 8005fde:	4413      	add	r3, r2
 8005fe0:	60bb      	str	r3, [r7, #8]
 8005fe2:	68bb      	ldr	r3, [r7, #8]
 8005fe4:	685b      	ldr	r3, [r3, #4]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	605a      	str	r2, [r3, #4]
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	685a      	ldr	r2, [r3, #4]
 8005ff0:	68bb      	ldr	r3, [r7, #8]
 8005ff2:	3308      	adds	r3, #8
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d104      	bne.n	8006002 <vTaskSwitchContext+0x8a>
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	685b      	ldr	r3, [r3, #4]
 8005ffc:	685a      	ldr	r2, [r3, #4]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	605a      	str	r2, [r3, #4]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	685b      	ldr	r3, [r3, #4]
 8006006:	68db      	ldr	r3, [r3, #12]
 8006008:	4a09      	ldr	r2, [pc, #36]	; (8006030 <vTaskSwitchContext+0xb8>)
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	4a06      	ldr	r2, [pc, #24]	; (8006028 <vTaskSwitchContext+0xb0>)
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	6013      	str	r3, [r2, #0]
}
 8006012:	bf00      	nop
 8006014:	3714      	adds	r7, #20
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	2000116c 	.word	0x2000116c
 8006024:	20001158 	.word	0x20001158
 8006028:	2000114c 	.word	0x2000114c
 800602c:	20000c74 	.word	0x20000c74
 8006030:	20000c70 	.word	0x20000c70

08006034 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006034:	b580      	push	{r7, lr}
 8006036:	b084      	sub	sp, #16
 8006038:	af00      	add	r7, sp, #0
 800603a:	6078      	str	r0, [r7, #4]
 800603c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2b00      	cmp	r3, #0
 8006042:	d10a      	bne.n	800605a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006048:	f383 8811 	msr	BASEPRI, r3
 800604c:	f3bf 8f6f 	isb	sy
 8006050:	f3bf 8f4f 	dsb	sy
 8006054:	60fb      	str	r3, [r7, #12]
}
 8006056:	bf00      	nop
 8006058:	e7fe      	b.n	8006058 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800605a:	4b07      	ldr	r3, [pc, #28]	; (8006078 <vTaskPlaceOnEventList+0x44>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	3318      	adds	r3, #24
 8006060:	4619      	mov	r1, r3
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f7fe fc9d 	bl	80049a2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006068:	2101      	movs	r1, #1
 800606a:	6838      	ldr	r0, [r7, #0]
 800606c:	f000 fb7a 	bl	8006764 <prvAddCurrentTaskToDelayedList>
}
 8006070:	bf00      	nop
 8006072:	3710      	adds	r7, #16
 8006074:	46bd      	mov	sp, r7
 8006076:	bd80      	pop	{r7, pc}
 8006078:	20000c70 	.word	0x20000c70

0800607c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800607c:	b580      	push	{r7, lr}
 800607e:	b086      	sub	sp, #24
 8006080:	af00      	add	r7, sp, #0
 8006082:	60f8      	str	r0, [r7, #12]
 8006084:	60b9      	str	r1, [r7, #8]
 8006086:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2b00      	cmp	r3, #0
 800608c:	d10a      	bne.n	80060a4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800608e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006092:	f383 8811 	msr	BASEPRI, r3
 8006096:	f3bf 8f6f 	isb	sy
 800609a:	f3bf 8f4f 	dsb	sy
 800609e:	617b      	str	r3, [r7, #20]
}
 80060a0:	bf00      	nop
 80060a2:	e7fe      	b.n	80060a2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80060a4:	4b0a      	ldr	r3, [pc, #40]	; (80060d0 <vTaskPlaceOnEventListRestricted+0x54>)
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	3318      	adds	r3, #24
 80060aa:	4619      	mov	r1, r3
 80060ac:	68f8      	ldr	r0, [r7, #12]
 80060ae:	f7fe fc54 	bl	800495a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d002      	beq.n	80060be <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80060b8:	f04f 33ff 	mov.w	r3, #4294967295
 80060bc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80060be:	6879      	ldr	r1, [r7, #4]
 80060c0:	68b8      	ldr	r0, [r7, #8]
 80060c2:	f000 fb4f 	bl	8006764 <prvAddCurrentTaskToDelayedList>
	}
 80060c6:	bf00      	nop
 80060c8:	3718      	adds	r7, #24
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}
 80060ce:	bf00      	nop
 80060d0:	20000c70 	.word	0x20000c70

080060d4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	b086      	sub	sp, #24
 80060d8:	af00      	add	r7, sp, #0
 80060da:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	68db      	ldr	r3, [r3, #12]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80060e4:	693b      	ldr	r3, [r7, #16]
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d10a      	bne.n	8006100 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80060ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ee:	f383 8811 	msr	BASEPRI, r3
 80060f2:	f3bf 8f6f 	isb	sy
 80060f6:	f3bf 8f4f 	dsb	sy
 80060fa:	60fb      	str	r3, [r7, #12]
}
 80060fc:	bf00      	nop
 80060fe:	e7fe      	b.n	80060fe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	3318      	adds	r3, #24
 8006104:	4618      	mov	r0, r3
 8006106:	f7fe fc85 	bl	8004a14 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800610a:	4b1e      	ldr	r3, [pc, #120]	; (8006184 <xTaskRemoveFromEventList+0xb0>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d11d      	bne.n	800614e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006112:	693b      	ldr	r3, [r7, #16]
 8006114:	3304      	adds	r3, #4
 8006116:	4618      	mov	r0, r3
 8006118:	f7fe fc7c 	bl	8004a14 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800611c:	693b      	ldr	r3, [r7, #16]
 800611e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006120:	4b19      	ldr	r3, [pc, #100]	; (8006188 <xTaskRemoveFromEventList+0xb4>)
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	429a      	cmp	r2, r3
 8006126:	d903      	bls.n	8006130 <xTaskRemoveFromEventList+0x5c>
 8006128:	693b      	ldr	r3, [r7, #16]
 800612a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800612c:	4a16      	ldr	r2, [pc, #88]	; (8006188 <xTaskRemoveFromEventList+0xb4>)
 800612e:	6013      	str	r3, [r2, #0]
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006134:	4613      	mov	r3, r2
 8006136:	009b      	lsls	r3, r3, #2
 8006138:	4413      	add	r3, r2
 800613a:	009b      	lsls	r3, r3, #2
 800613c:	4a13      	ldr	r2, [pc, #76]	; (800618c <xTaskRemoveFromEventList+0xb8>)
 800613e:	441a      	add	r2, r3
 8006140:	693b      	ldr	r3, [r7, #16]
 8006142:	3304      	adds	r3, #4
 8006144:	4619      	mov	r1, r3
 8006146:	4610      	mov	r0, r2
 8006148:	f7fe fc07 	bl	800495a <vListInsertEnd>
 800614c:	e005      	b.n	800615a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800614e:	693b      	ldr	r3, [r7, #16]
 8006150:	3318      	adds	r3, #24
 8006152:	4619      	mov	r1, r3
 8006154:	480e      	ldr	r0, [pc, #56]	; (8006190 <xTaskRemoveFromEventList+0xbc>)
 8006156:	f7fe fc00 	bl	800495a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800615a:	693b      	ldr	r3, [r7, #16]
 800615c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615e:	4b0d      	ldr	r3, [pc, #52]	; (8006194 <xTaskRemoveFromEventList+0xc0>)
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006164:	429a      	cmp	r2, r3
 8006166:	d905      	bls.n	8006174 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006168:	2301      	movs	r3, #1
 800616a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800616c:	4b0a      	ldr	r3, [pc, #40]	; (8006198 <xTaskRemoveFromEventList+0xc4>)
 800616e:	2201      	movs	r2, #1
 8006170:	601a      	str	r2, [r3, #0]
 8006172:	e001      	b.n	8006178 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006174:	2300      	movs	r3, #0
 8006176:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006178:	697b      	ldr	r3, [r7, #20]
}
 800617a:	4618      	mov	r0, r3
 800617c:	3718      	adds	r7, #24
 800617e:	46bd      	mov	sp, r7
 8006180:	bd80      	pop	{r7, pc}
 8006182:	bf00      	nop
 8006184:	2000116c 	.word	0x2000116c
 8006188:	2000114c 	.word	0x2000114c
 800618c:	20000c74 	.word	0x20000c74
 8006190:	20001104 	.word	0x20001104
 8006194:	20000c70 	.word	0x20000c70
 8006198:	20001158 	.word	0x20001158

0800619c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800619c:	b480      	push	{r7}
 800619e:	b083      	sub	sp, #12
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80061a4:	4b06      	ldr	r3, [pc, #24]	; (80061c0 <vTaskInternalSetTimeOutState+0x24>)
 80061a6:	681a      	ldr	r2, [r3, #0]
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80061ac:	4b05      	ldr	r3, [pc, #20]	; (80061c4 <vTaskInternalSetTimeOutState+0x28>)
 80061ae:	681a      	ldr	r2, [r3, #0]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	605a      	str	r2, [r3, #4]
}
 80061b4:	bf00      	nop
 80061b6:	370c      	adds	r7, #12
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	2000115c 	.word	0x2000115c
 80061c4:	20001148 	.word	0x20001148

080061c8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b088      	sub	sp, #32
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
 80061d0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d10a      	bne.n	80061ee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80061d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061dc:	f383 8811 	msr	BASEPRI, r3
 80061e0:	f3bf 8f6f 	isb	sy
 80061e4:	f3bf 8f4f 	dsb	sy
 80061e8:	613b      	str	r3, [r7, #16]
}
 80061ea:	bf00      	nop
 80061ec:	e7fe      	b.n	80061ec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d10a      	bne.n	800620a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	60fb      	str	r3, [r7, #12]
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800620a:	f000 ff7b 	bl	8007104 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800620e:	4b1d      	ldr	r3, [pc, #116]	; (8006284 <xTaskCheckForTimeOut+0xbc>)
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	685b      	ldr	r3, [r3, #4]
 8006218:	69ba      	ldr	r2, [r7, #24]
 800621a:	1ad3      	subs	r3, r2, r3
 800621c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800621e:	683b      	ldr	r3, [r7, #0]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006226:	d102      	bne.n	800622e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006228:	2300      	movs	r3, #0
 800622a:	61fb      	str	r3, [r7, #28]
 800622c:	e023      	b.n	8006276 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b15      	ldr	r3, [pc, #84]	; (8006288 <xTaskCheckForTimeOut+0xc0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d007      	beq.n	800624a <xTaskCheckForTimeOut+0x82>
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685b      	ldr	r3, [r3, #4]
 800623e:	69ba      	ldr	r2, [r7, #24]
 8006240:	429a      	cmp	r2, r3
 8006242:	d302      	bcc.n	800624a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006244:	2301      	movs	r3, #1
 8006246:	61fb      	str	r3, [r7, #28]
 8006248:	e015      	b.n	8006276 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	697a      	ldr	r2, [r7, #20]
 8006250:	429a      	cmp	r2, r3
 8006252:	d20b      	bcs.n	800626c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	681a      	ldr	r2, [r3, #0]
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	1ad2      	subs	r2, r2, r3
 800625c:	683b      	ldr	r3, [r7, #0]
 800625e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f7ff ff9b 	bl	800619c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006266:	2300      	movs	r3, #0
 8006268:	61fb      	str	r3, [r7, #28]
 800626a:	e004      	b.n	8006276 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800626c:	683b      	ldr	r3, [r7, #0]
 800626e:	2200      	movs	r2, #0
 8006270:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006272:	2301      	movs	r3, #1
 8006274:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006276:	f000 ff75 	bl	8007164 <vPortExitCritical>

	return xReturn;
 800627a:	69fb      	ldr	r3, [r7, #28]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3720      	adds	r7, #32
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}
 8006284:	20001148 	.word	0x20001148
 8006288:	2000115c 	.word	0x2000115c

0800628c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800628c:	b480      	push	{r7}
 800628e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006290:	4b03      	ldr	r3, [pc, #12]	; (80062a0 <vTaskMissedYield+0x14>)
 8006292:	2201      	movs	r2, #1
 8006294:	601a      	str	r2, [r3, #0]
}
 8006296:	bf00      	nop
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr
 80062a0:	20001158 	.word	0x20001158

080062a4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80062a4:	b580      	push	{r7, lr}
 80062a6:	b082      	sub	sp, #8
 80062a8:	af00      	add	r7, sp, #0
 80062aa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80062ac:	f000 f852 	bl	8006354 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80062b0:	4b06      	ldr	r3, [pc, #24]	; (80062cc <prvIdleTask+0x28>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	2b01      	cmp	r3, #1
 80062b6:	d9f9      	bls.n	80062ac <prvIdleTask+0x8>
			{
				taskYIELD();
 80062b8:	4b05      	ldr	r3, [pc, #20]	; (80062d0 <prvIdleTask+0x2c>)
 80062ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062be:	601a      	str	r2, [r3, #0]
 80062c0:	f3bf 8f4f 	dsb	sy
 80062c4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80062c8:	e7f0      	b.n	80062ac <prvIdleTask+0x8>
 80062ca:	bf00      	nop
 80062cc:	20000c74 	.word	0x20000c74
 80062d0:	e000ed04 	.word	0xe000ed04

080062d4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062da:	2300      	movs	r3, #0
 80062dc:	607b      	str	r3, [r7, #4]
 80062de:	e00c      	b.n	80062fa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80062e0:	687a      	ldr	r2, [r7, #4]
 80062e2:	4613      	mov	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4413      	add	r3, r2
 80062e8:	009b      	lsls	r3, r3, #2
 80062ea:	4a12      	ldr	r2, [pc, #72]	; (8006334 <prvInitialiseTaskLists+0x60>)
 80062ec:	4413      	add	r3, r2
 80062ee:	4618      	mov	r0, r3
 80062f0:	f7fe fb06 	bl	8004900 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	3301      	adds	r3, #1
 80062f8:	607b      	str	r3, [r7, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	2b37      	cmp	r3, #55	; 0x37
 80062fe:	d9ef      	bls.n	80062e0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006300:	480d      	ldr	r0, [pc, #52]	; (8006338 <prvInitialiseTaskLists+0x64>)
 8006302:	f7fe fafd 	bl	8004900 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006306:	480d      	ldr	r0, [pc, #52]	; (800633c <prvInitialiseTaskLists+0x68>)
 8006308:	f7fe fafa 	bl	8004900 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800630c:	480c      	ldr	r0, [pc, #48]	; (8006340 <prvInitialiseTaskLists+0x6c>)
 800630e:	f7fe faf7 	bl	8004900 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006312:	480c      	ldr	r0, [pc, #48]	; (8006344 <prvInitialiseTaskLists+0x70>)
 8006314:	f7fe faf4 	bl	8004900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006318:	480b      	ldr	r0, [pc, #44]	; (8006348 <prvInitialiseTaskLists+0x74>)
 800631a:	f7fe faf1 	bl	8004900 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800631e:	4b0b      	ldr	r3, [pc, #44]	; (800634c <prvInitialiseTaskLists+0x78>)
 8006320:	4a05      	ldr	r2, [pc, #20]	; (8006338 <prvInitialiseTaskLists+0x64>)
 8006322:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006324:	4b0a      	ldr	r3, [pc, #40]	; (8006350 <prvInitialiseTaskLists+0x7c>)
 8006326:	4a05      	ldr	r2, [pc, #20]	; (800633c <prvInitialiseTaskLists+0x68>)
 8006328:	601a      	str	r2, [r3, #0]
}
 800632a:	bf00      	nop
 800632c:	3708      	adds	r7, #8
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000c74 	.word	0x20000c74
 8006338:	200010d4 	.word	0x200010d4
 800633c:	200010e8 	.word	0x200010e8
 8006340:	20001104 	.word	0x20001104
 8006344:	20001118 	.word	0x20001118
 8006348:	20001130 	.word	0x20001130
 800634c:	200010fc 	.word	0x200010fc
 8006350:	20001100 	.word	0x20001100

08006354 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006354:	b580      	push	{r7, lr}
 8006356:	b082      	sub	sp, #8
 8006358:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800635a:	e019      	b.n	8006390 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800635c:	f000 fed2 	bl	8007104 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006360:	4b10      	ldr	r3, [pc, #64]	; (80063a4 <prvCheckTasksWaitingTermination+0x50>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	68db      	ldr	r3, [r3, #12]
 8006366:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	3304      	adds	r3, #4
 800636c:	4618      	mov	r0, r3
 800636e:	f7fe fb51 	bl	8004a14 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006372:	4b0d      	ldr	r3, [pc, #52]	; (80063a8 <prvCheckTasksWaitingTermination+0x54>)
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	3b01      	subs	r3, #1
 8006378:	4a0b      	ldr	r2, [pc, #44]	; (80063a8 <prvCheckTasksWaitingTermination+0x54>)
 800637a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800637c:	4b0b      	ldr	r3, [pc, #44]	; (80063ac <prvCheckTasksWaitingTermination+0x58>)
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	3b01      	subs	r3, #1
 8006382:	4a0a      	ldr	r2, [pc, #40]	; (80063ac <prvCheckTasksWaitingTermination+0x58>)
 8006384:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006386:	f000 feed 	bl	8007164 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 f810 	bl	80063b0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006390:	4b06      	ldr	r3, [pc, #24]	; (80063ac <prvCheckTasksWaitingTermination+0x58>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	2b00      	cmp	r3, #0
 8006396:	d1e1      	bne.n	800635c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006398:	bf00      	nop
 800639a:	bf00      	nop
 800639c:	3708      	adds	r7, #8
 800639e:	46bd      	mov	sp, r7
 80063a0:	bd80      	pop	{r7, pc}
 80063a2:	bf00      	nop
 80063a4:	20001118 	.word	0x20001118
 80063a8:	20001144 	.word	0x20001144
 80063ac:	2000112c 	.word	0x2000112c

080063b0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	b084      	sub	sp, #16
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d108      	bne.n	80063d4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063c6:	4618      	mov	r0, r3
 80063c8:	f001 f88a 	bl	80074e0 <vPortFree>
				vPortFree( pxTCB );
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f001 f887 	bl	80074e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80063d2:	e018      	b.n	8006406 <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d103      	bne.n	80063e6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f001 f87e 	bl	80074e0 <vPortFree>
	}
 80063e4:	e00f      	b.n	8006406 <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d00a      	beq.n	8006406 <prvDeleteTCB+0x56>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	60fb      	str	r3, [r7, #12]
}
 8006402:	bf00      	nop
 8006404:	e7fe      	b.n	8006404 <prvDeleteTCB+0x54>
	}
 8006406:	bf00      	nop
 8006408:	3710      	adds	r7, #16
 800640a:	46bd      	mov	sp, r7
 800640c:	bd80      	pop	{r7, pc}
	...

08006410 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006410:	b480      	push	{r7}
 8006412:	b083      	sub	sp, #12
 8006414:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006416:	4b0c      	ldr	r3, [pc, #48]	; (8006448 <prvResetNextTaskUnblockTime+0x38>)
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d104      	bne.n	800642a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006420:	4b0a      	ldr	r3, [pc, #40]	; (800644c <prvResetNextTaskUnblockTime+0x3c>)
 8006422:	f04f 32ff 	mov.w	r2, #4294967295
 8006426:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006428:	e008      	b.n	800643c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800642a:	4b07      	ldr	r3, [pc, #28]	; (8006448 <prvResetNextTaskUnblockTime+0x38>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	68db      	ldr	r3, [r3, #12]
 8006430:	68db      	ldr	r3, [r3, #12]
 8006432:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	4a04      	ldr	r2, [pc, #16]	; (800644c <prvResetNextTaskUnblockTime+0x3c>)
 800643a:	6013      	str	r3, [r2, #0]
}
 800643c:	bf00      	nop
 800643e:	370c      	adds	r7, #12
 8006440:	46bd      	mov	sp, r7
 8006442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006446:	4770      	bx	lr
 8006448:	200010fc 	.word	0x200010fc
 800644c:	20001164 	.word	0x20001164

08006450 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006450:	b480      	push	{r7}
 8006452:	b083      	sub	sp, #12
 8006454:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006456:	4b0b      	ldr	r3, [pc, #44]	; (8006484 <xTaskGetSchedulerState+0x34>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d102      	bne.n	8006464 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800645e:	2301      	movs	r3, #1
 8006460:	607b      	str	r3, [r7, #4]
 8006462:	e008      	b.n	8006476 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006464:	4b08      	ldr	r3, [pc, #32]	; (8006488 <xTaskGetSchedulerState+0x38>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d102      	bne.n	8006472 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800646c:	2302      	movs	r3, #2
 800646e:	607b      	str	r3, [r7, #4]
 8006470:	e001      	b.n	8006476 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006472:	2300      	movs	r3, #0
 8006474:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006476:	687b      	ldr	r3, [r7, #4]
	}
 8006478:	4618      	mov	r0, r3
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	20001150 	.word	0x20001150
 8006488:	2000116c 	.word	0x2000116c

0800648c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800648c:	b580      	push	{r7, lr}
 800648e:	b084      	sub	sp, #16
 8006490:	af00      	add	r7, sp, #0
 8006492:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006498:	2300      	movs	r3, #0
 800649a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2b00      	cmp	r3, #0
 80064a0:	d051      	beq.n	8006546 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064a6:	4b2a      	ldr	r3, [pc, #168]	; (8006550 <xTaskPriorityInherit+0xc4>)
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064ac:	429a      	cmp	r2, r3
 80064ae:	d241      	bcs.n	8006534 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	db06      	blt.n	80064c6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80064b8:	4b25      	ldr	r3, [pc, #148]	; (8006550 <xTaskPriorityInherit+0xc4>)
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80064be:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80064c2:	68bb      	ldr	r3, [r7, #8]
 80064c4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	6959      	ldr	r1, [r3, #20]
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ce:	4613      	mov	r3, r2
 80064d0:	009b      	lsls	r3, r3, #2
 80064d2:	4413      	add	r3, r2
 80064d4:	009b      	lsls	r3, r3, #2
 80064d6:	4a1f      	ldr	r2, [pc, #124]	; (8006554 <xTaskPriorityInherit+0xc8>)
 80064d8:	4413      	add	r3, r2
 80064da:	4299      	cmp	r1, r3
 80064dc:	d122      	bne.n	8006524 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80064de:	68bb      	ldr	r3, [r7, #8]
 80064e0:	3304      	adds	r3, #4
 80064e2:	4618      	mov	r0, r3
 80064e4:	f7fe fa96 	bl	8004a14 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80064e8:	4b19      	ldr	r3, [pc, #100]	; (8006550 <xTaskPriorityInherit+0xc4>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80064f2:	68bb      	ldr	r3, [r7, #8]
 80064f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80064f6:	4b18      	ldr	r3, [pc, #96]	; (8006558 <xTaskPriorityInherit+0xcc>)
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	429a      	cmp	r2, r3
 80064fc:	d903      	bls.n	8006506 <xTaskPriorityInherit+0x7a>
 80064fe:	68bb      	ldr	r3, [r7, #8]
 8006500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006502:	4a15      	ldr	r2, [pc, #84]	; (8006558 <xTaskPriorityInherit+0xcc>)
 8006504:	6013      	str	r3, [r2, #0]
 8006506:	68bb      	ldr	r3, [r7, #8]
 8006508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800650a:	4613      	mov	r3, r2
 800650c:	009b      	lsls	r3, r3, #2
 800650e:	4413      	add	r3, r2
 8006510:	009b      	lsls	r3, r3, #2
 8006512:	4a10      	ldr	r2, [pc, #64]	; (8006554 <xTaskPriorityInherit+0xc8>)
 8006514:	441a      	add	r2, r3
 8006516:	68bb      	ldr	r3, [r7, #8]
 8006518:	3304      	adds	r3, #4
 800651a:	4619      	mov	r1, r3
 800651c:	4610      	mov	r0, r2
 800651e:	f7fe fa1c 	bl	800495a <vListInsertEnd>
 8006522:	e004      	b.n	800652e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8006524:	4b0a      	ldr	r3, [pc, #40]	; (8006550 <xTaskPriorityInherit+0xc4>)
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800652a:	68bb      	ldr	r3, [r7, #8]
 800652c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800652e:	2301      	movs	r3, #1
 8006530:	60fb      	str	r3, [r7, #12]
 8006532:	e008      	b.n	8006546 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006538:	4b05      	ldr	r3, [pc, #20]	; (8006550 <xTaskPriorityInherit+0xc4>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800653e:	429a      	cmp	r2, r3
 8006540:	d201      	bcs.n	8006546 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006542:	2301      	movs	r3, #1
 8006544:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006546:	68fb      	ldr	r3, [r7, #12]
	}
 8006548:	4618      	mov	r0, r3
 800654a:	3710      	adds	r7, #16
 800654c:	46bd      	mov	sp, r7
 800654e:	bd80      	pop	{r7, pc}
 8006550:	20000c70 	.word	0x20000c70
 8006554:	20000c74 	.word	0x20000c74
 8006558:	2000114c 	.word	0x2000114c

0800655c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006568:	2300      	movs	r3, #0
 800656a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2b00      	cmp	r3, #0
 8006570:	d056      	beq.n	8006620 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006572:	4b2e      	ldr	r3, [pc, #184]	; (800662c <xTaskPriorityDisinherit+0xd0>)
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	693a      	ldr	r2, [r7, #16]
 8006578:	429a      	cmp	r2, r3
 800657a:	d00a      	beq.n	8006592 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800657c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006580:	f383 8811 	msr	BASEPRI, r3
 8006584:	f3bf 8f6f 	isb	sy
 8006588:	f3bf 8f4f 	dsb	sy
 800658c:	60fb      	str	r3, [r7, #12]
}
 800658e:	bf00      	nop
 8006590:	e7fe      	b.n	8006590 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006592:	693b      	ldr	r3, [r7, #16]
 8006594:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	60bb      	str	r3, [r7, #8]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065b4:	1e5a      	subs	r2, r3, #1
 80065b6:	693b      	ldr	r3, [r7, #16]
 80065b8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065ba:	693b      	ldr	r3, [r7, #16]
 80065bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065c2:	429a      	cmp	r2, r3
 80065c4:	d02c      	beq.n	8006620 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065c6:	693b      	ldr	r3, [r7, #16]
 80065c8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d128      	bne.n	8006620 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065ce:	693b      	ldr	r3, [r7, #16]
 80065d0:	3304      	adds	r3, #4
 80065d2:	4618      	mov	r0, r3
 80065d4:	f7fe fa1e 	bl	8004a14 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065e4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80065e8:	693b      	ldr	r3, [r7, #16]
 80065ea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80065ec:	693b      	ldr	r3, [r7, #16]
 80065ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065f0:	4b0f      	ldr	r3, [pc, #60]	; (8006630 <xTaskPriorityDisinherit+0xd4>)
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d903      	bls.n	8006600 <xTaskPriorityDisinherit+0xa4>
 80065f8:	693b      	ldr	r3, [r7, #16]
 80065fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065fc:	4a0c      	ldr	r2, [pc, #48]	; (8006630 <xTaskPriorityDisinherit+0xd4>)
 80065fe:	6013      	str	r3, [r2, #0]
 8006600:	693b      	ldr	r3, [r7, #16]
 8006602:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006604:	4613      	mov	r3, r2
 8006606:	009b      	lsls	r3, r3, #2
 8006608:	4413      	add	r3, r2
 800660a:	009b      	lsls	r3, r3, #2
 800660c:	4a09      	ldr	r2, [pc, #36]	; (8006634 <xTaskPriorityDisinherit+0xd8>)
 800660e:	441a      	add	r2, r3
 8006610:	693b      	ldr	r3, [r7, #16]
 8006612:	3304      	adds	r3, #4
 8006614:	4619      	mov	r1, r3
 8006616:	4610      	mov	r0, r2
 8006618:	f7fe f99f 	bl	800495a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800661c:	2301      	movs	r3, #1
 800661e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006620:	697b      	ldr	r3, [r7, #20]
	}
 8006622:	4618      	mov	r0, r3
 8006624:	3718      	adds	r7, #24
 8006626:	46bd      	mov	sp, r7
 8006628:	bd80      	pop	{r7, pc}
 800662a:	bf00      	nop
 800662c:	20000c70 	.word	0x20000c70
 8006630:	2000114c 	.word	0x2000114c
 8006634:	20000c74 	.word	0x20000c74

08006638 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006638:	b580      	push	{r7, lr}
 800663a:	b088      	sub	sp, #32
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]
 8006640:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006646:	2301      	movs	r3, #1
 8006648:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	2b00      	cmp	r3, #0
 800664e:	d06a      	beq.n	8006726 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006650:	69bb      	ldr	r3, [r7, #24]
 8006652:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006654:	2b00      	cmp	r3, #0
 8006656:	d10a      	bne.n	800666e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	60fb      	str	r3, [r7, #12]
}
 800666a:	bf00      	nop
 800666c:	e7fe      	b.n	800666c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800666e:	69bb      	ldr	r3, [r7, #24]
 8006670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006672:	683a      	ldr	r2, [r7, #0]
 8006674:	429a      	cmp	r2, r3
 8006676:	d902      	bls.n	800667e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006678:	683b      	ldr	r3, [r7, #0]
 800667a:	61fb      	str	r3, [r7, #28]
 800667c:	e002      	b.n	8006684 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006682:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006688:	69fa      	ldr	r2, [r7, #28]
 800668a:	429a      	cmp	r2, r3
 800668c:	d04b      	beq.n	8006726 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800668e:	69bb      	ldr	r3, [r7, #24]
 8006690:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006692:	697a      	ldr	r2, [r7, #20]
 8006694:	429a      	cmp	r2, r3
 8006696:	d146      	bne.n	8006726 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006698:	4b25      	ldr	r3, [pc, #148]	; (8006730 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	69ba      	ldr	r2, [r7, #24]
 800669e:	429a      	cmp	r2, r3
 80066a0:	d10a      	bne.n	80066b8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80066a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a6:	f383 8811 	msr	BASEPRI, r3
 80066aa:	f3bf 8f6f 	isb	sy
 80066ae:	f3bf 8f4f 	dsb	sy
 80066b2:	60bb      	str	r3, [r7, #8]
}
 80066b4:	bf00      	nop
 80066b6:	e7fe      	b.n	80066b6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80066b8:	69bb      	ldr	r3, [r7, #24]
 80066ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066bc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80066be:	69bb      	ldr	r3, [r7, #24]
 80066c0:	69fa      	ldr	r2, [r7, #28]
 80066c2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	699b      	ldr	r3, [r3, #24]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	db04      	blt.n	80066d6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066cc:	69fb      	ldr	r3, [r7, #28]
 80066ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80066d6:	69bb      	ldr	r3, [r7, #24]
 80066d8:	6959      	ldr	r1, [r3, #20]
 80066da:	693a      	ldr	r2, [r7, #16]
 80066dc:	4613      	mov	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	4413      	add	r3, r2
 80066e2:	009b      	lsls	r3, r3, #2
 80066e4:	4a13      	ldr	r2, [pc, #76]	; (8006734 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80066e6:	4413      	add	r3, r2
 80066e8:	4299      	cmp	r1, r3
 80066ea:	d11c      	bne.n	8006726 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	3304      	adds	r3, #4
 80066f0:	4618      	mov	r0, r3
 80066f2:	f7fe f98f 	bl	8004a14 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80066f6:	69bb      	ldr	r3, [r7, #24]
 80066f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80066fa:	4b0f      	ldr	r3, [pc, #60]	; (8006738 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	429a      	cmp	r2, r3
 8006700:	d903      	bls.n	800670a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006702:	69bb      	ldr	r3, [r7, #24]
 8006704:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006706:	4a0c      	ldr	r2, [pc, #48]	; (8006738 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006708:	6013      	str	r3, [r2, #0]
 800670a:	69bb      	ldr	r3, [r7, #24]
 800670c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800670e:	4613      	mov	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4413      	add	r3, r2
 8006714:	009b      	lsls	r3, r3, #2
 8006716:	4a07      	ldr	r2, [pc, #28]	; (8006734 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006718:	441a      	add	r2, r3
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	3304      	adds	r3, #4
 800671e:	4619      	mov	r1, r3
 8006720:	4610      	mov	r0, r2
 8006722:	f7fe f91a 	bl	800495a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006726:	bf00      	nop
 8006728:	3720      	adds	r7, #32
 800672a:	46bd      	mov	sp, r7
 800672c:	bd80      	pop	{r7, pc}
 800672e:	bf00      	nop
 8006730:	20000c70 	.word	0x20000c70
 8006734:	20000c74 	.word	0x20000c74
 8006738:	2000114c 	.word	0x2000114c

0800673c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006740:	4b07      	ldr	r3, [pc, #28]	; (8006760 <pvTaskIncrementMutexHeldCount+0x24>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d004      	beq.n	8006752 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <pvTaskIncrementMutexHeldCount+0x24>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800674e:	3201      	adds	r2, #1
 8006750:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006752:	4b03      	ldr	r3, [pc, #12]	; (8006760 <pvTaskIncrementMutexHeldCount+0x24>)
 8006754:	681b      	ldr	r3, [r3, #0]
	}
 8006756:	4618      	mov	r0, r3
 8006758:	46bd      	mov	sp, r7
 800675a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675e:	4770      	bx	lr
 8006760:	20000c70 	.word	0x20000c70

08006764 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006764:	b580      	push	{r7, lr}
 8006766:	b084      	sub	sp, #16
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
 800676c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800676e:	4b21      	ldr	r3, [pc, #132]	; (80067f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006774:	4b20      	ldr	r3, [pc, #128]	; (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	3304      	adds	r3, #4
 800677a:	4618      	mov	r0, r3
 800677c:	f7fe f94a 	bl	8004a14 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006786:	d10a      	bne.n	800679e <prvAddCurrentTaskToDelayedList+0x3a>
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d007      	beq.n	800679e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800678e:	4b1a      	ldr	r3, [pc, #104]	; (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3304      	adds	r3, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4819      	ldr	r0, [pc, #100]	; (80067fc <prvAddCurrentTaskToDelayedList+0x98>)
 8006798:	f7fe f8df 	bl	800495a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800679c:	e026      	b.n	80067ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800679e:	68fa      	ldr	r2, [r7, #12]
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4413      	add	r3, r2
 80067a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80067a6:	4b14      	ldr	r3, [pc, #80]	; (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067ae:	68ba      	ldr	r2, [r7, #8]
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	429a      	cmp	r2, r3
 80067b4:	d209      	bcs.n	80067ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067b6:	4b12      	ldr	r3, [pc, #72]	; (8006800 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	4b0f      	ldr	r3, [pc, #60]	; (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	3304      	adds	r3, #4
 80067c0:	4619      	mov	r1, r3
 80067c2:	4610      	mov	r0, r2
 80067c4:	f7fe f8ed 	bl	80049a2 <vListInsert>
}
 80067c8:	e010      	b.n	80067ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ca:	4b0e      	ldr	r3, [pc, #56]	; (8006804 <prvAddCurrentTaskToDelayedList+0xa0>)
 80067cc:	681a      	ldr	r2, [r3, #0]
 80067ce:	4b0a      	ldr	r3, [pc, #40]	; (80067f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	3304      	adds	r3, #4
 80067d4:	4619      	mov	r1, r3
 80067d6:	4610      	mov	r0, r2
 80067d8:	f7fe f8e3 	bl	80049a2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067dc:	4b0a      	ldr	r3, [pc, #40]	; (8006808 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	68ba      	ldr	r2, [r7, #8]
 80067e2:	429a      	cmp	r2, r3
 80067e4:	d202      	bcs.n	80067ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067e6:	4a08      	ldr	r2, [pc, #32]	; (8006808 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	6013      	str	r3, [r2, #0]
}
 80067ec:	bf00      	nop
 80067ee:	3710      	adds	r7, #16
 80067f0:	46bd      	mov	sp, r7
 80067f2:	bd80      	pop	{r7, pc}
 80067f4:	20001148 	.word	0x20001148
 80067f8:	20000c70 	.word	0x20000c70
 80067fc:	20001130 	.word	0x20001130
 8006800:	20001100 	.word	0x20001100
 8006804:	200010fc 	.word	0x200010fc
 8006808:	20001164 	.word	0x20001164

0800680c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800680c:	b580      	push	{r7, lr}
 800680e:	b08a      	sub	sp, #40	; 0x28
 8006810:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006812:	2300      	movs	r3, #0
 8006814:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006816:	f000 fb07 	bl	8006e28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800681a:	4b1c      	ldr	r3, [pc, #112]	; (800688c <xTimerCreateTimerTask+0x80>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d021      	beq.n	8006866 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006826:	2300      	movs	r3, #0
 8006828:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800682a:	1d3a      	adds	r2, r7, #4
 800682c:	f107 0108 	add.w	r1, r7, #8
 8006830:	f107 030c 	add.w	r3, r7, #12
 8006834:	4618      	mov	r0, r3
 8006836:	f7fe f849 	bl	80048cc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800683a:	6879      	ldr	r1, [r7, #4]
 800683c:	68bb      	ldr	r3, [r7, #8]
 800683e:	68fa      	ldr	r2, [r7, #12]
 8006840:	9202      	str	r2, [sp, #8]
 8006842:	9301      	str	r3, [sp, #4]
 8006844:	2302      	movs	r3, #2
 8006846:	9300      	str	r3, [sp, #0]
 8006848:	2300      	movs	r3, #0
 800684a:	460a      	mov	r2, r1
 800684c:	4910      	ldr	r1, [pc, #64]	; (8006890 <xTimerCreateTimerTask+0x84>)
 800684e:	4811      	ldr	r0, [pc, #68]	; (8006894 <xTimerCreateTimerTask+0x88>)
 8006850:	f7fe ffe0 	bl	8005814 <xTaskCreateStatic>
 8006854:	4603      	mov	r3, r0
 8006856:	4a10      	ldr	r2, [pc, #64]	; (8006898 <xTimerCreateTimerTask+0x8c>)
 8006858:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800685a:	4b0f      	ldr	r3, [pc, #60]	; (8006898 <xTimerCreateTimerTask+0x8c>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	2b00      	cmp	r3, #0
 8006860:	d001      	beq.n	8006866 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006862:	2301      	movs	r3, #1
 8006864:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006866:	697b      	ldr	r3, [r7, #20]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	613b      	str	r3, [r7, #16]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006882:	697b      	ldr	r3, [r7, #20]
}
 8006884:	4618      	mov	r0, r3
 8006886:	3718      	adds	r7, #24
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	200011a0 	.word	0x200011a0
 8006890:	080077c0 	.word	0x080077c0
 8006894:	080069d1 	.word	0x080069d1
 8006898:	200011a4 	.word	0x200011a4

0800689c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800689c:	b580      	push	{r7, lr}
 800689e:	b08a      	sub	sp, #40	; 0x28
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	60f8      	str	r0, [r7, #12]
 80068a4:	60b9      	str	r1, [r7, #8]
 80068a6:	607a      	str	r2, [r7, #4]
 80068a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068aa:	2300      	movs	r3, #0
 80068ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d10a      	bne.n	80068ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80068b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b8:	f383 8811 	msr	BASEPRI, r3
 80068bc:	f3bf 8f6f 	isb	sy
 80068c0:	f3bf 8f4f 	dsb	sy
 80068c4:	623b      	str	r3, [r7, #32]
}
 80068c6:	bf00      	nop
 80068c8:	e7fe      	b.n	80068c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068ca:	4b1a      	ldr	r3, [pc, #104]	; (8006934 <xTimerGenericCommand+0x98>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d02a      	beq.n	8006928 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068d2:	68bb      	ldr	r3, [r7, #8]
 80068d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068de:	68bb      	ldr	r3, [r7, #8]
 80068e0:	2b05      	cmp	r3, #5
 80068e2:	dc18      	bgt.n	8006916 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068e4:	f7ff fdb4 	bl	8006450 <xTaskGetSchedulerState>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b02      	cmp	r3, #2
 80068ec:	d109      	bne.n	8006902 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068ee:	4b11      	ldr	r3, [pc, #68]	; (8006934 <xTimerGenericCommand+0x98>)
 80068f0:	6818      	ldr	r0, [r3, #0]
 80068f2:	f107 0110 	add.w	r1, r7, #16
 80068f6:	2300      	movs	r3, #0
 80068f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068fa:	f7fe f9f3 	bl	8004ce4 <xQueueGenericSend>
 80068fe:	6278      	str	r0, [r7, #36]	; 0x24
 8006900:	e012      	b.n	8006928 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006902:	4b0c      	ldr	r3, [pc, #48]	; (8006934 <xTimerGenericCommand+0x98>)
 8006904:	6818      	ldr	r0, [r3, #0]
 8006906:	f107 0110 	add.w	r1, r7, #16
 800690a:	2300      	movs	r3, #0
 800690c:	2200      	movs	r2, #0
 800690e:	f7fe f9e9 	bl	8004ce4 <xQueueGenericSend>
 8006912:	6278      	str	r0, [r7, #36]	; 0x24
 8006914:	e008      	b.n	8006928 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006916:	4b07      	ldr	r3, [pc, #28]	; (8006934 <xTimerGenericCommand+0x98>)
 8006918:	6818      	ldr	r0, [r3, #0]
 800691a:	f107 0110 	add.w	r1, r7, #16
 800691e:	2300      	movs	r3, #0
 8006920:	683a      	ldr	r2, [r7, #0]
 8006922:	f7fe fadd 	bl	8004ee0 <xQueueGenericSendFromISR>
 8006926:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800692a:	4618      	mov	r0, r3
 800692c:	3728      	adds	r7, #40	; 0x28
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	200011a0 	.word	0x200011a0

08006938 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b088      	sub	sp, #32
 800693c:	af02      	add	r7, sp, #8
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006942:	4b22      	ldr	r3, [pc, #136]	; (80069cc <prvProcessExpiredTimer+0x94>)
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	68db      	ldr	r3, [r3, #12]
 800694a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800694c:	697b      	ldr	r3, [r7, #20]
 800694e:	3304      	adds	r3, #4
 8006950:	4618      	mov	r0, r3
 8006952:	f7fe f85f 	bl	8004a14 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006956:	697b      	ldr	r3, [r7, #20]
 8006958:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800695c:	f003 0304 	and.w	r3, r3, #4
 8006960:	2b00      	cmp	r3, #0
 8006962:	d022      	beq.n	80069aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006964:	697b      	ldr	r3, [r7, #20]
 8006966:	699a      	ldr	r2, [r3, #24]
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	18d1      	adds	r1, r2, r3
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	683a      	ldr	r2, [r7, #0]
 8006970:	6978      	ldr	r0, [r7, #20]
 8006972:	f000 f8d1 	bl	8006b18 <prvInsertTimerInActiveList>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d01f      	beq.n	80069bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800697c:	2300      	movs	r3, #0
 800697e:	9300      	str	r3, [sp, #0]
 8006980:	2300      	movs	r3, #0
 8006982:	687a      	ldr	r2, [r7, #4]
 8006984:	2100      	movs	r1, #0
 8006986:	6978      	ldr	r0, [r7, #20]
 8006988:	f7ff ff88 	bl	800689c <xTimerGenericCommand>
 800698c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800698e:	693b      	ldr	r3, [r7, #16]
 8006990:	2b00      	cmp	r3, #0
 8006992:	d113      	bne.n	80069bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	60fb      	str	r3, [r7, #12]
}
 80069a6:	bf00      	nop
 80069a8:	e7fe      	b.n	80069a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069aa:	697b      	ldr	r3, [r7, #20]
 80069ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80069b0:	f023 0301 	bic.w	r3, r3, #1
 80069b4:	b2da      	uxtb	r2, r3
 80069b6:	697b      	ldr	r3, [r7, #20]
 80069b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069bc:	697b      	ldr	r3, [r7, #20]
 80069be:	6a1b      	ldr	r3, [r3, #32]
 80069c0:	6978      	ldr	r0, [r7, #20]
 80069c2:	4798      	blx	r3
}
 80069c4:	bf00      	nop
 80069c6:	3718      	adds	r7, #24
 80069c8:	46bd      	mov	sp, r7
 80069ca:	bd80      	pop	{r7, pc}
 80069cc:	20001198 	.word	0x20001198

080069d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069d8:	f107 0308 	add.w	r3, r7, #8
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 f857 	bl	8006a90 <prvGetNextExpireTime>
 80069e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4619      	mov	r1, r3
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f803 	bl	80069f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069ee:	f000 f8d5 	bl	8006b9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069f2:	e7f1      	b.n	80069d8 <prvTimerTask+0x8>

080069f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069f4:	b580      	push	{r7, lr}
 80069f6:	b084      	sub	sp, #16
 80069f8:	af00      	add	r7, sp, #0
 80069fa:	6078      	str	r0, [r7, #4]
 80069fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069fe:	f7ff f945 	bl	8005c8c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a02:	f107 0308 	add.w	r3, r7, #8
 8006a06:	4618      	mov	r0, r3
 8006a08:	f000 f866 	bl	8006ad8 <prvSampleTimeNow>
 8006a0c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a0e:	68bb      	ldr	r3, [r7, #8]
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d130      	bne.n	8006a76 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a14:	683b      	ldr	r3, [r7, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d10a      	bne.n	8006a30 <prvProcessTimerOrBlockTask+0x3c>
 8006a1a:	687a      	ldr	r2, [r7, #4]
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	429a      	cmp	r2, r3
 8006a20:	d806      	bhi.n	8006a30 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a22:	f7ff f941 	bl	8005ca8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a26:	68f9      	ldr	r1, [r7, #12]
 8006a28:	6878      	ldr	r0, [r7, #4]
 8006a2a:	f7ff ff85 	bl	8006938 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a2e:	e024      	b.n	8006a7a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d008      	beq.n	8006a48 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a36:	4b13      	ldr	r3, [pc, #76]	; (8006a84 <prvProcessTimerOrBlockTask+0x90>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d101      	bne.n	8006a44 <prvProcessTimerOrBlockTask+0x50>
 8006a40:	2301      	movs	r3, #1
 8006a42:	e000      	b.n	8006a46 <prvProcessTimerOrBlockTask+0x52>
 8006a44:	2300      	movs	r3, #0
 8006a46:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a48:	4b0f      	ldr	r3, [pc, #60]	; (8006a88 <prvProcessTimerOrBlockTask+0x94>)
 8006a4a:	6818      	ldr	r0, [r3, #0]
 8006a4c:	687a      	ldr	r2, [r7, #4]
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	683a      	ldr	r2, [r7, #0]
 8006a54:	4619      	mov	r1, r3
 8006a56:	f7fe fea9 	bl	80057ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a5a:	f7ff f925 	bl	8005ca8 <xTaskResumeAll>
 8006a5e:	4603      	mov	r3, r0
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d10a      	bne.n	8006a7a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a64:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <prvProcessTimerOrBlockTask+0x98>)
 8006a66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a6a:	601a      	str	r2, [r3, #0]
 8006a6c:	f3bf 8f4f 	dsb	sy
 8006a70:	f3bf 8f6f 	isb	sy
}
 8006a74:	e001      	b.n	8006a7a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a76:	f7ff f917 	bl	8005ca8 <xTaskResumeAll>
}
 8006a7a:	bf00      	nop
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop
 8006a84:	2000119c 	.word	0x2000119c
 8006a88:	200011a0 	.word	0x200011a0
 8006a8c:	e000ed04 	.word	0xe000ed04

08006a90 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a90:	b480      	push	{r7}
 8006a92:	b085      	sub	sp, #20
 8006a94:	af00      	add	r7, sp, #0
 8006a96:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a98:	4b0e      	ldr	r3, [pc, #56]	; (8006ad4 <prvGetNextExpireTime+0x44>)
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	d101      	bne.n	8006aa6 <prvGetNextExpireTime+0x16>
 8006aa2:	2201      	movs	r2, #1
 8006aa4:	e000      	b.n	8006aa8 <prvGetNextExpireTime+0x18>
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d105      	bne.n	8006ac0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ab4:	4b07      	ldr	r3, [pc, #28]	; (8006ad4 <prvGetNextExpireTime+0x44>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68db      	ldr	r3, [r3, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	60fb      	str	r3, [r7, #12]
 8006abe:	e001      	b.n	8006ac4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ac4:	68fb      	ldr	r3, [r7, #12]
}
 8006ac6:	4618      	mov	r0, r3
 8006ac8:	3714      	adds	r7, #20
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	20001198 	.word	0x20001198

08006ad8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ae0:	f7ff f980 	bl	8005de4 <xTaskGetTickCount>
 8006ae4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ae6:	4b0b      	ldr	r3, [pc, #44]	; (8006b14 <prvSampleTimeNow+0x3c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d205      	bcs.n	8006afc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006af0:	f000 f936 	bl	8006d60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	e002      	b.n	8006b02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b02:	4a04      	ldr	r2, [pc, #16]	; (8006b14 <prvSampleTimeNow+0x3c>)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b08:	68fb      	ldr	r3, [r7, #12]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	200011a8 	.word	0x200011a8

08006b18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d812      	bhi.n	8006b64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	1ad2      	subs	r2, r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d302      	bcc.n	8006b52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	e01b      	b.n	8006b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b52:	4b10      	ldr	r3, [pc, #64]	; (8006b94 <prvInsertTimerInActiveList+0x7c>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f7fd ff20 	bl	80049a2 <vListInsert>
 8006b62:	e012      	b.n	8006b8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d206      	bcs.n	8006b7a <prvInsertTimerInActiveList+0x62>
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d302      	bcc.n	8006b7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	e007      	b.n	8006b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b7a:	4b07      	ldr	r3, [pc, #28]	; (8006b98 <prvInsertTimerInActiveList+0x80>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f7fd ff0c 	bl	80049a2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b8a:	697b      	ldr	r3, [r7, #20]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	2000119c 	.word	0x2000119c
 8006b98:	20001198 	.word	0x20001198

08006b9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08e      	sub	sp, #56	; 0x38
 8006ba0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ba2:	e0ca      	b.n	8006d3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	da18      	bge.n	8006bdc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006baa:	1d3b      	adds	r3, r7, #4
 8006bac:	3304      	adds	r3, #4
 8006bae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10a      	bne.n	8006bcc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	61fb      	str	r3, [r7, #28]
}
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bd2:	6850      	ldr	r0, [r2, #4]
 8006bd4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006bd6:	6892      	ldr	r2, [r2, #8]
 8006bd8:	4611      	mov	r1, r2
 8006bda:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	f2c0 80ab 	blt.w	8006d3a <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bea:	695b      	ldr	r3, [r3, #20]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d004      	beq.n	8006bfa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bf2:	3304      	adds	r3, #4
 8006bf4:	4618      	mov	r0, r3
 8006bf6:	f7fd ff0d 	bl	8004a14 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bfa:	463b      	mov	r3, r7
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f7ff ff6b 	bl	8006ad8 <prvSampleTimeNow>
 8006c02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2b09      	cmp	r3, #9
 8006c08:	f200 8096 	bhi.w	8006d38 <prvProcessReceivedCommands+0x19c>
 8006c0c:	a201      	add	r2, pc, #4	; (adr r2, 8006c14 <prvProcessReceivedCommands+0x78>)
 8006c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c12:	bf00      	nop
 8006c14:	08006c3d 	.word	0x08006c3d
 8006c18:	08006c3d 	.word	0x08006c3d
 8006c1c:	08006c3d 	.word	0x08006c3d
 8006c20:	08006cb1 	.word	0x08006cb1
 8006c24:	08006cc5 	.word	0x08006cc5
 8006c28:	08006d0f 	.word	0x08006d0f
 8006c2c:	08006c3d 	.word	0x08006c3d
 8006c30:	08006c3d 	.word	0x08006c3d
 8006c34:	08006cb1 	.word	0x08006cb1
 8006c38:	08006cc5 	.word	0x08006cc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c42:	f043 0301 	orr.w	r3, r3, #1
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	18d1      	adds	r1, r2, r3
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c5c:	f7ff ff5c 	bl	8006b18 <prvInsertTimerInActiveList>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d069      	beq.n	8006d3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d05e      	beq.n	8006d3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	441a      	add	r2, r3
 8006c84:	2300      	movs	r3, #0
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c8e:	f7ff fe05 	bl	800689c <xTimerGenericCommand>
 8006c92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d14f      	bne.n	8006d3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	61bb      	str	r3, [r7, #24]
}
 8006cac:	bf00      	nop
 8006cae:	e7fe      	b.n	8006cae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cb6:	f023 0301 	bic.w	r3, r3, #1
 8006cba:	b2da      	uxtb	r2, r3
 8006cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006cc2:	e03a      	b.n	8006d3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006cca:	f043 0301 	orr.w	r3, r3, #1
 8006cce:	b2da      	uxtb	r2, r3
 8006cd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cd6:	68ba      	ldr	r2, [r7, #8]
 8006cd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cde:	699b      	ldr	r3, [r3, #24]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10a      	bne.n	8006cfa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	617b      	str	r3, [r7, #20]
}
 8006cf6:	bf00      	nop
 8006cf8:	e7fe      	b.n	8006cf8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cfc:	699a      	ldr	r2, [r3, #24]
 8006cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d00:	18d1      	adds	r1, r2, r3
 8006d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d08:	f7ff ff06 	bl	8006b18 <prvInsertTimerInActiveList>
					break;
 8006d0c:	e015      	b.n	8006d3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d14:	f003 0302 	and.w	r3, r3, #2
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d103      	bne.n	8006d24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006d1e:	f000 fbdf 	bl	80074e0 <vPortFree>
 8006d22:	e00a      	b.n	8006d3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d2a:	f023 0301 	bic.w	r3, r3, #1
 8006d2e:	b2da      	uxtb	r2, r3
 8006d30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d36:	e000      	b.n	8006d3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006d38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d3a:	4b08      	ldr	r3, [pc, #32]	; (8006d5c <prvProcessReceivedCommands+0x1c0>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	1d39      	adds	r1, r7, #4
 8006d40:	2200      	movs	r2, #0
 8006d42:	4618      	mov	r0, r3
 8006d44:	f7fe f9f4 	bl	8005130 <xQueueReceive>
 8006d48:	4603      	mov	r3, r0
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	f47f af2a 	bne.w	8006ba4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d50:	bf00      	nop
 8006d52:	bf00      	nop
 8006d54:	3730      	adds	r7, #48	; 0x30
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	200011a0 	.word	0x200011a0

08006d60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d66:	e048      	b.n	8006dfa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d68:	4b2d      	ldr	r3, [pc, #180]	; (8006e20 <prvSwitchTimerLists+0xc0>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d72:	4b2b      	ldr	r3, [pc, #172]	; (8006e20 <prvSwitchTimerLists+0xc0>)
 8006d74:	681b      	ldr	r3, [r3, #0]
 8006d76:	68db      	ldr	r3, [r3, #12]
 8006d78:	68db      	ldr	r3, [r3, #12]
 8006d7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	3304      	adds	r3, #4
 8006d80:	4618      	mov	r0, r3
 8006d82:	f7fd fe47 	bl	8004a14 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	6a1b      	ldr	r3, [r3, #32]
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006d94:	f003 0304 	and.w	r3, r3, #4
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d02e      	beq.n	8006dfa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d9c:	68fb      	ldr	r3, [r7, #12]
 8006d9e:	699b      	ldr	r3, [r3, #24]
 8006da0:	693a      	ldr	r2, [r7, #16]
 8006da2:	4413      	add	r3, r2
 8006da4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006da6:	68ba      	ldr	r2, [r7, #8]
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d90e      	bls.n	8006dcc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	68ba      	ldr	r2, [r7, #8]
 8006db2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	68fa      	ldr	r2, [r7, #12]
 8006db8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dba:	4b19      	ldr	r3, [pc, #100]	; (8006e20 <prvSwitchTimerLists+0xc0>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	f7fd fdec 	bl	80049a2 <vListInsert>
 8006dca:	e016      	b.n	8006dfa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dcc:	2300      	movs	r3, #0
 8006dce:	9300      	str	r3, [sp, #0]
 8006dd0:	2300      	movs	r3, #0
 8006dd2:	693a      	ldr	r2, [r7, #16]
 8006dd4:	2100      	movs	r1, #0
 8006dd6:	68f8      	ldr	r0, [r7, #12]
 8006dd8:	f7ff fd60 	bl	800689c <xTimerGenericCommand>
 8006ddc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10a      	bne.n	8006dfa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006de8:	f383 8811 	msr	BASEPRI, r3
 8006dec:	f3bf 8f6f 	isb	sy
 8006df0:	f3bf 8f4f 	dsb	sy
 8006df4:	603b      	str	r3, [r7, #0]
}
 8006df6:	bf00      	nop
 8006df8:	e7fe      	b.n	8006df8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dfa:	4b09      	ldr	r3, [pc, #36]	; (8006e20 <prvSwitchTimerLists+0xc0>)
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1b1      	bne.n	8006d68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e04:	4b06      	ldr	r3, [pc, #24]	; (8006e20 <prvSwitchTimerLists+0xc0>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e0a:	4b06      	ldr	r3, [pc, #24]	; (8006e24 <prvSwitchTimerLists+0xc4>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	4a04      	ldr	r2, [pc, #16]	; (8006e20 <prvSwitchTimerLists+0xc0>)
 8006e10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e12:	4a04      	ldr	r2, [pc, #16]	; (8006e24 <prvSwitchTimerLists+0xc4>)
 8006e14:	697b      	ldr	r3, [r7, #20]
 8006e16:	6013      	str	r3, [r2, #0]
}
 8006e18:	bf00      	nop
 8006e1a:	3718      	adds	r7, #24
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}
 8006e20:	20001198 	.word	0x20001198
 8006e24:	2000119c 	.word	0x2000119c

08006e28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b082      	sub	sp, #8
 8006e2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e2e:	f000 f969 	bl	8007104 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e32:	4b15      	ldr	r3, [pc, #84]	; (8006e88 <prvCheckForValidListAndQueue+0x60>)
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d120      	bne.n	8006e7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e3a:	4814      	ldr	r0, [pc, #80]	; (8006e8c <prvCheckForValidListAndQueue+0x64>)
 8006e3c:	f7fd fd60 	bl	8004900 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e40:	4813      	ldr	r0, [pc, #76]	; (8006e90 <prvCheckForValidListAndQueue+0x68>)
 8006e42:	f7fd fd5d 	bl	8004900 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e46:	4b13      	ldr	r3, [pc, #76]	; (8006e94 <prvCheckForValidListAndQueue+0x6c>)
 8006e48:	4a10      	ldr	r2, [pc, #64]	; (8006e8c <prvCheckForValidListAndQueue+0x64>)
 8006e4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e4c:	4b12      	ldr	r3, [pc, #72]	; (8006e98 <prvCheckForValidListAndQueue+0x70>)
 8006e4e:	4a10      	ldr	r2, [pc, #64]	; (8006e90 <prvCheckForValidListAndQueue+0x68>)
 8006e50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e52:	2300      	movs	r3, #0
 8006e54:	9300      	str	r3, [sp, #0]
 8006e56:	4b11      	ldr	r3, [pc, #68]	; (8006e9c <prvCheckForValidListAndQueue+0x74>)
 8006e58:	4a11      	ldr	r2, [pc, #68]	; (8006ea0 <prvCheckForValidListAndQueue+0x78>)
 8006e5a:	2110      	movs	r1, #16
 8006e5c:	200a      	movs	r0, #10
 8006e5e:	f7fd fe6b 	bl	8004b38 <xQueueGenericCreateStatic>
 8006e62:	4603      	mov	r3, r0
 8006e64:	4a08      	ldr	r2, [pc, #32]	; (8006e88 <prvCheckForValidListAndQueue+0x60>)
 8006e66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e68:	4b07      	ldr	r3, [pc, #28]	; (8006e88 <prvCheckForValidListAndQueue+0x60>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d005      	beq.n	8006e7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e70:	4b05      	ldr	r3, [pc, #20]	; (8006e88 <prvCheckForValidListAndQueue+0x60>)
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	490b      	ldr	r1, [pc, #44]	; (8006ea4 <prvCheckForValidListAndQueue+0x7c>)
 8006e76:	4618      	mov	r0, r3
 8006e78:	f7fe fc6e 	bl	8005758 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e7c:	f000 f972 	bl	8007164 <vPortExitCritical>
}
 8006e80:	bf00      	nop
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bd80      	pop	{r7, pc}
 8006e86:	bf00      	nop
 8006e88:	200011a0 	.word	0x200011a0
 8006e8c:	20001170 	.word	0x20001170
 8006e90:	20001184 	.word	0x20001184
 8006e94:	20001198 	.word	0x20001198
 8006e98:	2000119c 	.word	0x2000119c
 8006e9c:	2000124c 	.word	0x2000124c
 8006ea0:	200011ac 	.word	0x200011ac
 8006ea4:	080077c8 	.word	0x080077c8

08006ea8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006ea8:	b480      	push	{r7}
 8006eaa:	b085      	sub	sp, #20
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	60f8      	str	r0, [r7, #12]
 8006eb0:	60b9      	str	r1, [r7, #8]
 8006eb2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	3b04      	subs	r3, #4
 8006eb8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006ec0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3b04      	subs	r3, #4
 8006ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ec8:	68bb      	ldr	r3, [r7, #8]
 8006eca:	f023 0201 	bic.w	r2, r3, #1
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	3b04      	subs	r3, #4
 8006ed6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ed8:	4a0c      	ldr	r2, [pc, #48]	; (8006f0c <pxPortInitialiseStack+0x64>)
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3b14      	subs	r3, #20
 8006ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ee4:	687a      	ldr	r2, [r7, #4]
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3b04      	subs	r3, #4
 8006eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f06f 0202 	mvn.w	r2, #2
 8006ef6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	3b20      	subs	r3, #32
 8006efc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006efe:	68fb      	ldr	r3, [r7, #12]
}
 8006f00:	4618      	mov	r0, r3
 8006f02:	3714      	adds	r7, #20
 8006f04:	46bd      	mov	sp, r7
 8006f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f0a:	4770      	bx	lr
 8006f0c:	08006f11 	.word	0x08006f11

08006f10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f10:	b480      	push	{r7}
 8006f12:	b085      	sub	sp, #20
 8006f14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006f16:	2300      	movs	r3, #0
 8006f18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f1a:	4b12      	ldr	r3, [pc, #72]	; (8006f64 <prvTaskExitError+0x54>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f22:	d00a      	beq.n	8006f3a <prvTaskExitError+0x2a>
	__asm volatile
 8006f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f28:	f383 8811 	msr	BASEPRI, r3
 8006f2c:	f3bf 8f6f 	isb	sy
 8006f30:	f3bf 8f4f 	dsb	sy
 8006f34:	60fb      	str	r3, [r7, #12]
}
 8006f36:	bf00      	nop
 8006f38:	e7fe      	b.n	8006f38 <prvTaskExitError+0x28>
	__asm volatile
 8006f3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f3e:	f383 8811 	msr	BASEPRI, r3
 8006f42:	f3bf 8f6f 	isb	sy
 8006f46:	f3bf 8f4f 	dsb	sy
 8006f4a:	60bb      	str	r3, [r7, #8]
}
 8006f4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f4e:	bf00      	nop
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	d0fc      	beq.n	8006f50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f56:	bf00      	nop
 8006f58:	bf00      	nop
 8006f5a:	3714      	adds	r7, #20
 8006f5c:	46bd      	mov	sp, r7
 8006f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f62:	4770      	bx	lr
 8006f64:	2000000c 	.word	0x2000000c
	...

08006f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f70:	4b07      	ldr	r3, [pc, #28]	; (8006f90 <pxCurrentTCBConst2>)
 8006f72:	6819      	ldr	r1, [r3, #0]
 8006f74:	6808      	ldr	r0, [r1, #0]
 8006f76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f7a:	f380 8809 	msr	PSP, r0
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f04f 0000 	mov.w	r0, #0
 8006f86:	f380 8811 	msr	BASEPRI, r0
 8006f8a:	4770      	bx	lr
 8006f8c:	f3af 8000 	nop.w

08006f90 <pxCurrentTCBConst2>:
 8006f90:	20000c70 	.word	0x20000c70
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop

08006f98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f98:	4808      	ldr	r0, [pc, #32]	; (8006fbc <prvPortStartFirstTask+0x24>)
 8006f9a:	6800      	ldr	r0, [r0, #0]
 8006f9c:	6800      	ldr	r0, [r0, #0]
 8006f9e:	f380 8808 	msr	MSP, r0
 8006fa2:	f04f 0000 	mov.w	r0, #0
 8006fa6:	f380 8814 	msr	CONTROL, r0
 8006faa:	b662      	cpsie	i
 8006fac:	b661      	cpsie	f
 8006fae:	f3bf 8f4f 	dsb	sy
 8006fb2:	f3bf 8f6f 	isb	sy
 8006fb6:	df00      	svc	0
 8006fb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fba:	bf00      	nop
 8006fbc:	e000ed08 	.word	0xe000ed08

08006fc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fc0:	b580      	push	{r7, lr}
 8006fc2:	b086      	sub	sp, #24
 8006fc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fc6:	4b46      	ldr	r3, [pc, #280]	; (80070e0 <xPortStartScheduler+0x120>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	4a46      	ldr	r2, [pc, #280]	; (80070e4 <xPortStartScheduler+0x124>)
 8006fcc:	4293      	cmp	r3, r2
 8006fce:	d10a      	bne.n	8006fe6 <xPortStartScheduler+0x26>
	__asm volatile
 8006fd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fd4:	f383 8811 	msr	BASEPRI, r3
 8006fd8:	f3bf 8f6f 	isb	sy
 8006fdc:	f3bf 8f4f 	dsb	sy
 8006fe0:	613b      	str	r3, [r7, #16]
}
 8006fe2:	bf00      	nop
 8006fe4:	e7fe      	b.n	8006fe4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fe6:	4b3e      	ldr	r3, [pc, #248]	; (80070e0 <xPortStartScheduler+0x120>)
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	4a3f      	ldr	r2, [pc, #252]	; (80070e8 <xPortStartScheduler+0x128>)
 8006fec:	4293      	cmp	r3, r2
 8006fee:	d10a      	bne.n	8007006 <xPortStartScheduler+0x46>
	__asm volatile
 8006ff0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ff4:	f383 8811 	msr	BASEPRI, r3
 8006ff8:	f3bf 8f6f 	isb	sy
 8006ffc:	f3bf 8f4f 	dsb	sy
 8007000:	60fb      	str	r3, [r7, #12]
}
 8007002:	bf00      	nop
 8007004:	e7fe      	b.n	8007004 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007006:	4b39      	ldr	r3, [pc, #228]	; (80070ec <xPortStartScheduler+0x12c>)
 8007008:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800700a:	697b      	ldr	r3, [r7, #20]
 800700c:	781b      	ldrb	r3, [r3, #0]
 800700e:	b2db      	uxtb	r3, r3
 8007010:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	22ff      	movs	r2, #255	; 0xff
 8007016:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	b2db      	uxtb	r3, r3
 800701e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007020:	78fb      	ldrb	r3, [r7, #3]
 8007022:	b2db      	uxtb	r3, r3
 8007024:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007028:	b2da      	uxtb	r2, r3
 800702a:	4b31      	ldr	r3, [pc, #196]	; (80070f0 <xPortStartScheduler+0x130>)
 800702c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800702e:	4b31      	ldr	r3, [pc, #196]	; (80070f4 <xPortStartScheduler+0x134>)
 8007030:	2207      	movs	r2, #7
 8007032:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007034:	e009      	b.n	800704a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007036:	4b2f      	ldr	r3, [pc, #188]	; (80070f4 <xPortStartScheduler+0x134>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	3b01      	subs	r3, #1
 800703c:	4a2d      	ldr	r2, [pc, #180]	; (80070f4 <xPortStartScheduler+0x134>)
 800703e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007040:	78fb      	ldrb	r3, [r7, #3]
 8007042:	b2db      	uxtb	r3, r3
 8007044:	005b      	lsls	r3, r3, #1
 8007046:	b2db      	uxtb	r3, r3
 8007048:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800704a:	78fb      	ldrb	r3, [r7, #3]
 800704c:	b2db      	uxtb	r3, r3
 800704e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007052:	2b80      	cmp	r3, #128	; 0x80
 8007054:	d0ef      	beq.n	8007036 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007056:	4b27      	ldr	r3, [pc, #156]	; (80070f4 <xPortStartScheduler+0x134>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	f1c3 0307 	rsb	r3, r3, #7
 800705e:	2b04      	cmp	r3, #4
 8007060:	d00a      	beq.n	8007078 <xPortStartScheduler+0xb8>
	__asm volatile
 8007062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007066:	f383 8811 	msr	BASEPRI, r3
 800706a:	f3bf 8f6f 	isb	sy
 800706e:	f3bf 8f4f 	dsb	sy
 8007072:	60bb      	str	r3, [r7, #8]
}
 8007074:	bf00      	nop
 8007076:	e7fe      	b.n	8007076 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007078:	4b1e      	ldr	r3, [pc, #120]	; (80070f4 <xPortStartScheduler+0x134>)
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	021b      	lsls	r3, r3, #8
 800707e:	4a1d      	ldr	r2, [pc, #116]	; (80070f4 <xPortStartScheduler+0x134>)
 8007080:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007082:	4b1c      	ldr	r3, [pc, #112]	; (80070f4 <xPortStartScheduler+0x134>)
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800708a:	4a1a      	ldr	r2, [pc, #104]	; (80070f4 <xPortStartScheduler+0x134>)
 800708c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	b2da      	uxtb	r2, r3
 8007092:	697b      	ldr	r3, [r7, #20]
 8007094:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007096:	4b18      	ldr	r3, [pc, #96]	; (80070f8 <xPortStartScheduler+0x138>)
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a17      	ldr	r2, [pc, #92]	; (80070f8 <xPortStartScheduler+0x138>)
 800709c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80070a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80070a2:	4b15      	ldr	r3, [pc, #84]	; (80070f8 <xPortStartScheduler+0x138>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a14      	ldr	r2, [pc, #80]	; (80070f8 <xPortStartScheduler+0x138>)
 80070a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80070ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80070ae:	f000 f8dd 	bl	800726c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80070b2:	4b12      	ldr	r3, [pc, #72]	; (80070fc <xPortStartScheduler+0x13c>)
 80070b4:	2200      	movs	r2, #0
 80070b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80070b8:	f000 f8fc 	bl	80072b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070bc:	4b10      	ldr	r3, [pc, #64]	; (8007100 <xPortStartScheduler+0x140>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	4a0f      	ldr	r2, [pc, #60]	; (8007100 <xPortStartScheduler+0x140>)
 80070c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80070c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070c8:	f7ff ff66 	bl	8006f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070cc:	f7fe ff54 	bl	8005f78 <vTaskSwitchContext>
	prvTaskExitError();
 80070d0:	f7ff ff1e 	bl	8006f10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3718      	adds	r7, #24
 80070da:	46bd      	mov	sp, r7
 80070dc:	bd80      	pop	{r7, pc}
 80070de:	bf00      	nop
 80070e0:	e000ed00 	.word	0xe000ed00
 80070e4:	410fc271 	.word	0x410fc271
 80070e8:	410fc270 	.word	0x410fc270
 80070ec:	e000e400 	.word	0xe000e400
 80070f0:	2000129c 	.word	0x2000129c
 80070f4:	200012a0 	.word	0x200012a0
 80070f8:	e000ed20 	.word	0xe000ed20
 80070fc:	2000000c 	.word	0x2000000c
 8007100:	e000ef34 	.word	0xe000ef34

08007104 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007104:	b480      	push	{r7}
 8007106:	b083      	sub	sp, #12
 8007108:	af00      	add	r7, sp, #0
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	607b      	str	r3, [r7, #4]
}
 800711c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800711e:	4b0f      	ldr	r3, [pc, #60]	; (800715c <vPortEnterCritical+0x58>)
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	3301      	adds	r3, #1
 8007124:	4a0d      	ldr	r2, [pc, #52]	; (800715c <vPortEnterCritical+0x58>)
 8007126:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007128:	4b0c      	ldr	r3, [pc, #48]	; (800715c <vPortEnterCritical+0x58>)
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	2b01      	cmp	r3, #1
 800712e:	d10f      	bne.n	8007150 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007130:	4b0b      	ldr	r3, [pc, #44]	; (8007160 <vPortEnterCritical+0x5c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	b2db      	uxtb	r3, r3
 8007136:	2b00      	cmp	r3, #0
 8007138:	d00a      	beq.n	8007150 <vPortEnterCritical+0x4c>
	__asm volatile
 800713a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800713e:	f383 8811 	msr	BASEPRI, r3
 8007142:	f3bf 8f6f 	isb	sy
 8007146:	f3bf 8f4f 	dsb	sy
 800714a:	603b      	str	r3, [r7, #0]
}
 800714c:	bf00      	nop
 800714e:	e7fe      	b.n	800714e <vPortEnterCritical+0x4a>
	}
}
 8007150:	bf00      	nop
 8007152:	370c      	adds	r7, #12
 8007154:	46bd      	mov	sp, r7
 8007156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715a:	4770      	bx	lr
 800715c:	2000000c 	.word	0x2000000c
 8007160:	e000ed04 	.word	0xe000ed04

08007164 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007164:	b480      	push	{r7}
 8007166:	b083      	sub	sp, #12
 8007168:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800716a:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <vPortExitCritical+0x50>)
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d10a      	bne.n	8007188 <vPortExitCritical+0x24>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	607b      	str	r3, [r7, #4]
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007188:	4b0a      	ldr	r3, [pc, #40]	; (80071b4 <vPortExitCritical+0x50>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	3b01      	subs	r3, #1
 800718e:	4a09      	ldr	r2, [pc, #36]	; (80071b4 <vPortExitCritical+0x50>)
 8007190:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007192:	4b08      	ldr	r3, [pc, #32]	; (80071b4 <vPortExitCritical+0x50>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d105      	bne.n	80071a6 <vPortExitCritical+0x42>
 800719a:	2300      	movs	r3, #0
 800719c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800719e:	683b      	ldr	r3, [r7, #0]
 80071a0:	f383 8811 	msr	BASEPRI, r3
}
 80071a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80071a6:	bf00      	nop
 80071a8:	370c      	adds	r7, #12
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	2000000c 	.word	0x2000000c
	...

080071c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071c0:	f3ef 8009 	mrs	r0, PSP
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	4b15      	ldr	r3, [pc, #84]	; (8007220 <pxCurrentTCBConst>)
 80071ca:	681a      	ldr	r2, [r3, #0]
 80071cc:	f01e 0f10 	tst.w	lr, #16
 80071d0:	bf08      	it	eq
 80071d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071da:	6010      	str	r0, [r2, #0]
 80071dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80071e4:	f380 8811 	msr	BASEPRI, r0
 80071e8:	f3bf 8f4f 	dsb	sy
 80071ec:	f3bf 8f6f 	isb	sy
 80071f0:	f7fe fec2 	bl	8005f78 <vTaskSwitchContext>
 80071f4:	f04f 0000 	mov.w	r0, #0
 80071f8:	f380 8811 	msr	BASEPRI, r0
 80071fc:	bc09      	pop	{r0, r3}
 80071fe:	6819      	ldr	r1, [r3, #0]
 8007200:	6808      	ldr	r0, [r1, #0]
 8007202:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007206:	f01e 0f10 	tst.w	lr, #16
 800720a:	bf08      	it	eq
 800720c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007210:	f380 8809 	msr	PSP, r0
 8007214:	f3bf 8f6f 	isb	sy
 8007218:	4770      	bx	lr
 800721a:	bf00      	nop
 800721c:	f3af 8000 	nop.w

08007220 <pxCurrentTCBConst>:
 8007220:	20000c70 	.word	0x20000c70
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007224:	bf00      	nop
 8007226:	bf00      	nop

08007228 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
	__asm volatile
 800722e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007232:	f383 8811 	msr	BASEPRI, r3
 8007236:	f3bf 8f6f 	isb	sy
 800723a:	f3bf 8f4f 	dsb	sy
 800723e:	607b      	str	r3, [r7, #4]
}
 8007240:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007242:	f7fe fddf 	bl	8005e04 <xTaskIncrementTick>
 8007246:	4603      	mov	r3, r0
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800724c:	4b06      	ldr	r3, [pc, #24]	; (8007268 <xPortSysTickHandler+0x40>)
 800724e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007252:	601a      	str	r2, [r3, #0]
 8007254:	2300      	movs	r3, #0
 8007256:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	f383 8811 	msr	BASEPRI, r3
}
 800725e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007260:	bf00      	nop
 8007262:	3708      	adds	r7, #8
 8007264:	46bd      	mov	sp, r7
 8007266:	bd80      	pop	{r7, pc}
 8007268:	e000ed04 	.word	0xe000ed04

0800726c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800726c:	b480      	push	{r7}
 800726e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007270:	4b0b      	ldr	r3, [pc, #44]	; (80072a0 <vPortSetupTimerInterrupt+0x34>)
 8007272:	2200      	movs	r2, #0
 8007274:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007276:	4b0b      	ldr	r3, [pc, #44]	; (80072a4 <vPortSetupTimerInterrupt+0x38>)
 8007278:	2200      	movs	r2, #0
 800727a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800727c:	4b0a      	ldr	r3, [pc, #40]	; (80072a8 <vPortSetupTimerInterrupt+0x3c>)
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a0a      	ldr	r2, [pc, #40]	; (80072ac <vPortSetupTimerInterrupt+0x40>)
 8007282:	fba2 2303 	umull	r2, r3, r2, r3
 8007286:	099b      	lsrs	r3, r3, #6
 8007288:	4a09      	ldr	r2, [pc, #36]	; (80072b0 <vPortSetupTimerInterrupt+0x44>)
 800728a:	3b01      	subs	r3, #1
 800728c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800728e:	4b04      	ldr	r3, [pc, #16]	; (80072a0 <vPortSetupTimerInterrupt+0x34>)
 8007290:	2207      	movs	r2, #7
 8007292:	601a      	str	r2, [r3, #0]
}
 8007294:	bf00      	nop
 8007296:	46bd      	mov	sp, r7
 8007298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800729c:	4770      	bx	lr
 800729e:	bf00      	nop
 80072a0:	e000e010 	.word	0xe000e010
 80072a4:	e000e018 	.word	0xe000e018
 80072a8:	20000000 	.word	0x20000000
 80072ac:	10624dd3 	.word	0x10624dd3
 80072b0:	e000e014 	.word	0xe000e014

080072b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80072b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80072c4 <vPortEnableVFP+0x10>
 80072b8:	6801      	ldr	r1, [r0, #0]
 80072ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80072be:	6001      	str	r1, [r0, #0]
 80072c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072c2:	bf00      	nop
 80072c4:	e000ed88 	.word	0xe000ed88

080072c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072c8:	b480      	push	{r7}
 80072ca:	b085      	sub	sp, #20
 80072cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072ce:	f3ef 8305 	mrs	r3, IPSR
 80072d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	2b0f      	cmp	r3, #15
 80072d8:	d914      	bls.n	8007304 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072da:	4a17      	ldr	r2, [pc, #92]	; (8007338 <vPortValidateInterruptPriority+0x70>)
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	4413      	add	r3, r2
 80072e0:	781b      	ldrb	r3, [r3, #0]
 80072e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072e4:	4b15      	ldr	r3, [pc, #84]	; (800733c <vPortValidateInterruptPriority+0x74>)
 80072e6:	781b      	ldrb	r3, [r3, #0]
 80072e8:	7afa      	ldrb	r2, [r7, #11]
 80072ea:	429a      	cmp	r2, r3
 80072ec:	d20a      	bcs.n	8007304 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80072ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f2:	f383 8811 	msr	BASEPRI, r3
 80072f6:	f3bf 8f6f 	isb	sy
 80072fa:	f3bf 8f4f 	dsb	sy
 80072fe:	607b      	str	r3, [r7, #4]
}
 8007300:	bf00      	nop
 8007302:	e7fe      	b.n	8007302 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007304:	4b0e      	ldr	r3, [pc, #56]	; (8007340 <vPortValidateInterruptPriority+0x78>)
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800730c:	4b0d      	ldr	r3, [pc, #52]	; (8007344 <vPortValidateInterruptPriority+0x7c>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	429a      	cmp	r2, r3
 8007312:	d90a      	bls.n	800732a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007318:	f383 8811 	msr	BASEPRI, r3
 800731c:	f3bf 8f6f 	isb	sy
 8007320:	f3bf 8f4f 	dsb	sy
 8007324:	603b      	str	r3, [r7, #0]
}
 8007326:	bf00      	nop
 8007328:	e7fe      	b.n	8007328 <vPortValidateInterruptPriority+0x60>
	}
 800732a:	bf00      	nop
 800732c:	3714      	adds	r7, #20
 800732e:	46bd      	mov	sp, r7
 8007330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007334:	4770      	bx	lr
 8007336:	bf00      	nop
 8007338:	e000e3f0 	.word	0xe000e3f0
 800733c:	2000129c 	.word	0x2000129c
 8007340:	e000ed0c 	.word	0xe000ed0c
 8007344:	200012a0 	.word	0x200012a0

08007348 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b08a      	sub	sp, #40	; 0x28
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007350:	2300      	movs	r3, #0
 8007352:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007354:	f7fe fc9a 	bl	8005c8c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007358:	4b5b      	ldr	r3, [pc, #364]	; (80074c8 <pvPortMalloc+0x180>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007360:	f000 f920 	bl	80075a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007364:	4b59      	ldr	r3, [pc, #356]	; (80074cc <pvPortMalloc+0x184>)
 8007366:	681a      	ldr	r2, [r3, #0]
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	4013      	ands	r3, r2
 800736c:	2b00      	cmp	r3, #0
 800736e:	f040 8093 	bne.w	8007498 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2b00      	cmp	r3, #0
 8007376:	d01d      	beq.n	80073b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007378:	2208      	movs	r2, #8
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	4413      	add	r3, r2
 800737e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	f003 0307 	and.w	r3, r3, #7
 8007386:	2b00      	cmp	r3, #0
 8007388:	d014      	beq.n	80073b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	f023 0307 	bic.w	r3, r3, #7
 8007390:	3308      	adds	r3, #8
 8007392:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	f003 0307 	and.w	r3, r3, #7
 800739a:	2b00      	cmp	r3, #0
 800739c:	d00a      	beq.n	80073b4 <pvPortMalloc+0x6c>
	__asm volatile
 800739e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073a2:	f383 8811 	msr	BASEPRI, r3
 80073a6:	f3bf 8f6f 	isb	sy
 80073aa:	f3bf 8f4f 	dsb	sy
 80073ae:	617b      	str	r3, [r7, #20]
}
 80073b0:	bf00      	nop
 80073b2:	e7fe      	b.n	80073b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	2b00      	cmp	r3, #0
 80073b8:	d06e      	beq.n	8007498 <pvPortMalloc+0x150>
 80073ba:	4b45      	ldr	r3, [pc, #276]	; (80074d0 <pvPortMalloc+0x188>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	687a      	ldr	r2, [r7, #4]
 80073c0:	429a      	cmp	r2, r3
 80073c2:	d869      	bhi.n	8007498 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073c4:	4b43      	ldr	r3, [pc, #268]	; (80074d4 <pvPortMalloc+0x18c>)
 80073c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073c8:	4b42      	ldr	r3, [pc, #264]	; (80074d4 <pvPortMalloc+0x18c>)
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073ce:	e004      	b.n	80073da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80073d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073dc:	685b      	ldr	r3, [r3, #4]
 80073de:	687a      	ldr	r2, [r7, #4]
 80073e0:	429a      	cmp	r2, r3
 80073e2:	d903      	bls.n	80073ec <pvPortMalloc+0xa4>
 80073e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d1f1      	bne.n	80073d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073ec:	4b36      	ldr	r3, [pc, #216]	; (80074c8 <pvPortMalloc+0x180>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d050      	beq.n	8007498 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	2208      	movs	r2, #8
 80073fc:	4413      	add	r3, r2
 80073fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007402:	681a      	ldr	r2, [r3, #0]
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800740a:	685a      	ldr	r2, [r3, #4]
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	1ad2      	subs	r2, r2, r3
 8007410:	2308      	movs	r3, #8
 8007412:	005b      	lsls	r3, r3, #1
 8007414:	429a      	cmp	r2, r3
 8007416:	d91f      	bls.n	8007458 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007418:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4413      	add	r3, r2
 800741e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007420:	69bb      	ldr	r3, [r7, #24]
 8007422:	f003 0307 	and.w	r3, r3, #7
 8007426:	2b00      	cmp	r3, #0
 8007428:	d00a      	beq.n	8007440 <pvPortMalloc+0xf8>
	__asm volatile
 800742a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800742e:	f383 8811 	msr	BASEPRI, r3
 8007432:	f3bf 8f6f 	isb	sy
 8007436:	f3bf 8f4f 	dsb	sy
 800743a:	613b      	str	r3, [r7, #16]
}
 800743c:	bf00      	nop
 800743e:	e7fe      	b.n	800743e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007442:	685a      	ldr	r2, [r3, #4]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	1ad2      	subs	r2, r2, r3
 8007448:	69bb      	ldr	r3, [r7, #24]
 800744a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800744c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800744e:	687a      	ldr	r2, [r7, #4]
 8007450:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007452:	69b8      	ldr	r0, [r7, #24]
 8007454:	f000 f908 	bl	8007668 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007458:	4b1d      	ldr	r3, [pc, #116]	; (80074d0 <pvPortMalloc+0x188>)
 800745a:	681a      	ldr	r2, [r3, #0]
 800745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	4a1b      	ldr	r2, [pc, #108]	; (80074d0 <pvPortMalloc+0x188>)
 8007464:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007466:	4b1a      	ldr	r3, [pc, #104]	; (80074d0 <pvPortMalloc+0x188>)
 8007468:	681a      	ldr	r2, [r3, #0]
 800746a:	4b1b      	ldr	r3, [pc, #108]	; (80074d8 <pvPortMalloc+0x190>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	429a      	cmp	r2, r3
 8007470:	d203      	bcs.n	800747a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007472:	4b17      	ldr	r3, [pc, #92]	; (80074d0 <pvPortMalloc+0x188>)
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	4a18      	ldr	r2, [pc, #96]	; (80074d8 <pvPortMalloc+0x190>)
 8007478:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800747a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747c:	685a      	ldr	r2, [r3, #4]
 800747e:	4b13      	ldr	r3, [pc, #76]	; (80074cc <pvPortMalloc+0x184>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	431a      	orrs	r2, r3
 8007484:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007486:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800748a:	2200      	movs	r2, #0
 800748c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800748e:	4b13      	ldr	r3, [pc, #76]	; (80074dc <pvPortMalloc+0x194>)
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	3301      	adds	r3, #1
 8007494:	4a11      	ldr	r2, [pc, #68]	; (80074dc <pvPortMalloc+0x194>)
 8007496:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007498:	f7fe fc06 	bl	8005ca8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	2b00      	cmp	r3, #0
 80074a4:	d00a      	beq.n	80074bc <pvPortMalloc+0x174>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	60fb      	str	r3, [r7, #12]
}
 80074b8:	bf00      	nop
 80074ba:	e7fe      	b.n	80074ba <pvPortMalloc+0x172>
	return pvReturn;
 80074bc:	69fb      	ldr	r3, [r7, #28]
}
 80074be:	4618      	mov	r0, r3
 80074c0:	3728      	adds	r7, #40	; 0x28
 80074c2:	46bd      	mov	sp, r7
 80074c4:	bd80      	pop	{r7, pc}
 80074c6:	bf00      	nop
 80074c8:	20004eac 	.word	0x20004eac
 80074cc:	20004ec0 	.word	0x20004ec0
 80074d0:	20004eb0 	.word	0x20004eb0
 80074d4:	20004ea4 	.word	0x20004ea4
 80074d8:	20004eb4 	.word	0x20004eb4
 80074dc:	20004eb8 	.word	0x20004eb8

080074e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074e0:	b580      	push	{r7, lr}
 80074e2:	b086      	sub	sp, #24
 80074e4:	af00      	add	r7, sp, #0
 80074e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d04d      	beq.n	800758e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074f2:	2308      	movs	r3, #8
 80074f4:	425b      	negs	r3, r3
 80074f6:	697a      	ldr	r2, [r7, #20]
 80074f8:	4413      	add	r3, r2
 80074fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074fc:	697b      	ldr	r3, [r7, #20]
 80074fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007500:	693b      	ldr	r3, [r7, #16]
 8007502:	685a      	ldr	r2, [r3, #4]
 8007504:	4b24      	ldr	r3, [pc, #144]	; (8007598 <vPortFree+0xb8>)
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4013      	ands	r3, r2
 800750a:	2b00      	cmp	r3, #0
 800750c:	d10a      	bne.n	8007524 <vPortFree+0x44>
	__asm volatile
 800750e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007512:	f383 8811 	msr	BASEPRI, r3
 8007516:	f3bf 8f6f 	isb	sy
 800751a:	f3bf 8f4f 	dsb	sy
 800751e:	60fb      	str	r3, [r7, #12]
}
 8007520:	bf00      	nop
 8007522:	e7fe      	b.n	8007522 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007524:	693b      	ldr	r3, [r7, #16]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d00a      	beq.n	8007542 <vPortFree+0x62>
	__asm volatile
 800752c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007530:	f383 8811 	msr	BASEPRI, r3
 8007534:	f3bf 8f6f 	isb	sy
 8007538:	f3bf 8f4f 	dsb	sy
 800753c:	60bb      	str	r3, [r7, #8]
}
 800753e:	bf00      	nop
 8007540:	e7fe      	b.n	8007540 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007542:	693b      	ldr	r3, [r7, #16]
 8007544:	685a      	ldr	r2, [r3, #4]
 8007546:	4b14      	ldr	r3, [pc, #80]	; (8007598 <vPortFree+0xb8>)
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4013      	ands	r3, r2
 800754c:	2b00      	cmp	r3, #0
 800754e:	d01e      	beq.n	800758e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	2b00      	cmp	r3, #0
 8007556:	d11a      	bne.n	800758e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	4b0e      	ldr	r3, [pc, #56]	; (8007598 <vPortFree+0xb8>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	43db      	mvns	r3, r3
 8007562:	401a      	ands	r2, r3
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007568:	f7fe fb90 	bl	8005c8c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800756c:	693b      	ldr	r3, [r7, #16]
 800756e:	685a      	ldr	r2, [r3, #4]
 8007570:	4b0a      	ldr	r3, [pc, #40]	; (800759c <vPortFree+0xbc>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	4413      	add	r3, r2
 8007576:	4a09      	ldr	r2, [pc, #36]	; (800759c <vPortFree+0xbc>)
 8007578:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800757a:	6938      	ldr	r0, [r7, #16]
 800757c:	f000 f874 	bl	8007668 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007580:	4b07      	ldr	r3, [pc, #28]	; (80075a0 <vPortFree+0xc0>)
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	3301      	adds	r3, #1
 8007586:	4a06      	ldr	r2, [pc, #24]	; (80075a0 <vPortFree+0xc0>)
 8007588:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800758a:	f7fe fb8d 	bl	8005ca8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800758e:	bf00      	nop
 8007590:	3718      	adds	r7, #24
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20004ec0 	.word	0x20004ec0
 800759c:	20004eb0 	.word	0x20004eb0
 80075a0:	20004ebc 	.word	0x20004ebc

080075a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80075a4:	b480      	push	{r7}
 80075a6:	b085      	sub	sp, #20
 80075a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80075aa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80075ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80075b0:	4b27      	ldr	r3, [pc, #156]	; (8007650 <prvHeapInit+0xac>)
 80075b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	f003 0307 	and.w	r3, r3, #7
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d00c      	beq.n	80075d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	3307      	adds	r3, #7
 80075c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	f023 0307 	bic.w	r3, r3, #7
 80075ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075cc:	68ba      	ldr	r2, [r7, #8]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	1ad3      	subs	r3, r2, r3
 80075d2:	4a1f      	ldr	r2, [pc, #124]	; (8007650 <prvHeapInit+0xac>)
 80075d4:	4413      	add	r3, r2
 80075d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075dc:	4a1d      	ldr	r2, [pc, #116]	; (8007654 <prvHeapInit+0xb0>)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075e2:	4b1c      	ldr	r3, [pc, #112]	; (8007654 <prvHeapInit+0xb0>)
 80075e4:	2200      	movs	r2, #0
 80075e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	4413      	add	r3, r2
 80075ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075f0:	2208      	movs	r2, #8
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	1a9b      	subs	r3, r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 0307 	bic.w	r3, r3, #7
 80075fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	4a15      	ldr	r2, [pc, #84]	; (8007658 <prvHeapInit+0xb4>)
 8007604:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007606:	4b14      	ldr	r3, [pc, #80]	; (8007658 <prvHeapInit+0xb4>)
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	2200      	movs	r2, #0
 800760c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800760e:	4b12      	ldr	r3, [pc, #72]	; (8007658 <prvHeapInit+0xb4>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2200      	movs	r2, #0
 8007614:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	68fa      	ldr	r2, [r7, #12]
 800761e:	1ad2      	subs	r2, r2, r3
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007624:	4b0c      	ldr	r3, [pc, #48]	; (8007658 <prvHeapInit+0xb4>)
 8007626:	681a      	ldr	r2, [r3, #0]
 8007628:	683b      	ldr	r3, [r7, #0]
 800762a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800762c:	683b      	ldr	r3, [r7, #0]
 800762e:	685b      	ldr	r3, [r3, #4]
 8007630:	4a0a      	ldr	r2, [pc, #40]	; (800765c <prvHeapInit+0xb8>)
 8007632:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	4a09      	ldr	r2, [pc, #36]	; (8007660 <prvHeapInit+0xbc>)
 800763a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800763c:	4b09      	ldr	r3, [pc, #36]	; (8007664 <prvHeapInit+0xc0>)
 800763e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007642:	601a      	str	r2, [r3, #0]
}
 8007644:	bf00      	nop
 8007646:	3714      	adds	r7, #20
 8007648:	46bd      	mov	sp, r7
 800764a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764e:	4770      	bx	lr
 8007650:	200012a4 	.word	0x200012a4
 8007654:	20004ea4 	.word	0x20004ea4
 8007658:	20004eac 	.word	0x20004eac
 800765c:	20004eb4 	.word	0x20004eb4
 8007660:	20004eb0 	.word	0x20004eb0
 8007664:	20004ec0 	.word	0x20004ec0

08007668 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007668:	b480      	push	{r7}
 800766a:	b085      	sub	sp, #20
 800766c:	af00      	add	r7, sp, #0
 800766e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007670:	4b28      	ldr	r3, [pc, #160]	; (8007714 <prvInsertBlockIntoFreeList+0xac>)
 8007672:	60fb      	str	r3, [r7, #12]
 8007674:	e002      	b.n	800767c <prvInsertBlockIntoFreeList+0x14>
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60fb      	str	r3, [r7, #12]
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	687a      	ldr	r2, [r7, #4]
 8007682:	429a      	cmp	r2, r3
 8007684:	d8f7      	bhi.n	8007676 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007686:	68fb      	ldr	r3, [r7, #12]
 8007688:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	685b      	ldr	r3, [r3, #4]
 800768e:	68ba      	ldr	r2, [r7, #8]
 8007690:	4413      	add	r3, r2
 8007692:	687a      	ldr	r2, [r7, #4]
 8007694:	429a      	cmp	r2, r3
 8007696:	d108      	bne.n	80076aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	685a      	ldr	r2, [r3, #4]
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	685b      	ldr	r3, [r3, #4]
 80076a0:	441a      	add	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	68ba      	ldr	r2, [r7, #8]
 80076b4:	441a      	add	r2, r3
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	429a      	cmp	r2, r3
 80076bc:	d118      	bne.n	80076f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	4b15      	ldr	r3, [pc, #84]	; (8007718 <prvInsertBlockIntoFreeList+0xb0>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	429a      	cmp	r2, r3
 80076c8:	d00d      	beq.n	80076e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	68fb      	ldr	r3, [r7, #12]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	685b      	ldr	r3, [r3, #4]
 80076d4:	441a      	add	r2, r3
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	601a      	str	r2, [r3, #0]
 80076e4:	e008      	b.n	80076f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076e6:	4b0c      	ldr	r3, [pc, #48]	; (8007718 <prvInsertBlockIntoFreeList+0xb0>)
 80076e8:	681a      	ldr	r2, [r3, #0]
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	601a      	str	r2, [r3, #0]
 80076ee:	e003      	b.n	80076f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076f8:	68fa      	ldr	r2, [r7, #12]
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d002      	beq.n	8007706 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	687a      	ldr	r2, [r7, #4]
 8007704:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007706:	bf00      	nop
 8007708:	3714      	adds	r7, #20
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr
 8007712:	bf00      	nop
 8007714:	20004ea4 	.word	0x20004ea4
 8007718:	20004eac 	.word	0x20004eac

0800771c <memset>:
 800771c:	4402      	add	r2, r0
 800771e:	4603      	mov	r3, r0
 8007720:	4293      	cmp	r3, r2
 8007722:	d100      	bne.n	8007726 <memset+0xa>
 8007724:	4770      	bx	lr
 8007726:	f803 1b01 	strb.w	r1, [r3], #1
 800772a:	e7f9      	b.n	8007720 <memset+0x4>

0800772c <__libc_init_array>:
 800772c:	b570      	push	{r4, r5, r6, lr}
 800772e:	4d0d      	ldr	r5, [pc, #52]	; (8007764 <__libc_init_array+0x38>)
 8007730:	4c0d      	ldr	r4, [pc, #52]	; (8007768 <__libc_init_array+0x3c>)
 8007732:	1b64      	subs	r4, r4, r5
 8007734:	10a4      	asrs	r4, r4, #2
 8007736:	2600      	movs	r6, #0
 8007738:	42a6      	cmp	r6, r4
 800773a:	d109      	bne.n	8007750 <__libc_init_array+0x24>
 800773c:	4d0b      	ldr	r5, [pc, #44]	; (800776c <__libc_init_array+0x40>)
 800773e:	4c0c      	ldr	r4, [pc, #48]	; (8007770 <__libc_init_array+0x44>)
 8007740:	f000 f826 	bl	8007790 <_init>
 8007744:	1b64      	subs	r4, r4, r5
 8007746:	10a4      	asrs	r4, r4, #2
 8007748:	2600      	movs	r6, #0
 800774a:	42a6      	cmp	r6, r4
 800774c:	d105      	bne.n	800775a <__libc_init_array+0x2e>
 800774e:	bd70      	pop	{r4, r5, r6, pc}
 8007750:	f855 3b04 	ldr.w	r3, [r5], #4
 8007754:	4798      	blx	r3
 8007756:	3601      	adds	r6, #1
 8007758:	e7ee      	b.n	8007738 <__libc_init_array+0xc>
 800775a:	f855 3b04 	ldr.w	r3, [r5], #4
 800775e:	4798      	blx	r3
 8007760:	3601      	adds	r6, #1
 8007762:	e7f2      	b.n	800774a <__libc_init_array+0x1e>
 8007764:	08009838 	.word	0x08009838
 8007768:	08009838 	.word	0x08009838
 800776c:	08009838 	.word	0x08009838
 8007770:	0800983c 	.word	0x0800983c

08007774 <memcpy>:
 8007774:	440a      	add	r2, r1
 8007776:	4291      	cmp	r1, r2
 8007778:	f100 33ff 	add.w	r3, r0, #4294967295
 800777c:	d100      	bne.n	8007780 <memcpy+0xc>
 800777e:	4770      	bx	lr
 8007780:	b510      	push	{r4, lr}
 8007782:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007786:	f803 4f01 	strb.w	r4, [r3, #1]!
 800778a:	4291      	cmp	r1, r2
 800778c:	d1f9      	bne.n	8007782 <memcpy+0xe>
 800778e:	bd10      	pop	{r4, pc}

08007790 <_init>:
 8007790:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007792:	bf00      	nop
 8007794:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007796:	bc08      	pop	{r3}
 8007798:	469e      	mov	lr, r3
 800779a:	4770      	bx	lr

0800779c <_fini>:
 800779c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779e:	bf00      	nop
 80077a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077a2:	bc08      	pop	{r3}
 80077a4:	469e      	mov	lr, r3
 80077a6:	4770      	bx	lr
